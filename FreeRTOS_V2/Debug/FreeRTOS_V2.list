
FreeRTOS_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000699c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08006aac  08006aac  00016aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cd4  08006cd4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006cd4  08006cd4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006cd4  08006cd4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cd4  08006cd4  00016cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cd8  08006cd8  00016cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e94  20000074  08006d50  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f08  08006d50  00021f08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ab3  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000317b  00000000  00000000  00034b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  00037cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  00038f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d9b  00000000  00000000  0003a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143fd  00000000  00000000  0003de43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000971a4  00000000  00000000  00052240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e93e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005100  00000000  00000000  000e9434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006a94 	.word	0x08006a94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006a94 	.word	0x08006a94

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000160:	b5b0      	push	{r4, r5, r7, lr}
 8000162:	b08a      	sub	sp, #40	; 0x28
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
 800016c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800016e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000172:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000176:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800017a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 800017c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800017e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000180:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000182:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 800018c:	68bb      	ldr	r3, [r7, #8]
 800018e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000190:	f107 0310 	add.w	r3, r7, #16
 8000194:	4618      	mov	r0, r3
 8000196:	f000 f80e 	bl	80001b6 <Lcd_init>

	return lcd;
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	461d      	mov	r5, r3
 800019e:	f107 0410 	add.w	r4, r7, #16
 80001a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80001aa:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80001ae:	68f8      	ldr	r0, [r7, #12]
 80001b0:	3728      	adds	r7, #40	; 0x28
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bdb0      	pop	{r4, r5, r7, pc}

080001b6 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80001b6:	b580      	push	{r7, lr}
 80001b8:	b082      	sub	sp, #8
 80001ba:	af00      	add	r7, sp, #0
 80001bc:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	7d9b      	ldrb	r3, [r3, #22]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d10c      	bne.n	80001e0 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80001c6:	2133      	movs	r1, #51	; 0x33
 80001c8:	6878      	ldr	r0, [r7, #4]
 80001ca:	f000 f87b 	bl	80002c4 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80001ce:	2132      	movs	r1, #50	; 0x32
 80001d0:	6878      	ldr	r0, [r7, #4]
 80001d2:	f000 f877 	bl	80002c4 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80001d6:	2128      	movs	r1, #40	; 0x28
 80001d8:	6878      	ldr	r0, [r7, #4]
 80001da:	f000 f873 	bl	80002c4 <lcd_write_command>
 80001de:	e003      	b.n	80001e8 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80001e0:	2138      	movs	r1, #56	; 0x38
 80001e2:	6878      	ldr	r0, [r7, #4]
 80001e4:	f000 f86e 	bl	80002c4 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80001e8:	2101      	movs	r1, #1
 80001ea:	6878      	ldr	r0, [r7, #4]
 80001ec:	f000 f86a 	bl	80002c4 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80001f0:	210c      	movs	r1, #12
 80001f2:	6878      	ldr	r0, [r7, #4]
 80001f4:	f000 f866 	bl	80002c4 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80001f8:	2106      	movs	r1, #6
 80001fa:	6878      	ldr	r0, [r7, #4]
 80001fc:	f000 f862 	bl	80002c4 <lcd_write_command>
}
 8000200:	bf00      	nop
 8000202:	3708      	adds	r7, #8
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}

08000208 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b086      	sub	sp, #24
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
 8000210:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000212:	f107 030c 	add.w	r3, r7, #12
 8000216:	683a      	ldr	r2, [r7, #0]
 8000218:	4906      	ldr	r1, [pc, #24]	; (8000234 <Lcd_int+0x2c>)
 800021a:	4618      	mov	r0, r3
 800021c:	f005 ffce 	bl	80061bc <siprintf>

	Lcd_string(lcd, buffer);
 8000220:	f107 030c 	add.w	r3, r7, #12
 8000224:	4619      	mov	r1, r3
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	f000 f806 	bl	8000238 <Lcd_string>
}
 800022c:	bf00      	nop
 800022e:	3718      	adds	r7, #24
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	08006aac 	.word	0x08006aac

08000238 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000238:	b590      	push	{r4, r7, lr}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
 8000240:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000242:	2300      	movs	r3, #0
 8000244:	73fb      	strb	r3, [r7, #15]
 8000246:	e00a      	b.n	800025e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000248:	7bfb      	ldrb	r3, [r7, #15]
 800024a:	683a      	ldr	r2, [r7, #0]
 800024c:	4413      	add	r3, r2
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	4619      	mov	r1, r3
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f000 f864 	bl	8000320 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000258:	7bfb      	ldrb	r3, [r7, #15]
 800025a:	3301      	adds	r3, #1
 800025c:	73fb      	strb	r3, [r7, #15]
 800025e:	7bfc      	ldrb	r4, [r7, #15]
 8000260:	6838      	ldr	r0, [r7, #0]
 8000262:	f7ff ff75 	bl	8000150 <strlen>
 8000266:	4603      	mov	r3, r0
 8000268:	429c      	cmp	r4, r3
 800026a:	d3ed      	bcc.n	8000248 <Lcd_string+0x10>
	}
}
 800026c:	bf00      	nop
 800026e:	bf00      	nop
 8000270:	3714      	adds	r7, #20
 8000272:	46bd      	mov	sp, r7
 8000274:	bd90      	pop	{r4, r7, pc}
	...

08000278 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	460b      	mov	r3, r1
 8000282:	70fb      	strb	r3, [r7, #3]
 8000284:	4613      	mov	r3, r2
 8000286:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000288:	78fb      	ldrb	r3, [r7, #3]
 800028a:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <Lcd_cursor+0x30>)
 800028c:	5cd2      	ldrb	r2, [r2, r3]
 800028e:	78bb      	ldrb	r3, [r7, #2]
 8000290:	4413      	add	r3, r2
 8000292:	b2db      	uxtb	r3, r3
 8000294:	3b80      	subs	r3, #128	; 0x80
 8000296:	b2db      	uxtb	r3, r3
 8000298:	4619      	mov	r1, r3
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	f000 f812 	bl	80002c4 <lcd_write_command>
	#endif
}
 80002a0:	bf00      	nop
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	08006b70 	.word	0x08006b70

080002ac <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 80002b4:	2101      	movs	r1, #1
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f000 f804 	bl	80002c4 <lcd_write_command>
}
 80002bc:	bf00      	nop
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	6898      	ldr	r0, [r3, #8]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	899b      	ldrh	r3, [r3, #12]
 80002d8:	2200      	movs	r2, #0
 80002da:	4619      	mov	r1, r3
 80002dc:	f001 fc70 	bl	8001bc0 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	7d9b      	ldrb	r3, [r3, #22]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d111      	bne.n	800030c <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80002e8:	78fb      	ldrb	r3, [r7, #3]
 80002ea:	091b      	lsrs	r3, r3, #4
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	2204      	movs	r2, #4
 80002f0:	4619      	mov	r1, r3
 80002f2:	6878      	ldr	r0, [r7, #4]
 80002f4:	f000 f842 	bl	800037c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80002f8:	78fb      	ldrb	r3, [r7, #3]
 80002fa:	f003 030f 	and.w	r3, r3, #15
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	2204      	movs	r2, #4
 8000302:	4619      	mov	r1, r3
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f000 f839 	bl	800037c <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800030a:	e005      	b.n	8000318 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 800030c:	78fb      	ldrb	r3, [r7, #3]
 800030e:	2208      	movs	r2, #8
 8000310:	4619      	mov	r1, r3
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f000 f832 	bl	800037c <lcd_write>
}
 8000318:	bf00      	nop
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	460b      	mov	r3, r1
 800032a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	6898      	ldr	r0, [r3, #8]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	899b      	ldrh	r3, [r3, #12]
 8000334:	2201      	movs	r2, #1
 8000336:	4619      	mov	r1, r3
 8000338:	f001 fc42 	bl	8001bc0 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	7d9b      	ldrb	r3, [r3, #22]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d111      	bne.n	8000368 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000344:	78fb      	ldrb	r3, [r7, #3]
 8000346:	091b      	lsrs	r3, r3, #4
 8000348:	b2db      	uxtb	r3, r3
 800034a:	2204      	movs	r2, #4
 800034c:	4619      	mov	r1, r3
 800034e:	6878      	ldr	r0, [r7, #4]
 8000350:	f000 f814 	bl	800037c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000354:	78fb      	ldrb	r3, [r7, #3]
 8000356:	f003 030f 	and.w	r3, r3, #15
 800035a:	b2db      	uxtb	r3, r3
 800035c:	2204      	movs	r2, #4
 800035e:	4619      	mov	r1, r3
 8000360:	6878      	ldr	r0, [r7, #4]
 8000362:	f000 f80b 	bl	800037c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000366:	e005      	b.n	8000374 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000368:	78fb      	ldrb	r3, [r7, #3]
 800036a:	2208      	movs	r2, #8
 800036c:	4619      	mov	r1, r3
 800036e:	6878      	ldr	r0, [r7, #4]
 8000370:	f000 f804 	bl	800037c <lcd_write>
}
 8000374:	bf00      	nop
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	460b      	mov	r3, r1
 8000386:	70fb      	strb	r3, [r7, #3]
 8000388:	4613      	mov	r3, r2
 800038a:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 800038c:	2300      	movs	r3, #0
 800038e:	73fb      	strb	r3, [r7, #15]
 8000390:	e019      	b.n	80003c6 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	7bfb      	ldrb	r3, [r7, #15]
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	4413      	add	r3, r2
 800039c:	6818      	ldr	r0, [r3, #0]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	685a      	ldr	r2, [r3, #4]
 80003a2:	7bfb      	ldrb	r3, [r7, #15]
 80003a4:	005b      	lsls	r3, r3, #1
 80003a6:	4413      	add	r3, r2
 80003a8:	8819      	ldrh	r1, [r3, #0]
 80003aa:	78fa      	ldrb	r2, [r7, #3]
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	fa42 f303 	asr.w	r3, r2, r3
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	f003 0301 	and.w	r3, r3, #1
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	461a      	mov	r2, r3
 80003bc:	f001 fc00 	bl	8001bc0 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80003c0:	7bfb      	ldrb	r3, [r7, #15]
 80003c2:	3301      	adds	r3, #1
 80003c4:	73fb      	strb	r3, [r7, #15]
 80003c6:	7bfa      	ldrb	r2, [r7, #15]
 80003c8:	78bb      	ldrb	r3, [r7, #2]
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d3e1      	bcc.n	8000392 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	6918      	ldr	r0, [r3, #16]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	8a9b      	ldrh	r3, [r3, #20]
 80003d6:	2201      	movs	r2, #1
 80003d8:	4619      	mov	r1, r3
 80003da:	f001 fbf1 	bl	8001bc0 <HAL_GPIO_WritePin>
	DELAY(1);
 80003de:	2001      	movs	r0, #1
 80003e0:	f000 fd3a 	bl	8000e58 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	6918      	ldr	r0, [r3, #16]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	8a9b      	ldrh	r3, [r3, #20]
 80003ec:	2200      	movs	r2, #0
 80003ee:	4619      	mov	r1, r3
 80003f0:	f001 fbe6 	bl	8001bc0 <HAL_GPIO_WritePin>
}
 80003f4:	bf00      	nop
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000400:	f000 fcf8 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000404:	f000 f894 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000408:	f000 f9e0 	bl	80007cc <MX_GPIO_Init>
  MX_ADC1_Init();
 800040c:	f000 f8ec 	bl	80005e8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000410:	f000 f928 	bl	8000664 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000414:	f000 f964 	bl	80006e0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000418:	482b      	ldr	r0, [pc, #172]	; (80004c8 <main+0xcc>)
 800041a:	f000 fe19 	bl	8001050 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 800041e:	482b      	ldr	r0, [pc, #172]	; (80004cc <main+0xd0>)
 8000420:	f000 fe16 	bl	8001050 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000424:	2100      	movs	r1, #0
 8000426:	482a      	ldr	r0, [pc, #168]	; (80004d0 <main+0xd4>)
 8000428:	f002 fa88 	bl	800293c <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800042c:	f003 f8ea 	bl	8003604 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of ThrottleQueue */
  ThrottleQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &ThrottleQueue_attributes);
 8000430:	4a28      	ldr	r2, [pc, #160]	; (80004d4 <main+0xd8>)
 8000432:	2102      	movs	r1, #2
 8000434:	2010      	movs	r0, #16
 8000436:	f003 fa23 	bl	8003880 <osMessageQueueNew>
 800043a:	4603      	mov	r3, r0
 800043c:	4a26      	ldr	r2, [pc, #152]	; (80004d8 <main+0xdc>)
 800043e:	6013      	str	r3, [r2, #0]

  /* creation of BreakQueue */
  BreakQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &BreakQueue_attributes);
 8000440:	4a26      	ldr	r2, [pc, #152]	; (80004dc <main+0xe0>)
 8000442:	2102      	movs	r1, #2
 8000444:	2010      	movs	r0, #16
 8000446:	f003 fa1b 	bl	8003880 <osMessageQueueNew>
 800044a:	4603      	mov	r3, r0
 800044c:	4a24      	ldr	r2, [pc, #144]	; (80004e0 <main+0xe4>)
 800044e:	6013      	str	r3, [r2, #0]

  /* creation of GearQueue */
  GearQueueHandle = osMessageQueueNew (16, sizeof(char), &GearQueue_attributes);
 8000450:	4a24      	ldr	r2, [pc, #144]	; (80004e4 <main+0xe8>)
 8000452:	2101      	movs	r1, #1
 8000454:	2010      	movs	r0, #16
 8000456:	f003 fa13 	bl	8003880 <osMessageQueueNew>
 800045a:	4603      	mov	r3, r0
 800045c:	4a22      	ldr	r2, [pc, #136]	; (80004e8 <main+0xec>)
 800045e:	6013      	str	r3, [r2, #0]

  /* creation of DisplayQueue */
  DisplayQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &DisplayQueue_attributes);
 8000460:	4a22      	ldr	r2, [pc, #136]	; (80004ec <main+0xf0>)
 8000462:	2102      	movs	r1, #2
 8000464:	2010      	movs	r0, #16
 8000466:	f003 fa0b 	bl	8003880 <osMessageQueueNew>
 800046a:	4603      	mov	r3, r0
 800046c:	4a20      	ldr	r2, [pc, #128]	; (80004f0 <main+0xf4>)
 800046e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Throttle */
  ThrottleHandle = osThreadNew(ThrottleInput, NULL, &Throttle_attributes);
 8000470:	4a20      	ldr	r2, [pc, #128]	; (80004f4 <main+0xf8>)
 8000472:	2100      	movs	r1, #0
 8000474:	4820      	ldr	r0, [pc, #128]	; (80004f8 <main+0xfc>)
 8000476:	f003 f92b 	bl	80036d0 <osThreadNew>
 800047a:	4603      	mov	r3, r0
 800047c:	4a1f      	ldr	r2, [pc, #124]	; (80004fc <main+0x100>)
 800047e:	6013      	str	r3, [r2, #0]

  /* creation of Break */
  BreakHandle = osThreadNew(BreakInput, NULL, &Break_attributes);
 8000480:	4a1f      	ldr	r2, [pc, #124]	; (8000500 <main+0x104>)
 8000482:	2100      	movs	r1, #0
 8000484:	481f      	ldr	r0, [pc, #124]	; (8000504 <main+0x108>)
 8000486:	f003 f923 	bl	80036d0 <osThreadNew>
 800048a:	4603      	mov	r3, r0
 800048c:	4a1e      	ldr	r2, [pc, #120]	; (8000508 <main+0x10c>)
 800048e:	6013      	str	r3, [r2, #0]

  /* creation of Gear */
  GearHandle = osThreadNew(GearInput, NULL, &Gear_attributes);
 8000490:	4a1e      	ldr	r2, [pc, #120]	; (800050c <main+0x110>)
 8000492:	2100      	movs	r1, #0
 8000494:	481e      	ldr	r0, [pc, #120]	; (8000510 <main+0x114>)
 8000496:	f003 f91b 	bl	80036d0 <osThreadNew>
 800049a:	4603      	mov	r3, r0
 800049c:	4a1d      	ldr	r2, [pc, #116]	; (8000514 <main+0x118>)
 800049e:	6013      	str	r3, [r2, #0]

  /* creation of Data */
  DataHandle = osThreadNew(DataInput, NULL, &Data_attributes);
 80004a0:	4a1d      	ldr	r2, [pc, #116]	; (8000518 <main+0x11c>)
 80004a2:	2100      	movs	r1, #0
 80004a4:	481d      	ldr	r0, [pc, #116]	; (800051c <main+0x120>)
 80004a6:	f003 f913 	bl	80036d0 <osThreadNew>
 80004aa:	4603      	mov	r3, r0
 80004ac:	4a1c      	ldr	r2, [pc, #112]	; (8000520 <main+0x124>)
 80004ae:	6013      	str	r3, [r2, #0]

  /* creation of Display */
  DisplayHandle = osThreadNew(DisplayInput, NULL, &Display_attributes);
 80004b0:	4a1c      	ldr	r2, [pc, #112]	; (8000524 <main+0x128>)
 80004b2:	2100      	movs	r1, #0
 80004b4:	481c      	ldr	r0, [pc, #112]	; (8000528 <main+0x12c>)
 80004b6:	f003 f90b 	bl	80036d0 <osThreadNew>
 80004ba:	4603      	mov	r3, r0
 80004bc:	4a1b      	ldr	r2, [pc, #108]	; (800052c <main+0x130>)
 80004be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004c0:	f003 f8d2 	bl	8003668 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <main+0xc8>
 80004c6:	bf00      	nop
 80004c8:	20000090 	.word	0x20000090
 80004cc:	200000c0 	.word	0x200000c0
 80004d0:	200000f0 	.word	0x200000f0
 80004d4:	08006c28 	.word	0x08006c28
 80004d8:	2000014c 	.word	0x2000014c
 80004dc:	08006c40 	.word	0x08006c40
 80004e0:	20000150 	.word	0x20000150
 80004e4:	08006c58 	.word	0x08006c58
 80004e8:	20000154 	.word	0x20000154
 80004ec:	08006c70 	.word	0x08006c70
 80004f0:	20000158 	.word	0x20000158
 80004f4:	08006b74 	.word	0x08006b74
 80004f8:	080008a9 	.word	0x080008a9
 80004fc:	20000138 	.word	0x20000138
 8000500:	08006b98 	.word	0x08006b98
 8000504:	080008b9 	.word	0x080008b9
 8000508:	2000013c 	.word	0x2000013c
 800050c:	08006bbc 	.word	0x08006bbc
 8000510:	080008c9 	.word	0x080008c9
 8000514:	20000140 	.word	0x20000140
 8000518:	08006be0 	.word	0x08006be0
 800051c:	080008d9 	.word	0x080008d9
 8000520:	20000144 	.word	0x20000144
 8000524:	08006c04 	.word	0x08006c04
 8000528:	08000931 	.word	0x08000931
 800052c:	20000148 	.word	0x20000148

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800053a:	2228      	movs	r2, #40	; 0x28
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f005 fe34 	bl	80061ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000560:	2301      	movs	r3, #1
 8000562:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000568:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056e:	2301      	movs	r3, #1
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800057c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000580:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000586:	4618      	mov	r0, r3
 8000588:	f001 fb32 	bl	8001bf0 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000592:	f000 fa4b 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2302      	movs	r3, #2
 800059c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2102      	movs	r1, #2
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 fd9e 	bl	80020f4 <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005be:	f000 fa35 	bl	8000a2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005c2:	2302      	movs	r3, #2
 80005c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80005c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005ca:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 ff44 	bl	800245c <HAL_RCCEx_PeriphCLKConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005da:	f000 fa27 	bl	8000a2c <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	; 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f8:	4b18      	ldr	r3, [pc, #96]	; (800065c <MX_ADC1_Init+0x74>)
 80005fa:	4a19      	ldr	r2, [pc, #100]	; (8000660 <MX_ADC1_Init+0x78>)
 80005fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005fe:	4b17      	ldr	r3, [pc, #92]	; (800065c <MX_ADC1_Init+0x74>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000604:	4b15      	ldr	r3, [pc, #84]	; (800065c <MX_ADC1_Init+0x74>)
 8000606:	2200      	movs	r2, #0
 8000608:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_ADC1_Init+0x74>)
 800060c:	2200      	movs	r2, #0
 800060e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_ADC1_Init+0x74>)
 8000612:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000616:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <MX_ADC1_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_ADC1_Init+0x74>)
 8000620:	2201      	movs	r2, #1
 8000622:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000624:	480d      	ldr	r0, [pc, #52]	; (800065c <MX_ADC1_Init+0x74>)
 8000626:	f000 fc3b 	bl	8000ea0 <HAL_ADC_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000630:	f000 f9fc 	bl	8000a2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000634:	2304      	movs	r3, #4
 8000636:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000638:	2301      	movs	r3, #1
 800063a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	4619      	mov	r1, r3
 8000644:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_ADC1_Init+0x74>)
 8000646:	f000 fec3 	bl	80013d0 <HAL_ADC_ConfigChannel>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000650:	f000 f9ec 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000654:	bf00      	nop
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000090 	.word	0x20000090
 8000660:	40012400 	.word	0x40012400

08000664 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_ADC2_Init+0x74>)
 8000676:	4a19      	ldr	r2, [pc, #100]	; (80006dc <MX_ADC2_Init+0x78>)
 8000678:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_ADC2_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_ADC2_Init+0x74>)
 8000682:	2201      	movs	r2, #1
 8000684:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_ADC2_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_ADC2_Init+0x74>)
 800068e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000692:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000694:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_ADC2_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_ADC2_Init+0x74>)
 800069c:	2201      	movs	r2, #1
 800069e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <MX_ADC2_Init+0x74>)
 80006a2:	f000 fbfd 	bl	8000ea0 <HAL_ADC_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80006ac:	f000 f9be 	bl	8000a2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006b0:	2305      	movs	r3, #5
 80006b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_ADC2_Init+0x74>)
 80006c2:	f000 fe85 	bl	80013d0 <HAL_ADC_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80006cc:	f000 f9ae 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000c0 	.word	0x200000c0
 80006dc:	40012800 	.word	0x40012800

080006e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08e      	sub	sp, #56	; 0x38
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
 800070c:	615a      	str	r2, [r3, #20]
 800070e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000710:	4b2d      	ldr	r3, [pc, #180]	; (80007c8 <MX_TIM2_Init+0xe8>)
 8000712:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000716:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000718:	4b2b      	ldr	r3, [pc, #172]	; (80007c8 <MX_TIM2_Init+0xe8>)
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071e:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <MX_TIM2_Init+0xe8>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000724:	4b28      	ldr	r3, [pc, #160]	; (80007c8 <MX_TIM2_Init+0xe8>)
 8000726:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800072a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072c:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <MX_TIM2_Init+0xe8>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000732:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <MX_TIM2_Init+0xe8>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000738:	4823      	ldr	r0, [pc, #140]	; (80007c8 <MX_TIM2_Init+0xe8>)
 800073a:	f002 f805 	bl	8002748 <HAL_TIM_Base_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000744:	f000 f972 	bl	8000a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800074e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000752:	4619      	mov	r1, r3
 8000754:	481c      	ldr	r0, [pc, #112]	; (80007c8 <MX_TIM2_Init+0xe8>)
 8000756:	f002 fb59 	bl	8002e0c <HAL_TIM_ConfigClockSource>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000760:	f000 f964 	bl	8000a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000764:	4818      	ldr	r0, [pc, #96]	; (80007c8 <MX_TIM2_Init+0xe8>)
 8000766:	f002 f891 	bl	800288c <HAL_TIM_PWM_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000770:	f000 f95c 	bl	8000a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4619      	mov	r1, r3
 8000782:	4811      	ldr	r0, [pc, #68]	; (80007c8 <MX_TIM2_Init+0xe8>)
 8000784:	f002 fece 	bl	8003524 <HAL_TIMEx_MasterConfigSynchronization>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800078e:	f000 f94d 	bl	8000a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000792:	2360      	movs	r3, #96	; 0x60
 8000794:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	4807      	ldr	r0, [pc, #28]	; (80007c8 <MX_TIM2_Init+0xe8>)
 80007aa:	f002 fa71 	bl	8002c90 <HAL_TIM_PWM_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007b4:	f000 f93a 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007b8:	4803      	ldr	r0, [pc, #12]	; (80007c8 <MX_TIM2_Init+0xe8>)
 80007ba:	f000 f9f7 	bl	8000bac <HAL_TIM_MspPostInit>

}
 80007be:	bf00      	nop
 80007c0:	3738      	adds	r7, #56	; 0x38
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200000f0 	.word	0x200000f0

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e0:	4b2e      	ldr	r3, [pc, #184]	; (800089c <MX_GPIO_Init+0xd0>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a2d      	ldr	r2, [pc, #180]	; (800089c <MX_GPIO_Init+0xd0>)
 80007e6:	f043 0320 	orr.w	r3, r3, #32
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b2b      	ldr	r3, [pc, #172]	; (800089c <MX_GPIO_Init+0xd0>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0320 	and.w	r3, r3, #32
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f8:	4b28      	ldr	r3, [pc, #160]	; (800089c <MX_GPIO_Init+0xd0>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a27      	ldr	r2, [pc, #156]	; (800089c <MX_GPIO_Init+0xd0>)
 80007fe:	f043 0304 	orr.w	r3, r3, #4
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b25      	ldr	r3, [pc, #148]	; (800089c <MX_GPIO_Init+0xd0>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000810:	4b22      	ldr	r3, [pc, #136]	; (800089c <MX_GPIO_Init+0xd0>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a21      	ldr	r2, [pc, #132]	; (800089c <MX_GPIO_Init+0xd0>)
 8000816:	f043 0308 	orr.w	r3, r3, #8
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <MX_GPIO_Init+0xd0>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0308 	and.w	r3, r3, #8
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	210a      	movs	r1, #10
 800082c:	481c      	ldr	r0, [pc, #112]	; (80008a0 <MX_GPIO_Init+0xd4>)
 800082e:	f001 f9c7 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f640 4103 	movw	r1, #3075	; 0xc03
 8000838:	481a      	ldr	r0, [pc, #104]	; (80008a4 <MX_GPIO_Init+0xd8>)
 800083a:	f001 f9c1 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800083e:	230a      	movs	r3, #10
 8000840:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2302      	movs	r3, #2
 800084c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0310 	add.w	r3, r7, #16
 8000852:	4619      	mov	r1, r3
 8000854:	4812      	ldr	r0, [pc, #72]	; (80008a0 <MX_GPIO_Init+0xd4>)
 8000856:	f001 f82f 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 800085a:	f640 4303 	movw	r3, #3075	; 0xc03
 800085e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2302      	movs	r3, #2
 800086a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	4619      	mov	r1, r3
 8000872:	480c      	ldr	r0, [pc, #48]	; (80008a4 <MX_GPIO_Init+0xd8>)
 8000874:	f001 f820 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000878:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800087c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000886:	f107 0310 	add.w	r3, r7, #16
 800088a:	4619      	mov	r1, r3
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_GPIO_Init+0xd4>)
 800088e:	f001 f813 	bl	80018b8 <HAL_GPIO_Init>

}
 8000892:	bf00      	nop
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000
 80008a0:	40010800 	.word	0x40010800
 80008a4:	40010c00 	.word	0x40010c00

080008a8 <ThrottleInput>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ThrottleInput */
void ThrottleInput(void *argument)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f002 ffb7 	bl	8003824 <osDelay>
 80008b6:	e7fb      	b.n	80008b0 <ThrottleInput+0x8>

080008b8 <BreakInput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BreakInput */
void BreakInput(void *argument)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BreakInput */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f002 ffaf 	bl	8003824 <osDelay>
 80008c6:	e7fb      	b.n	80008c0 <BreakInput+0x8>

080008c8 <GearInput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GearInput */
void GearInput(void *argument)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GearInput */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008d0:	2001      	movs	r0, #1
 80008d2:	f002 ffa7 	bl	8003824 <osDelay>
 80008d6:	e7fb      	b.n	80008d0 <GearInput+0x8>

080008d8 <DataInput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DataInput */
void DataInput(void *argument)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  int x;
	  	for(x=0; x<625; x=x+1)
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	e009      	b.n	80008fa <DataInput+0x22>
	  	{
	  	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, x);
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <DataInput+0x54>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	635a      	str	r2, [r3, #52]	; 0x34
	  	  HAL_Delay(3);
 80008ee:	2003      	movs	r0, #3
 80008f0:	f000 fab2 	bl	8000e58 <HAL_Delay>
	  	for(x=0; x<625; x=x+1)
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	3301      	adds	r3, #1
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8000900:	ddf1      	ble.n	80008e6 <DataInput+0xe>
	  	}
	  	for(x=625; x>0; x=x-1)
 8000902:	f240 2371 	movw	r3, #625	; 0x271
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	e009      	b.n	800091e <DataInput+0x46>
	  	{
	  	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, x);
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <DataInput+0x54>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	635a      	str	r2, [r3, #52]	; 0x34
	  	  HAL_Delay(3);
 8000912:	2003      	movs	r0, #3
 8000914:	f000 faa0 	bl	8000e58 <HAL_Delay>
	  	for(x=625; x>0; x=x-1)
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	3b01      	subs	r3, #1
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	2b00      	cmp	r3, #0
 8000922:	dcf2      	bgt.n	800090a <DataInput+0x32>
	  	}
    osDelay(1);
 8000924:	2001      	movs	r0, #1
 8000926:	f002 ff7d 	bl	8003824 <osDelay>
  {
 800092a:	e7d9      	b.n	80008e0 <DataInput+0x8>
 800092c:	200000f0 	.word	0x200000f0

08000930 <DisplayInput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DisplayInput */
void DisplayInput(void *argument)
{
 8000930:	b5b0      	push	{r4, r5, r7, lr}
 8000932:	b098      	sub	sp, #96	; 0x60
 8000934:	af04      	add	r7, sp, #16
 8000936:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN DisplayInput */
	// Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
	Lcd_PortType ports[] = { GPIOB, GPIOB, GPIOB, GPIOB };
 8000938:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <DisplayInput+0xc0>)
 800093a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800093e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
	Lcd_PinType pins[] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_10, GPIO_PIN_11};
 8000944:	4a2b      	ldr	r2, [pc, #172]	; (80009f4 <DisplayInput+0xc4>)
 8000946:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800094a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800094e:	e883 0003 	stmia.w	r3, {r0, r1}
	Lcd_HandleTypeDef lcd;
	// Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
	lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_3, LCD_4_BIT_MODE);
 8000952:	4638      	mov	r0, r7
 8000954:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000958:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800095c:	2300      	movs	r3, #0
 800095e:	9303      	str	r3, [sp, #12]
 8000960:	2308      	movs	r3, #8
 8000962:	9302      	str	r3, [sp, #8]
 8000964:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <DisplayInput+0xc8>)
 8000966:	9301      	str	r3, [sp, #4]
 8000968:	2302      	movs	r3, #2
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <DisplayInput+0xc8>)
 800096e:	f7ff fbf7 	bl	8000160 <Lcd_create>
 8000972:	f107 0420 	add.w	r4, r7, #32
 8000976:	463d      	mov	r5, r7
 8000978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000980:	e884 0003 	stmia.w	r4, {r0, r1}
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_PollForConversion(&hadc2,1000);
 8000984:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000988:	481c      	ldr	r0, [pc, #112]	; (80009fc <DisplayInput+0xcc>)
 800098a:	f000 fc0f 	bl	80011ac <HAL_ADC_PollForConversion>
	  throttle = HAL_ADC_GetValue(&hadc2);
 800098e:	481b      	ldr	r0, [pc, #108]	; (80009fc <DisplayInput+0xcc>)
 8000990:	f000 fd12 	bl	80013b8 <HAL_ADC_GetValue>
 8000994:	4603      	mov	r3, r0
 8000996:	b29a      	uxth	r2, r3
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <DisplayInput+0xd0>)
 800099a:	801a      	strh	r2, [r3, #0]
	  Lcd_cursor(&lcd, 0,0);
 800099c:	f107 0320 	add.w	r3, r7, #32
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fc67 	bl	8000278 <Lcd_cursor>
	  Lcd_string(&lcd, "Testing LCD");
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	4915      	ldr	r1, [pc, #84]	; (8000a04 <DisplayInput+0xd4>)
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fc41 	bl	8000238 <Lcd_string>
	  Lcd_cursor(&lcd, 1,0);
 80009b6:	f107 0320 	add.w	r3, r7, #32
 80009ba:	2200      	movs	r2, #0
 80009bc:	2101      	movs	r1, #1
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fc5a 	bl	8000278 <Lcd_cursor>
	  Lcd_int(&lcd, throttle);
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <DisplayInput+0xd0>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	f107 0320 	add.w	r3, r7, #32
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fc19 	bl	8000208 <Lcd_int>
	  osDelay(500);
 80009d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009da:	f002 ff23 	bl	8003824 <osDelay>
	  Lcd_clear(&lcd);
 80009de:	f107 0320 	add.w	r3, r7, #32
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fc62 	bl	80002ac <Lcd_clear>

    osDelay(1);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f002 ff1b 	bl	8003824 <osDelay>
	  HAL_ADC_PollForConversion(&hadc2,1000);
 80009ee:	e7c9      	b.n	8000984 <DisplayInput+0x54>
 80009f0:	08006b20 	.word	0x08006b20
 80009f4:	08006b30 	.word	0x08006b30
 80009f8:	40010800 	.word	0x40010800
 80009fc:	200000c0 	.word	0x200000c0
 8000a00:	2000015c 	.word	0x2000015c
 8000a04:	08006b14 	.word	0x08006b14

08000a08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d101      	bne.n	8000a1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a1a:	f000 fa01 	bl	8000e20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40012c00 	.word	0x40012c00

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <Error_Handler+0x8>
	...

08000a38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <HAL_MspInit+0x68>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <HAL_MspInit+0x68>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6193      	str	r3, [r2, #24]
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_MspInit+0x68>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_MspInit+0x68>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <HAL_MspInit+0x68>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	61d3      	str	r3, [r2, #28]
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <HAL_MspInit+0x68>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	210f      	movs	r1, #15
 8000a72:	f06f 0001 	mvn.w	r0, #1
 8000a76:	f000 fef4 	bl	8001862 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_MspInit+0x6c>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_MspInit+0x6c>)
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010000 	.word	0x40010000

08000aa8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0318 	add.w	r3, r7, #24
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a28      	ldr	r2, [pc, #160]	; (8000b64 <HAL_ADC_MspInit+0xbc>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d122      	bne.n	8000b0e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ac8:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a26      	ldr	r2, [pc, #152]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a20      	ldr	r2, [pc, #128]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000af8:	2310      	movs	r3, #16
 8000afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afc:	2303      	movs	r3, #3
 8000afe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f107 0318 	add.w	r3, r7, #24
 8000b04:	4619      	mov	r1, r3
 8000b06:	4819      	ldr	r0, [pc, #100]	; (8000b6c <HAL_ADC_MspInit+0xc4>)
 8000b08:	f000 fed6 	bl	80018b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000b0c:	e026      	b.n	8000b5c <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <HAL_ADC_MspInit+0xc8>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d121      	bne.n	8000b5c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a0c      	ldr	r2, [pc, #48]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b48:	2320      	movs	r3, #32
 8000b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 0318 	add.w	r3, r7, #24
 8000b54:	4619      	mov	r1, r3
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <HAL_ADC_MspInit+0xc4>)
 8000b58:	f000 feae 	bl	80018b8 <HAL_GPIO_Init>
}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	; 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40012400 	.word	0x40012400
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40010800 	.word	0x40010800
 8000b70:	40012800 	.word	0x40012800

08000b74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b84:	d10b      	bne.n	8000b9e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_TIM_Base_MspInit+0x34>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <HAL_TIM_Base_MspInit+0x34>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	61d3      	str	r3, [r2, #28]
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_TIM_Base_MspInit+0x34>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	40021000 	.word	0x40021000

08000bac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bca:	d117      	bne.n	8000bfc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <HAL_TIM_MspPostInit+0x58>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a0c      	ldr	r2, [pc, #48]	; (8000c04 <HAL_TIM_MspPostInit+0x58>)
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_TIM_MspPostInit+0x58>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000be4:	2301      	movs	r3, #1
 8000be6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2302      	movs	r3, #2
 8000bee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	f107 0310 	add.w	r3, r7, #16
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4804      	ldr	r0, [pc, #16]	; (8000c08 <HAL_TIM_MspPostInit+0x5c>)
 8000bf8:	f000 fe5e 	bl	80018b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000bfc:	bf00      	nop
 8000bfe:	3720      	adds	r7, #32
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40021000 	.word	0x40021000
 8000c08:	40010800 	.word	0x40010800

08000c0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08c      	sub	sp, #48	; 0x30
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c22:	4b2e      	ldr	r3, [pc, #184]	; (8000cdc <HAL_InitTick+0xd0>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	4a2d      	ldr	r2, [pc, #180]	; (8000cdc <HAL_InitTick+0xd0>)
 8000c28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <HAL_InitTick+0xd0>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c3a:	f107 020c 	add.w	r2, r7, #12
 8000c3e:	f107 0310 	add.w	r3, r7, #16
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f001 fbbb 	bl	80023c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c4a:	f001 fba5 	bl	8002398 <HAL_RCC_GetPCLK2Freq>
 8000c4e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c52:	4a23      	ldr	r2, [pc, #140]	; (8000ce0 <HAL_InitTick+0xd4>)
 8000c54:	fba2 2303 	umull	r2, r3, r2, r3
 8000c58:	0c9b      	lsrs	r3, r3, #18
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <HAL_InitTick+0xd8>)
 8000c60:	4a21      	ldr	r2, [pc, #132]	; (8000ce8 <HAL_InitTick+0xdc>)
 8000c62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c64:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <HAL_InitTick+0xd8>)
 8000c66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c6a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c6c:	4a1d      	ldr	r2, [pc, #116]	; (8000ce4 <HAL_InitTick+0xd8>)
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c70:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <HAL_InitTick+0xd8>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <HAL_InitTick+0xd8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_InitTick+0xd8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c84:	4817      	ldr	r0, [pc, #92]	; (8000ce4 <HAL_InitTick+0xd8>)
 8000c86:	f001 fd5f 	bl	8002748 <HAL_TIM_Base_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d11b      	bne.n	8000cd0 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c98:	4812      	ldr	r0, [pc, #72]	; (8000ce4 <HAL_InitTick+0xd8>)
 8000c9a:	f001 fda5 	bl	80027e8 <HAL_TIM_Base_Start_IT>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ca4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d111      	bne.n	8000cd0 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000cac:	2019      	movs	r0, #25
 8000cae:	f000 fdf4 	bl	800189a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b0f      	cmp	r3, #15
 8000cb6:	d808      	bhi.n	8000cca <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	2019      	movs	r0, #25
 8000cbe:	f000 fdd0 	bl	8001862 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <HAL_InitTick+0xe0>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	e002      	b.n	8000cd0 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3730      	adds	r7, #48	; 0x30
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	431bde83 	.word	0x431bde83
 8000ce4:	20000160 	.word	0x20000160
 8000ce8:	40012c00 	.word	0x40012c00
 8000cec:	20000004 	.word	0x20000004

08000cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <NMI_Handler+0x4>

08000cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <HardFault_Handler+0x4>

08000cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <MemManage_Handler+0x4>

08000d02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
	...

08000d1c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <TIM1_UP_IRQHandler+0x10>)
 8000d22:	f001 fead 	bl	8002a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000160 	.word	0x20000160

08000d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d38:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <_sbrk+0x5c>)
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <_sbrk+0x60>)
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <_sbrk+0x64>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <_sbrk+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d207      	bcs.n	8000d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d60:	f005 f9ec 	bl	800613c <__errno>
 8000d64:	4603      	mov	r3, r0
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <_sbrk+0x64>)
 8000d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20005000 	.word	0x20005000
 8000d90:	00000400 	.word	0x00000400
 8000d94:	200001a8 	.word	0x200001a8
 8000d98:	20001f08 	.word	0x20001f08

08000d9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	; (8000de0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	; (8000dec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dce:	f7ff ffe5 	bl	8000d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f005 f9b9 	bl	8006148 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dd6:	f7ff fb11 	bl	80003fc <main>
  bx lr
 8000dda:	4770      	bx	lr
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000de4:	08006cdc 	.word	0x08006cdc
  ldr r2, =_sbss
 8000de8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000dec:	20001f08 	.word	0x20001f08

08000df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC1_2_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_Init+0x28>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_Init+0x28>)
 8000dfe:	f043 0310 	orr.w	r3, r3, #16
 8000e02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 fd21 	bl	800184c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f7ff fefe 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fe12 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40022000 	.word	0x40022000

08000e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_IncTick+0x1c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <HAL_IncTick+0x20>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a03      	ldr	r2, [pc, #12]	; (8000e40 <HAL_IncTick+0x20>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	200001ac 	.word	0x200001ac

08000e44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b02      	ldr	r3, [pc, #8]	; (8000e54 <HAL_GetTick+0x10>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	200001ac 	.word	0x200001ac

08000e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff fff0 	bl	8000e44 <HAL_GetTick>
 8000e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e70:	d005      	beq.n	8000e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_Delay+0x44>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7e:	bf00      	nop
 8000e80:	f7ff ffe0 	bl	8000e44 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d8f7      	bhi.n	8000e80 <HAL_Delay+0x28>
  {
  }
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008

08000ea0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d101      	bne.n	8000ec2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e0be      	b.n	8001040 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d109      	bne.n	8000ee4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff fde2 	bl	8000aa8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 fbc5 	bl	8001674 <ADC_ConversionStop_Disable>
 8000eea:	4603      	mov	r3, r0
 8000eec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef2:	f003 0310 	and.w	r3, r3, #16
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f040 8099 	bne.w	800102e <HAL_ADC_Init+0x18e>
 8000efc:	7dfb      	ldrb	r3, [r7, #23]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f040 8095 	bne.w	800102e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f0c:	f023 0302 	bic.w	r3, r3, #2
 8000f10:	f043 0202 	orr.w	r2, r3, #2
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f20:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	7b1b      	ldrb	r3, [r3, #12]
 8000f26:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f28:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f38:	d003      	beq.n	8000f42 <HAL_ADC_Init+0xa2>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d102      	bne.n	8000f48 <HAL_ADC_Init+0xa8>
 8000f42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f46:	e000      	b.n	8000f4a <HAL_ADC_Init+0xaa>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	7d1b      	ldrb	r3, [r3, #20]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d119      	bne.n	8000f8c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7b1b      	ldrb	r3, [r3, #12]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d109      	bne.n	8000f74 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	035a      	lsls	r2, r3, #13
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	e00b      	b.n	8000f8c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f78:	f043 0220 	orr.w	r2, r3, #32
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f84:	f043 0201 	orr.w	r2, r3, #1
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	4b28      	ldr	r3, [pc, #160]	; (8001048 <HAL_ADC_Init+0x1a8>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	6812      	ldr	r2, [r2, #0]
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	430b      	orrs	r3, r1
 8000fb2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fbc:	d003      	beq.n	8000fc6 <HAL_ADC_Init+0x126>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d104      	bne.n	8000fd0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	051b      	lsls	r3, r3, #20
 8000fce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <HAL_ADC_Init+0x1ac>)
 8000fec:	4013      	ands	r3, r2
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d10b      	bne.n	800100c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffe:	f023 0303 	bic.w	r3, r3, #3
 8001002:	f043 0201 	orr.w	r2, r3, #1
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800100a:	e018      	b.n	800103e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001010:	f023 0312 	bic.w	r3, r3, #18
 8001014:	f043 0210 	orr.w	r2, r3, #16
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001020:	f043 0201 	orr.w	r2, r3, #1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800102c:	e007      	b.n	800103e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001032:	f043 0210 	orr.w	r2, r3, #16
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800103e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	ffe1f7fd 	.word	0xffe1f7fd
 800104c:	ff1f0efe 	.word	0xff1f0efe

08001050 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <HAL_ADC_Start+0x1a>
 8001066:	2302      	movs	r3, #2
 8001068:	e098      	b.n	800119c <HAL_ADC_Start+0x14c>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 faa4 	bl	80015c0 <ADC_Enable>
 8001078:	4603      	mov	r3, r0
 800107a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	2b00      	cmp	r3, #0
 8001080:	f040 8087 	bne.w	8001192 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800108c:	f023 0301 	bic.w	r3, r3, #1
 8001090:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a41      	ldr	r2, [pc, #260]	; (80011a4 <HAL_ADC_Start+0x154>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d105      	bne.n	80010ae <HAL_ADC_Start+0x5e>
 80010a2:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <HAL_ADC_Start+0x158>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d115      	bne.n	80010da <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d026      	beq.n	8001116 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010d8:	e01d      	b.n	8001116 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a2f      	ldr	r2, [pc, #188]	; (80011a8 <HAL_ADC_Start+0x158>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d004      	beq.n	80010fa <HAL_ADC_Start+0xaa>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a2b      	ldr	r2, [pc, #172]	; (80011a4 <HAL_ADC_Start+0x154>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d10d      	bne.n	8001116 <HAL_ADC_Start+0xc6>
 80010fa:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <HAL_ADC_Start+0x158>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001102:	2b00      	cmp	r3, #0
 8001104:	d007      	beq.n	8001116 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800110e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001126:	f023 0206 	bic.w	r2, r3, #6
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	62da      	str	r2, [r3, #44]	; 0x2c
 800112e:	e002      	b.n	8001136 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f06f 0202 	mvn.w	r2, #2
 8001146:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001152:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001156:	d113      	bne.n	8001180 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800115c:	4a11      	ldr	r2, [pc, #68]	; (80011a4 <HAL_ADC_Start+0x154>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d105      	bne.n	800116e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_ADC_Start+0x158>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800116a:	2b00      	cmp	r3, #0
 800116c:	d108      	bne.n	8001180 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	e00c      	b.n	800119a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	e003      	b.n	800119a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800119a:	7bfb      	ldrb	r3, [r7, #15]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40012800 	.word	0x40012800
 80011a8:	40012400 	.word	0x40012400

080011ac <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b087      	sub	sp, #28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80011c2:	f7ff fe3f 	bl	8000e44 <HAL_GetTick>
 80011c6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00b      	beq.n	80011ee <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011da:	f043 0220 	orr.w	r2, r3, #32
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e0d3      	b.n	8001396 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d131      	bne.n	8001260 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001202:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001206:	2b00      	cmp	r3, #0
 8001208:	d12a      	bne.n	8001260 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800120a:	e021      	b.n	8001250 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001212:	d01d      	beq.n	8001250 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <HAL_ADC_PollForConversion+0x7e>
 800121a:	f7ff fe13 	bl	8000e44 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	d212      	bcs.n	8001250 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10b      	bne.n	8001250 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123c:	f043 0204 	orr.w	r2, r3, #4
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e0a2      	b.n	8001396 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0d6      	beq.n	800120c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800125e:	e070      	b.n	8001342 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001260:	4b4f      	ldr	r3, [pc, #316]	; (80013a0 <HAL_ADC_PollForConversion+0x1f4>)
 8001262:	681c      	ldr	r4, [r3, #0]
 8001264:	2002      	movs	r0, #2
 8001266:	f001 f9af 	bl	80025c8 <HAL_RCCEx_GetPeriphCLKFreq>
 800126a:	4603      	mov	r3, r0
 800126c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6919      	ldr	r1, [r3, #16]
 8001276:	4b4b      	ldr	r3, [pc, #300]	; (80013a4 <HAL_ADC_PollForConversion+0x1f8>)
 8001278:	400b      	ands	r3, r1
 800127a:	2b00      	cmp	r3, #0
 800127c:	d118      	bne.n	80012b0 <HAL_ADC_PollForConversion+0x104>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68d9      	ldr	r1, [r3, #12]
 8001284:	4b48      	ldr	r3, [pc, #288]	; (80013a8 <HAL_ADC_PollForConversion+0x1fc>)
 8001286:	400b      	ands	r3, r1
 8001288:	2b00      	cmp	r3, #0
 800128a:	d111      	bne.n	80012b0 <HAL_ADC_PollForConversion+0x104>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6919      	ldr	r1, [r3, #16]
 8001292:	4b46      	ldr	r3, [pc, #280]	; (80013ac <HAL_ADC_PollForConversion+0x200>)
 8001294:	400b      	ands	r3, r1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d108      	bne.n	80012ac <HAL_ADC_PollForConversion+0x100>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68d9      	ldr	r1, [r3, #12]
 80012a0:	4b43      	ldr	r3, [pc, #268]	; (80013b0 <HAL_ADC_PollForConversion+0x204>)
 80012a2:	400b      	ands	r3, r1
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <HAL_ADC_PollForConversion+0x100>
 80012a8:	2314      	movs	r3, #20
 80012aa:	e020      	b.n	80012ee <HAL_ADC_PollForConversion+0x142>
 80012ac:	2329      	movs	r3, #41	; 0x29
 80012ae:	e01e      	b.n	80012ee <HAL_ADC_PollForConversion+0x142>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6919      	ldr	r1, [r3, #16]
 80012b6:	4b3d      	ldr	r3, [pc, #244]	; (80013ac <HAL_ADC_PollForConversion+0x200>)
 80012b8:	400b      	ands	r3, r1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d106      	bne.n	80012cc <HAL_ADC_PollForConversion+0x120>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68d9      	ldr	r1, [r3, #12]
 80012c4:	4b3a      	ldr	r3, [pc, #232]	; (80013b0 <HAL_ADC_PollForConversion+0x204>)
 80012c6:	400b      	ands	r3, r1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00d      	beq.n	80012e8 <HAL_ADC_PollForConversion+0x13c>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6919      	ldr	r1, [r3, #16]
 80012d2:	4b38      	ldr	r3, [pc, #224]	; (80013b4 <HAL_ADC_PollForConversion+0x208>)
 80012d4:	400b      	ands	r3, r1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d108      	bne.n	80012ec <HAL_ADC_PollForConversion+0x140>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68d9      	ldr	r1, [r3, #12]
 80012e0:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <HAL_ADC_PollForConversion+0x208>)
 80012e2:	400b      	ands	r3, r1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d101      	bne.n	80012ec <HAL_ADC_PollForConversion+0x140>
 80012e8:	2354      	movs	r3, #84	; 0x54
 80012ea:	e000      	b.n	80012ee <HAL_ADC_PollForConversion+0x142>
 80012ec:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80012ee:	fb02 f303 	mul.w	r3, r2, r3
 80012f2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80012f4:	e021      	b.n	800133a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012fc:	d01a      	beq.n	8001334 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d007      	beq.n	8001314 <HAL_ADC_PollForConversion+0x168>
 8001304:	f7ff fd9e 	bl	8000e44 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d20f      	bcs.n	8001334 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	429a      	cmp	r2, r3
 800131a:	d90b      	bls.n	8001334 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	f043 0204 	orr.w	r2, r3, #4
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e030      	b.n	8001396 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3301      	adds	r3, #1
 8001338:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	429a      	cmp	r2, r3
 8001340:	d8d9      	bhi.n	80012f6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f06f 0212 	mvn.w	r2, #18
 800134a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001362:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001366:	d115      	bne.n	8001394 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800136c:	2b00      	cmp	r3, #0
 800136e:	d111      	bne.n	8001394 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d105      	bne.n	8001394 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138c:	f043 0201 	orr.w	r2, r3, #1
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	371c      	adds	r7, #28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd90      	pop	{r4, r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000000 	.word	0x20000000
 80013a4:	24924924 	.word	0x24924924
 80013a8:	00924924 	.word	0x00924924
 80013ac:	12492492 	.word	0x12492492
 80013b0:	00492492 	.word	0x00492492
 80013b4:	00249249 	.word	0x00249249

080013b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr

080013d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d101      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x20>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e0dc      	b.n	80015aa <HAL_ADC_ConfigChannel+0x1da>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b06      	cmp	r3, #6
 80013fe:	d81c      	bhi.n	800143a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	3b05      	subs	r3, #5
 8001412:	221f      	movs	r2, #31
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	4019      	ands	r1, r3
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	3b05      	subs	r3, #5
 800142c:	fa00 f203 	lsl.w	r2, r0, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	430a      	orrs	r2, r1
 8001436:	635a      	str	r2, [r3, #52]	; 0x34
 8001438:	e03c      	b.n	80014b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b0c      	cmp	r3, #12
 8001440:	d81c      	bhi.n	800147c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	3b23      	subs	r3, #35	; 0x23
 8001454:	221f      	movs	r2, #31
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	4019      	ands	r1, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	6818      	ldr	r0, [r3, #0]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	4613      	mov	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	3b23      	subs	r3, #35	; 0x23
 800146e:	fa00 f203 	lsl.w	r2, r0, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	631a      	str	r2, [r3, #48]	; 0x30
 800147a:	e01b      	b.n	80014b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	3b41      	subs	r3, #65	; 0x41
 800148e:	221f      	movs	r2, #31
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	4019      	ands	r1, r3
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	6818      	ldr	r0, [r3, #0]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	3b41      	subs	r3, #65	; 0x41
 80014a8:	fa00 f203 	lsl.w	r2, r0, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b09      	cmp	r3, #9
 80014ba:	d91c      	bls.n	80014f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68d9      	ldr	r1, [r3, #12]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4613      	mov	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4413      	add	r3, r2
 80014cc:	3b1e      	subs	r3, #30
 80014ce:	2207      	movs	r2, #7
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	4019      	ands	r1, r3
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	6898      	ldr	r0, [r3, #8]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4613      	mov	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	3b1e      	subs	r3, #30
 80014e8:	fa00 f203 	lsl.w	r2, r0, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	430a      	orrs	r2, r1
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	e019      	b.n	800152a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6919      	ldr	r1, [r3, #16]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4613      	mov	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4413      	add	r3, r2
 8001506:	2207      	movs	r2, #7
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	4019      	ands	r1, r3
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	6898      	ldr	r0, [r3, #8]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4613      	mov	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	fa00 f203 	lsl.w	r2, r0, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b10      	cmp	r3, #16
 8001530:	d003      	beq.n	800153a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001536:	2b11      	cmp	r3, #17
 8001538:	d132      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a1d      	ldr	r2, [pc, #116]	; (80015b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d125      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d126      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001560:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b10      	cmp	r3, #16
 8001568:	d11a      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a13      	ldr	r2, [pc, #76]	; (80015bc <HAL_ADC_ConfigChannel+0x1ec>)
 8001570:	fba2 2303 	umull	r2, r3, r2, r3
 8001574:	0c9a      	lsrs	r2, r3, #18
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001580:	e002      	b.n	8001588 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	3b01      	subs	r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f9      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x1b2>
 800158e:	e007      	b.n	80015a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001594:	f043 0220 	orr.w	r2, r3, #32
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	40012400 	.word	0x40012400
 80015b8:	20000000 	.word	0x20000000
 80015bc:	431bde83 	.word	0x431bde83

080015c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d040      	beq.n	8001660 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f042 0201 	orr.w	r2, r2, #1
 80015ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <ADC_Enable+0xac>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a1f      	ldr	r2, [pc, #124]	; (8001670 <ADC_Enable+0xb0>)
 80015f4:	fba2 2303 	umull	r2, r3, r2, r3
 80015f8:	0c9b      	lsrs	r3, r3, #18
 80015fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015fc:	e002      	b.n	8001604 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	3b01      	subs	r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f9      	bne.n	80015fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800160a:	f7ff fc1b 	bl	8000e44 <HAL_GetTick>
 800160e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001610:	e01f      	b.n	8001652 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001612:	f7ff fc17 	bl	8000e44 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d918      	bls.n	8001652 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b01      	cmp	r3, #1
 800162c:	d011      	beq.n	8001652 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	f043 0210 	orr.w	r2, r3, #16
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	f043 0201 	orr.w	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e007      	b.n	8001662 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b01      	cmp	r3, #1
 800165e:	d1d8      	bne.n	8001612 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000000 	.word	0x20000000
 8001670:	431bde83 	.word	0x431bde83

08001674 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b01      	cmp	r3, #1
 800168c:	d12e      	bne.n	80016ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0201 	bic.w	r2, r2, #1
 800169c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800169e:	f7ff fbd1 	bl	8000e44 <HAL_GetTick>
 80016a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016a4:	e01b      	b.n	80016de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016a6:	f7ff fbcd 	bl	8000e44 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d914      	bls.n	80016de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d10d      	bne.n	80016de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c6:	f043 0210 	orr.w	r2, r3, #16
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	f043 0201 	orr.w	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e007      	b.n	80016ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d0dc      	beq.n	80016a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001714:	4013      	ands	r3, r2
 8001716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172a:	4a04      	ldr	r2, [pc, #16]	; (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	60d3      	str	r3, [r2, #12]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <__NVIC_GetPriorityGrouping+0x18>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	f003 0307 	and.w	r3, r3, #7
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	2b00      	cmp	r3, #0
 800176c:	db0b      	blt.n	8001786 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	f003 021f 	and.w	r2, r3, #31
 8001774:	4906      	ldr	r1, [pc, #24]	; (8001790 <__NVIC_EnableIRQ+0x34>)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	095b      	lsrs	r3, r3, #5
 800177c:	2001      	movs	r0, #1
 800177e:	fa00 f202 	lsl.w	r2, r0, r2
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	e000e100 	.word	0xe000e100

08001794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	6039      	str	r1, [r7, #0]
 800179e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	db0a      	blt.n	80017be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	490c      	ldr	r1, [pc, #48]	; (80017e0 <__NVIC_SetPriority+0x4c>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	0112      	lsls	r2, r2, #4
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	440b      	add	r3, r1
 80017b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017bc:	e00a      	b.n	80017d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4908      	ldr	r1, [pc, #32]	; (80017e4 <__NVIC_SetPriority+0x50>)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	3b04      	subs	r3, #4
 80017cc:	0112      	lsls	r2, r2, #4
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	440b      	add	r3, r1
 80017d2:	761a      	strb	r2, [r3, #24]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e100 	.word	0xe000e100
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	; 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f1c3 0307 	rsb	r3, r3, #7
 8001802:	2b04      	cmp	r3, #4
 8001804:	bf28      	it	cs
 8001806:	2304      	movcs	r3, #4
 8001808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3304      	adds	r3, #4
 800180e:	2b06      	cmp	r3, #6
 8001810:	d902      	bls.n	8001818 <NVIC_EncodePriority+0x30>
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3b03      	subs	r3, #3
 8001816:	e000      	b.n	800181a <NVIC_EncodePriority+0x32>
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	f04f 32ff 	mov.w	r2, #4294967295
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43da      	mvns	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	401a      	ands	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	43d9      	mvns	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	4313      	orrs	r3, r2
         );
}
 8001842:	4618      	mov	r0, r3
 8001844:	3724      	adds	r7, #36	; 0x24
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ff4f 	bl	80016f8 <__NVIC_SetPriorityGrouping>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001874:	f7ff ff64 	bl	8001740 <__NVIC_GetPriorityGrouping>
 8001878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	6978      	ldr	r0, [r7, #20]
 8001880:	f7ff ffb2 	bl	80017e8 <NVIC_EncodePriority>
 8001884:	4602      	mov	r2, r0
 8001886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff81 	bl	8001794 <__NVIC_SetPriority>
}
 8001892:	bf00      	nop
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff57 	bl	800175c <__NVIC_EnableIRQ>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b08b      	sub	sp, #44	; 0x2c
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018c2:	2300      	movs	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ca:	e169      	b.n	8001ba0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018cc:	2201      	movs	r2, #1
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	f040 8158 	bne.w	8001b9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	4a9a      	ldr	r2, [pc, #616]	; (8001b58 <HAL_GPIO_Init+0x2a0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d05e      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
 80018f4:	4a98      	ldr	r2, [pc, #608]	; (8001b58 <HAL_GPIO_Init+0x2a0>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d875      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 80018fa:	4a98      	ldr	r2, [pc, #608]	; (8001b5c <HAL_GPIO_Init+0x2a4>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d058      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
 8001900:	4a96      	ldr	r2, [pc, #600]	; (8001b5c <HAL_GPIO_Init+0x2a4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d86f      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 8001906:	4a96      	ldr	r2, [pc, #600]	; (8001b60 <HAL_GPIO_Init+0x2a8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d052      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
 800190c:	4a94      	ldr	r2, [pc, #592]	; (8001b60 <HAL_GPIO_Init+0x2a8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d869      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 8001912:	4a94      	ldr	r2, [pc, #592]	; (8001b64 <HAL_GPIO_Init+0x2ac>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d04c      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
 8001918:	4a92      	ldr	r2, [pc, #584]	; (8001b64 <HAL_GPIO_Init+0x2ac>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d863      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 800191e:	4a92      	ldr	r2, [pc, #584]	; (8001b68 <HAL_GPIO_Init+0x2b0>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d046      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
 8001924:	4a90      	ldr	r2, [pc, #576]	; (8001b68 <HAL_GPIO_Init+0x2b0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d85d      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 800192a:	2b12      	cmp	r3, #18
 800192c:	d82a      	bhi.n	8001984 <HAL_GPIO_Init+0xcc>
 800192e:	2b12      	cmp	r3, #18
 8001930:	d859      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 8001932:	a201      	add	r2, pc, #4	; (adr r2, 8001938 <HAL_GPIO_Init+0x80>)
 8001934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001938:	080019b3 	.word	0x080019b3
 800193c:	0800198d 	.word	0x0800198d
 8001940:	0800199f 	.word	0x0800199f
 8001944:	080019e1 	.word	0x080019e1
 8001948:	080019e7 	.word	0x080019e7
 800194c:	080019e7 	.word	0x080019e7
 8001950:	080019e7 	.word	0x080019e7
 8001954:	080019e7 	.word	0x080019e7
 8001958:	080019e7 	.word	0x080019e7
 800195c:	080019e7 	.word	0x080019e7
 8001960:	080019e7 	.word	0x080019e7
 8001964:	080019e7 	.word	0x080019e7
 8001968:	080019e7 	.word	0x080019e7
 800196c:	080019e7 	.word	0x080019e7
 8001970:	080019e7 	.word	0x080019e7
 8001974:	080019e7 	.word	0x080019e7
 8001978:	080019e7 	.word	0x080019e7
 800197c:	08001995 	.word	0x08001995
 8001980:	080019a9 	.word	0x080019a9
 8001984:	4a79      	ldr	r2, [pc, #484]	; (8001b6c <HAL_GPIO_Init+0x2b4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d013      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800198a:	e02c      	b.n	80019e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	623b      	str	r3, [r7, #32]
          break;
 8001992:	e029      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	3304      	adds	r3, #4
 800199a:	623b      	str	r3, [r7, #32]
          break;
 800199c:	e024      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	3308      	adds	r3, #8
 80019a4:	623b      	str	r3, [r7, #32]
          break;
 80019a6:	e01f      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	330c      	adds	r3, #12
 80019ae:	623b      	str	r3, [r7, #32]
          break;
 80019b0:	e01a      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d102      	bne.n	80019c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ba:	2304      	movs	r3, #4
 80019bc:	623b      	str	r3, [r7, #32]
          break;
 80019be:	e013      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d105      	bne.n	80019d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019c8:	2308      	movs	r3, #8
 80019ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69fa      	ldr	r2, [r7, #28]
 80019d0:	611a      	str	r2, [r3, #16]
          break;
 80019d2:	e009      	b.n	80019e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d4:	2308      	movs	r3, #8
 80019d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	615a      	str	r2, [r3, #20]
          break;
 80019de:	e003      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019e0:	2300      	movs	r3, #0
 80019e2:	623b      	str	r3, [r7, #32]
          break;
 80019e4:	e000      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          break;
 80019e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2bff      	cmp	r3, #255	; 0xff
 80019ec:	d801      	bhi.n	80019f2 <HAL_GPIO_Init+0x13a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	e001      	b.n	80019f6 <HAL_GPIO_Init+0x13e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3304      	adds	r3, #4
 80019f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	2bff      	cmp	r3, #255	; 0xff
 80019fc:	d802      	bhi.n	8001a04 <HAL_GPIO_Init+0x14c>
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	e002      	b.n	8001a0a <HAL_GPIO_Init+0x152>
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	3b08      	subs	r3, #8
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	210f      	movs	r1, #15
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	fa01 f303 	lsl.w	r3, r1, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	6a39      	ldr	r1, [r7, #32]
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	431a      	orrs	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 80b1 	beq.w	8001b9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a38:	4b4d      	ldr	r3, [pc, #308]	; (8001b70 <HAL_GPIO_Init+0x2b8>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	4a4c      	ldr	r2, [pc, #304]	; (8001b70 <HAL_GPIO_Init+0x2b8>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6193      	str	r3, [r2, #24]
 8001a44:	4b4a      	ldr	r3, [pc, #296]	; (8001b70 <HAL_GPIO_Init+0x2b8>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a50:	4a48      	ldr	r2, [pc, #288]	; (8001b74 <HAL_GPIO_Init+0x2bc>)
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	3302      	adds	r3, #2
 8001a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	220f      	movs	r2, #15
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	4013      	ands	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a40      	ldr	r2, [pc, #256]	; (8001b78 <HAL_GPIO_Init+0x2c0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d013      	beq.n	8001aa4 <HAL_GPIO_Init+0x1ec>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a3f      	ldr	r2, [pc, #252]	; (8001b7c <HAL_GPIO_Init+0x2c4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d00d      	beq.n	8001aa0 <HAL_GPIO_Init+0x1e8>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a3e      	ldr	r2, [pc, #248]	; (8001b80 <HAL_GPIO_Init+0x2c8>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d007      	beq.n	8001a9c <HAL_GPIO_Init+0x1e4>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a3d      	ldr	r2, [pc, #244]	; (8001b84 <HAL_GPIO_Init+0x2cc>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d101      	bne.n	8001a98 <HAL_GPIO_Init+0x1e0>
 8001a94:	2303      	movs	r3, #3
 8001a96:	e006      	b.n	8001aa6 <HAL_GPIO_Init+0x1ee>
 8001a98:	2304      	movs	r3, #4
 8001a9a:	e004      	b.n	8001aa6 <HAL_GPIO_Init+0x1ee>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e002      	b.n	8001aa6 <HAL_GPIO_Init+0x1ee>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <HAL_GPIO_Init+0x1ee>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa8:	f002 0203 	and.w	r2, r2, #3
 8001aac:	0092      	lsls	r2, r2, #2
 8001aae:	4093      	lsls	r3, r2
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ab6:	492f      	ldr	r1, [pc, #188]	; (8001b74 <HAL_GPIO_Init+0x2bc>)
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	089b      	lsrs	r3, r3, #2
 8001abc:	3302      	adds	r3, #2
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d006      	beq.n	8001ade <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ad0:	4b2d      	ldr	r3, [pc, #180]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	492c      	ldr	r1, [pc, #176]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	600b      	str	r3, [r1, #0]
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ade:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	4928      	ldr	r1, [pc, #160]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d006      	beq.n	8001b06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001af8:	4b23      	ldr	r3, [pc, #140]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	4922      	ldr	r1, [pc, #136]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]
 8001b04:	e006      	b.n	8001b14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b06:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	491e      	ldr	r1, [pc, #120]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d006      	beq.n	8001b2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b20:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	4918      	ldr	r1, [pc, #96]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b2e:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	4914      	ldr	r1, [pc, #80]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d021      	beq.n	8001b8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	490e      	ldr	r1, [pc, #56]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	60cb      	str	r3, [r1, #12]
 8001b54:	e021      	b.n	8001b9a <HAL_GPIO_Init+0x2e2>
 8001b56:	bf00      	nop
 8001b58:	10320000 	.word	0x10320000
 8001b5c:	10310000 	.word	0x10310000
 8001b60:	10220000 	.word	0x10220000
 8001b64:	10210000 	.word	0x10210000
 8001b68:	10120000 	.word	0x10120000
 8001b6c:	10110000 	.word	0x10110000
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40010000 	.word	0x40010000
 8001b78:	40010800 	.word	0x40010800
 8001b7c:	40010c00 	.word	0x40010c00
 8001b80:	40011000 	.word	0x40011000
 8001b84:	40011400 	.word	0x40011400
 8001b88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_GPIO_Init+0x304>)
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	4909      	ldr	r1, [pc, #36]	; (8001bbc <HAL_GPIO_Init+0x304>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f47f ae8e 	bne.w	80018cc <HAL_GPIO_Init+0x14>
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	372c      	adds	r7, #44	; 0x2c
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	40010400 	.word	0x40010400

08001bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bdc:	e003      	b.n	8001be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	041a      	lsls	r2, r3, #16
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	611a      	str	r2, [r3, #16]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e272      	b.n	80020e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 8087 	beq.w	8001d1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c10:	4b92      	ldr	r3, [pc, #584]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	d00c      	beq.n	8001c36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c1c:	4b8f      	ldr	r3, [pc, #572]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d112      	bne.n	8001c4e <HAL_RCC_OscConfig+0x5e>
 8001c28:	4b8c      	ldr	r3, [pc, #560]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c34:	d10b      	bne.n	8001c4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c36:	4b89      	ldr	r3, [pc, #548]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d06c      	beq.n	8001d1c <HAL_RCC_OscConfig+0x12c>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d168      	bne.n	8001d1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e24c      	b.n	80020e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c56:	d106      	bne.n	8001c66 <HAL_RCC_OscConfig+0x76>
 8001c58:	4b80      	ldr	r3, [pc, #512]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a7f      	ldr	r2, [pc, #508]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	e02e      	b.n	8001cc4 <HAL_RCC_OscConfig+0xd4>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x98>
 8001c6e:	4b7b      	ldr	r3, [pc, #492]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a7a      	ldr	r2, [pc, #488]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b78      	ldr	r3, [pc, #480]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a77      	ldr	r2, [pc, #476]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e01d      	b.n	8001cc4 <HAL_RCC_OscConfig+0xd4>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0xbc>
 8001c92:	4b72      	ldr	r3, [pc, #456]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a71      	ldr	r2, [pc, #452]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	4b6f      	ldr	r3, [pc, #444]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a6e      	ldr	r2, [pc, #440]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e00b      	b.n	8001cc4 <HAL_RCC_OscConfig+0xd4>
 8001cac:	4b6b      	ldr	r3, [pc, #428]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a6a      	ldr	r2, [pc, #424]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	4b68      	ldr	r3, [pc, #416]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a67      	ldr	r2, [pc, #412]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d013      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f8ba 	bl	8000e44 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f8b6 	bl	8000e44 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b64      	cmp	r3, #100	; 0x64
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e200      	b.n	80020e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	4b5d      	ldr	r3, [pc, #372]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0xe4>
 8001cf2:	e014      	b.n	8001d1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff f8a6 	bl	8000e44 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cfc:	f7ff f8a2 	bl	8000e44 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b64      	cmp	r3, #100	; 0x64
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e1ec      	b.n	80020e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0e:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_OscConfig+0x10c>
 8001d1a:	e000      	b.n	8001d1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d063      	beq.n	8001df2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d2a:	4b4c      	ldr	r3, [pc, #304]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00b      	beq.n	8001d4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d36:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 030c 	and.w	r3, r3, #12
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d11c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x18c>
 8001d42:	4b46      	ldr	r3, [pc, #280]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d116      	bne.n	8001d7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4e:	4b43      	ldr	r3, [pc, #268]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d005      	beq.n	8001d66 <HAL_RCC_OscConfig+0x176>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d001      	beq.n	8001d66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e1c0      	b.n	80020e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d66:	4b3d      	ldr	r3, [pc, #244]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4939      	ldr	r1, [pc, #228]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7a:	e03a      	b.n	8001df2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d020      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d84:	4b36      	ldr	r3, [pc, #216]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8a:	f7ff f85b 	bl	8000e44 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d92:	f7ff f857 	bl	8000e44 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e1a1      	b.n	80020e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da4:	4b2d      	ldr	r3, [pc, #180]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db0:	4b2a      	ldr	r3, [pc, #168]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	4927      	ldr	r1, [pc, #156]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	600b      	str	r3, [r1, #0]
 8001dc4:	e015      	b.n	8001df2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc6:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff f83a 	bl	8000e44 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd4:	f7ff f836 	bl	8000e44 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e180      	b.n	80020e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de6:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d03a      	beq.n	8001e74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d019      	beq.n	8001e3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e06:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <HAL_RCC_OscConfig+0x274>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0c:	f7ff f81a 	bl	8000e44 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e14:	f7ff f816 	bl	8000e44 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e160      	b.n	80020e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e26:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f0      	beq.n	8001e14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e32:	2001      	movs	r0, #1
 8001e34:	f000 faf4 	bl	8002420 <RCC_Delay>
 8001e38:	e01c      	b.n	8001e74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <HAL_RCC_OscConfig+0x274>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e40:	f7ff f800 	bl	8000e44 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e46:	e00f      	b.n	8001e68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e48:	f7fe fffc 	bl	8000e44 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d908      	bls.n	8001e68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e146      	b.n	80020e8 <HAL_RCC_OscConfig+0x4f8>
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	42420000 	.word	0x42420000
 8001e64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e68:	4b92      	ldr	r3, [pc, #584]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1e9      	bne.n	8001e48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 80a6 	beq.w	8001fce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e86:	4b8b      	ldr	r3, [pc, #556]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10d      	bne.n	8001eae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e92:	4b88      	ldr	r3, [pc, #544]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	4a87      	ldr	r2, [pc, #540]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	61d3      	str	r3, [r2, #28]
 8001e9e:	4b85      	ldr	r3, [pc, #532]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eae:	4b82      	ldr	r3, [pc, #520]	; (80020b8 <HAL_RCC_OscConfig+0x4c8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d118      	bne.n	8001eec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eba:	4b7f      	ldr	r3, [pc, #508]	; (80020b8 <HAL_RCC_OscConfig+0x4c8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a7e      	ldr	r2, [pc, #504]	; (80020b8 <HAL_RCC_OscConfig+0x4c8>)
 8001ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ec6:	f7fe ffbd 	bl	8000e44 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ece:	f7fe ffb9 	bl	8000e44 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b64      	cmp	r3, #100	; 0x64
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e103      	b.n	80020e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee0:	4b75      	ldr	r3, [pc, #468]	; (80020b8 <HAL_RCC_OscConfig+0x4c8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d106      	bne.n	8001f02 <HAL_RCC_OscConfig+0x312>
 8001ef4:	4b6f      	ldr	r3, [pc, #444]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	4a6e      	ldr	r2, [pc, #440]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6213      	str	r3, [r2, #32]
 8001f00:	e02d      	b.n	8001f5e <HAL_RCC_OscConfig+0x36e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x334>
 8001f0a:	4b6a      	ldr	r3, [pc, #424]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4a69      	ldr	r2, [pc, #420]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	6213      	str	r3, [r2, #32]
 8001f16:	4b67      	ldr	r3, [pc, #412]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4a66      	ldr	r2, [pc, #408]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	f023 0304 	bic.w	r3, r3, #4
 8001f20:	6213      	str	r3, [r2, #32]
 8001f22:	e01c      	b.n	8001f5e <HAL_RCC_OscConfig+0x36e>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2b05      	cmp	r3, #5
 8001f2a:	d10c      	bne.n	8001f46 <HAL_RCC_OscConfig+0x356>
 8001f2c:	4b61      	ldr	r3, [pc, #388]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4a60      	ldr	r2, [pc, #384]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	f043 0304 	orr.w	r3, r3, #4
 8001f36:	6213      	str	r3, [r2, #32]
 8001f38:	4b5e      	ldr	r3, [pc, #376]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	4a5d      	ldr	r2, [pc, #372]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	6213      	str	r3, [r2, #32]
 8001f44:	e00b      	b.n	8001f5e <HAL_RCC_OscConfig+0x36e>
 8001f46:	4b5b      	ldr	r3, [pc, #364]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a5a      	ldr	r2, [pc, #360]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	f023 0301 	bic.w	r3, r3, #1
 8001f50:	6213      	str	r3, [r2, #32]
 8001f52:	4b58      	ldr	r3, [pc, #352]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	4a57      	ldr	r2, [pc, #348]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	f023 0304 	bic.w	r3, r3, #4
 8001f5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d015      	beq.n	8001f92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f66:	f7fe ff6d 	bl	8000e44 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f6c:	e00a      	b.n	8001f84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6e:	f7fe ff69 	bl	8000e44 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e0b1      	b.n	80020e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f84:	4b4b      	ldr	r3, [pc, #300]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0ee      	beq.n	8001f6e <HAL_RCC_OscConfig+0x37e>
 8001f90:	e014      	b.n	8001fbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f92:	f7fe ff57 	bl	8000e44 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f98:	e00a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9a:	f7fe ff53 	bl	8000e44 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e09b      	b.n	80020e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb0:	4b40      	ldr	r3, [pc, #256]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1ee      	bne.n	8001f9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fbc:	7dfb      	ldrb	r3, [r7, #23]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d105      	bne.n	8001fce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc2:	4b3c      	ldr	r3, [pc, #240]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	4a3b      	ldr	r2, [pc, #236]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 8087 	beq.w	80020e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fd8:	4b36      	ldr	r3, [pc, #216]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d061      	beq.n	80020a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d146      	bne.n	800207a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fec:	4b33      	ldr	r3, [pc, #204]	; (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff2:	f7fe ff27 	bl	8000e44 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffa:	f7fe ff23 	bl	8000e44 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e06d      	b.n	80020e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200c:	4b29      	ldr	r3, [pc, #164]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f0      	bne.n	8001ffa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002020:	d108      	bne.n	8002034 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002022:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	4921      	ldr	r1, [pc, #132]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002034:	4b1f      	ldr	r3, [pc, #124]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a19      	ldr	r1, [r3, #32]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	430b      	orrs	r3, r1
 8002046:	491b      	ldr	r1, [pc, #108]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800204c:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <HAL_RCC_OscConfig+0x4cc>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7fe fef7 	bl	8000e44 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205a:	f7fe fef3 	bl	8000e44 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e03d      	b.n	80020e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x46a>
 8002078:	e035      	b.n	80020e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_RCC_OscConfig+0x4cc>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7fe fee0 	bl	8000e44 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002088:	f7fe fedc 	bl	8000e44 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e026      	b.n	80020e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_RCC_OscConfig+0x4c4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x498>
 80020a6:	e01e      	b.n	80020e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d107      	bne.n	80020c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e019      	b.n	80020e8 <HAL_RCC_OscConfig+0x4f8>
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40007000 	.word	0x40007000
 80020bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_RCC_OscConfig+0x500>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d106      	bne.n	80020e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d001      	beq.n	80020e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40021000 	.word	0x40021000

080020f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0d0      	b.n	80022aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002108:	4b6a      	ldr	r3, [pc, #424]	; (80022b4 <HAL_RCC_ClockConfig+0x1c0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d910      	bls.n	8002138 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002116:	4b67      	ldr	r3, [pc, #412]	; (80022b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 0207 	bic.w	r2, r3, #7
 800211e:	4965      	ldr	r1, [pc, #404]	; (80022b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002126:	4b63      	ldr	r3, [pc, #396]	; (80022b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0b8      	b.n	80022aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d020      	beq.n	8002186 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002150:	4b59      	ldr	r3, [pc, #356]	; (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	4a58      	ldr	r2, [pc, #352]	; (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800215a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0308 	and.w	r3, r3, #8
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002168:	4b53      	ldr	r3, [pc, #332]	; (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4a52      	ldr	r2, [pc, #328]	; (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002172:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002174:	4b50      	ldr	r3, [pc, #320]	; (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	494d      	ldr	r1, [pc, #308]	; (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	4313      	orrs	r3, r2
 8002184:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d040      	beq.n	8002214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d107      	bne.n	80021aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219a:	4b47      	ldr	r3, [pc, #284]	; (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d115      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e07f      	b.n	80022aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b2:	4b41      	ldr	r3, [pc, #260]	; (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e073      	b.n	80022aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c2:	4b3d      	ldr	r3, [pc, #244]	; (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e06b      	b.n	80022aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021d2:	4b39      	ldr	r3, [pc, #228]	; (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f023 0203 	bic.w	r2, r3, #3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	4936      	ldr	r1, [pc, #216]	; (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021e4:	f7fe fe2e 	bl	8000e44 <HAL_GetTick>
 80021e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ec:	f7fe fe2a 	bl	8000e44 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e053      	b.n	80022aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	4b2d      	ldr	r3, [pc, #180]	; (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 020c 	and.w	r2, r3, #12
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	429a      	cmp	r2, r3
 8002212:	d1eb      	bne.n	80021ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002214:	4b27      	ldr	r3, [pc, #156]	; (80022b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d210      	bcs.n	8002244 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002222:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 0207 	bic.w	r2, r3, #7
 800222a:	4922      	ldr	r1, [pc, #136]	; (80022b4 <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002232:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d001      	beq.n	8002244 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e032      	b.n	80022aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002250:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4916      	ldr	r1, [pc, #88]	; (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	4313      	orrs	r3, r2
 8002260:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d009      	beq.n	8002282 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800226e:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	490e      	ldr	r1, [pc, #56]	; (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	4313      	orrs	r3, r2
 8002280:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002282:	f000 f821 	bl	80022c8 <HAL_RCC_GetSysClockFreq>
 8002286:	4602      	mov	r2, r0
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	091b      	lsrs	r3, r3, #4
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	490a      	ldr	r1, [pc, #40]	; (80022bc <HAL_RCC_ClockConfig+0x1c8>)
 8002294:	5ccb      	ldrb	r3, [r1, r3]
 8002296:	fa22 f303 	lsr.w	r3, r2, r3
 800229a:	4a09      	ldr	r2, [pc, #36]	; (80022c0 <HAL_RCC_ClockConfig+0x1cc>)
 800229c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800229e:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <HAL_RCC_ClockConfig+0x1d0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fcb2 	bl	8000c0c <HAL_InitTick>

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40022000 	.word	0x40022000
 80022b8:	40021000 	.word	0x40021000
 80022bc:	08006c88 	.word	0x08006c88
 80022c0:	20000000 	.word	0x20000000
 80022c4:	20000004 	.word	0x20000004

080022c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c8:	b490      	push	{r4, r7}
 80022ca:	b08a      	sub	sp, #40	; 0x28
 80022cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022ce:	4b29      	ldr	r3, [pc, #164]	; (8002374 <HAL_RCC_GetSysClockFreq+0xac>)
 80022d0:	1d3c      	adds	r4, r7, #4
 80022d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022d8:	f240 2301 	movw	r3, #513	; 0x201
 80022dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	2300      	movs	r3, #0
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022f2:	4b21      	ldr	r3, [pc, #132]	; (8002378 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d002      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x40>
 8002302:	2b08      	cmp	r3, #8
 8002304:	d003      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0x46>
 8002306:	e02b      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002308:	4b1c      	ldr	r3, [pc, #112]	; (800237c <HAL_RCC_GetSysClockFreq+0xb4>)
 800230a:	623b      	str	r3, [r7, #32]
      break;
 800230c:	e02b      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	0c9b      	lsrs	r3, r3, #18
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	3328      	adds	r3, #40	; 0x28
 8002318:	443b      	add	r3, r7
 800231a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800231e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d012      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <HAL_RCC_GetSysClockFreq+0xb0>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	0c5b      	lsrs	r3, r3, #17
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	3328      	adds	r3, #40	; 0x28
 8002336:	443b      	add	r3, r7
 8002338:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800233c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	4a0e      	ldr	r2, [pc, #56]	; (800237c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002342:	fb03 f202 	mul.w	r2, r3, r2
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	fbb2 f3f3 	udiv	r3, r2, r3
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
 800234e:	e004      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	4a0b      	ldr	r2, [pc, #44]	; (8002380 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002354:	fb02 f303 	mul.w	r3, r2, r3
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	623b      	str	r3, [r7, #32]
      break;
 800235e:	e002      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002362:	623b      	str	r3, [r7, #32]
      break;
 8002364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002366:	6a3b      	ldr	r3, [r7, #32]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3728      	adds	r7, #40	; 0x28
 800236c:	46bd      	mov	sp, r7
 800236e:	bc90      	pop	{r4, r7}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	08006b38 	.word	0x08006b38
 8002378:	40021000 	.word	0x40021000
 800237c:	007a1200 	.word	0x007a1200
 8002380:	003d0900 	.word	0x003d0900

08002384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002388:	4b02      	ldr	r3, [pc, #8]	; (8002394 <HAL_RCC_GetHCLKFreq+0x10>)
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	20000000 	.word	0x20000000

08002398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800239c:	f7ff fff2 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023a0:	4602      	mov	r2, r0
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	0adb      	lsrs	r3, r3, #11
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	4903      	ldr	r1, [pc, #12]	; (80023bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ae:	5ccb      	ldrb	r3, [r1, r3]
 80023b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000
 80023bc:	08006c98 	.word	0x08006c98

080023c0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	220f      	movs	r2, #15
 80023ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <HAL_RCC_GetClockConfig+0x58>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0203 	and.w	r2, r3, #3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <HAL_RCC_GetClockConfig+0x58>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_RCC_GetClockConfig+0x58>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <HAL_RCC_GetClockConfig+0x58>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	08db      	lsrs	r3, r3, #3
 80023fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_RCC_GetClockConfig+0x5c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0207 	and.w	r2, r3, #7
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	40021000 	.word	0x40021000
 800241c:	40022000 	.word	0x40022000

08002420 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002428:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <RCC_Delay+0x34>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <RCC_Delay+0x38>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	0a5b      	lsrs	r3, r3, #9
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	fb02 f303 	mul.w	r3, r2, r3
 800243a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800243c:	bf00      	nop
  }
  while (Delay --);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1e5a      	subs	r2, r3, #1
 8002442:	60fa      	str	r2, [r7, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f9      	bne.n	800243c <RCC_Delay+0x1c>
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr
 8002454:	20000000 	.word	0x20000000
 8002458:	10624dd3 	.word	0x10624dd3

0800245c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d07d      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002478:	2300      	movs	r3, #0
 800247a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800247c:	4b4f      	ldr	r3, [pc, #316]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10d      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002488:	4b4c      	ldr	r3, [pc, #304]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	4a4b      	ldr	r2, [pc, #300]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800248e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002492:	61d3      	str	r3, [r2, #28]
 8002494:	4b49      	ldr	r3, [pc, #292]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a0:	2301      	movs	r3, #1
 80024a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a4:	4b46      	ldr	r3, [pc, #280]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d118      	bne.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024b0:	4b43      	ldr	r3, [pc, #268]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a42      	ldr	r2, [pc, #264]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024bc:	f7fe fcc2 	bl	8000e44 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c2:	e008      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c4:	f7fe fcbe 	bl	8000e44 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	; 0x64
 80024d0:	d901      	bls.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e06d      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d6:	4b3a      	ldr	r3, [pc, #232]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024e2:	4b36      	ldr	r3, [pc, #216]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d02e      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d027      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002500:	4b2e      	ldr	r3, [pc, #184]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002508:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800250a:	4b2e      	ldr	r3, [pc, #184]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800250c:	2201      	movs	r2, #1
 800250e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002510:	4b2c      	ldr	r3, [pc, #176]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002516:	4a29      	ldr	r2, [pc, #164]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d014      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002526:	f7fe fc8d 	bl	8000e44 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252c:	e00a      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7fe fc89 	bl	8000e44 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f241 3288 	movw	r2, #5000	; 0x1388
 800253c:	4293      	cmp	r3, r2
 800253e:	d901      	bls.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e036      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002544:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0ee      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002550:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	4917      	ldr	r1, [pc, #92]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255e:	4313      	orrs	r3, r2
 8002560:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002562:	7dfb      	ldrb	r3, [r7, #23]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d105      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002568:	4b14      	ldr	r3, [pc, #80]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	4a13      	ldr	r2, [pc, #76]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800256e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002572:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002580:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	490b      	ldr	r1, [pc, #44]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258e:	4313      	orrs	r3, r2
 8002590:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	2b00      	cmp	r3, #0
 800259c:	d008      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800259e:	4b07      	ldr	r3, [pc, #28]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	4904      	ldr	r1, [pc, #16]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40007000 	.word	0x40007000
 80025c4:	42420440 	.word	0x42420440

080025c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b08d      	sub	sp, #52	; 0x34
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025d0:	4b58      	ldr	r3, [pc, #352]	; (8002734 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80025d2:	f107 040c 	add.w	r4, r7, #12
 80025d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025dc:	f240 2301 	movw	r3, #513	; 0x201
 80025e0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
 80025e6:	2300      	movs	r3, #0
 80025e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ea:	2300      	movs	r3, #0
 80025ec:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	2300      	movs	r3, #0
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b10      	cmp	r3, #16
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b10      	cmp	r3, #16
 8002600:	f200 808e 	bhi.w	8002720 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d049      	beq.n	800269e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d079      	beq.n	8002704 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002610:	e086      	b.n	8002720 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002612:	4b49      	ldr	r3, [pc, #292]	; (8002738 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002618:	4b47      	ldr	r3, [pc, #284]	; (8002738 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d07f      	beq.n	8002724 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	0c9b      	lsrs	r3, r3, #18
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	3330      	adds	r3, #48	; 0x30
 800262e:	443b      	add	r3, r7
 8002630:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002634:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d017      	beq.n	8002670 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002640:	4b3d      	ldr	r3, [pc, #244]	; (8002738 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	0c5b      	lsrs	r3, r3, #17
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	3330      	adds	r3, #48	; 0x30
 800264c:	443b      	add	r3, r7
 800264e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00d      	beq.n	800267a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800265e:	4a37      	ldr	r2, [pc, #220]	; (800273c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	fbb2 f2f3 	udiv	r2, r2, r3
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	fb02 f303 	mul.w	r3, r2, r3
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800266e:	e004      	b.n	800267a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	4a33      	ldr	r2, [pc, #204]	; (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002674:	fb02 f303 	mul.w	r3, r2, r3
 8002678:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800267a:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002686:	d102      	bne.n	800268e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800268c:	e04a      	b.n	8002724 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4a2c      	ldr	r2, [pc, #176]	; (8002744 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002694:	fba2 2303 	umull	r2, r3, r2, r3
 8002698:	085b      	lsrs	r3, r3, #1
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800269c:	e042      	b.n	8002724 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800269e:	4b26      	ldr	r3, [pc, #152]	; (8002738 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ae:	d108      	bne.n	80026c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80026ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026be:	62bb      	str	r3, [r7, #40]	; 0x28
 80026c0:	e01f      	b.n	8002702 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026cc:	d109      	bne.n	80026e2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80026ce:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80026da:	f649 4340 	movw	r3, #40000	; 0x9c40
 80026de:	62bb      	str	r3, [r7, #40]	; 0x28
 80026e0:	e00f      	b.n	8002702 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026ec:	d11c      	bne.n	8002728 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80026ee:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d016      	beq.n	8002728 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80026fa:	f24f 4324 	movw	r3, #62500	; 0xf424
 80026fe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002700:	e012      	b.n	8002728 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002702:	e011      	b.n	8002728 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002704:	f7ff fe48 	bl	8002398 <HAL_RCC_GetPCLK2Freq>
 8002708:	4602      	mov	r2, r0
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	0b9b      	lsrs	r3, r3, #14
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	3301      	adds	r3, #1
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fbb2 f3f3 	udiv	r3, r2, r3
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800271e:	e004      	b.n	800272a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002720:	bf00      	nop
 8002722:	e002      	b.n	800272a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002724:	bf00      	nop
 8002726:	e000      	b.n	800272a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002728:	bf00      	nop
    }
  }
  return (frequency);
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800272c:	4618      	mov	r0, r3
 800272e:	3734      	adds	r7, #52	; 0x34
 8002730:	46bd      	mov	sp, r7
 8002732:	bd90      	pop	{r4, r7, pc}
 8002734:	08006b48 	.word	0x08006b48
 8002738:	40021000 	.word	0x40021000
 800273c:	007a1200 	.word	0x007a1200
 8002740:	003d0900 	.word	0x003d0900
 8002744:	aaaaaaab 	.word	0xaaaaaaab

08002748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e041      	b.n	80027de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7fe fa00 	bl	8000b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3304      	adds	r3, #4
 8002784:	4619      	mov	r1, r3
 8002786:	4610      	mov	r0, r2
 8002788:	f000 fc28 	bl	8002fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d001      	beq.n	8002800 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e03a      	b.n	8002876 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a18      	ldr	r2, [pc, #96]	; (8002880 <HAL_TIM_Base_Start_IT+0x98>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00e      	beq.n	8002840 <HAL_TIM_Base_Start_IT+0x58>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282a:	d009      	beq.n	8002840 <HAL_TIM_Base_Start_IT+0x58>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a14      	ldr	r2, [pc, #80]	; (8002884 <HAL_TIM_Base_Start_IT+0x9c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d004      	beq.n	8002840 <HAL_TIM_Base_Start_IT+0x58>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a13      	ldr	r2, [pc, #76]	; (8002888 <HAL_TIM_Base_Start_IT+0xa0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d111      	bne.n	8002864 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b06      	cmp	r3, #6
 8002850:	d010      	beq.n	8002874 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0201 	orr.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002862:	e007      	b.n	8002874 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr
 8002880:	40012c00 	.word	0x40012c00
 8002884:	40000400 	.word	0x40000400
 8002888:	40000800 	.word	0x40000800

0800288c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e041      	b.n	8002922 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f839 	bl	800292a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3304      	adds	r3, #4
 80028c8:	4619      	mov	r1, r3
 80028ca:	4610      	mov	r0, r2
 80028cc:	f000 fb86 	bl	8002fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <HAL_TIM_PWM_Start+0x24>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b01      	cmp	r3, #1
 8002956:	bf14      	ite	ne
 8002958:	2301      	movne	r3, #1
 800295a:	2300      	moveq	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	e022      	b.n	80029a6 <HAL_TIM_PWM_Start+0x6a>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b04      	cmp	r3, #4
 8002964:	d109      	bne.n	800297a <HAL_TIM_PWM_Start+0x3e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b01      	cmp	r3, #1
 8002970:	bf14      	ite	ne
 8002972:	2301      	movne	r3, #1
 8002974:	2300      	moveq	r3, #0
 8002976:	b2db      	uxtb	r3, r3
 8002978:	e015      	b.n	80029a6 <HAL_TIM_PWM_Start+0x6a>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b08      	cmp	r3, #8
 800297e:	d109      	bne.n	8002994 <HAL_TIM_PWM_Start+0x58>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b01      	cmp	r3, #1
 800298a:	bf14      	ite	ne
 800298c:	2301      	movne	r3, #1
 800298e:	2300      	moveq	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	e008      	b.n	80029a6 <HAL_TIM_PWM_Start+0x6a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b01      	cmp	r3, #1
 800299e:	bf14      	ite	ne
 80029a0:	2301      	movne	r3, #1
 80029a2:	2300      	moveq	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e05e      	b.n	8002a6c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d104      	bne.n	80029be <HAL_TIM_PWM_Start+0x82>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029bc:	e013      	b.n	80029e6 <HAL_TIM_PWM_Start+0xaa>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d104      	bne.n	80029ce <HAL_TIM_PWM_Start+0x92>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029cc:	e00b      	b.n	80029e6 <HAL_TIM_PWM_Start+0xaa>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d104      	bne.n	80029de <HAL_TIM_PWM_Start+0xa2>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029dc:	e003      	b.n	80029e6 <HAL_TIM_PWM_Start+0xaa>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2202      	movs	r2, #2
 80029e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2201      	movs	r2, #1
 80029ec:	6839      	ldr	r1, [r7, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fd74 	bl	80034dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a1e      	ldr	r2, [pc, #120]	; (8002a74 <HAL_TIM_PWM_Start+0x138>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d107      	bne.n	8002a0e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a18      	ldr	r2, [pc, #96]	; (8002a74 <HAL_TIM_PWM_Start+0x138>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00e      	beq.n	8002a36 <HAL_TIM_PWM_Start+0xfa>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a20:	d009      	beq.n	8002a36 <HAL_TIM_PWM_Start+0xfa>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a14      	ldr	r2, [pc, #80]	; (8002a78 <HAL_TIM_PWM_Start+0x13c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d004      	beq.n	8002a36 <HAL_TIM_PWM_Start+0xfa>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a12      	ldr	r2, [pc, #72]	; (8002a7c <HAL_TIM_PWM_Start+0x140>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d111      	bne.n	8002a5a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b06      	cmp	r3, #6
 8002a46:	d010      	beq.n	8002a6a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a58:	e007      	b.n	8002a6a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0201 	orr.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40012c00 	.word	0x40012c00
 8002a78:	40000400 	.word	0x40000400
 8002a7c:	40000800 	.word	0x40000800

08002a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d122      	bne.n	8002adc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d11b      	bne.n	8002adc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0202 	mvn.w	r2, #2
 8002aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fa6f 	bl	8002fa6 <HAL_TIM_IC_CaptureCallback>
 8002ac8:	e005      	b.n	8002ad6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fa62 	bl	8002f94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fa71 	bl	8002fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d122      	bne.n	8002b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d11b      	bne.n	8002b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0204 	mvn.w	r2, #4
 8002b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2202      	movs	r2, #2
 8002b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fa45 	bl	8002fa6 <HAL_TIM_IC_CaptureCallback>
 8002b1c:	e005      	b.n	8002b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fa38 	bl	8002f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fa47 	bl	8002fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d122      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d11b      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0208 	mvn.w	r2, #8
 8002b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2204      	movs	r2, #4
 8002b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fa1b 	bl	8002fa6 <HAL_TIM_IC_CaptureCallback>
 8002b70:	e005      	b.n	8002b7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 fa0e 	bl	8002f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fa1d 	bl	8002fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	2b10      	cmp	r3, #16
 8002b90:	d122      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b10      	cmp	r3, #16
 8002b9e:	d11b      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f06f 0210 	mvn.w	r2, #16
 8002ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2208      	movs	r2, #8
 8002bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f9f1 	bl	8002fa6 <HAL_TIM_IC_CaptureCallback>
 8002bc4:	e005      	b.n	8002bd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f9e4 	bl	8002f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f9f3 	bl	8002fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d10e      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d107      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0201 	mvn.w	r2, #1
 8002bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fd ff02 	bl	8000a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0e:	2b80      	cmp	r3, #128	; 0x80
 8002c10:	d10e      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1c:	2b80      	cmp	r3, #128	; 0x80
 8002c1e:	d107      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fce1 	bl	80035f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3a:	2b40      	cmp	r3, #64	; 0x40
 8002c3c:	d10e      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c48:	2b40      	cmp	r3, #64	; 0x40
 8002c4a:	d107      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f9b7 	bl	8002fca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	2b20      	cmp	r3, #32
 8002c68:	d10e      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0320 	and.w	r3, r3, #32
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d107      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0220 	mvn.w	r2, #32
 8002c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 fcac 	bl	80035e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c88:	bf00      	nop
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d101      	bne.n	8002caa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e0ac      	b.n	8002e04 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b0c      	cmp	r3, #12
 8002cb6:	f200 809f 	bhi.w	8002df8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002cba:	a201      	add	r2, pc, #4	; (adr r2, 8002cc0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc0:	08002cf5 	.word	0x08002cf5
 8002cc4:	08002df9 	.word	0x08002df9
 8002cc8:	08002df9 	.word	0x08002df9
 8002ccc:	08002df9 	.word	0x08002df9
 8002cd0:	08002d35 	.word	0x08002d35
 8002cd4:	08002df9 	.word	0x08002df9
 8002cd8:	08002df9 	.word	0x08002df9
 8002cdc:	08002df9 	.word	0x08002df9
 8002ce0:	08002d77 	.word	0x08002d77
 8002ce4:	08002df9 	.word	0x08002df9
 8002ce8:	08002df9 	.word	0x08002df9
 8002cec:	08002df9 	.word	0x08002df9
 8002cf0:	08002db7 	.word	0x08002db7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 f9d0 	bl	80030a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0208 	orr.w	r2, r2, #8
 8002d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0204 	bic.w	r2, r2, #4
 8002d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6999      	ldr	r1, [r3, #24]
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	619a      	str	r2, [r3, #24]
      break;
 8002d32:	e062      	b.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 fa16 	bl	800316c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699a      	ldr	r2, [r3, #24]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6999      	ldr	r1, [r3, #24]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	021a      	lsls	r2, r3, #8
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	619a      	str	r2, [r3, #24]
      break;
 8002d74:	e041      	b.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68b9      	ldr	r1, [r7, #8]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fa5f 	bl	8003240 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69da      	ldr	r2, [r3, #28]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 0208 	orr.w	r2, r2, #8
 8002d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69da      	ldr	r2, [r3, #28]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0204 	bic.w	r2, r2, #4
 8002da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	69d9      	ldr	r1, [r3, #28]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	61da      	str	r2, [r3, #28]
      break;
 8002db4:	e021      	b.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68b9      	ldr	r1, [r7, #8]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 faa9 	bl	8003314 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	69da      	ldr	r2, [r3, #28]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69da      	ldr	r2, [r3, #28]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69d9      	ldr	r1, [r3, #28]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	021a      	lsls	r2, r3, #8
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	61da      	str	r2, [r3, #28]
      break;
 8002df6:	e000      	b.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002df8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_TIM_ConfigClockSource+0x18>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e0b3      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x180>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e5c:	d03e      	beq.n	8002edc <HAL_TIM_ConfigClockSource+0xd0>
 8002e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e62:	f200 8087 	bhi.w	8002f74 <HAL_TIM_ConfigClockSource+0x168>
 8002e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6a:	f000 8085 	beq.w	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e72:	d87f      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x168>
 8002e74:	2b70      	cmp	r3, #112	; 0x70
 8002e76:	d01a      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0xa2>
 8002e78:	2b70      	cmp	r3, #112	; 0x70
 8002e7a:	d87b      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x168>
 8002e7c:	2b60      	cmp	r3, #96	; 0x60
 8002e7e:	d050      	beq.n	8002f22 <HAL_TIM_ConfigClockSource+0x116>
 8002e80:	2b60      	cmp	r3, #96	; 0x60
 8002e82:	d877      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x168>
 8002e84:	2b50      	cmp	r3, #80	; 0x50
 8002e86:	d03c      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0xf6>
 8002e88:	2b50      	cmp	r3, #80	; 0x50
 8002e8a:	d873      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x168>
 8002e8c:	2b40      	cmp	r3, #64	; 0x40
 8002e8e:	d058      	beq.n	8002f42 <HAL_TIM_ConfigClockSource+0x136>
 8002e90:	2b40      	cmp	r3, #64	; 0x40
 8002e92:	d86f      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x168>
 8002e94:	2b30      	cmp	r3, #48	; 0x30
 8002e96:	d064      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x156>
 8002e98:	2b30      	cmp	r3, #48	; 0x30
 8002e9a:	d86b      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x168>
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d060      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x156>
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d867      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x168>
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d05c      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x156>
 8002ea8:	2b10      	cmp	r3, #16
 8002eaa:	d05a      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002eac:	e062      	b.n	8002f74 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6899      	ldr	r1, [r3, #8]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f000 faee 	bl	800349e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ed0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	609a      	str	r2, [r3, #8]
      break;
 8002eda:	e04e      	b.n	8002f7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	6899      	ldr	r1, [r3, #8]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f000 fad7 	bl	800349e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002efe:	609a      	str	r2, [r3, #8]
      break;
 8002f00:	e03b      	b.n	8002f7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	6859      	ldr	r1, [r3, #4]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f000 fa4e 	bl	80033b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2150      	movs	r1, #80	; 0x50
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 faa5 	bl	800346a <TIM_ITRx_SetConfig>
      break;
 8002f20:	e02b      	b.n	8002f7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6859      	ldr	r1, [r3, #4]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f000 fa6c 	bl	800340c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2160      	movs	r1, #96	; 0x60
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fa95 	bl	800346a <TIM_ITRx_SetConfig>
      break;
 8002f40:	e01b      	b.n	8002f7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6818      	ldr	r0, [r3, #0]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6859      	ldr	r1, [r3, #4]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f000 fa2e 	bl	80033b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2140      	movs	r1, #64	; 0x40
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fa85 	bl	800346a <TIM_ITRx_SetConfig>
      break;
 8002f60:	e00b      	b.n	8002f7a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	f000 fa7c 	bl	800346a <TIM_ITRx_SetConfig>
        break;
 8002f72:	e002      	b.n	8002f7a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f74:	bf00      	nop
 8002f76:	e000      	b.n	8002f7a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr

08002fa6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr

08002fca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr

08002fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a29      	ldr	r2, [pc, #164]	; (8003094 <TIM_Base_SetConfig+0xb8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00b      	beq.n	800300c <TIM_Base_SetConfig+0x30>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffa:	d007      	beq.n	800300c <TIM_Base_SetConfig+0x30>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a26      	ldr	r2, [pc, #152]	; (8003098 <TIM_Base_SetConfig+0xbc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d003      	beq.n	800300c <TIM_Base_SetConfig+0x30>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a25      	ldr	r2, [pc, #148]	; (800309c <TIM_Base_SetConfig+0xc0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d108      	bne.n	800301e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <TIM_Base_SetConfig+0xb8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00b      	beq.n	800303e <TIM_Base_SetConfig+0x62>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302c:	d007      	beq.n	800303e <TIM_Base_SetConfig+0x62>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a19      	ldr	r2, [pc, #100]	; (8003098 <TIM_Base_SetConfig+0xbc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d003      	beq.n	800303e <TIM_Base_SetConfig+0x62>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a18      	ldr	r2, [pc, #96]	; (800309c <TIM_Base_SetConfig+0xc0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d108      	bne.n	8003050 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a07      	ldr	r2, [pc, #28]	; (8003094 <TIM_Base_SetConfig+0xb8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d103      	bne.n	8003084 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	615a      	str	r2, [r3, #20]
}
 800308a:	bf00      	nop
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	40012c00 	.word	0x40012c00
 8003098:	40000400 	.word	0x40000400
 800309c:	40000800 	.word	0x40000800

080030a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	f023 0201 	bic.w	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f023 0303 	bic.w	r3, r3, #3
 80030d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f023 0302 	bic.w	r3, r3, #2
 80030e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a1c      	ldr	r2, [pc, #112]	; (8003168 <TIM_OC1_SetConfig+0xc8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d10c      	bne.n	8003116 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f023 0308 	bic.w	r3, r3, #8
 8003102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f023 0304 	bic.w	r3, r3, #4
 8003114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a13      	ldr	r2, [pc, #76]	; (8003168 <TIM_OC1_SetConfig+0xc8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d111      	bne.n	8003142 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800312c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	621a      	str	r2, [r3, #32]
}
 800315c:	bf00      	nop
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40012c00 	.word	0x40012c00

0800316c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	f023 0210 	bic.w	r2, r3, #16
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800319a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	021b      	lsls	r3, r3, #8
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f023 0320 	bic.w	r3, r3, #32
 80031b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a1d      	ldr	r2, [pc, #116]	; (800323c <TIM_OC2_SetConfig+0xd0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d10d      	bne.n	80031e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4313      	orrs	r3, r2
 80031de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a14      	ldr	r2, [pc, #80]	; (800323c <TIM_OC2_SetConfig+0xd0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d113      	bne.n	8003218 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	621a      	str	r2, [r3, #32]
}
 8003232:	bf00      	nop
 8003234:	371c      	adds	r7, #28
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr
 800323c:	40012c00 	.word	0x40012c00

08003240 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003240:	b480      	push	{r7}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0303 	bic.w	r3, r3, #3
 8003276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	4313      	orrs	r3, r2
 8003294:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a1d      	ldr	r2, [pc, #116]	; (8003310 <TIM_OC3_SetConfig+0xd0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d10d      	bne.n	80032ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a14      	ldr	r2, [pc, #80]	; (8003310 <TIM_OC3_SetConfig+0xd0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d113      	bne.n	80032ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	621a      	str	r2, [r3, #32]
}
 8003304:	bf00      	nop
 8003306:	371c      	adds	r7, #28
 8003308:	46bd      	mov	sp, r7
 800330a:	bc80      	pop	{r7}
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40012c00 	.word	0x40012c00

08003314 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800334a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800335e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	031b      	lsls	r3, r3, #12
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a0f      	ldr	r2, [pc, #60]	; (80033ac <TIM_OC4_SetConfig+0x98>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d109      	bne.n	8003388 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800337a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	019b      	lsls	r3, r3, #6
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4313      	orrs	r3, r2
 8003386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	621a      	str	r2, [r3, #32]
}
 80033a2:	bf00      	nop
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr
 80033ac:	40012c00 	.word	0x40012c00

080033b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	f023 0201 	bic.w	r2, r3, #1
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f023 030a 	bic.w	r3, r3, #10
 80033ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	621a      	str	r2, [r3, #32]
}
 8003402:	bf00      	nop
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f023 0210 	bic.w	r2, r3, #16
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003436:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	031b      	lsls	r3, r3, #12
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003448:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	621a      	str	r2, [r3, #32]
}
 8003460:	bf00      	nop
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr

0800346a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800346a:	b480      	push	{r7}
 800346c:	b085      	sub	sp, #20
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003480:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4313      	orrs	r3, r2
 8003488:	f043 0307 	orr.w	r3, r3, #7
 800348c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	609a      	str	r2, [r3, #8]
}
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr

0800349e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800349e:	b480      	push	{r7}
 80034a0:	b087      	sub	sp, #28
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	021a      	lsls	r2, r3, #8
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	431a      	orrs	r2, r3
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	609a      	str	r2, [r3, #8]
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr

080034dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	2201      	movs	r2, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a1a      	ldr	r2, [r3, #32]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	401a      	ands	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a1a      	ldr	r2, [r3, #32]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f003 031f 	and.w	r3, r3, #31
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	431a      	orrs	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	621a      	str	r2, [r3, #32]
}
 800351a:	bf00      	nop
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr

08003524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003538:	2302      	movs	r3, #2
 800353a:	e046      	b.n	80035ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a16      	ldr	r2, [pc, #88]	; (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d00e      	beq.n	800359e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003588:	d009      	beq.n	800359e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a12      	ldr	r2, [pc, #72]	; (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d004      	beq.n	800359e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a10      	ldr	r2, [pc, #64]	; (80035dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d10c      	bne.n	80035b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr
 80035d4:	40012c00 	.word	0x40012c00
 80035d8:	40000400 	.word	0x40000400
 80035dc:	40000800 	.word	0x40000800

080035e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr

080035f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800360a:	f3ef 8305 	mrs	r3, IPSR
 800360e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003610:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10f      	bne.n	8003636 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003616:	f3ef 8310 	mrs	r3, PRIMASK
 800361a:	607b      	str	r3, [r7, #4]
  return(result);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d109      	bne.n	8003636 <osKernelInitialize+0x32>
 8003622:	4b10      	ldr	r3, [pc, #64]	; (8003664 <osKernelInitialize+0x60>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d109      	bne.n	800363e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800362a:	f3ef 8311 	mrs	r3, BASEPRI
 800362e:	603b      	str	r3, [r7, #0]
  return(result);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003636:	f06f 0305 	mvn.w	r3, #5
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	e00c      	b.n	8003658 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <osKernelInitialize+0x60>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d105      	bne.n	8003652 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003646:	4b07      	ldr	r3, [pc, #28]	; (8003664 <osKernelInitialize+0x60>)
 8003648:	2201      	movs	r2, #1
 800364a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	e002      	b.n	8003658 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003652:	f04f 33ff 	mov.w	r3, #4294967295
 8003656:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003658:	68fb      	ldr	r3, [r7, #12]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	200001b0 	.word	0x200001b0

08003668 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800366e:	f3ef 8305 	mrs	r3, IPSR
 8003672:	60bb      	str	r3, [r7, #8]
  return(result);
 8003674:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10f      	bne.n	800369a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800367a:	f3ef 8310 	mrs	r3, PRIMASK
 800367e:	607b      	str	r3, [r7, #4]
  return(result);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d109      	bne.n	800369a <osKernelStart+0x32>
 8003686:	4b11      	ldr	r3, [pc, #68]	; (80036cc <osKernelStart+0x64>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d109      	bne.n	80036a2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800368e:	f3ef 8311 	mrs	r3, BASEPRI
 8003692:	603b      	str	r3, [r7, #0]
  return(result);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <osKernelStart+0x3a>
    stat = osErrorISR;
 800369a:	f06f 0305 	mvn.w	r3, #5
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	e00e      	b.n	80036c0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80036a2:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <osKernelStart+0x64>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d107      	bne.n	80036ba <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80036aa:	4b08      	ldr	r3, [pc, #32]	; (80036cc <osKernelStart+0x64>)
 80036ac:	2202      	movs	r2, #2
 80036ae:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80036b0:	f001 f93c 	bl	800492c <vTaskStartScheduler>
      stat = osOK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	e002      	b.n	80036c0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80036ba:	f04f 33ff 	mov.w	r3, #4294967295
 80036be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80036c0:	68fb      	ldr	r3, [r7, #12]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	200001b0 	.word	0x200001b0

080036d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b092      	sub	sp, #72	; 0x48
 80036d4:	af04      	add	r7, sp, #16
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036e0:	f3ef 8305 	mrs	r3, IPSR
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f040 8094 	bne.w	8003816 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ee:	f3ef 8310 	mrs	r3, PRIMASK
 80036f2:	623b      	str	r3, [r7, #32]
  return(result);
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f040 808d 	bne.w	8003816 <osThreadNew+0x146>
 80036fc:	4b48      	ldr	r3, [pc, #288]	; (8003820 <osThreadNew+0x150>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d106      	bne.n	8003712 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003704:	f3ef 8311 	mrs	r3, BASEPRI
 8003708:	61fb      	str	r3, [r7, #28]
  return(result);
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	2b00      	cmp	r3, #0
 800370e:	f040 8082 	bne.w	8003816 <osThreadNew+0x146>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d07e      	beq.n	8003816 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003718:	2380      	movs	r3, #128	; 0x80
 800371a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800371c:	2318      	movs	r3, #24
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003720:	2300      	movs	r3, #0
 8003722:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003724:	f107 031b 	add.w	r3, r7, #27
 8003728:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800372a:	f04f 33ff 	mov.w	r3, #4294967295
 800372e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d045      	beq.n	80037c2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <osThreadNew+0x74>
        name = attr->name;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <osThreadNew+0x9a>
 8003758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375a:	2b38      	cmp	r3, #56	; 0x38
 800375c:	d805      	bhi.n	800376a <osThreadNew+0x9a>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <osThreadNew+0x9e>
        return (NULL);
 800376a:	2300      	movs	r3, #0
 800376c:	e054      	b.n	8003818 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	089b      	lsrs	r3, r3, #2
 800377c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00e      	beq.n	80037a4 <osThreadNew+0xd4>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	2b5b      	cmp	r3, #91	; 0x5b
 800378c:	d90a      	bls.n	80037a4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003792:	2b00      	cmp	r3, #0
 8003794:	d006      	beq.n	80037a4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <osThreadNew+0xd4>
        mem = 1;
 800379e:	2301      	movs	r3, #1
 80037a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037a2:	e010      	b.n	80037c6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10c      	bne.n	80037c6 <osThreadNew+0xf6>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d108      	bne.n	80037c6 <osThreadNew+0xf6>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d104      	bne.n	80037c6 <osThreadNew+0xf6>
          mem = 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28
 80037c0:	e001      	b.n	80037c6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d110      	bne.n	80037ee <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037d4:	9202      	str	r2, [sp, #8]
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 fed6 	bl	8004594 <xTaskCreateStatic>
 80037e8:	4603      	mov	r3, r0
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	e013      	b.n	8003816 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d110      	bne.n	8003816 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	f107 0314 	add.w	r3, r7, #20
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 ff20 	bl	800464c <xTaskCreate>
 800380c:	4603      	mov	r3, r0
 800380e:	2b01      	cmp	r3, #1
 8003810:	d001      	beq.n	8003816 <osThreadNew+0x146>
          hTask = NULL;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003816:	697b      	ldr	r3, [r7, #20]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3738      	adds	r7, #56	; 0x38
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	200001b0 	.word	0x200001b0

08003824 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800382c:	f3ef 8305 	mrs	r3, IPSR
 8003830:	613b      	str	r3, [r7, #16]
  return(result);
 8003832:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10f      	bne.n	8003858 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003838:	f3ef 8310 	mrs	r3, PRIMASK
 800383c:	60fb      	str	r3, [r7, #12]
  return(result);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d109      	bne.n	8003858 <osDelay+0x34>
 8003844:	4b0d      	ldr	r3, [pc, #52]	; (800387c <osDelay+0x58>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d109      	bne.n	8003860 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800384c:	f3ef 8311 	mrs	r3, BASEPRI
 8003850:	60bb      	str	r3, [r7, #8]
  return(result);
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <osDelay+0x3c>
    stat = osErrorISR;
 8003858:	f06f 0305 	mvn.w	r3, #5
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	e007      	b.n	8003870 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <osDelay+0x4c>
      vTaskDelay(ticks);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f001 f82a 	bl	80048c4 <vTaskDelay>
    }
  }

  return (stat);
 8003870:	697b      	ldr	r3, [r7, #20]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	200001b0 	.word	0x200001b0

08003880 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003880:	b580      	push	{r7, lr}
 8003882:	b08c      	sub	sp, #48	; 0x30
 8003884:	af02      	add	r7, sp, #8
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800388c:	2300      	movs	r3, #0
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003890:	f3ef 8305 	mrs	r3, IPSR
 8003894:	61bb      	str	r3, [r7, #24]
  return(result);
 8003896:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003898:	2b00      	cmp	r3, #0
 800389a:	d16f      	bne.n	800397c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800389c:	f3ef 8310 	mrs	r3, PRIMASK
 80038a0:	617b      	str	r3, [r7, #20]
  return(result);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d169      	bne.n	800397c <osMessageQueueNew+0xfc>
 80038a8:	4b37      	ldr	r3, [pc, #220]	; (8003988 <osMessageQueueNew+0x108>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d105      	bne.n	80038bc <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038b0:	f3ef 8311 	mrs	r3, BASEPRI
 80038b4:	613b      	str	r3, [r7, #16]
  return(result);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d15f      	bne.n	800397c <osMessageQueueNew+0xfc>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d05c      	beq.n	800397c <osMessageQueueNew+0xfc>
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d059      	beq.n	800397c <osMessageQueueNew+0xfc>
    mem = -1;
 80038c8:	f04f 33ff 	mov.w	r3, #4294967295
 80038cc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d029      	beq.n	8003928 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d012      	beq.n	8003902 <osMessageQueueNew+0x82>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	2b4f      	cmp	r3, #79	; 0x4f
 80038e2:	d90e      	bls.n	8003902 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	fb01 f303 	mul.w	r3, r1, r3
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d302      	bcc.n	8003902 <osMessageQueueNew+0x82>
        mem = 1;
 80038fc:	2301      	movs	r3, #1
 80038fe:	623b      	str	r3, [r7, #32]
 8003900:	e014      	b.n	800392c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d110      	bne.n	800392c <osMessageQueueNew+0xac>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10c      	bne.n	800392c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003916:	2b00      	cmp	r3, #0
 8003918:	d108      	bne.n	800392c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d104      	bne.n	800392c <osMessageQueueNew+0xac>
          mem = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	623b      	str	r3, [r7, #32]
 8003926:	e001      	b.n	800392c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d10b      	bne.n	800394a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2100      	movs	r1, #0
 800393c:	9100      	str	r1, [sp, #0]
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f96d 	bl	8003c20 <xQueueGenericCreateStatic>
 8003946:	6278      	str	r0, [r7, #36]	; 0x24
 8003948:	e008      	b.n	800395c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d105      	bne.n	800395c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003950:	2200      	movs	r2, #0
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f9da 	bl	8003d0e <xQueueGenericCreate>
 800395a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00c      	beq.n	800397c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <osMessageQueueNew+0xf0>
        name = attr->name;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	61fb      	str	r3, [r7, #28]
 800396e:	e001      	b.n	8003974 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003974:	69f9      	ldr	r1, [r7, #28]
 8003976:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003978:	f000 fdb0 	bl	80044dc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800397e:	4618      	mov	r0, r3
 8003980:	3728      	adds	r7, #40	; 0x28
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	200001b0 	.word	0x200001b0

0800398c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4a06      	ldr	r2, [pc, #24]	; (80039b4 <vApplicationGetIdleTaskMemory+0x28>)
 800399c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	4a05      	ldr	r2, [pc, #20]	; (80039b8 <vApplicationGetIdleTaskMemory+0x2c>)
 80039a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2280      	movs	r2, #128	; 0x80
 80039a8:	601a      	str	r2, [r3, #0]
}
 80039aa:	bf00      	nop
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr
 80039b4:	200001b4 	.word	0x200001b4
 80039b8:	20000210 	.word	0x20000210

080039bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4a07      	ldr	r2, [pc, #28]	; (80039e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80039cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	4a06      	ldr	r2, [pc, #24]	; (80039ec <vApplicationGetTimerTaskMemory+0x30>)
 80039d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039da:	601a      	str	r2, [r3, #0]
}
 80039dc:	bf00      	nop
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	20000410 	.word	0x20000410
 80039ec:	2000046c 	.word	0x2000046c

080039f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f103 0208 	add.w	r2, r3, #8
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f04f 32ff 	mov.w	r2, #4294967295
 8003a08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f103 0208 	add.w	r2, r3, #8
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f103 0208 	add.w	r2, r3, #8
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr

08003a2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a46:	b480      	push	{r7}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	601a      	str	r2, [r3, #0]
}
 8003a82:	bf00      	nop
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr

08003a8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa2:	d103      	bne.n	8003aac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	e00c      	b.n	8003ac6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3308      	adds	r3, #8
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	e002      	b.n	8003aba <vListInsert+0x2e>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d2f6      	bcs.n	8003ab4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	601a      	str	r2, [r3, #0]
}
 8003af2:	bf00      	nop
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr

08003afc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6892      	ldr	r2, [r2, #8]
 8003b12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6852      	ldr	r2, [r2, #4]
 8003b1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d103      	bne.n	8003b30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	1e5a      	subs	r2, r3, #1
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr
	...

08003b50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10a      	bne.n	8003b7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b76:	bf00      	nop
 8003b78:	e7fe      	b.n	8003b78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003b7a:	f002 f807 	bl	8005b8c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b86:	68f9      	ldr	r1, [r7, #12]
 8003b88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b8a:	fb01 f303 	mul.w	r3, r1, r3
 8003b8e:	441a      	add	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	3b01      	subs	r3, #1
 8003bac:	68f9      	ldr	r1, [r7, #12]
 8003bae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	441a      	add	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	22ff      	movs	r2, #255	; 0xff
 8003bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	22ff      	movs	r2, #255	; 0xff
 8003bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d114      	bne.n	8003bfa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d01a      	beq.n	8003c0e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3310      	adds	r3, #16
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f001 f92f 	bl	8004e40 <xTaskRemoveFromEventList>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d012      	beq.n	8003c0e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003be8:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <xQueueGenericReset+0xcc>)
 8003bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	e009      	b.n	8003c0e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	3310      	adds	r3, #16
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fef6 	bl	80039f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	3324      	adds	r3, #36	; 0x24
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff fef1 	bl	80039f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c0e:	f001 ffed 	bl	8005bec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c12:	2301      	movs	r3, #1
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	e000ed04 	.word	0xe000ed04

08003c20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08e      	sub	sp, #56	; 0x38
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c46:	bf00      	nop
 8003c48:	e7fe      	b.n	8003c48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10a      	bne.n	8003c66 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c62:	bf00      	nop
 8003c64:	e7fe      	b.n	8003c64 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <xQueueGenericCreateStatic+0x52>
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <xQueueGenericCreateStatic+0x56>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <xQueueGenericCreateStatic+0x58>
 8003c76:	2300      	movs	r3, #0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10a      	bne.n	8003c92 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	623b      	str	r3, [r7, #32]
}
 8003c8e:	bf00      	nop
 8003c90:	e7fe      	b.n	8003c90 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d102      	bne.n	8003c9e <xQueueGenericCreateStatic+0x7e>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <xQueueGenericCreateStatic+0x82>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <xQueueGenericCreateStatic+0x84>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	f3bf 8f6f 	isb	sy
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	61fb      	str	r3, [r7, #28]
}
 8003cba:	bf00      	nop
 8003cbc:	e7fe      	b.n	8003cbc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003cbe:	2350      	movs	r3, #80	; 0x50
 8003cc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b50      	cmp	r3, #80	; 0x50
 8003cc6:	d00a      	beq.n	8003cde <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ccc:	f383 8811 	msr	BASEPRI, r3
 8003cd0:	f3bf 8f6f 	isb	sy
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	61bb      	str	r3, [r7, #24]
}
 8003cda:	bf00      	nop
 8003cdc:	e7fe      	b.n	8003cdc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00d      	beq.n	8003d04 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003cf0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f843 	bl	8003d8a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3730      	adds	r7, #48	; 0x30
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b08a      	sub	sp, #40	; 0x28
 8003d12:	af02      	add	r7, sp, #8
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10a      	bne.n	8003d38 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	613b      	str	r3, [r7, #16]
}
 8003d34:	bf00      	nop
 8003d36:	e7fe      	b.n	8003d36 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d102      	bne.n	8003d44 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61fb      	str	r3, [r7, #28]
 8003d42:	e004      	b.n	8003d4e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	fb02 f303 	mul.w	r3, r2, r3
 8003d4c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	3350      	adds	r3, #80	; 0x50
 8003d52:	4618      	mov	r0, r3
 8003d54:	f002 f81a 	bl	8005d8c <pvPortMalloc>
 8003d58:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00f      	beq.n	8003d80 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	3350      	adds	r3, #80	; 0x50
 8003d64:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d6e:	79fa      	ldrb	r2, [r7, #7]
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	4613      	mov	r3, r2
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	68b9      	ldr	r1, [r7, #8]
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 f805 	bl	8003d8a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003d80:	69bb      	ldr	r3, [r7, #24]
	}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3720      	adds	r7, #32
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	607a      	str	r2, [r7, #4]
 8003d96:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d103      	bne.n	8003da6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	e002      	b.n	8003dac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003db8:	2101      	movs	r1, #1
 8003dba:	69b8      	ldr	r0, [r7, #24]
 8003dbc:	f7ff fec8 	bl	8003b50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	78fa      	ldrb	r2, [r7, #3]
 8003dc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003dc8:	bf00      	nop
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08e      	sub	sp, #56	; 0x38
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003dde:	2300      	movs	r3, #0
 8003de0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <xQueueGenericSend+0x32>
	__asm volatile
 8003dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003dfe:	bf00      	nop
 8003e00:	e7fe      	b.n	8003e00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d103      	bne.n	8003e10 <xQueueGenericSend+0x40>
 8003e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <xQueueGenericSend+0x44>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <xQueueGenericSend+0x46>
 8003e14:	2300      	movs	r3, #0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10a      	bne.n	8003e30 <xQueueGenericSend+0x60>
	__asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e2c:	bf00      	nop
 8003e2e:	e7fe      	b.n	8003e2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d103      	bne.n	8003e3e <xQueueGenericSend+0x6e>
 8003e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <xQueueGenericSend+0x72>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <xQueueGenericSend+0x74>
 8003e42:	2300      	movs	r3, #0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10a      	bne.n	8003e5e <xQueueGenericSend+0x8e>
	__asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	623b      	str	r3, [r7, #32]
}
 8003e5a:	bf00      	nop
 8003e5c:	e7fe      	b.n	8003e5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e5e:	f001 f9b1 	bl	80051c4 <xTaskGetSchedulerState>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d102      	bne.n	8003e6e <xQueueGenericSend+0x9e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <xQueueGenericSend+0xa2>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <xQueueGenericSend+0xa4>
 8003e72:	2300      	movs	r3, #0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10a      	bne.n	8003e8e <xQueueGenericSend+0xbe>
	__asm volatile
 8003e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	61fb      	str	r3, [r7, #28]
}
 8003e8a:	bf00      	nop
 8003e8c:	e7fe      	b.n	8003e8c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e8e:	f001 fe7d 	bl	8005b8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d302      	bcc.n	8003ea4 <xQueueGenericSend+0xd4>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d129      	bne.n	8003ef8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	68b9      	ldr	r1, [r7, #8]
 8003ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eaa:	f000 fa07 	bl	80042bc <prvCopyDataToQueue>
 8003eae:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d010      	beq.n	8003eda <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eba:	3324      	adds	r3, #36	; 0x24
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 ffbf 	bl	8004e40 <xTaskRemoveFromEventList>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d013      	beq.n	8003ef0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ec8:	4b3f      	ldr	r3, [pc, #252]	; (8003fc8 <xQueueGenericSend+0x1f8>)
 8003eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	e00a      	b.n	8003ef0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d007      	beq.n	8003ef0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ee0:	4b39      	ldr	r3, [pc, #228]	; (8003fc8 <xQueueGenericSend+0x1f8>)
 8003ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ef0:	f001 fe7c 	bl	8005bec <vPortExitCritical>
				return pdPASS;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e063      	b.n	8003fc0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d103      	bne.n	8003f06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003efe:	f001 fe75 	bl	8005bec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	e05c      	b.n	8003fc0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d106      	bne.n	8003f1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f0c:	f107 0314 	add.w	r3, r7, #20
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fff9 	bl	8004f08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f16:	2301      	movs	r3, #1
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f1a:	f001 fe67 	bl	8005bec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f1e:	f000 fd6b 	bl	80049f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f22:	f001 fe33 	bl	8005b8c <vPortEnterCritical>
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f2c:	b25b      	sxtb	r3, r3
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f32:	d103      	bne.n	8003f3c <xQueueGenericSend+0x16c>
 8003f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f42:	b25b      	sxtb	r3, r3
 8003f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f48:	d103      	bne.n	8003f52 <xQueueGenericSend+0x182>
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f52:	f001 fe4b 	bl	8005bec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f56:	1d3a      	adds	r2, r7, #4
 8003f58:	f107 0314 	add.w	r3, r7, #20
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 ffe8 	bl	8004f34 <xTaskCheckForTimeOut>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d124      	bne.n	8003fb4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f6c:	f000 fa9e 	bl	80044ac <prvIsQueueFull>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d018      	beq.n	8003fa8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f78:	3310      	adds	r3, #16
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 ff0e 	bl	8004da0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f86:	f000 fa29 	bl	80043dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f8a:	f000 fd43 	bl	8004a14 <xTaskResumeAll>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f47f af7c 	bne.w	8003e8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003f96:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <xQueueGenericSend+0x1f8>)
 8003f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	e772      	b.n	8003e8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003faa:	f000 fa17 	bl	80043dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fae:	f000 fd31 	bl	8004a14 <xTaskResumeAll>
 8003fb2:	e76c      	b.n	8003e8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fb6:	f000 fa11 	bl	80043dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fba:	f000 fd2b 	bl	8004a14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003fbe:	2300      	movs	r3, #0
		}
	}
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3738      	adds	r7, #56	; 0x38
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	e000ed04 	.word	0xe000ed04

08003fcc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08e      	sub	sp, #56	; 0x38
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10a      	bne.n	8003ffa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ff6:	bf00      	nop
 8003ff8:	e7fe      	b.n	8003ff8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d103      	bne.n	8004008 <xQueueGenericSendFromISR+0x3c>
 8004000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <xQueueGenericSendFromISR+0x40>
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <xQueueGenericSendFromISR+0x42>
 800400c:	2300      	movs	r3, #0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10a      	bne.n	8004028 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	623b      	str	r3, [r7, #32]
}
 8004024:	bf00      	nop
 8004026:	e7fe      	b.n	8004026 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d103      	bne.n	8004036 <xQueueGenericSendFromISR+0x6a>
 800402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <xQueueGenericSendFromISR+0x6e>
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <xQueueGenericSendFromISR+0x70>
 800403a:	2300      	movs	r3, #0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	61fb      	str	r3, [r7, #28]
}
 8004052:	bf00      	nop
 8004054:	e7fe      	b.n	8004054 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004056:	f001 fe5b 	bl	8005d10 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800405a:	f3ef 8211 	mrs	r2, BASEPRI
 800405e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	61ba      	str	r2, [r7, #24]
 8004070:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004072:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004074:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800407a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407e:	429a      	cmp	r2, r3
 8004080:	d302      	bcc.n	8004088 <xQueueGenericSendFromISR+0xbc>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d12c      	bne.n	80040e2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800408e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	68b9      	ldr	r1, [r7, #8]
 8004096:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004098:	f000 f910 	bl	80042bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800409c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a4:	d112      	bne.n	80040cc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d016      	beq.n	80040dc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b0:	3324      	adds	r3, #36	; 0x24
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fec4 	bl	8004e40 <xTaskRemoveFromEventList>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00e      	beq.n	80040dc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00b      	beq.n	80040dc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	e007      	b.n	80040dc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80040cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040d0:	3301      	adds	r3, #1
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	b25a      	sxtb	r2, r3
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80040dc:	2301      	movs	r3, #1
 80040de:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80040e0:	e001      	b.n	80040e6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	637b      	str	r3, [r7, #52]	; 0x34
 80040e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80040f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3738      	adds	r7, #56	; 0x38
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08c      	sub	sp, #48	; 0x30
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004108:	2300      	movs	r3, #0
 800410a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <xQueueReceive+0x30>
	__asm volatile
 8004116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	623b      	str	r3, [r7, #32]
}
 8004128:	bf00      	nop
 800412a:	e7fe      	b.n	800412a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d103      	bne.n	800413a <xQueueReceive+0x3e>
 8004132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <xQueueReceive+0x42>
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <xQueueReceive+0x44>
 800413e:	2300      	movs	r3, #0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10a      	bne.n	800415a <xQueueReceive+0x5e>
	__asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	61fb      	str	r3, [r7, #28]
}
 8004156:	bf00      	nop
 8004158:	e7fe      	b.n	8004158 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800415a:	f001 f833 	bl	80051c4 <xTaskGetSchedulerState>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d102      	bne.n	800416a <xQueueReceive+0x6e>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <xQueueReceive+0x72>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <xQueueReceive+0x74>
 800416e:	2300      	movs	r3, #0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <xQueueReceive+0x8e>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	61bb      	str	r3, [r7, #24]
}
 8004186:	bf00      	nop
 8004188:	e7fe      	b.n	8004188 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800418a:	f001 fcff 	bl	8005b8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004192:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	2b00      	cmp	r3, #0
 8004198:	d01f      	beq.n	80041da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800419a:	68b9      	ldr	r1, [r7, #8]
 800419c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800419e:	f000 f8f7 	bl	8004390 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	1e5a      	subs	r2, r3, #1
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00f      	beq.n	80041d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b4:	3310      	adds	r3, #16
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fe42 	bl	8004e40 <xTaskRemoveFromEventList>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d007      	beq.n	80041d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80041c2:	4b3d      	ldr	r3, [pc, #244]	; (80042b8 <xQueueReceive+0x1bc>)
 80041c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80041d2:	f001 fd0b 	bl	8005bec <vPortExitCritical>
				return pdPASS;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e069      	b.n	80042ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d103      	bne.n	80041e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041e0:	f001 fd04 	bl	8005bec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80041e4:	2300      	movs	r3, #0
 80041e6:	e062      	b.n	80042ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041ee:	f107 0310 	add.w	r3, r7, #16
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fe88 	bl	8004f08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041f8:	2301      	movs	r3, #1
 80041fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041fc:	f001 fcf6 	bl	8005bec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004200:	f000 fbfa 	bl	80049f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004204:	f001 fcc2 	bl	8005b8c <vPortEnterCritical>
 8004208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800420e:	b25b      	sxtb	r3, r3
 8004210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004214:	d103      	bne.n	800421e <xQueueReceive+0x122>
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004224:	b25b      	sxtb	r3, r3
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422a:	d103      	bne.n	8004234 <xQueueReceive+0x138>
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004234:	f001 fcda 	bl	8005bec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004238:	1d3a      	adds	r2, r7, #4
 800423a:	f107 0310 	add.w	r3, r7, #16
 800423e:	4611      	mov	r1, r2
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fe77 	bl	8004f34 <xTaskCheckForTimeOut>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d123      	bne.n	8004294 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800424c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800424e:	f000 f917 	bl	8004480 <prvIsQueueEmpty>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d017      	beq.n	8004288 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425a:	3324      	adds	r3, #36	; 0x24
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	4611      	mov	r1, r2
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fd9d 	bl	8004da0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004268:	f000 f8b8 	bl	80043dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800426c:	f000 fbd2 	bl	8004a14 <xTaskResumeAll>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d189      	bne.n	800418a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004276:	4b10      	ldr	r3, [pc, #64]	; (80042b8 <xQueueReceive+0x1bc>)
 8004278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	e780      	b.n	800418a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800428a:	f000 f8a7 	bl	80043dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800428e:	f000 fbc1 	bl	8004a14 <xTaskResumeAll>
 8004292:	e77a      	b.n	800418a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004296:	f000 f8a1 	bl	80043dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800429a:	f000 fbbb 	bl	8004a14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800429e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042a0:	f000 f8ee 	bl	8004480 <prvIsQueueEmpty>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f43f af6f 	beq.w	800418a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80042ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3730      	adds	r7, #48	; 0x30
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	e000ed04 	.word	0xe000ed04

080042bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10d      	bne.n	80042f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d14d      	bne.n	800437e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 ff8a 	bl	8005200 <xTaskPriorityDisinherit>
 80042ec:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	605a      	str	r2, [r3, #4]
 80042f4:	e043      	b.n	800437e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d119      	bne.n	8004330 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6898      	ldr	r0, [r3, #8]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	461a      	mov	r2, r3
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	f001 ff42 	bl	8006190 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	441a      	add	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	429a      	cmp	r2, r3
 8004324:	d32b      	bcc.n	800437e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	609a      	str	r2, [r3, #8]
 800432e:	e026      	b.n	800437e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	68d8      	ldr	r0, [r3, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	461a      	mov	r2, r3
 800433a:	68b9      	ldr	r1, [r7, #8]
 800433c:	f001 ff28 	bl	8006190 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	425b      	negs	r3, r3
 800434a:	441a      	add	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d207      	bcs.n	800436c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	425b      	negs	r3, r3
 8004366:	441a      	add	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b02      	cmp	r3, #2
 8004370:	d105      	bne.n	800437e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	3b01      	subs	r3, #1
 800437c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004386:	697b      	ldr	r3, [r7, #20]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d018      	beq.n	80043d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	441a      	add	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d303      	bcc.n	80043c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68d9      	ldr	r1, [r3, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	461a      	mov	r2, r3
 80043ce:	6838      	ldr	r0, [r7, #0]
 80043d0:	f001 fede 	bl	8006190 <memcpy>
	}
}
 80043d4:	bf00      	nop
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80043e4:	f001 fbd2 	bl	8005b8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043f0:	e011      	b.n	8004416 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d012      	beq.n	8004420 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3324      	adds	r3, #36	; 0x24
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fd1e 	bl	8004e40 <xTaskRemoveFromEventList>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800440a:	f000 fdf5 	bl	8004ff8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	3b01      	subs	r3, #1
 8004412:	b2db      	uxtb	r3, r3
 8004414:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800441a:	2b00      	cmp	r3, #0
 800441c:	dce9      	bgt.n	80043f2 <prvUnlockQueue+0x16>
 800441e:	e000      	b.n	8004422 <prvUnlockQueue+0x46>
					break;
 8004420:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	22ff      	movs	r2, #255	; 0xff
 8004426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800442a:	f001 fbdf 	bl	8005bec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800442e:	f001 fbad 	bl	8005b8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004438:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800443a:	e011      	b.n	8004460 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d012      	beq.n	800446a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3310      	adds	r3, #16
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fcf9 	bl	8004e40 <xTaskRemoveFromEventList>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004454:	f000 fdd0 	bl	8004ff8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004458:	7bbb      	ldrb	r3, [r7, #14]
 800445a:	3b01      	subs	r3, #1
 800445c:	b2db      	uxtb	r3, r3
 800445e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004460:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004464:	2b00      	cmp	r3, #0
 8004466:	dce9      	bgt.n	800443c <prvUnlockQueue+0x60>
 8004468:	e000      	b.n	800446c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800446a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	22ff      	movs	r2, #255	; 0xff
 8004470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004474:	f001 fbba 	bl	8005bec <vPortExitCritical>
}
 8004478:	bf00      	nop
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004488:	f001 fb80 	bl	8005b8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	2b00      	cmp	r3, #0
 8004492:	d102      	bne.n	800449a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004494:	2301      	movs	r3, #1
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	e001      	b.n	800449e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800449e:	f001 fba5 	bl	8005bec <vPortExitCritical>

	return xReturn;
 80044a2:	68fb      	ldr	r3, [r7, #12]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044b4:	f001 fb6a 	bl	8005b8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d102      	bne.n	80044ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80044c4:	2301      	movs	r3, #1
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	e001      	b.n	80044ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044ce:	f001 fb8d 	bl	8005bec <vPortExitCritical>

	return xReturn;
 80044d2:	68fb      	ldr	r3, [r7, #12]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	e014      	b.n	8004516 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80044ec:	4a0e      	ldr	r2, [pc, #56]	; (8004528 <vQueueAddToRegistry+0x4c>)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10b      	bne.n	8004510 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80044f8:	490b      	ldr	r1, [pc, #44]	; (8004528 <vQueueAddToRegistry+0x4c>)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004502:	4a09      	ldr	r2, [pc, #36]	; (8004528 <vQueueAddToRegistry+0x4c>)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4413      	add	r3, r2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800450e:	e006      	b.n	800451e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3301      	adds	r3, #1
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b07      	cmp	r3, #7
 800451a:	d9e7      	bls.n	80044ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr
 8004528:	2000086c 	.word	0x2000086c

0800452c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800453c:	f001 fb26 	bl	8005b8c <vPortEnterCritical>
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004546:	b25b      	sxtb	r3, r3
 8004548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454c:	d103      	bne.n	8004556 <vQueueWaitForMessageRestricted+0x2a>
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800455c:	b25b      	sxtb	r3, r3
 800455e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004562:	d103      	bne.n	800456c <vQueueWaitForMessageRestricted+0x40>
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800456c:	f001 fb3e 	bl	8005bec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004574:	2b00      	cmp	r3, #0
 8004576:	d106      	bne.n	8004586 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	3324      	adds	r3, #36	; 0x24
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fc31 	bl	8004de8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004586:	6978      	ldr	r0, [r7, #20]
 8004588:	f7ff ff28 	bl	80043dc <prvUnlockQueue>
	}
 800458c:	bf00      	nop
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08e      	sub	sp, #56	; 0x38
 8004598:	af04      	add	r7, sp, #16
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10a      	bne.n	80045be <xTaskCreateStatic+0x2a>
	__asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	623b      	str	r3, [r7, #32]
}
 80045ba:	bf00      	nop
 80045bc:	e7fe      	b.n	80045bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80045be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10a      	bne.n	80045da <xTaskCreateStatic+0x46>
	__asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	61fb      	str	r3, [r7, #28]
}
 80045d6:	bf00      	nop
 80045d8:	e7fe      	b.n	80045d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80045da:	235c      	movs	r3, #92	; 0x5c
 80045dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	2b5c      	cmp	r3, #92	; 0x5c
 80045e2:	d00a      	beq.n	80045fa <xTaskCreateStatic+0x66>
	__asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	61bb      	str	r3, [r7, #24]
}
 80045f6:	bf00      	nop
 80045f8:	e7fe      	b.n	80045f8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80045fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d01e      	beq.n	800463e <xTaskCreateStatic+0xaa>
 8004600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004602:	2b00      	cmp	r3, #0
 8004604:	d01b      	beq.n	800463e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800460e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	2202      	movs	r2, #2
 8004614:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004618:	2300      	movs	r3, #0
 800461a:	9303      	str	r3, [sp, #12]
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	9302      	str	r3, [sp, #8]
 8004620:	f107 0314 	add.w	r3, r7, #20
 8004624:	9301      	str	r3, [sp, #4]
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f850 	bl	80046d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004636:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004638:	f000 f8d4 	bl	80047e4 <prvAddNewTaskToReadyList>
 800463c:	e001      	b.n	8004642 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004642:	697b      	ldr	r3, [r7, #20]
	}
 8004644:	4618      	mov	r0, r3
 8004646:	3728      	adds	r7, #40	; 0x28
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08c      	sub	sp, #48	; 0x30
 8004650:	af04      	add	r7, sp, #16
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	4613      	mov	r3, r2
 800465a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4618      	mov	r0, r3
 8004662:	f001 fb93 	bl	8005d8c <pvPortMalloc>
 8004666:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00e      	beq.n	800468c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800466e:	205c      	movs	r0, #92	; 0x5c
 8004670:	f001 fb8c 	bl	8005d8c <pvPortMalloc>
 8004674:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	631a      	str	r2, [r3, #48]	; 0x30
 8004682:	e005      	b.n	8004690 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004684:	6978      	ldr	r0, [r7, #20]
 8004686:	f001 fc45 	bl	8005f14 <vPortFree>
 800468a:	e001      	b.n	8004690 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800468c:	2300      	movs	r3, #0
 800468e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d017      	beq.n	80046c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800469e:	88fa      	ldrh	r2, [r7, #6]
 80046a0:	2300      	movs	r3, #0
 80046a2:	9303      	str	r3, [sp, #12]
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	9302      	str	r3, [sp, #8]
 80046a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046aa:	9301      	str	r3, [sp, #4]
 80046ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f80e 	bl	80046d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046ba:	69f8      	ldr	r0, [r7, #28]
 80046bc:	f000 f892 	bl	80047e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046c0:	2301      	movs	r3, #1
 80046c2:	61bb      	str	r3, [r7, #24]
 80046c4:	e002      	b.n	80046cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046c6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046cc:	69bb      	ldr	r3, [r7, #24]
	}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3720      	adds	r7, #32
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b088      	sub	sp, #32
 80046da:	af00      	add	r7, sp, #0
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	607a      	str	r2, [r7, #4]
 80046e2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	461a      	mov	r2, r3
 80046ee:	21a5      	movs	r1, #165	; 0xa5
 80046f0:	f001 fd5c 	bl	80061ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80046f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046fe:	3b01      	subs	r3, #1
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	f023 0307 	bic.w	r3, r3, #7
 800470c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <prvInitialiseNewTask+0x58>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	617b      	str	r3, [r7, #20]
}
 800472a:	bf00      	nop
 800472c:	e7fe      	b.n	800472c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	e012      	b.n	800475a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	4413      	add	r3, r2
 800473a:	7819      	ldrb	r1, [r3, #0]
 800473c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	4413      	add	r3, r2
 8004742:	3334      	adds	r3, #52	; 0x34
 8004744:	460a      	mov	r2, r1
 8004746:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	4413      	add	r3, r2
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d006      	beq.n	8004762 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	3301      	adds	r3, #1
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	2b0f      	cmp	r3, #15
 800475e:	d9e9      	bls.n	8004734 <prvInitialiseNewTask+0x5e>
 8004760:	e000      	b.n	8004764 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004762:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800476c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476e:	2b37      	cmp	r3, #55	; 0x37
 8004770:	d901      	bls.n	8004776 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004772:	2337      	movs	r3, #55	; 0x37
 8004774:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800477a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004780:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	2200      	movs	r2, #0
 8004786:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478a:	3304      	adds	r3, #4
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff f94e 	bl	8003a2e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004794:	3318      	adds	r3, #24
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff f949 	bl	8003a2e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800479c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	2200      	movs	r2, #0
 80047b6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	68f9      	ldr	r1, [r7, #12]
 80047c4:	69b8      	ldr	r0, [r7, #24]
 80047c6:	f001 f8ef 	bl	80059a8 <pxPortInitialiseStack>
 80047ca:	4602      	mov	r2, r0
 80047cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ce:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80047d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047dc:	bf00      	nop
 80047de:	3720      	adds	r7, #32
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047ec:	f001 f9ce 	bl	8005b8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80047f0:	4b2d      	ldr	r3, [pc, #180]	; (80048a8 <prvAddNewTaskToReadyList+0xc4>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3301      	adds	r3, #1
 80047f6:	4a2c      	ldr	r2, [pc, #176]	; (80048a8 <prvAddNewTaskToReadyList+0xc4>)
 80047f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80047fa:	4b2c      	ldr	r3, [pc, #176]	; (80048ac <prvAddNewTaskToReadyList+0xc8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d109      	bne.n	8004816 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004802:	4a2a      	ldr	r2, [pc, #168]	; (80048ac <prvAddNewTaskToReadyList+0xc8>)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004808:	4b27      	ldr	r3, [pc, #156]	; (80048a8 <prvAddNewTaskToReadyList+0xc4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d110      	bne.n	8004832 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004810:	f000 fc16 	bl	8005040 <prvInitialiseTaskLists>
 8004814:	e00d      	b.n	8004832 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004816:	4b26      	ldr	r3, [pc, #152]	; (80048b0 <prvAddNewTaskToReadyList+0xcc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800481e:	4b23      	ldr	r3, [pc, #140]	; (80048ac <prvAddNewTaskToReadyList+0xc8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	429a      	cmp	r2, r3
 800482a:	d802      	bhi.n	8004832 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800482c:	4a1f      	ldr	r2, [pc, #124]	; (80048ac <prvAddNewTaskToReadyList+0xc8>)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004832:	4b20      	ldr	r3, [pc, #128]	; (80048b4 <prvAddNewTaskToReadyList+0xd0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3301      	adds	r3, #1
 8004838:	4a1e      	ldr	r2, [pc, #120]	; (80048b4 <prvAddNewTaskToReadyList+0xd0>)
 800483a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800483c:	4b1d      	ldr	r3, [pc, #116]	; (80048b4 <prvAddNewTaskToReadyList+0xd0>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004848:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <prvAddNewTaskToReadyList+0xd4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d903      	bls.n	8004858 <prvAddNewTaskToReadyList+0x74>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	4a18      	ldr	r2, [pc, #96]	; (80048b8 <prvAddNewTaskToReadyList+0xd4>)
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4a15      	ldr	r2, [pc, #84]	; (80048bc <prvAddNewTaskToReadyList+0xd8>)
 8004866:	441a      	add	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3304      	adds	r3, #4
 800486c:	4619      	mov	r1, r3
 800486e:	4610      	mov	r0, r2
 8004870:	f7ff f8e9 	bl	8003a46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004874:	f001 f9ba 	bl	8005bec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004878:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <prvAddNewTaskToReadyList+0xcc>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00e      	beq.n	800489e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004880:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <prvAddNewTaskToReadyList+0xc8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488a:	429a      	cmp	r2, r3
 800488c:	d207      	bcs.n	800489e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800488e:	4b0c      	ldr	r3, [pc, #48]	; (80048c0 <prvAddNewTaskToReadyList+0xdc>)
 8004890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20000d80 	.word	0x20000d80
 80048ac:	200008ac 	.word	0x200008ac
 80048b0:	20000d8c 	.word	0x20000d8c
 80048b4:	20000d9c 	.word	0x20000d9c
 80048b8:	20000d88 	.word	0x20000d88
 80048bc:	200008b0 	.word	0x200008b0
 80048c0:	e000ed04 	.word	0xe000ed04

080048c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d017      	beq.n	8004906 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048d6:	4b13      	ldr	r3, [pc, #76]	; (8004924 <vTaskDelay+0x60>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <vTaskDelay+0x30>
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	60bb      	str	r3, [r7, #8]
}
 80048f0:	bf00      	nop
 80048f2:	e7fe      	b.n	80048f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80048f4:	f000 f880 	bl	80049f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048f8:	2100      	movs	r1, #0
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fcee 	bl	80052dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004900:	f000 f888 	bl	8004a14 <xTaskResumeAll>
 8004904:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d107      	bne.n	800491c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800490c:	4b06      	ldr	r3, [pc, #24]	; (8004928 <vTaskDelay+0x64>)
 800490e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800491c:	bf00      	nop
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	20000da8 	.word	0x20000da8
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08a      	sub	sp, #40	; 0x28
 8004930:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004932:	2300      	movs	r3, #0
 8004934:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004936:	2300      	movs	r3, #0
 8004938:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800493a:	463a      	mov	r2, r7
 800493c:	1d39      	adds	r1, r7, #4
 800493e:	f107 0308 	add.w	r3, r7, #8
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff f822 	bl	800398c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004948:	6839      	ldr	r1, [r7, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	9202      	str	r2, [sp, #8]
 8004950:	9301      	str	r3, [sp, #4]
 8004952:	2300      	movs	r3, #0
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	2300      	movs	r3, #0
 8004958:	460a      	mov	r2, r1
 800495a:	4921      	ldr	r1, [pc, #132]	; (80049e0 <vTaskStartScheduler+0xb4>)
 800495c:	4821      	ldr	r0, [pc, #132]	; (80049e4 <vTaskStartScheduler+0xb8>)
 800495e:	f7ff fe19 	bl	8004594 <xTaskCreateStatic>
 8004962:	4603      	mov	r3, r0
 8004964:	4a20      	ldr	r2, [pc, #128]	; (80049e8 <vTaskStartScheduler+0xbc>)
 8004966:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004968:	4b1f      	ldr	r3, [pc, #124]	; (80049e8 <vTaskStartScheduler+0xbc>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004970:	2301      	movs	r3, #1
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	e001      	b.n	800497a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d102      	bne.n	8004986 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004980:	f000 fd00 	bl	8005384 <xTimerCreateTimerTask>
 8004984:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d116      	bne.n	80049ba <vTaskStartScheduler+0x8e>
	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	613b      	str	r3, [r7, #16]
}
 800499e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049a0:	4b12      	ldr	r3, [pc, #72]	; (80049ec <vTaskStartScheduler+0xc0>)
 80049a2:	f04f 32ff 	mov.w	r2, #4294967295
 80049a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049a8:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <vTaskStartScheduler+0xc4>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80049ae:	4b11      	ldr	r3, [pc, #68]	; (80049f4 <vTaskStartScheduler+0xc8>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049b4:	f001 f878 	bl	8005aa8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049b8:	e00e      	b.n	80049d8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c0:	d10a      	bne.n	80049d8 <vTaskStartScheduler+0xac>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	60fb      	str	r3, [r7, #12]
}
 80049d4:	bf00      	nop
 80049d6:	e7fe      	b.n	80049d6 <vTaskStartScheduler+0xaa>
}
 80049d8:	bf00      	nop
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	08006b58 	.word	0x08006b58
 80049e4:	08005011 	.word	0x08005011
 80049e8:	20000da4 	.word	0x20000da4
 80049ec:	20000da0 	.word	0x20000da0
 80049f0:	20000d8c 	.word	0x20000d8c
 80049f4:	20000d84 	.word	0x20000d84

080049f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80049fc:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <vTaskSuspendAll+0x18>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3301      	adds	r3, #1
 8004a02:	4a03      	ldr	r2, [pc, #12]	; (8004a10 <vTaskSuspendAll+0x18>)
 8004a04:	6013      	str	r3, [r2, #0]
}
 8004a06:	bf00      	nop
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	20000da8 	.word	0x20000da8

08004a14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a22:	4b42      	ldr	r3, [pc, #264]	; (8004b2c <xTaskResumeAll+0x118>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10a      	bne.n	8004a40 <xTaskResumeAll+0x2c>
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	603b      	str	r3, [r7, #0]
}
 8004a3c:	bf00      	nop
 8004a3e:	e7fe      	b.n	8004a3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a40:	f001 f8a4 	bl	8005b8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a44:	4b39      	ldr	r3, [pc, #228]	; (8004b2c <xTaskResumeAll+0x118>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	4a38      	ldr	r2, [pc, #224]	; (8004b2c <xTaskResumeAll+0x118>)
 8004a4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a4e:	4b37      	ldr	r3, [pc, #220]	; (8004b2c <xTaskResumeAll+0x118>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d162      	bne.n	8004b1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a56:	4b36      	ldr	r3, [pc, #216]	; (8004b30 <xTaskResumeAll+0x11c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d05e      	beq.n	8004b1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a5e:	e02f      	b.n	8004ac0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004a60:	4b34      	ldr	r3, [pc, #208]	; (8004b34 <xTaskResumeAll+0x120>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3318      	adds	r3, #24
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff f845 	bl	8003afc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3304      	adds	r3, #4
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff f840 	bl	8003afc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a80:	4b2d      	ldr	r3, [pc, #180]	; (8004b38 <xTaskResumeAll+0x124>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d903      	bls.n	8004a90 <xTaskResumeAll+0x7c>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	4a2a      	ldr	r2, [pc, #168]	; (8004b38 <xTaskResumeAll+0x124>)
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a94:	4613      	mov	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4a27      	ldr	r2, [pc, #156]	; (8004b3c <xTaskResumeAll+0x128>)
 8004a9e:	441a      	add	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	f7fe ffcd 	bl	8003a46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab0:	4b23      	ldr	r3, [pc, #140]	; (8004b40 <xTaskResumeAll+0x12c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d302      	bcc.n	8004ac0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004aba:	4b22      	ldr	r3, [pc, #136]	; (8004b44 <xTaskResumeAll+0x130>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ac0:	4b1c      	ldr	r3, [pc, #112]	; (8004b34 <xTaskResumeAll+0x120>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1cb      	bne.n	8004a60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ace:	f000 fb55 	bl	800517c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ad2:	4b1d      	ldr	r3, [pc, #116]	; (8004b48 <xTaskResumeAll+0x134>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d010      	beq.n	8004b00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ade:	f000 f845 	bl	8004b6c <xTaskIncrementTick>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004ae8:	4b16      	ldr	r3, [pc, #88]	; (8004b44 <xTaskResumeAll+0x130>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3b01      	subs	r3, #1
 8004af2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f1      	bne.n	8004ade <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004afa:	4b13      	ldr	r3, [pc, #76]	; (8004b48 <xTaskResumeAll+0x134>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b00:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <xTaskResumeAll+0x130>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d009      	beq.n	8004b1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b0c:	4b0f      	ldr	r3, [pc, #60]	; (8004b4c <xTaskResumeAll+0x138>)
 8004b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b1c:	f001 f866 	bl	8005bec <vPortExitCritical>

	return xAlreadyYielded;
 8004b20:	68bb      	ldr	r3, [r7, #8]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20000da8 	.word	0x20000da8
 8004b30:	20000d80 	.word	0x20000d80
 8004b34:	20000d40 	.word	0x20000d40
 8004b38:	20000d88 	.word	0x20000d88
 8004b3c:	200008b0 	.word	0x200008b0
 8004b40:	200008ac 	.word	0x200008ac
 8004b44:	20000d94 	.word	0x20000d94
 8004b48:	20000d90 	.word	0x20000d90
 8004b4c:	e000ed04 	.word	0xe000ed04

08004b50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b56:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <xTaskGetTickCount+0x18>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b5c:	687b      	ldr	r3, [r7, #4]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr
 8004b68:	20000d84 	.word	0x20000d84

08004b6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b72:	2300      	movs	r3, #0
 8004b74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b76:	4b51      	ldr	r3, [pc, #324]	; (8004cbc <xTaskIncrementTick+0x150>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f040 808e 	bne.w	8004c9c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b80:	4b4f      	ldr	r3, [pc, #316]	; (8004cc0 <xTaskIncrementTick+0x154>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3301      	adds	r3, #1
 8004b86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b88:	4a4d      	ldr	r2, [pc, #308]	; (8004cc0 <xTaskIncrementTick+0x154>)
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d120      	bne.n	8004bd6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b94:	4b4b      	ldr	r3, [pc, #300]	; (8004cc4 <xTaskIncrementTick+0x158>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <xTaskIncrementTick+0x48>
	__asm volatile
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	603b      	str	r3, [r7, #0]
}
 8004bb0:	bf00      	nop
 8004bb2:	e7fe      	b.n	8004bb2 <xTaskIncrementTick+0x46>
 8004bb4:	4b43      	ldr	r3, [pc, #268]	; (8004cc4 <xTaskIncrementTick+0x158>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	4b43      	ldr	r3, [pc, #268]	; (8004cc8 <xTaskIncrementTick+0x15c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a41      	ldr	r2, [pc, #260]	; (8004cc4 <xTaskIncrementTick+0x158>)
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	4a41      	ldr	r2, [pc, #260]	; (8004cc8 <xTaskIncrementTick+0x15c>)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	4b40      	ldr	r3, [pc, #256]	; (8004ccc <xTaskIncrementTick+0x160>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	4a3f      	ldr	r2, [pc, #252]	; (8004ccc <xTaskIncrementTick+0x160>)
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	f000 fad3 	bl	800517c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bd6:	4b3e      	ldr	r3, [pc, #248]	; (8004cd0 <xTaskIncrementTick+0x164>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d34e      	bcc.n	8004c7e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004be0:	4b38      	ldr	r3, [pc, #224]	; (8004cc4 <xTaskIncrementTick+0x158>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <xTaskIncrementTick+0x82>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <xTaskIncrementTick+0x84>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d004      	beq.n	8004bfe <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bf4:	4b36      	ldr	r3, [pc, #216]	; (8004cd0 <xTaskIncrementTick+0x164>)
 8004bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfa:	601a      	str	r2, [r3, #0]
					break;
 8004bfc:	e03f      	b.n	8004c7e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004bfe:	4b31      	ldr	r3, [pc, #196]	; (8004cc4 <xTaskIncrementTick+0x158>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d203      	bcs.n	8004c1e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c16:	4a2e      	ldr	r2, [pc, #184]	; (8004cd0 <xTaskIncrementTick+0x164>)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6013      	str	r3, [r2, #0]
						break;
 8004c1c:	e02f      	b.n	8004c7e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	3304      	adds	r3, #4
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fe ff6a 	bl	8003afc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d004      	beq.n	8004c3a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	3318      	adds	r3, #24
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7fe ff61 	bl	8003afc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3e:	4b25      	ldr	r3, [pc, #148]	; (8004cd4 <xTaskIncrementTick+0x168>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d903      	bls.n	8004c4e <xTaskIncrementTick+0xe2>
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4a:	4a22      	ldr	r2, [pc, #136]	; (8004cd4 <xTaskIncrementTick+0x168>)
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4a1f      	ldr	r2, [pc, #124]	; (8004cd8 <xTaskIncrementTick+0x16c>)
 8004c5c:	441a      	add	r2, r3
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	3304      	adds	r3, #4
 8004c62:	4619      	mov	r1, r3
 8004c64:	4610      	mov	r0, r2
 8004c66:	f7fe feee 	bl	8003a46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6e:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <xTaskIncrementTick+0x170>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d3b3      	bcc.n	8004be0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c7c:	e7b0      	b.n	8004be0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c7e:	4b17      	ldr	r3, [pc, #92]	; (8004cdc <xTaskIncrementTick+0x170>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c84:	4914      	ldr	r1, [pc, #80]	; (8004cd8 <xTaskIncrementTick+0x16c>)
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	440b      	add	r3, r1
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d907      	bls.n	8004ca6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004c96:	2301      	movs	r3, #1
 8004c98:	617b      	str	r3, [r7, #20]
 8004c9a:	e004      	b.n	8004ca6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004c9c:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <xTaskIncrementTick+0x174>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	4a0f      	ldr	r2, [pc, #60]	; (8004ce0 <xTaskIncrementTick+0x174>)
 8004ca4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004ca6:	4b0f      	ldr	r3, [pc, #60]	; (8004ce4 <xTaskIncrementTick+0x178>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004cb2:	697b      	ldr	r3, [r7, #20]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	20000da8 	.word	0x20000da8
 8004cc0:	20000d84 	.word	0x20000d84
 8004cc4:	20000d38 	.word	0x20000d38
 8004cc8:	20000d3c 	.word	0x20000d3c
 8004ccc:	20000d98 	.word	0x20000d98
 8004cd0:	20000da0 	.word	0x20000da0
 8004cd4:	20000d88 	.word	0x20000d88
 8004cd8:	200008b0 	.word	0x200008b0
 8004cdc:	200008ac 	.word	0x200008ac
 8004ce0:	20000d90 	.word	0x20000d90
 8004ce4:	20000d94 	.word	0x20000d94

08004ce8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cee:	4b27      	ldr	r3, [pc, #156]	; (8004d8c <vTaskSwitchContext+0xa4>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004cf6:	4b26      	ldr	r3, [pc, #152]	; (8004d90 <vTaskSwitchContext+0xa8>)
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004cfc:	e041      	b.n	8004d82 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004cfe:	4b24      	ldr	r3, [pc, #144]	; (8004d90 <vTaskSwitchContext+0xa8>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004d04:	4b23      	ldr	r3, [pc, #140]	; (8004d94 <vTaskSwitchContext+0xac>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	e010      	b.n	8004d2e <vTaskSwitchContext+0x46>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10a      	bne.n	8004d28 <vTaskSwitchContext+0x40>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	607b      	str	r3, [r7, #4]
}
 8004d24:	bf00      	nop
 8004d26:	e7fe      	b.n	8004d26 <vTaskSwitchContext+0x3e>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	491a      	ldr	r1, [pc, #104]	; (8004d98 <vTaskSwitchContext+0xb0>)
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4613      	mov	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0e4      	beq.n	8004d0c <vTaskSwitchContext+0x24>
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4a12      	ldr	r2, [pc, #72]	; (8004d98 <vTaskSwitchContext+0xb0>)
 8004d4e:	4413      	add	r3, r2
 8004d50:	60bb      	str	r3, [r7, #8]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	605a      	str	r2, [r3, #4]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	3308      	adds	r3, #8
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d104      	bne.n	8004d72 <vTaskSwitchContext+0x8a>
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	605a      	str	r2, [r3, #4]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	4a08      	ldr	r2, [pc, #32]	; (8004d9c <vTaskSwitchContext+0xb4>)
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	4a05      	ldr	r2, [pc, #20]	; (8004d94 <vTaskSwitchContext+0xac>)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6013      	str	r3, [r2, #0]
}
 8004d82:	bf00      	nop
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bc80      	pop	{r7}
 8004d8a:	4770      	bx	lr
 8004d8c:	20000da8 	.word	0x20000da8
 8004d90:	20000d94 	.word	0x20000d94
 8004d94:	20000d88 	.word	0x20000d88
 8004d98:	200008b0 	.word	0x200008b0
 8004d9c:	200008ac 	.word	0x200008ac

08004da0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	60fb      	str	r3, [r7, #12]
}
 8004dc2:	bf00      	nop
 8004dc4:	e7fe      	b.n	8004dc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004dc6:	4b07      	ldr	r3, [pc, #28]	; (8004de4 <vTaskPlaceOnEventList+0x44>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3318      	adds	r3, #24
 8004dcc:	4619      	mov	r1, r3
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fe fe5c 	bl	8003a8c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	6838      	ldr	r0, [r7, #0]
 8004dd8:	f000 fa80 	bl	80052dc <prvAddCurrentTaskToDelayedList>
}
 8004ddc:	bf00      	nop
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	200008ac 	.word	0x200008ac

08004de8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10a      	bne.n	8004e10 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	617b      	str	r3, [r7, #20]
}
 8004e0c:	bf00      	nop
 8004e0e:	e7fe      	b.n	8004e0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e10:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <vTaskPlaceOnEventListRestricted+0x54>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3318      	adds	r3, #24
 8004e16:	4619      	mov	r1, r3
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f7fe fe14 	bl	8003a46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004e24:	f04f 33ff 	mov.w	r3, #4294967295
 8004e28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	68b8      	ldr	r0, [r7, #8]
 8004e2e:	f000 fa55 	bl	80052dc <prvAddCurrentTaskToDelayedList>
	}
 8004e32:	bf00      	nop
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	200008ac 	.word	0x200008ac

08004e40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10a      	bne.n	8004e6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5a:	f383 8811 	msr	BASEPRI, r3
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	60fb      	str	r3, [r7, #12]
}
 8004e68:	bf00      	nop
 8004e6a:	e7fe      	b.n	8004e6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	3318      	adds	r3, #24
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fe fe43 	bl	8003afc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e76:	4b1e      	ldr	r3, [pc, #120]	; (8004ef0 <xTaskRemoveFromEventList+0xb0>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d11d      	bne.n	8004eba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	3304      	adds	r3, #4
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fe fe3a 	bl	8003afc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e8c:	4b19      	ldr	r3, [pc, #100]	; (8004ef4 <xTaskRemoveFromEventList+0xb4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d903      	bls.n	8004e9c <xTaskRemoveFromEventList+0x5c>
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	4a16      	ldr	r2, [pc, #88]	; (8004ef4 <xTaskRemoveFromEventList+0xb4>)
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4a13      	ldr	r2, [pc, #76]	; (8004ef8 <xTaskRemoveFromEventList+0xb8>)
 8004eaa:	441a      	add	r2, r3
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	f7fe fdc7 	bl	8003a46 <vListInsertEnd>
 8004eb8:	e005      	b.n	8004ec6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	3318      	adds	r3, #24
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	480e      	ldr	r0, [pc, #56]	; (8004efc <xTaskRemoveFromEventList+0xbc>)
 8004ec2:	f7fe fdc0 	bl	8003a46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eca:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <xTaskRemoveFromEventList+0xc0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d905      	bls.n	8004ee0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ed8:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <xTaskRemoveFromEventList+0xc4>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	e001      	b.n	8004ee4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004ee4:	697b      	ldr	r3, [r7, #20]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000da8 	.word	0x20000da8
 8004ef4:	20000d88 	.word	0x20000d88
 8004ef8:	200008b0 	.word	0x200008b0
 8004efc:	20000d40 	.word	0x20000d40
 8004f00:	200008ac 	.word	0x200008ac
 8004f04:	20000d94 	.word	0x20000d94

08004f08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f10:	4b06      	ldr	r3, [pc, #24]	; (8004f2c <vTaskInternalSetTimeOutState+0x24>)
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f18:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <vTaskInternalSetTimeOutState+0x28>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	605a      	str	r2, [r3, #4]
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bc80      	pop	{r7}
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	20000d98 	.word	0x20000d98
 8004f30:	20000d84 	.word	0x20000d84

08004f34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10a      	bne.n	8004f5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	613b      	str	r3, [r7, #16]
}
 8004f56:	bf00      	nop
 8004f58:	e7fe      	b.n	8004f58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10a      	bne.n	8004f76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	60fb      	str	r3, [r7, #12]
}
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004f76:	f000 fe09 	bl	8005b8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f7a:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <xTaskCheckForTimeOut+0xbc>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f92:	d102      	bne.n	8004f9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f94:	2300      	movs	r3, #0
 8004f96:	61fb      	str	r3, [r7, #28]
 8004f98:	e023      	b.n	8004fe2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	4b15      	ldr	r3, [pc, #84]	; (8004ff4 <xTaskCheckForTimeOut+0xc0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d007      	beq.n	8004fb6 <xTaskCheckForTimeOut+0x82>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d302      	bcc.n	8004fb6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	e015      	b.n	8004fe2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d20b      	bcs.n	8004fd8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	1ad2      	subs	r2, r2, r3
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff ff9b 	bl	8004f08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
 8004fd6:	e004      	b.n	8004fe2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004fe2:	f000 fe03 	bl	8005bec <vPortExitCritical>

	return xReturn;
 8004fe6:	69fb      	ldr	r3, [r7, #28]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3720      	adds	r7, #32
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	20000d84 	.word	0x20000d84
 8004ff4:	20000d98 	.word	0x20000d98

08004ff8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ffc:	4b03      	ldr	r3, [pc, #12]	; (800500c <vTaskMissedYield+0x14>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	601a      	str	r2, [r3, #0]
}
 8005002:	bf00      	nop
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	20000d94 	.word	0x20000d94

08005010 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005018:	f000 f852 	bl	80050c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800501c:	4b06      	ldr	r3, [pc, #24]	; (8005038 <prvIdleTask+0x28>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d9f9      	bls.n	8005018 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005024:	4b05      	ldr	r3, [pc, #20]	; (800503c <prvIdleTask+0x2c>)
 8005026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005034:	e7f0      	b.n	8005018 <prvIdleTask+0x8>
 8005036:	bf00      	nop
 8005038:	200008b0 	.word	0x200008b0
 800503c:	e000ed04 	.word	0xe000ed04

08005040 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005046:	2300      	movs	r3, #0
 8005048:	607b      	str	r3, [r7, #4]
 800504a:	e00c      	b.n	8005066 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	4613      	mov	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4a12      	ldr	r2, [pc, #72]	; (80050a0 <prvInitialiseTaskLists+0x60>)
 8005058:	4413      	add	r3, r2
 800505a:	4618      	mov	r0, r3
 800505c:	f7fe fcc8 	bl	80039f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3301      	adds	r3, #1
 8005064:	607b      	str	r3, [r7, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b37      	cmp	r3, #55	; 0x37
 800506a:	d9ef      	bls.n	800504c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800506c:	480d      	ldr	r0, [pc, #52]	; (80050a4 <prvInitialiseTaskLists+0x64>)
 800506e:	f7fe fcbf 	bl	80039f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005072:	480d      	ldr	r0, [pc, #52]	; (80050a8 <prvInitialiseTaskLists+0x68>)
 8005074:	f7fe fcbc 	bl	80039f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005078:	480c      	ldr	r0, [pc, #48]	; (80050ac <prvInitialiseTaskLists+0x6c>)
 800507a:	f7fe fcb9 	bl	80039f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800507e:	480c      	ldr	r0, [pc, #48]	; (80050b0 <prvInitialiseTaskLists+0x70>)
 8005080:	f7fe fcb6 	bl	80039f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005084:	480b      	ldr	r0, [pc, #44]	; (80050b4 <prvInitialiseTaskLists+0x74>)
 8005086:	f7fe fcb3 	bl	80039f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800508a:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <prvInitialiseTaskLists+0x78>)
 800508c:	4a05      	ldr	r2, [pc, #20]	; (80050a4 <prvInitialiseTaskLists+0x64>)
 800508e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005090:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <prvInitialiseTaskLists+0x7c>)
 8005092:	4a05      	ldr	r2, [pc, #20]	; (80050a8 <prvInitialiseTaskLists+0x68>)
 8005094:	601a      	str	r2, [r3, #0]
}
 8005096:	bf00      	nop
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	200008b0 	.word	0x200008b0
 80050a4:	20000d10 	.word	0x20000d10
 80050a8:	20000d24 	.word	0x20000d24
 80050ac:	20000d40 	.word	0x20000d40
 80050b0:	20000d54 	.word	0x20000d54
 80050b4:	20000d6c 	.word	0x20000d6c
 80050b8:	20000d38 	.word	0x20000d38
 80050bc:	20000d3c 	.word	0x20000d3c

080050c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050c6:	e019      	b.n	80050fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050c8:	f000 fd60 	bl	8005b8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80050cc:	4b10      	ldr	r3, [pc, #64]	; (8005110 <prvCheckTasksWaitingTermination+0x50>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3304      	adds	r3, #4
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fe fd0f 	bl	8003afc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050de:	4b0d      	ldr	r3, [pc, #52]	; (8005114 <prvCheckTasksWaitingTermination+0x54>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	4a0b      	ldr	r2, [pc, #44]	; (8005114 <prvCheckTasksWaitingTermination+0x54>)
 80050e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80050e8:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <prvCheckTasksWaitingTermination+0x58>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	4a0a      	ldr	r2, [pc, #40]	; (8005118 <prvCheckTasksWaitingTermination+0x58>)
 80050f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80050f2:	f000 fd7b 	bl	8005bec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f810 	bl	800511c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050fc:	4b06      	ldr	r3, [pc, #24]	; (8005118 <prvCheckTasksWaitingTermination+0x58>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e1      	bne.n	80050c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000d54 	.word	0x20000d54
 8005114:	20000d80 	.word	0x20000d80
 8005118:	20000d68 	.word	0x20000d68

0800511c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800512a:	2b00      	cmp	r3, #0
 800512c:	d108      	bne.n	8005140 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	4618      	mov	r0, r3
 8005134:	f000 feee 	bl	8005f14 <vPortFree>
				vPortFree( pxTCB );
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 feeb 	bl	8005f14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800513e:	e018      	b.n	8005172 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005146:	2b01      	cmp	r3, #1
 8005148:	d103      	bne.n	8005152 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fee2 	bl	8005f14 <vPortFree>
	}
 8005150:	e00f      	b.n	8005172 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005158:	2b02      	cmp	r3, #2
 800515a:	d00a      	beq.n	8005172 <prvDeleteTCB+0x56>
	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	60fb      	str	r3, [r7, #12]
}
 800516e:	bf00      	nop
 8005170:	e7fe      	b.n	8005170 <prvDeleteTCB+0x54>
	}
 8005172:	bf00      	nop
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
	...

0800517c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005182:	4b0e      	ldr	r3, [pc, #56]	; (80051bc <prvResetNextTaskUnblockTime+0x40>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <prvResetNextTaskUnblockTime+0x14>
 800518c:	2301      	movs	r3, #1
 800518e:	e000      	b.n	8005192 <prvResetNextTaskUnblockTime+0x16>
 8005190:	2300      	movs	r3, #0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d004      	beq.n	80051a0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005196:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <prvResetNextTaskUnblockTime+0x44>)
 8005198:	f04f 32ff 	mov.w	r2, #4294967295
 800519c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800519e:	e008      	b.n	80051b2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80051a0:	4b06      	ldr	r3, [pc, #24]	; (80051bc <prvResetNextTaskUnblockTime+0x40>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	4a04      	ldr	r2, [pc, #16]	; (80051c0 <prvResetNextTaskUnblockTime+0x44>)
 80051b0:	6013      	str	r3, [r2, #0]
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr
 80051bc:	20000d38 	.word	0x20000d38
 80051c0:	20000da0 	.word	0x20000da0

080051c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051ca:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <xTaskGetSchedulerState+0x34>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d102      	bne.n	80051d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051d2:	2301      	movs	r3, #1
 80051d4:	607b      	str	r3, [r7, #4]
 80051d6:	e008      	b.n	80051ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051d8:	4b08      	ldr	r3, [pc, #32]	; (80051fc <xTaskGetSchedulerState+0x38>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d102      	bne.n	80051e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80051e0:	2302      	movs	r3, #2
 80051e2:	607b      	str	r3, [r7, #4]
 80051e4:	e001      	b.n	80051ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80051e6:	2300      	movs	r3, #0
 80051e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80051ea:	687b      	ldr	r3, [r7, #4]
	}
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	20000d8c 	.word	0x20000d8c
 80051fc:	20000da8 	.word	0x20000da8

08005200 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800520c:	2300      	movs	r3, #0
 800520e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d056      	beq.n	80052c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005216:	4b2e      	ldr	r3, [pc, #184]	; (80052d0 <xTaskPriorityDisinherit+0xd0>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	429a      	cmp	r2, r3
 800521e:	d00a      	beq.n	8005236 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	60fb      	str	r3, [r7, #12]
}
 8005232:	bf00      	nop
 8005234:	e7fe      	b.n	8005234 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	60bb      	str	r3, [r7, #8]
}
 8005250:	bf00      	nop
 8005252:	e7fe      	b.n	8005252 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005258:	1e5a      	subs	r2, r3, #1
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005266:	429a      	cmp	r2, r3
 8005268:	d02c      	beq.n	80052c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526e:	2b00      	cmp	r3, #0
 8005270:	d128      	bne.n	80052c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	3304      	adds	r3, #4
 8005276:	4618      	mov	r0, r3
 8005278:	f7fe fc40 	bl	8003afc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005294:	4b0f      	ldr	r3, [pc, #60]	; (80052d4 <xTaskPriorityDisinherit+0xd4>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	429a      	cmp	r2, r3
 800529a:	d903      	bls.n	80052a4 <xTaskPriorityDisinherit+0xa4>
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	4a0c      	ldr	r2, [pc, #48]	; (80052d4 <xTaskPriorityDisinherit+0xd4>)
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a8:	4613      	mov	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4a09      	ldr	r2, [pc, #36]	; (80052d8 <xTaskPriorityDisinherit+0xd8>)
 80052b2:	441a      	add	r2, r3
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	3304      	adds	r3, #4
 80052b8:	4619      	mov	r1, r3
 80052ba:	4610      	mov	r0, r2
 80052bc:	f7fe fbc3 	bl	8003a46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052c0:	2301      	movs	r3, #1
 80052c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052c4:	697b      	ldr	r3, [r7, #20]
	}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	200008ac 	.word	0x200008ac
 80052d4:	20000d88 	.word	0x20000d88
 80052d8:	200008b0 	.word	0x200008b0

080052dc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052e6:	4b21      	ldr	r3, [pc, #132]	; (800536c <prvAddCurrentTaskToDelayedList+0x90>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052ec:	4b20      	ldr	r3, [pc, #128]	; (8005370 <prvAddCurrentTaskToDelayedList+0x94>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3304      	adds	r3, #4
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fe fc02 	bl	8003afc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fe:	d10a      	bne.n	8005316 <prvAddCurrentTaskToDelayedList+0x3a>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d007      	beq.n	8005316 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005306:	4b1a      	ldr	r3, [pc, #104]	; (8005370 <prvAddCurrentTaskToDelayedList+0x94>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3304      	adds	r3, #4
 800530c:	4619      	mov	r1, r3
 800530e:	4819      	ldr	r0, [pc, #100]	; (8005374 <prvAddCurrentTaskToDelayedList+0x98>)
 8005310:	f7fe fb99 	bl	8003a46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005314:	e026      	b.n	8005364 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4413      	add	r3, r2
 800531c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800531e:	4b14      	ldr	r3, [pc, #80]	; (8005370 <prvAddCurrentTaskToDelayedList+0x94>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	429a      	cmp	r2, r3
 800532c:	d209      	bcs.n	8005342 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800532e:	4b12      	ldr	r3, [pc, #72]	; (8005378 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	4b0f      	ldr	r3, [pc, #60]	; (8005370 <prvAddCurrentTaskToDelayedList+0x94>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3304      	adds	r3, #4
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f7fe fba6 	bl	8003a8c <vListInsert>
}
 8005340:	e010      	b.n	8005364 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005342:	4b0e      	ldr	r3, [pc, #56]	; (800537c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <prvAddCurrentTaskToDelayedList+0x94>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3304      	adds	r3, #4
 800534c:	4619      	mov	r1, r3
 800534e:	4610      	mov	r0, r2
 8005350:	f7fe fb9c 	bl	8003a8c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005354:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	429a      	cmp	r2, r3
 800535c:	d202      	bcs.n	8005364 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800535e:	4a08      	ldr	r2, [pc, #32]	; (8005380 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	6013      	str	r3, [r2, #0]
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	20000d84 	.word	0x20000d84
 8005370:	200008ac 	.word	0x200008ac
 8005374:	20000d6c 	.word	0x20000d6c
 8005378:	20000d3c 	.word	0x20000d3c
 800537c:	20000d38 	.word	0x20000d38
 8005380:	20000da0 	.word	0x20000da0

08005384 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800538e:	f000 facb 	bl	8005928 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005392:	4b1c      	ldr	r3, [pc, #112]	; (8005404 <xTimerCreateTimerTask+0x80>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d021      	beq.n	80053de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800539a:	2300      	movs	r3, #0
 800539c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80053a2:	1d3a      	adds	r2, r7, #4
 80053a4:	f107 0108 	add.w	r1, r7, #8
 80053a8:	f107 030c 	add.w	r3, r7, #12
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fe fb05 	bl	80039bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	9202      	str	r2, [sp, #8]
 80053ba:	9301      	str	r3, [sp, #4]
 80053bc:	2302      	movs	r3, #2
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	2300      	movs	r3, #0
 80053c2:	460a      	mov	r2, r1
 80053c4:	4910      	ldr	r1, [pc, #64]	; (8005408 <xTimerCreateTimerTask+0x84>)
 80053c6:	4811      	ldr	r0, [pc, #68]	; (800540c <xTimerCreateTimerTask+0x88>)
 80053c8:	f7ff f8e4 	bl	8004594 <xTaskCreateStatic>
 80053cc:	4603      	mov	r3, r0
 80053ce:	4a10      	ldr	r2, [pc, #64]	; (8005410 <xTimerCreateTimerTask+0x8c>)
 80053d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80053d2:	4b0f      	ldr	r3, [pc, #60]	; (8005410 <xTimerCreateTimerTask+0x8c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80053da:	2301      	movs	r3, #1
 80053dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10a      	bne.n	80053fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 80053e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	613b      	str	r3, [r7, #16]
}
 80053f6:	bf00      	nop
 80053f8:	e7fe      	b.n	80053f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80053fa:	697b      	ldr	r3, [r7, #20]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20000ddc 	.word	0x20000ddc
 8005408:	08006b60 	.word	0x08006b60
 800540c:	08005531 	.word	0x08005531
 8005410:	20000de0 	.word	0x20000de0

08005414 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08a      	sub	sp, #40	; 0x28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005422:	2300      	movs	r3, #0
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10a      	bne.n	8005442 <xTimerGenericCommand+0x2e>
	__asm volatile
 800542c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005430:	f383 8811 	msr	BASEPRI, r3
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	623b      	str	r3, [r7, #32]
}
 800543e:	bf00      	nop
 8005440:	e7fe      	b.n	8005440 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005442:	4b1a      	ldr	r3, [pc, #104]	; (80054ac <xTimerGenericCommand+0x98>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d02a      	beq.n	80054a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2b05      	cmp	r3, #5
 800545a:	dc18      	bgt.n	800548e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800545c:	f7ff feb2 	bl	80051c4 <xTaskGetSchedulerState>
 8005460:	4603      	mov	r3, r0
 8005462:	2b02      	cmp	r3, #2
 8005464:	d109      	bne.n	800547a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005466:	4b11      	ldr	r3, [pc, #68]	; (80054ac <xTimerGenericCommand+0x98>)
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	f107 0110 	add.w	r1, r7, #16
 800546e:	2300      	movs	r3, #0
 8005470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005472:	f7fe fcad 	bl	8003dd0 <xQueueGenericSend>
 8005476:	6278      	str	r0, [r7, #36]	; 0x24
 8005478:	e012      	b.n	80054a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800547a:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <xTimerGenericCommand+0x98>)
 800547c:	6818      	ldr	r0, [r3, #0]
 800547e:	f107 0110 	add.w	r1, r7, #16
 8005482:	2300      	movs	r3, #0
 8005484:	2200      	movs	r2, #0
 8005486:	f7fe fca3 	bl	8003dd0 <xQueueGenericSend>
 800548a:	6278      	str	r0, [r7, #36]	; 0x24
 800548c:	e008      	b.n	80054a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800548e:	4b07      	ldr	r3, [pc, #28]	; (80054ac <xTimerGenericCommand+0x98>)
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	f107 0110 	add.w	r1, r7, #16
 8005496:	2300      	movs	r3, #0
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	f7fe fd97 	bl	8003fcc <xQueueGenericSendFromISR>
 800549e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3728      	adds	r7, #40	; 0x28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000ddc 	.word	0x20000ddc

080054b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054ba:	4b1c      	ldr	r3, [pc, #112]	; (800552c <prvProcessExpiredTimer+0x7c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	3304      	adds	r3, #4
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fe fb17 	bl	8003afc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d122      	bne.n	800551c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	699a      	ldr	r2, [r3, #24]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	18d1      	adds	r1, r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	6978      	ldr	r0, [r7, #20]
 80054e4:	f000 f8c8 	bl	8005678 <prvInsertTimerInActiveList>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d016      	beq.n	800551c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054ee:	2300      	movs	r3, #0
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	2300      	movs	r3, #0
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	2100      	movs	r1, #0
 80054f8:	6978      	ldr	r0, [r7, #20]
 80054fa:	f7ff ff8b 	bl	8005414 <xTimerGenericCommand>
 80054fe:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10a      	bne.n	800551c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	60fb      	str	r3, [r7, #12]
}
 8005518:	bf00      	nop
 800551a:	e7fe      	b.n	800551a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	6978      	ldr	r0, [r7, #20]
 8005522:	4798      	blx	r3
}
 8005524:	bf00      	nop
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	20000dd4 	.word	0x20000dd4

08005530 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005538:	f107 0308 	add.w	r3, r7, #8
 800553c:	4618      	mov	r0, r3
 800553e:	f000 f857 	bl	80055f0 <prvGetNextExpireTime>
 8005542:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4619      	mov	r1, r3
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 f803 	bl	8005554 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800554e:	f000 f8d5 	bl	80056fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005552:	e7f1      	b.n	8005538 <prvTimerTask+0x8>

08005554 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800555e:	f7ff fa4b 	bl	80049f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005562:	f107 0308 	add.w	r3, r7, #8
 8005566:	4618      	mov	r0, r3
 8005568:	f000 f866 	bl	8005638 <prvSampleTimeNow>
 800556c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d130      	bne.n	80055d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10a      	bne.n	8005590 <prvProcessTimerOrBlockTask+0x3c>
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	429a      	cmp	r2, r3
 8005580:	d806      	bhi.n	8005590 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005582:	f7ff fa47 	bl	8004a14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005586:	68f9      	ldr	r1, [r7, #12]
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7ff ff91 	bl	80054b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800558e:	e024      	b.n	80055da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d008      	beq.n	80055a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005596:	4b13      	ldr	r3, [pc, #76]	; (80055e4 <prvProcessTimerOrBlockTask+0x90>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	bf0c      	ite	eq
 80055a0:	2301      	moveq	r3, #1
 80055a2:	2300      	movne	r3, #0
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80055a8:	4b0f      	ldr	r3, [pc, #60]	; (80055e8 <prvProcessTimerOrBlockTask+0x94>)
 80055aa:	6818      	ldr	r0, [r3, #0]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	4619      	mov	r1, r3
 80055b6:	f7fe ffb9 	bl	800452c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80055ba:	f7ff fa2b 	bl	8004a14 <xTaskResumeAll>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10a      	bne.n	80055da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80055c4:	4b09      	ldr	r3, [pc, #36]	; (80055ec <prvProcessTimerOrBlockTask+0x98>)
 80055c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	f3bf 8f6f 	isb	sy
}
 80055d4:	e001      	b.n	80055da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80055d6:	f7ff fa1d 	bl	8004a14 <xTaskResumeAll>
}
 80055da:	bf00      	nop
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20000dd8 	.word	0x20000dd8
 80055e8:	20000ddc 	.word	0x20000ddc
 80055ec:	e000ed04 	.word	0xe000ed04

080055f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80055f8:	4b0e      	ldr	r3, [pc, #56]	; (8005634 <prvGetNextExpireTime+0x44>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	bf0c      	ite	eq
 8005602:	2301      	moveq	r3, #1
 8005604:	2300      	movne	r3, #0
 8005606:	b2db      	uxtb	r3, r3
 8005608:	461a      	mov	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d105      	bne.n	8005622 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005616:	4b07      	ldr	r3, [pc, #28]	; (8005634 <prvGetNextExpireTime+0x44>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	e001      	b.n	8005626 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005626:	68fb      	ldr	r3, [r7, #12]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	20000dd4 	.word	0x20000dd4

08005638 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005640:	f7ff fa86 	bl	8004b50 <xTaskGetTickCount>
 8005644:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005646:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <prvSampleTimeNow+0x3c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	429a      	cmp	r2, r3
 800564e:	d205      	bcs.n	800565c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005650:	f000 f908 	bl	8005864 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	e002      	b.n	8005662 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005662:	4a04      	ldr	r2, [pc, #16]	; (8005674 <prvSampleTimeNow+0x3c>)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005668:	68fb      	ldr	r3, [r7, #12]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	20000de4 	.word	0x20000de4

08005678 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005686:	2300      	movs	r3, #0
 8005688:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	429a      	cmp	r2, r3
 800569c:	d812      	bhi.n	80056c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	1ad2      	subs	r2, r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d302      	bcc.n	80056b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80056ac:	2301      	movs	r3, #1
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	e01b      	b.n	80056ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80056b2:	4b10      	ldr	r3, [pc, #64]	; (80056f4 <prvInsertTimerInActiveList+0x7c>)
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3304      	adds	r3, #4
 80056ba:	4619      	mov	r1, r3
 80056bc:	4610      	mov	r0, r2
 80056be:	f7fe f9e5 	bl	8003a8c <vListInsert>
 80056c2:	e012      	b.n	80056ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d206      	bcs.n	80056da <prvInsertTimerInActiveList+0x62>
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d302      	bcc.n	80056da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80056d4:	2301      	movs	r3, #1
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	e007      	b.n	80056ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056da:	4b07      	ldr	r3, [pc, #28]	; (80056f8 <prvInsertTimerInActiveList+0x80>)
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	3304      	adds	r3, #4
 80056e2:	4619      	mov	r1, r3
 80056e4:	4610      	mov	r0, r2
 80056e6:	f7fe f9d1 	bl	8003a8c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80056ea:	697b      	ldr	r3, [r7, #20]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20000dd8 	.word	0x20000dd8
 80056f8:	20000dd4 	.word	0x20000dd4

080056fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08e      	sub	sp, #56	; 0x38
 8005700:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005702:	e09d      	b.n	8005840 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	da18      	bge.n	800573c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800570a:	1d3b      	adds	r3, r7, #4
 800570c:	3304      	adds	r3, #4
 800570e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10a      	bne.n	800572c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	61fb      	str	r3, [r7, #28]
}
 8005728:	bf00      	nop
 800572a:	e7fe      	b.n	800572a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800572c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005732:	6850      	ldr	r0, [r2, #4]
 8005734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005736:	6892      	ldr	r2, [r2, #8]
 8005738:	4611      	mov	r1, r2
 800573a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	db7d      	blt.n	800583e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d004      	beq.n	8005758 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	3304      	adds	r3, #4
 8005752:	4618      	mov	r0, r3
 8005754:	f7fe f9d2 	bl	8003afc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005758:	463b      	mov	r3, r7
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff ff6c 	bl	8005638 <prvSampleTimeNow>
 8005760:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b09      	cmp	r3, #9
 8005766:	d86b      	bhi.n	8005840 <prvProcessReceivedCommands+0x144>
 8005768:	a201      	add	r2, pc, #4	; (adr r2, 8005770 <prvProcessReceivedCommands+0x74>)
 800576a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576e:	bf00      	nop
 8005770:	08005799 	.word	0x08005799
 8005774:	08005799 	.word	0x08005799
 8005778:	08005799 	.word	0x08005799
 800577c:	08005841 	.word	0x08005841
 8005780:	080057f5 	.word	0x080057f5
 8005784:	0800582d 	.word	0x0800582d
 8005788:	08005799 	.word	0x08005799
 800578c:	08005799 	.word	0x08005799
 8005790:	08005841 	.word	0x08005841
 8005794:	080057f5 	.word	0x080057f5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	18d1      	adds	r1, r2, r3
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057a6:	f7ff ff67 	bl	8005678 <prvInsertTimerInActiveList>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d047      	beq.n	8005840 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057b6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d13f      	bne.n	8005840 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	441a      	add	r2, r3
 80057c8:	2300      	movs	r3, #0
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	2300      	movs	r3, #0
 80057ce:	2100      	movs	r1, #0
 80057d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057d2:	f7ff fe1f 	bl	8005414 <xTimerGenericCommand>
 80057d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d130      	bne.n	8005840 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	61bb      	str	r3, [r7, #24]
}
 80057f0:	bf00      	nop
 80057f2:	e7fe      	b.n	80057f2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80057fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10a      	bne.n	8005818 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	617b      	str	r3, [r7, #20]
}
 8005814:	bf00      	nop
 8005816:	e7fe      	b.n	8005816 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	699a      	ldr	r2, [r3, #24]
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	18d1      	adds	r1, r2, r3
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005826:	f7ff ff27 	bl	8005678 <prvInsertTimerInActiveList>
					break;
 800582a:	e009      	b.n	8005840 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005832:	2b00      	cmp	r3, #0
 8005834:	d104      	bne.n	8005840 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005838:	f000 fb6c 	bl	8005f14 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800583c:	e000      	b.n	8005840 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800583e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005840:	4b07      	ldr	r3, [pc, #28]	; (8005860 <prvProcessReceivedCommands+0x164>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	1d39      	adds	r1, r7, #4
 8005846:	2200      	movs	r2, #0
 8005848:	4618      	mov	r0, r3
 800584a:	f7fe fc57 	bl	80040fc <xQueueReceive>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	f47f af57 	bne.w	8005704 <prvProcessReceivedCommands+0x8>
	}
}
 8005856:	bf00      	nop
 8005858:	bf00      	nop
 800585a:	3730      	adds	r7, #48	; 0x30
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	20000ddc 	.word	0x20000ddc

08005864 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800586a:	e045      	b.n	80058f8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800586c:	4b2c      	ldr	r3, [pc, #176]	; (8005920 <prvSwitchTimerLists+0xbc>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005876:	4b2a      	ldr	r3, [pc, #168]	; (8005920 <prvSwitchTimerLists+0xbc>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	3304      	adds	r3, #4
 8005884:	4618      	mov	r0, r3
 8005886:	f7fe f939 	bl	8003afc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d12e      	bne.n	80058f8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	4413      	add	r3, r2
 80058a2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d90e      	bls.n	80058ca <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058b8:	4b19      	ldr	r3, [pc, #100]	; (8005920 <prvSwitchTimerLists+0xbc>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3304      	adds	r3, #4
 80058c0:	4619      	mov	r1, r3
 80058c2:	4610      	mov	r0, r2
 80058c4:	f7fe f8e2 	bl	8003a8c <vListInsert>
 80058c8:	e016      	b.n	80058f8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058ca:	2300      	movs	r3, #0
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	2300      	movs	r3, #0
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	2100      	movs	r1, #0
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f7ff fd9d 	bl	8005414 <xTimerGenericCommand>
 80058da:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10a      	bne.n	80058f8 <prvSwitchTimerLists+0x94>
	__asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	603b      	str	r3, [r7, #0]
}
 80058f4:	bf00      	nop
 80058f6:	e7fe      	b.n	80058f6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058f8:	4b09      	ldr	r3, [pc, #36]	; (8005920 <prvSwitchTimerLists+0xbc>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1b4      	bne.n	800586c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005902:	4b07      	ldr	r3, [pc, #28]	; (8005920 <prvSwitchTimerLists+0xbc>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005908:	4b06      	ldr	r3, [pc, #24]	; (8005924 <prvSwitchTimerLists+0xc0>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a04      	ldr	r2, [pc, #16]	; (8005920 <prvSwitchTimerLists+0xbc>)
 800590e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005910:	4a04      	ldr	r2, [pc, #16]	; (8005924 <prvSwitchTimerLists+0xc0>)
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	6013      	str	r3, [r2, #0]
}
 8005916:	bf00      	nop
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	20000dd4 	.word	0x20000dd4
 8005924:	20000dd8 	.word	0x20000dd8

08005928 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800592e:	f000 f92d 	bl	8005b8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005932:	4b15      	ldr	r3, [pc, #84]	; (8005988 <prvCheckForValidListAndQueue+0x60>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d120      	bne.n	800597c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800593a:	4814      	ldr	r0, [pc, #80]	; (800598c <prvCheckForValidListAndQueue+0x64>)
 800593c:	f7fe f858 	bl	80039f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005940:	4813      	ldr	r0, [pc, #76]	; (8005990 <prvCheckForValidListAndQueue+0x68>)
 8005942:	f7fe f855 	bl	80039f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005946:	4b13      	ldr	r3, [pc, #76]	; (8005994 <prvCheckForValidListAndQueue+0x6c>)
 8005948:	4a10      	ldr	r2, [pc, #64]	; (800598c <prvCheckForValidListAndQueue+0x64>)
 800594a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800594c:	4b12      	ldr	r3, [pc, #72]	; (8005998 <prvCheckForValidListAndQueue+0x70>)
 800594e:	4a10      	ldr	r2, [pc, #64]	; (8005990 <prvCheckForValidListAndQueue+0x68>)
 8005950:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005952:	2300      	movs	r3, #0
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	4b11      	ldr	r3, [pc, #68]	; (800599c <prvCheckForValidListAndQueue+0x74>)
 8005958:	4a11      	ldr	r2, [pc, #68]	; (80059a0 <prvCheckForValidListAndQueue+0x78>)
 800595a:	2110      	movs	r1, #16
 800595c:	200a      	movs	r0, #10
 800595e:	f7fe f95f 	bl	8003c20 <xQueueGenericCreateStatic>
 8005962:	4603      	mov	r3, r0
 8005964:	4a08      	ldr	r2, [pc, #32]	; (8005988 <prvCheckForValidListAndQueue+0x60>)
 8005966:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005968:	4b07      	ldr	r3, [pc, #28]	; (8005988 <prvCheckForValidListAndQueue+0x60>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d005      	beq.n	800597c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005970:	4b05      	ldr	r3, [pc, #20]	; (8005988 <prvCheckForValidListAndQueue+0x60>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	490b      	ldr	r1, [pc, #44]	; (80059a4 <prvCheckForValidListAndQueue+0x7c>)
 8005976:	4618      	mov	r0, r3
 8005978:	f7fe fdb0 	bl	80044dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800597c:	f000 f936 	bl	8005bec <vPortExitCritical>
}
 8005980:	bf00      	nop
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20000ddc 	.word	0x20000ddc
 800598c:	20000dac 	.word	0x20000dac
 8005990:	20000dc0 	.word	0x20000dc0
 8005994:	20000dd4 	.word	0x20000dd4
 8005998:	20000dd8 	.word	0x20000dd8
 800599c:	20000e88 	.word	0x20000e88
 80059a0:	20000de8 	.word	0x20000de8
 80059a4:	08006b68 	.word	0x08006b68

080059a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3b04      	subs	r3, #4
 80059b8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	3b04      	subs	r3, #4
 80059c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f023 0201 	bic.w	r2, r3, #1
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3b04      	subs	r3, #4
 80059d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80059d8:	4a08      	ldr	r2, [pc, #32]	; (80059fc <pxPortInitialiseStack+0x54>)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3b14      	subs	r3, #20
 80059e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3b20      	subs	r3, #32
 80059ee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80059f0:	68fb      	ldr	r3, [r7, #12]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bc80      	pop	{r7}
 80059fa:	4770      	bx	lr
 80059fc:	08005a01 	.word	0x08005a01

08005a00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a0a:	4b12      	ldr	r3, [pc, #72]	; (8005a54 <prvTaskExitError+0x54>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a12:	d00a      	beq.n	8005a2a <prvTaskExitError+0x2a>
	__asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	60fb      	str	r3, [r7, #12]
}
 8005a26:	bf00      	nop
 8005a28:	e7fe      	b.n	8005a28 <prvTaskExitError+0x28>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	60bb      	str	r3, [r7, #8]
}
 8005a3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a3e:	bf00      	nop
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0fc      	beq.n	8005a40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a46:	bf00      	nop
 8005a48:	bf00      	nop
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bc80      	pop	{r7}
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	2000000c 	.word	0x2000000c
	...

08005a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a60:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <pxCurrentTCBConst2>)
 8005a62:	6819      	ldr	r1, [r3, #0]
 8005a64:	6808      	ldr	r0, [r1, #0]
 8005a66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005a6a:	f380 8809 	msr	PSP, r0
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f04f 0000 	mov.w	r0, #0
 8005a76:	f380 8811 	msr	BASEPRI, r0
 8005a7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005a7e:	4770      	bx	lr

08005a80 <pxCurrentTCBConst2>:
 8005a80:	200008ac 	.word	0x200008ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop

08005a88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005a88:	4806      	ldr	r0, [pc, #24]	; (8005aa4 <prvPortStartFirstTask+0x1c>)
 8005a8a:	6800      	ldr	r0, [r0, #0]
 8005a8c:	6800      	ldr	r0, [r0, #0]
 8005a8e:	f380 8808 	msr	MSP, r0
 8005a92:	b662      	cpsie	i
 8005a94:	b661      	cpsie	f
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	df00      	svc	0
 8005aa0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005aa2:	bf00      	nop
 8005aa4:	e000ed08 	.word	0xe000ed08

08005aa8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005aae:	4b32      	ldr	r3, [pc, #200]	; (8005b78 <xPortStartScheduler+0xd0>)
 8005ab0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	22ff      	movs	r2, #255	; 0xff
 8005abe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	4b2a      	ldr	r3, [pc, #168]	; (8005b7c <xPortStartScheduler+0xd4>)
 8005ad4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ad6:	4b2a      	ldr	r3, [pc, #168]	; (8005b80 <xPortStartScheduler+0xd8>)
 8005ad8:	2207      	movs	r2, #7
 8005ada:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005adc:	e009      	b.n	8005af2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005ade:	4b28      	ldr	r3, [pc, #160]	; (8005b80 <xPortStartScheduler+0xd8>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	4a26      	ldr	r2, [pc, #152]	; (8005b80 <xPortStartScheduler+0xd8>)
 8005ae6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ae8:	78fb      	ldrb	r3, [r7, #3]
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005af2:	78fb      	ldrb	r3, [r7, #3]
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afa:	2b80      	cmp	r3, #128	; 0x80
 8005afc:	d0ef      	beq.n	8005ade <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005afe:	4b20      	ldr	r3, [pc, #128]	; (8005b80 <xPortStartScheduler+0xd8>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f1c3 0307 	rsb	r3, r3, #7
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	d00a      	beq.n	8005b20 <xPortStartScheduler+0x78>
	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	60bb      	str	r3, [r7, #8]
}
 8005b1c:	bf00      	nop
 8005b1e:	e7fe      	b.n	8005b1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b20:	4b17      	ldr	r3, [pc, #92]	; (8005b80 <xPortStartScheduler+0xd8>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	021b      	lsls	r3, r3, #8
 8005b26:	4a16      	ldr	r2, [pc, #88]	; (8005b80 <xPortStartScheduler+0xd8>)
 8005b28:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b2a:	4b15      	ldr	r3, [pc, #84]	; (8005b80 <xPortStartScheduler+0xd8>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b32:	4a13      	ldr	r2, [pc, #76]	; (8005b80 <xPortStartScheduler+0xd8>)
 8005b34:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b3e:	4b11      	ldr	r3, [pc, #68]	; (8005b84 <xPortStartScheduler+0xdc>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a10      	ldr	r2, [pc, #64]	; (8005b84 <xPortStartScheduler+0xdc>)
 8005b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b4a:	4b0e      	ldr	r3, [pc, #56]	; (8005b84 <xPortStartScheduler+0xdc>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a0d      	ldr	r2, [pc, #52]	; (8005b84 <xPortStartScheduler+0xdc>)
 8005b50:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b54:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b56:	f000 f8b9 	bl	8005ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b5a:	4b0b      	ldr	r3, [pc, #44]	; (8005b88 <xPortStartScheduler+0xe0>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b60:	f7ff ff92 	bl	8005a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b64:	f7ff f8c0 	bl	8004ce8 <vTaskSwitchContext>
	prvTaskExitError();
 8005b68:	f7ff ff4a 	bl	8005a00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	e000e400 	.word	0xe000e400
 8005b7c:	20000ed8 	.word	0x20000ed8
 8005b80:	20000edc 	.word	0x20000edc
 8005b84:	e000ed20 	.word	0xe000ed20
 8005b88:	2000000c 	.word	0x2000000c

08005b8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
	__asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	607b      	str	r3, [r7, #4]
}
 8005ba4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ba6:	4b0f      	ldr	r3, [pc, #60]	; (8005be4 <vPortEnterCritical+0x58>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3301      	adds	r3, #1
 8005bac:	4a0d      	ldr	r2, [pc, #52]	; (8005be4 <vPortEnterCritical+0x58>)
 8005bae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005bb0:	4b0c      	ldr	r3, [pc, #48]	; (8005be4 <vPortEnterCritical+0x58>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d10f      	bne.n	8005bd8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005bb8:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <vPortEnterCritical+0x5c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <vPortEnterCritical+0x4c>
	__asm volatile
 8005bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	603b      	str	r3, [r7, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	e7fe      	b.n	8005bd6 <vPortEnterCritical+0x4a>
	}
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bc80      	pop	{r7}
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	2000000c 	.word	0x2000000c
 8005be8:	e000ed04 	.word	0xe000ed04

08005bec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005bf2:	4b11      	ldr	r3, [pc, #68]	; (8005c38 <vPortExitCritical+0x4c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10a      	bne.n	8005c10 <vPortExitCritical+0x24>
	__asm volatile
 8005bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	607b      	str	r3, [r7, #4]
}
 8005c0c:	bf00      	nop
 8005c0e:	e7fe      	b.n	8005c0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005c10:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <vPortExitCritical+0x4c>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3b01      	subs	r3, #1
 8005c16:	4a08      	ldr	r2, [pc, #32]	; (8005c38 <vPortExitCritical+0x4c>)
 8005c18:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c1a:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <vPortExitCritical+0x4c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d105      	bne.n	8005c2e <vPortExitCritical+0x42>
 8005c22:	2300      	movs	r3, #0
 8005c24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	f383 8811 	msr	BASEPRI, r3
}
 8005c2c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bc80      	pop	{r7}
 8005c36:	4770      	bx	lr
 8005c38:	2000000c 	.word	0x2000000c
 8005c3c:	00000000 	.word	0x00000000

08005c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c40:	f3ef 8009 	mrs	r0, PSP
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	4b0d      	ldr	r3, [pc, #52]	; (8005c80 <pxCurrentTCBConst>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005c50:	6010      	str	r0, [r2, #0]
 8005c52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005c56:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c5a:	f380 8811 	msr	BASEPRI, r0
 8005c5e:	f7ff f843 	bl	8004ce8 <vTaskSwitchContext>
 8005c62:	f04f 0000 	mov.w	r0, #0
 8005c66:	f380 8811 	msr	BASEPRI, r0
 8005c6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005c6e:	6819      	ldr	r1, [r3, #0]
 8005c70:	6808      	ldr	r0, [r1, #0]
 8005c72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005c76:	f380 8809 	msr	PSP, r0
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	4770      	bx	lr

08005c80 <pxCurrentTCBConst>:
 8005c80:	200008ac 	.word	0x200008ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop

08005c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	607b      	str	r3, [r7, #4]
}
 8005ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ca2:	f7fe ff63 	bl	8004b6c <xTaskIncrementTick>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005cac:	4b06      	ldr	r3, [pc, #24]	; (8005cc8 <SysTick_Handler+0x40>)
 8005cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	f383 8811 	msr	BASEPRI, r3
}
 8005cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005cc0:	bf00      	nop
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	e000ed04 	.word	0xe000ed04

08005ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005cd0:	4b0a      	ldr	r3, [pc, #40]	; (8005cfc <vPortSetupTimerInterrupt+0x30>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005cd6:	4b0a      	ldr	r3, [pc, #40]	; (8005d00 <vPortSetupTimerInterrupt+0x34>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005cdc:	4b09      	ldr	r3, [pc, #36]	; (8005d04 <vPortSetupTimerInterrupt+0x38>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a09      	ldr	r2, [pc, #36]	; (8005d08 <vPortSetupTimerInterrupt+0x3c>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	099b      	lsrs	r3, r3, #6
 8005ce8:	4a08      	ldr	r2, [pc, #32]	; (8005d0c <vPortSetupTimerInterrupt+0x40>)
 8005cea:	3b01      	subs	r3, #1
 8005cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cee:	4b03      	ldr	r3, [pc, #12]	; (8005cfc <vPortSetupTimerInterrupt+0x30>)
 8005cf0:	2207      	movs	r2, #7
 8005cf2:	601a      	str	r2, [r3, #0]
}
 8005cf4:	bf00      	nop
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bc80      	pop	{r7}
 8005cfa:	4770      	bx	lr
 8005cfc:	e000e010 	.word	0xe000e010
 8005d00:	e000e018 	.word	0xe000e018
 8005d04:	20000000 	.word	0x20000000
 8005d08:	10624dd3 	.word	0x10624dd3
 8005d0c:	e000e014 	.word	0xe000e014

08005d10 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005d16:	f3ef 8305 	mrs	r3, IPSR
 8005d1a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b0f      	cmp	r3, #15
 8005d20:	d914      	bls.n	8005d4c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d22:	4a16      	ldr	r2, [pc, #88]	; (8005d7c <vPortValidateInterruptPriority+0x6c>)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4413      	add	r3, r2
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d2c:	4b14      	ldr	r3, [pc, #80]	; (8005d80 <vPortValidateInterruptPriority+0x70>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	7afa      	ldrb	r2, [r7, #11]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d20a      	bcs.n	8005d4c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	607b      	str	r3, [r7, #4]
}
 8005d48:	bf00      	nop
 8005d4a:	e7fe      	b.n	8005d4a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d4c:	4b0d      	ldr	r3, [pc, #52]	; (8005d84 <vPortValidateInterruptPriority+0x74>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d54:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <vPortValidateInterruptPriority+0x78>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d90a      	bls.n	8005d72 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	603b      	str	r3, [r7, #0]
}
 8005d6e:	bf00      	nop
 8005d70:	e7fe      	b.n	8005d70 <vPortValidateInterruptPriority+0x60>
	}
 8005d72:	bf00      	nop
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc80      	pop	{r7}
 8005d7a:	4770      	bx	lr
 8005d7c:	e000e3f0 	.word	0xe000e3f0
 8005d80:	20000ed8 	.word	0x20000ed8
 8005d84:	e000ed0c 	.word	0xe000ed0c
 8005d88:	20000edc 	.word	0x20000edc

08005d8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08a      	sub	sp, #40	; 0x28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d94:	2300      	movs	r3, #0
 8005d96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d98:	f7fe fe2e 	bl	80049f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d9c:	4b58      	ldr	r3, [pc, #352]	; (8005f00 <pvPortMalloc+0x174>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d101      	bne.n	8005da8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005da4:	f000 f910 	bl	8005fc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005da8:	4b56      	ldr	r3, [pc, #344]	; (8005f04 <pvPortMalloc+0x178>)
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4013      	ands	r3, r2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f040 808e 	bne.w	8005ed2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d01d      	beq.n	8005df8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005dbc:	2208      	movs	r2, #8
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f003 0307 	and.w	r3, r3, #7
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d014      	beq.n	8005df8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f023 0307 	bic.w	r3, r3, #7
 8005dd4:	3308      	adds	r3, #8
 8005dd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00a      	beq.n	8005df8 <pvPortMalloc+0x6c>
	__asm volatile
 8005de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	617b      	str	r3, [r7, #20]
}
 8005df4:	bf00      	nop
 8005df6:	e7fe      	b.n	8005df6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d069      	beq.n	8005ed2 <pvPortMalloc+0x146>
 8005dfe:	4b42      	ldr	r3, [pc, #264]	; (8005f08 <pvPortMalloc+0x17c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d864      	bhi.n	8005ed2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e08:	4b40      	ldr	r3, [pc, #256]	; (8005f0c <pvPortMalloc+0x180>)
 8005e0a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e0c:	4b3f      	ldr	r3, [pc, #252]	; (8005f0c <pvPortMalloc+0x180>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e12:	e004      	b.n	8005e1e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d903      	bls.n	8005e30 <pvPortMalloc+0xa4>
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1f1      	bne.n	8005e14 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e30:	4b33      	ldr	r3, [pc, #204]	; (8005f00 <pvPortMalloc+0x174>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d04b      	beq.n	8005ed2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2208      	movs	r2, #8
 8005e40:	4413      	add	r3, r2
 8005e42:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	1ad2      	subs	r2, r2, r3
 8005e54:	2308      	movs	r3, #8
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d91f      	bls.n	8005e9c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4413      	add	r3, r2
 8005e62:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <pvPortMalloc+0xf8>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	613b      	str	r3, [r7, #16]
}
 8005e80:	bf00      	nop
 8005e82:	e7fe      	b.n	8005e82 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	1ad2      	subs	r2, r2, r3
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e96:	69b8      	ldr	r0, [r7, #24]
 8005e98:	f000 f8f8 	bl	800608c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e9c:	4b1a      	ldr	r3, [pc, #104]	; (8005f08 <pvPortMalloc+0x17c>)
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	4a18      	ldr	r2, [pc, #96]	; (8005f08 <pvPortMalloc+0x17c>)
 8005ea8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005eaa:	4b17      	ldr	r3, [pc, #92]	; (8005f08 <pvPortMalloc+0x17c>)
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	4b18      	ldr	r3, [pc, #96]	; (8005f10 <pvPortMalloc+0x184>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d203      	bcs.n	8005ebe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005eb6:	4b14      	ldr	r3, [pc, #80]	; (8005f08 <pvPortMalloc+0x17c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a15      	ldr	r2, [pc, #84]	; (8005f10 <pvPortMalloc+0x184>)
 8005ebc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	4b10      	ldr	r3, [pc, #64]	; (8005f04 <pvPortMalloc+0x178>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ed2:	f7fe fd9f 	bl	8004a14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	f003 0307 	and.w	r3, r3, #7
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00a      	beq.n	8005ef6 <pvPortMalloc+0x16a>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	60fb      	str	r3, [r7, #12]
}
 8005ef2:	bf00      	nop
 8005ef4:	e7fe      	b.n	8005ef4 <pvPortMalloc+0x168>
	return pvReturn;
 8005ef6:	69fb      	ldr	r3, [r7, #28]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3728      	adds	r7, #40	; 0x28
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	20001ee8 	.word	0x20001ee8
 8005f04:	20001ef4 	.word	0x20001ef4
 8005f08:	20001eec 	.word	0x20001eec
 8005f0c:	20001ee0 	.word	0x20001ee0
 8005f10:	20001ef0 	.word	0x20001ef0

08005f14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d048      	beq.n	8005fb8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f26:	2308      	movs	r3, #8
 8005f28:	425b      	negs	r3, r3
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	4b21      	ldr	r3, [pc, #132]	; (8005fc0 <vPortFree+0xac>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10a      	bne.n	8005f58 <vPortFree+0x44>
	__asm volatile
 8005f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	60fb      	str	r3, [r7, #12]
}
 8005f54:	bf00      	nop
 8005f56:	e7fe      	b.n	8005f56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <vPortFree+0x62>
	__asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	60bb      	str	r3, [r7, #8]
}
 8005f72:	bf00      	nop
 8005f74:	e7fe      	b.n	8005f74 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	4b11      	ldr	r3, [pc, #68]	; (8005fc0 <vPortFree+0xac>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d019      	beq.n	8005fb8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d115      	bne.n	8005fb8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <vPortFree+0xac>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	43db      	mvns	r3, r3
 8005f96:	401a      	ands	r2, r3
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f9c:	f7fe fd2c 	bl	80049f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	4b07      	ldr	r3, [pc, #28]	; (8005fc4 <vPortFree+0xb0>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4413      	add	r3, r2
 8005faa:	4a06      	ldr	r2, [pc, #24]	; (8005fc4 <vPortFree+0xb0>)
 8005fac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005fae:	6938      	ldr	r0, [r7, #16]
 8005fb0:	f000 f86c 	bl	800608c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005fb4:	f7fe fd2e 	bl	8004a14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005fb8:	bf00      	nop
 8005fba:	3718      	adds	r7, #24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	20001ef4 	.word	0x20001ef4
 8005fc4:	20001eec 	.word	0x20001eec

08005fc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005fd4:	4b27      	ldr	r3, [pc, #156]	; (8006074 <prvHeapInit+0xac>)
 8005fd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f003 0307 	and.w	r3, r3, #7
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00c      	beq.n	8005ffc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3307      	adds	r3, #7
 8005fe6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0307 	bic.w	r3, r3, #7
 8005fee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	4a1f      	ldr	r2, [pc, #124]	; (8006074 <prvHeapInit+0xac>)
 8005ff8:	4413      	add	r3, r2
 8005ffa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006000:	4a1d      	ldr	r2, [pc, #116]	; (8006078 <prvHeapInit+0xb0>)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006006:	4b1c      	ldr	r3, [pc, #112]	; (8006078 <prvHeapInit+0xb0>)
 8006008:	2200      	movs	r2, #0
 800600a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	4413      	add	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006014:	2208      	movs	r2, #8
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	1a9b      	subs	r3, r3, r2
 800601a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 0307 	bic.w	r3, r3, #7
 8006022:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4a15      	ldr	r2, [pc, #84]	; (800607c <prvHeapInit+0xb4>)
 8006028:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800602a:	4b14      	ldr	r3, [pc, #80]	; (800607c <prvHeapInit+0xb4>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2200      	movs	r2, #0
 8006030:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006032:	4b12      	ldr	r3, [pc, #72]	; (800607c <prvHeapInit+0xb4>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2200      	movs	r2, #0
 8006038:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	1ad2      	subs	r2, r2, r3
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006048:	4b0c      	ldr	r3, [pc, #48]	; (800607c <prvHeapInit+0xb4>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	4a0a      	ldr	r2, [pc, #40]	; (8006080 <prvHeapInit+0xb8>)
 8006056:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	4a09      	ldr	r2, [pc, #36]	; (8006084 <prvHeapInit+0xbc>)
 800605e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006060:	4b09      	ldr	r3, [pc, #36]	; (8006088 <prvHeapInit+0xc0>)
 8006062:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006066:	601a      	str	r2, [r3, #0]
}
 8006068:	bf00      	nop
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	20000ee0 	.word	0x20000ee0
 8006078:	20001ee0 	.word	0x20001ee0
 800607c:	20001ee8 	.word	0x20001ee8
 8006080:	20001ef0 	.word	0x20001ef0
 8006084:	20001eec 	.word	0x20001eec
 8006088:	20001ef4 	.word	0x20001ef4

0800608c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006094:	4b27      	ldr	r3, [pc, #156]	; (8006134 <prvInsertBlockIntoFreeList+0xa8>)
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	e002      	b.n	80060a0 <prvInsertBlockIntoFreeList+0x14>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d8f7      	bhi.n	800609a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	4413      	add	r3, r2
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d108      	bne.n	80060ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	441a      	add	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	441a      	add	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d118      	bne.n	8006114 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	4b14      	ldr	r3, [pc, #80]	; (8006138 <prvInsertBlockIntoFreeList+0xac>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d00d      	beq.n	800610a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	441a      	add	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	e008      	b.n	800611c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800610a:	4b0b      	ldr	r3, [pc, #44]	; (8006138 <prvInsertBlockIntoFreeList+0xac>)
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	e003      	b.n	800611c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	429a      	cmp	r2, r3
 8006122:	d002      	beq.n	800612a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800612a:	bf00      	nop
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	bc80      	pop	{r7}
 8006132:	4770      	bx	lr
 8006134:	20001ee0 	.word	0x20001ee0
 8006138:	20001ee8 	.word	0x20001ee8

0800613c <__errno>:
 800613c:	4b01      	ldr	r3, [pc, #4]	; (8006144 <__errno+0x8>)
 800613e:	6818      	ldr	r0, [r3, #0]
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	20000010 	.word	0x20000010

08006148 <__libc_init_array>:
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	2600      	movs	r6, #0
 800614c:	4d0c      	ldr	r5, [pc, #48]	; (8006180 <__libc_init_array+0x38>)
 800614e:	4c0d      	ldr	r4, [pc, #52]	; (8006184 <__libc_init_array+0x3c>)
 8006150:	1b64      	subs	r4, r4, r5
 8006152:	10a4      	asrs	r4, r4, #2
 8006154:	42a6      	cmp	r6, r4
 8006156:	d109      	bne.n	800616c <__libc_init_array+0x24>
 8006158:	f000 fc9c 	bl	8006a94 <_init>
 800615c:	2600      	movs	r6, #0
 800615e:	4d0a      	ldr	r5, [pc, #40]	; (8006188 <__libc_init_array+0x40>)
 8006160:	4c0a      	ldr	r4, [pc, #40]	; (800618c <__libc_init_array+0x44>)
 8006162:	1b64      	subs	r4, r4, r5
 8006164:	10a4      	asrs	r4, r4, #2
 8006166:	42a6      	cmp	r6, r4
 8006168:	d105      	bne.n	8006176 <__libc_init_array+0x2e>
 800616a:	bd70      	pop	{r4, r5, r6, pc}
 800616c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006170:	4798      	blx	r3
 8006172:	3601      	adds	r6, #1
 8006174:	e7ee      	b.n	8006154 <__libc_init_array+0xc>
 8006176:	f855 3b04 	ldr.w	r3, [r5], #4
 800617a:	4798      	blx	r3
 800617c:	3601      	adds	r6, #1
 800617e:	e7f2      	b.n	8006166 <__libc_init_array+0x1e>
 8006180:	08006cd4 	.word	0x08006cd4
 8006184:	08006cd4 	.word	0x08006cd4
 8006188:	08006cd4 	.word	0x08006cd4
 800618c:	08006cd8 	.word	0x08006cd8

08006190 <memcpy>:
 8006190:	440a      	add	r2, r1
 8006192:	4291      	cmp	r1, r2
 8006194:	f100 33ff 	add.w	r3, r0, #4294967295
 8006198:	d100      	bne.n	800619c <memcpy+0xc>
 800619a:	4770      	bx	lr
 800619c:	b510      	push	{r4, lr}
 800619e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061a2:	4291      	cmp	r1, r2
 80061a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061a8:	d1f9      	bne.n	800619e <memcpy+0xe>
 80061aa:	bd10      	pop	{r4, pc}

080061ac <memset>:
 80061ac:	4603      	mov	r3, r0
 80061ae:	4402      	add	r2, r0
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d100      	bne.n	80061b6 <memset+0xa>
 80061b4:	4770      	bx	lr
 80061b6:	f803 1b01 	strb.w	r1, [r3], #1
 80061ba:	e7f9      	b.n	80061b0 <memset+0x4>

080061bc <siprintf>:
 80061bc:	b40e      	push	{r1, r2, r3}
 80061be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061c2:	b500      	push	{lr}
 80061c4:	b09c      	sub	sp, #112	; 0x70
 80061c6:	ab1d      	add	r3, sp, #116	; 0x74
 80061c8:	9002      	str	r0, [sp, #8]
 80061ca:	9006      	str	r0, [sp, #24]
 80061cc:	9107      	str	r1, [sp, #28]
 80061ce:	9104      	str	r1, [sp, #16]
 80061d0:	4808      	ldr	r0, [pc, #32]	; (80061f4 <siprintf+0x38>)
 80061d2:	4909      	ldr	r1, [pc, #36]	; (80061f8 <siprintf+0x3c>)
 80061d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80061d8:	9105      	str	r1, [sp, #20]
 80061da:	6800      	ldr	r0, [r0, #0]
 80061dc:	a902      	add	r1, sp, #8
 80061de:	9301      	str	r3, [sp, #4]
 80061e0:	f000 f868 	bl	80062b4 <_svfiprintf_r>
 80061e4:	2200      	movs	r2, #0
 80061e6:	9b02      	ldr	r3, [sp, #8]
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	b01c      	add	sp, #112	; 0x70
 80061ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80061f0:	b003      	add	sp, #12
 80061f2:	4770      	bx	lr
 80061f4:	20000010 	.word	0x20000010
 80061f8:	ffff0208 	.word	0xffff0208

080061fc <__ssputs_r>:
 80061fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006200:	688e      	ldr	r6, [r1, #8]
 8006202:	4682      	mov	sl, r0
 8006204:	429e      	cmp	r6, r3
 8006206:	460c      	mov	r4, r1
 8006208:	4690      	mov	r8, r2
 800620a:	461f      	mov	r7, r3
 800620c:	d838      	bhi.n	8006280 <__ssputs_r+0x84>
 800620e:	898a      	ldrh	r2, [r1, #12]
 8006210:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006214:	d032      	beq.n	800627c <__ssputs_r+0x80>
 8006216:	6825      	ldr	r5, [r4, #0]
 8006218:	6909      	ldr	r1, [r1, #16]
 800621a:	3301      	adds	r3, #1
 800621c:	eba5 0901 	sub.w	r9, r5, r1
 8006220:	6965      	ldr	r5, [r4, #20]
 8006222:	444b      	add	r3, r9
 8006224:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006228:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800622c:	106d      	asrs	r5, r5, #1
 800622e:	429d      	cmp	r5, r3
 8006230:	bf38      	it	cc
 8006232:	461d      	movcc	r5, r3
 8006234:	0553      	lsls	r3, r2, #21
 8006236:	d531      	bpl.n	800629c <__ssputs_r+0xa0>
 8006238:	4629      	mov	r1, r5
 800623a:	f000 fb61 	bl	8006900 <_malloc_r>
 800623e:	4606      	mov	r6, r0
 8006240:	b950      	cbnz	r0, 8006258 <__ssputs_r+0x5c>
 8006242:	230c      	movs	r3, #12
 8006244:	f04f 30ff 	mov.w	r0, #4294967295
 8006248:	f8ca 3000 	str.w	r3, [sl]
 800624c:	89a3      	ldrh	r3, [r4, #12]
 800624e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006252:	81a3      	strh	r3, [r4, #12]
 8006254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006258:	464a      	mov	r2, r9
 800625a:	6921      	ldr	r1, [r4, #16]
 800625c:	f7ff ff98 	bl	8006190 <memcpy>
 8006260:	89a3      	ldrh	r3, [r4, #12]
 8006262:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626a:	81a3      	strh	r3, [r4, #12]
 800626c:	6126      	str	r6, [r4, #16]
 800626e:	444e      	add	r6, r9
 8006270:	6026      	str	r6, [r4, #0]
 8006272:	463e      	mov	r6, r7
 8006274:	6165      	str	r5, [r4, #20]
 8006276:	eba5 0509 	sub.w	r5, r5, r9
 800627a:	60a5      	str	r5, [r4, #8]
 800627c:	42be      	cmp	r6, r7
 800627e:	d900      	bls.n	8006282 <__ssputs_r+0x86>
 8006280:	463e      	mov	r6, r7
 8006282:	4632      	mov	r2, r6
 8006284:	4641      	mov	r1, r8
 8006286:	6820      	ldr	r0, [r4, #0]
 8006288:	f000 fab8 	bl	80067fc <memmove>
 800628c:	68a3      	ldr	r3, [r4, #8]
 800628e:	2000      	movs	r0, #0
 8006290:	1b9b      	subs	r3, r3, r6
 8006292:	60a3      	str	r3, [r4, #8]
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	4433      	add	r3, r6
 8006298:	6023      	str	r3, [r4, #0]
 800629a:	e7db      	b.n	8006254 <__ssputs_r+0x58>
 800629c:	462a      	mov	r2, r5
 800629e:	f000 fba3 	bl	80069e8 <_realloc_r>
 80062a2:	4606      	mov	r6, r0
 80062a4:	2800      	cmp	r0, #0
 80062a6:	d1e1      	bne.n	800626c <__ssputs_r+0x70>
 80062a8:	4650      	mov	r0, sl
 80062aa:	6921      	ldr	r1, [r4, #16]
 80062ac:	f000 fac0 	bl	8006830 <_free_r>
 80062b0:	e7c7      	b.n	8006242 <__ssputs_r+0x46>
	...

080062b4 <_svfiprintf_r>:
 80062b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b8:	4698      	mov	r8, r3
 80062ba:	898b      	ldrh	r3, [r1, #12]
 80062bc:	4607      	mov	r7, r0
 80062be:	061b      	lsls	r3, r3, #24
 80062c0:	460d      	mov	r5, r1
 80062c2:	4614      	mov	r4, r2
 80062c4:	b09d      	sub	sp, #116	; 0x74
 80062c6:	d50e      	bpl.n	80062e6 <_svfiprintf_r+0x32>
 80062c8:	690b      	ldr	r3, [r1, #16]
 80062ca:	b963      	cbnz	r3, 80062e6 <_svfiprintf_r+0x32>
 80062cc:	2140      	movs	r1, #64	; 0x40
 80062ce:	f000 fb17 	bl	8006900 <_malloc_r>
 80062d2:	6028      	str	r0, [r5, #0]
 80062d4:	6128      	str	r0, [r5, #16]
 80062d6:	b920      	cbnz	r0, 80062e2 <_svfiprintf_r+0x2e>
 80062d8:	230c      	movs	r3, #12
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	f04f 30ff 	mov.w	r0, #4294967295
 80062e0:	e0d1      	b.n	8006486 <_svfiprintf_r+0x1d2>
 80062e2:	2340      	movs	r3, #64	; 0x40
 80062e4:	616b      	str	r3, [r5, #20]
 80062e6:	2300      	movs	r3, #0
 80062e8:	9309      	str	r3, [sp, #36]	; 0x24
 80062ea:	2320      	movs	r3, #32
 80062ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062f0:	2330      	movs	r3, #48	; 0x30
 80062f2:	f04f 0901 	mov.w	r9, #1
 80062f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80062fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80064a0 <_svfiprintf_r+0x1ec>
 80062fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006302:	4623      	mov	r3, r4
 8006304:	469a      	mov	sl, r3
 8006306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800630a:	b10a      	cbz	r2, 8006310 <_svfiprintf_r+0x5c>
 800630c:	2a25      	cmp	r2, #37	; 0x25
 800630e:	d1f9      	bne.n	8006304 <_svfiprintf_r+0x50>
 8006310:	ebba 0b04 	subs.w	fp, sl, r4
 8006314:	d00b      	beq.n	800632e <_svfiprintf_r+0x7a>
 8006316:	465b      	mov	r3, fp
 8006318:	4622      	mov	r2, r4
 800631a:	4629      	mov	r1, r5
 800631c:	4638      	mov	r0, r7
 800631e:	f7ff ff6d 	bl	80061fc <__ssputs_r>
 8006322:	3001      	adds	r0, #1
 8006324:	f000 80aa 	beq.w	800647c <_svfiprintf_r+0x1c8>
 8006328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800632a:	445a      	add	r2, fp
 800632c:	9209      	str	r2, [sp, #36]	; 0x24
 800632e:	f89a 3000 	ldrb.w	r3, [sl]
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 80a2 	beq.w	800647c <_svfiprintf_r+0x1c8>
 8006338:	2300      	movs	r3, #0
 800633a:	f04f 32ff 	mov.w	r2, #4294967295
 800633e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006342:	f10a 0a01 	add.w	sl, sl, #1
 8006346:	9304      	str	r3, [sp, #16]
 8006348:	9307      	str	r3, [sp, #28]
 800634a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800634e:	931a      	str	r3, [sp, #104]	; 0x68
 8006350:	4654      	mov	r4, sl
 8006352:	2205      	movs	r2, #5
 8006354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006358:	4851      	ldr	r0, [pc, #324]	; (80064a0 <_svfiprintf_r+0x1ec>)
 800635a:	f000 fa41 	bl	80067e0 <memchr>
 800635e:	9a04      	ldr	r2, [sp, #16]
 8006360:	b9d8      	cbnz	r0, 800639a <_svfiprintf_r+0xe6>
 8006362:	06d0      	lsls	r0, r2, #27
 8006364:	bf44      	itt	mi
 8006366:	2320      	movmi	r3, #32
 8006368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800636c:	0711      	lsls	r1, r2, #28
 800636e:	bf44      	itt	mi
 8006370:	232b      	movmi	r3, #43	; 0x2b
 8006372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006376:	f89a 3000 	ldrb.w	r3, [sl]
 800637a:	2b2a      	cmp	r3, #42	; 0x2a
 800637c:	d015      	beq.n	80063aa <_svfiprintf_r+0xf6>
 800637e:	4654      	mov	r4, sl
 8006380:	2000      	movs	r0, #0
 8006382:	f04f 0c0a 	mov.w	ip, #10
 8006386:	9a07      	ldr	r2, [sp, #28]
 8006388:	4621      	mov	r1, r4
 800638a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800638e:	3b30      	subs	r3, #48	; 0x30
 8006390:	2b09      	cmp	r3, #9
 8006392:	d94e      	bls.n	8006432 <_svfiprintf_r+0x17e>
 8006394:	b1b0      	cbz	r0, 80063c4 <_svfiprintf_r+0x110>
 8006396:	9207      	str	r2, [sp, #28]
 8006398:	e014      	b.n	80063c4 <_svfiprintf_r+0x110>
 800639a:	eba0 0308 	sub.w	r3, r0, r8
 800639e:	fa09 f303 	lsl.w	r3, r9, r3
 80063a2:	4313      	orrs	r3, r2
 80063a4:	46a2      	mov	sl, r4
 80063a6:	9304      	str	r3, [sp, #16]
 80063a8:	e7d2      	b.n	8006350 <_svfiprintf_r+0x9c>
 80063aa:	9b03      	ldr	r3, [sp, #12]
 80063ac:	1d19      	adds	r1, r3, #4
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	9103      	str	r1, [sp, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	bfbb      	ittet	lt
 80063b6:	425b      	neglt	r3, r3
 80063b8:	f042 0202 	orrlt.w	r2, r2, #2
 80063bc:	9307      	strge	r3, [sp, #28]
 80063be:	9307      	strlt	r3, [sp, #28]
 80063c0:	bfb8      	it	lt
 80063c2:	9204      	strlt	r2, [sp, #16]
 80063c4:	7823      	ldrb	r3, [r4, #0]
 80063c6:	2b2e      	cmp	r3, #46	; 0x2e
 80063c8:	d10c      	bne.n	80063e4 <_svfiprintf_r+0x130>
 80063ca:	7863      	ldrb	r3, [r4, #1]
 80063cc:	2b2a      	cmp	r3, #42	; 0x2a
 80063ce:	d135      	bne.n	800643c <_svfiprintf_r+0x188>
 80063d0:	9b03      	ldr	r3, [sp, #12]
 80063d2:	3402      	adds	r4, #2
 80063d4:	1d1a      	adds	r2, r3, #4
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	9203      	str	r2, [sp, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	bfb8      	it	lt
 80063de:	f04f 33ff 	movlt.w	r3, #4294967295
 80063e2:	9305      	str	r3, [sp, #20]
 80063e4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80064a4 <_svfiprintf_r+0x1f0>
 80063e8:	2203      	movs	r2, #3
 80063ea:	4650      	mov	r0, sl
 80063ec:	7821      	ldrb	r1, [r4, #0]
 80063ee:	f000 f9f7 	bl	80067e0 <memchr>
 80063f2:	b140      	cbz	r0, 8006406 <_svfiprintf_r+0x152>
 80063f4:	2340      	movs	r3, #64	; 0x40
 80063f6:	eba0 000a 	sub.w	r0, r0, sl
 80063fa:	fa03 f000 	lsl.w	r0, r3, r0
 80063fe:	9b04      	ldr	r3, [sp, #16]
 8006400:	3401      	adds	r4, #1
 8006402:	4303      	orrs	r3, r0
 8006404:	9304      	str	r3, [sp, #16]
 8006406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800640a:	2206      	movs	r2, #6
 800640c:	4826      	ldr	r0, [pc, #152]	; (80064a8 <_svfiprintf_r+0x1f4>)
 800640e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006412:	f000 f9e5 	bl	80067e0 <memchr>
 8006416:	2800      	cmp	r0, #0
 8006418:	d038      	beq.n	800648c <_svfiprintf_r+0x1d8>
 800641a:	4b24      	ldr	r3, [pc, #144]	; (80064ac <_svfiprintf_r+0x1f8>)
 800641c:	bb1b      	cbnz	r3, 8006466 <_svfiprintf_r+0x1b2>
 800641e:	9b03      	ldr	r3, [sp, #12]
 8006420:	3307      	adds	r3, #7
 8006422:	f023 0307 	bic.w	r3, r3, #7
 8006426:	3308      	adds	r3, #8
 8006428:	9303      	str	r3, [sp, #12]
 800642a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800642c:	4433      	add	r3, r6
 800642e:	9309      	str	r3, [sp, #36]	; 0x24
 8006430:	e767      	b.n	8006302 <_svfiprintf_r+0x4e>
 8006432:	460c      	mov	r4, r1
 8006434:	2001      	movs	r0, #1
 8006436:	fb0c 3202 	mla	r2, ip, r2, r3
 800643a:	e7a5      	b.n	8006388 <_svfiprintf_r+0xd4>
 800643c:	2300      	movs	r3, #0
 800643e:	f04f 0c0a 	mov.w	ip, #10
 8006442:	4619      	mov	r1, r3
 8006444:	3401      	adds	r4, #1
 8006446:	9305      	str	r3, [sp, #20]
 8006448:	4620      	mov	r0, r4
 800644a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800644e:	3a30      	subs	r2, #48	; 0x30
 8006450:	2a09      	cmp	r2, #9
 8006452:	d903      	bls.n	800645c <_svfiprintf_r+0x1a8>
 8006454:	2b00      	cmp	r3, #0
 8006456:	d0c5      	beq.n	80063e4 <_svfiprintf_r+0x130>
 8006458:	9105      	str	r1, [sp, #20]
 800645a:	e7c3      	b.n	80063e4 <_svfiprintf_r+0x130>
 800645c:	4604      	mov	r4, r0
 800645e:	2301      	movs	r3, #1
 8006460:	fb0c 2101 	mla	r1, ip, r1, r2
 8006464:	e7f0      	b.n	8006448 <_svfiprintf_r+0x194>
 8006466:	ab03      	add	r3, sp, #12
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	462a      	mov	r2, r5
 800646c:	4638      	mov	r0, r7
 800646e:	4b10      	ldr	r3, [pc, #64]	; (80064b0 <_svfiprintf_r+0x1fc>)
 8006470:	a904      	add	r1, sp, #16
 8006472:	f3af 8000 	nop.w
 8006476:	1c42      	adds	r2, r0, #1
 8006478:	4606      	mov	r6, r0
 800647a:	d1d6      	bne.n	800642a <_svfiprintf_r+0x176>
 800647c:	89ab      	ldrh	r3, [r5, #12]
 800647e:	065b      	lsls	r3, r3, #25
 8006480:	f53f af2c 	bmi.w	80062dc <_svfiprintf_r+0x28>
 8006484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006486:	b01d      	add	sp, #116	; 0x74
 8006488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800648c:	ab03      	add	r3, sp, #12
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	462a      	mov	r2, r5
 8006492:	4638      	mov	r0, r7
 8006494:	4b06      	ldr	r3, [pc, #24]	; (80064b0 <_svfiprintf_r+0x1fc>)
 8006496:	a904      	add	r1, sp, #16
 8006498:	f000 f87c 	bl	8006594 <_printf_i>
 800649c:	e7eb      	b.n	8006476 <_svfiprintf_r+0x1c2>
 800649e:	bf00      	nop
 80064a0:	08006ca0 	.word	0x08006ca0
 80064a4:	08006ca6 	.word	0x08006ca6
 80064a8:	08006caa 	.word	0x08006caa
 80064ac:	00000000 	.word	0x00000000
 80064b0:	080061fd 	.word	0x080061fd

080064b4 <_printf_common>:
 80064b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064b8:	4616      	mov	r6, r2
 80064ba:	4699      	mov	r9, r3
 80064bc:	688a      	ldr	r2, [r1, #8]
 80064be:	690b      	ldr	r3, [r1, #16]
 80064c0:	4607      	mov	r7, r0
 80064c2:	4293      	cmp	r3, r2
 80064c4:	bfb8      	it	lt
 80064c6:	4613      	movlt	r3, r2
 80064c8:	6033      	str	r3, [r6, #0]
 80064ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064ce:	460c      	mov	r4, r1
 80064d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064d4:	b10a      	cbz	r2, 80064da <_printf_common+0x26>
 80064d6:	3301      	adds	r3, #1
 80064d8:	6033      	str	r3, [r6, #0]
 80064da:	6823      	ldr	r3, [r4, #0]
 80064dc:	0699      	lsls	r1, r3, #26
 80064de:	bf42      	ittt	mi
 80064e0:	6833      	ldrmi	r3, [r6, #0]
 80064e2:	3302      	addmi	r3, #2
 80064e4:	6033      	strmi	r3, [r6, #0]
 80064e6:	6825      	ldr	r5, [r4, #0]
 80064e8:	f015 0506 	ands.w	r5, r5, #6
 80064ec:	d106      	bne.n	80064fc <_printf_common+0x48>
 80064ee:	f104 0a19 	add.w	sl, r4, #25
 80064f2:	68e3      	ldr	r3, [r4, #12]
 80064f4:	6832      	ldr	r2, [r6, #0]
 80064f6:	1a9b      	subs	r3, r3, r2
 80064f8:	42ab      	cmp	r3, r5
 80064fa:	dc28      	bgt.n	800654e <_printf_common+0x9a>
 80064fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006500:	1e13      	subs	r3, r2, #0
 8006502:	6822      	ldr	r2, [r4, #0]
 8006504:	bf18      	it	ne
 8006506:	2301      	movne	r3, #1
 8006508:	0692      	lsls	r2, r2, #26
 800650a:	d42d      	bmi.n	8006568 <_printf_common+0xb4>
 800650c:	4649      	mov	r1, r9
 800650e:	4638      	mov	r0, r7
 8006510:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006514:	47c0      	blx	r8
 8006516:	3001      	adds	r0, #1
 8006518:	d020      	beq.n	800655c <_printf_common+0xa8>
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	68e5      	ldr	r5, [r4, #12]
 800651e:	f003 0306 	and.w	r3, r3, #6
 8006522:	2b04      	cmp	r3, #4
 8006524:	bf18      	it	ne
 8006526:	2500      	movne	r5, #0
 8006528:	6832      	ldr	r2, [r6, #0]
 800652a:	f04f 0600 	mov.w	r6, #0
 800652e:	68a3      	ldr	r3, [r4, #8]
 8006530:	bf08      	it	eq
 8006532:	1aad      	subeq	r5, r5, r2
 8006534:	6922      	ldr	r2, [r4, #16]
 8006536:	bf08      	it	eq
 8006538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800653c:	4293      	cmp	r3, r2
 800653e:	bfc4      	itt	gt
 8006540:	1a9b      	subgt	r3, r3, r2
 8006542:	18ed      	addgt	r5, r5, r3
 8006544:	341a      	adds	r4, #26
 8006546:	42b5      	cmp	r5, r6
 8006548:	d11a      	bne.n	8006580 <_printf_common+0xcc>
 800654a:	2000      	movs	r0, #0
 800654c:	e008      	b.n	8006560 <_printf_common+0xac>
 800654e:	2301      	movs	r3, #1
 8006550:	4652      	mov	r2, sl
 8006552:	4649      	mov	r1, r9
 8006554:	4638      	mov	r0, r7
 8006556:	47c0      	blx	r8
 8006558:	3001      	adds	r0, #1
 800655a:	d103      	bne.n	8006564 <_printf_common+0xb0>
 800655c:	f04f 30ff 	mov.w	r0, #4294967295
 8006560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006564:	3501      	adds	r5, #1
 8006566:	e7c4      	b.n	80064f2 <_printf_common+0x3e>
 8006568:	2030      	movs	r0, #48	; 0x30
 800656a:	18e1      	adds	r1, r4, r3
 800656c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006576:	4422      	add	r2, r4
 8006578:	3302      	adds	r3, #2
 800657a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800657e:	e7c5      	b.n	800650c <_printf_common+0x58>
 8006580:	2301      	movs	r3, #1
 8006582:	4622      	mov	r2, r4
 8006584:	4649      	mov	r1, r9
 8006586:	4638      	mov	r0, r7
 8006588:	47c0      	blx	r8
 800658a:	3001      	adds	r0, #1
 800658c:	d0e6      	beq.n	800655c <_printf_common+0xa8>
 800658e:	3601      	adds	r6, #1
 8006590:	e7d9      	b.n	8006546 <_printf_common+0x92>
	...

08006594 <_printf_i>:
 8006594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006598:	7e0f      	ldrb	r7, [r1, #24]
 800659a:	4691      	mov	r9, r2
 800659c:	2f78      	cmp	r7, #120	; 0x78
 800659e:	4680      	mov	r8, r0
 80065a0:	460c      	mov	r4, r1
 80065a2:	469a      	mov	sl, r3
 80065a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80065aa:	d807      	bhi.n	80065bc <_printf_i+0x28>
 80065ac:	2f62      	cmp	r7, #98	; 0x62
 80065ae:	d80a      	bhi.n	80065c6 <_printf_i+0x32>
 80065b0:	2f00      	cmp	r7, #0
 80065b2:	f000 80d9 	beq.w	8006768 <_printf_i+0x1d4>
 80065b6:	2f58      	cmp	r7, #88	; 0x58
 80065b8:	f000 80a4 	beq.w	8006704 <_printf_i+0x170>
 80065bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065c4:	e03a      	b.n	800663c <_printf_i+0xa8>
 80065c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065ca:	2b15      	cmp	r3, #21
 80065cc:	d8f6      	bhi.n	80065bc <_printf_i+0x28>
 80065ce:	a101      	add	r1, pc, #4	; (adr r1, 80065d4 <_printf_i+0x40>)
 80065d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065d4:	0800662d 	.word	0x0800662d
 80065d8:	08006641 	.word	0x08006641
 80065dc:	080065bd 	.word	0x080065bd
 80065e0:	080065bd 	.word	0x080065bd
 80065e4:	080065bd 	.word	0x080065bd
 80065e8:	080065bd 	.word	0x080065bd
 80065ec:	08006641 	.word	0x08006641
 80065f0:	080065bd 	.word	0x080065bd
 80065f4:	080065bd 	.word	0x080065bd
 80065f8:	080065bd 	.word	0x080065bd
 80065fc:	080065bd 	.word	0x080065bd
 8006600:	0800674f 	.word	0x0800674f
 8006604:	08006671 	.word	0x08006671
 8006608:	08006731 	.word	0x08006731
 800660c:	080065bd 	.word	0x080065bd
 8006610:	080065bd 	.word	0x080065bd
 8006614:	08006771 	.word	0x08006771
 8006618:	080065bd 	.word	0x080065bd
 800661c:	08006671 	.word	0x08006671
 8006620:	080065bd 	.word	0x080065bd
 8006624:	080065bd 	.word	0x080065bd
 8006628:	08006739 	.word	0x08006739
 800662c:	682b      	ldr	r3, [r5, #0]
 800662e:	1d1a      	adds	r2, r3, #4
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	602a      	str	r2, [r5, #0]
 8006634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800663c:	2301      	movs	r3, #1
 800663e:	e0a4      	b.n	800678a <_printf_i+0x1f6>
 8006640:	6820      	ldr	r0, [r4, #0]
 8006642:	6829      	ldr	r1, [r5, #0]
 8006644:	0606      	lsls	r6, r0, #24
 8006646:	f101 0304 	add.w	r3, r1, #4
 800664a:	d50a      	bpl.n	8006662 <_printf_i+0xce>
 800664c:	680e      	ldr	r6, [r1, #0]
 800664e:	602b      	str	r3, [r5, #0]
 8006650:	2e00      	cmp	r6, #0
 8006652:	da03      	bge.n	800665c <_printf_i+0xc8>
 8006654:	232d      	movs	r3, #45	; 0x2d
 8006656:	4276      	negs	r6, r6
 8006658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800665c:	230a      	movs	r3, #10
 800665e:	485e      	ldr	r0, [pc, #376]	; (80067d8 <_printf_i+0x244>)
 8006660:	e019      	b.n	8006696 <_printf_i+0x102>
 8006662:	680e      	ldr	r6, [r1, #0]
 8006664:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006668:	602b      	str	r3, [r5, #0]
 800666a:	bf18      	it	ne
 800666c:	b236      	sxthne	r6, r6
 800666e:	e7ef      	b.n	8006650 <_printf_i+0xbc>
 8006670:	682b      	ldr	r3, [r5, #0]
 8006672:	6820      	ldr	r0, [r4, #0]
 8006674:	1d19      	adds	r1, r3, #4
 8006676:	6029      	str	r1, [r5, #0]
 8006678:	0601      	lsls	r1, r0, #24
 800667a:	d501      	bpl.n	8006680 <_printf_i+0xec>
 800667c:	681e      	ldr	r6, [r3, #0]
 800667e:	e002      	b.n	8006686 <_printf_i+0xf2>
 8006680:	0646      	lsls	r6, r0, #25
 8006682:	d5fb      	bpl.n	800667c <_printf_i+0xe8>
 8006684:	881e      	ldrh	r6, [r3, #0]
 8006686:	2f6f      	cmp	r7, #111	; 0x6f
 8006688:	bf0c      	ite	eq
 800668a:	2308      	moveq	r3, #8
 800668c:	230a      	movne	r3, #10
 800668e:	4852      	ldr	r0, [pc, #328]	; (80067d8 <_printf_i+0x244>)
 8006690:	2100      	movs	r1, #0
 8006692:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006696:	6865      	ldr	r5, [r4, #4]
 8006698:	2d00      	cmp	r5, #0
 800669a:	bfa8      	it	ge
 800669c:	6821      	ldrge	r1, [r4, #0]
 800669e:	60a5      	str	r5, [r4, #8]
 80066a0:	bfa4      	itt	ge
 80066a2:	f021 0104 	bicge.w	r1, r1, #4
 80066a6:	6021      	strge	r1, [r4, #0]
 80066a8:	b90e      	cbnz	r6, 80066ae <_printf_i+0x11a>
 80066aa:	2d00      	cmp	r5, #0
 80066ac:	d04d      	beq.n	800674a <_printf_i+0x1b6>
 80066ae:	4615      	mov	r5, r2
 80066b0:	fbb6 f1f3 	udiv	r1, r6, r3
 80066b4:	fb03 6711 	mls	r7, r3, r1, r6
 80066b8:	5dc7      	ldrb	r7, [r0, r7]
 80066ba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066be:	4637      	mov	r7, r6
 80066c0:	42bb      	cmp	r3, r7
 80066c2:	460e      	mov	r6, r1
 80066c4:	d9f4      	bls.n	80066b0 <_printf_i+0x11c>
 80066c6:	2b08      	cmp	r3, #8
 80066c8:	d10b      	bne.n	80066e2 <_printf_i+0x14e>
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	07de      	lsls	r6, r3, #31
 80066ce:	d508      	bpl.n	80066e2 <_printf_i+0x14e>
 80066d0:	6923      	ldr	r3, [r4, #16]
 80066d2:	6861      	ldr	r1, [r4, #4]
 80066d4:	4299      	cmp	r1, r3
 80066d6:	bfde      	ittt	le
 80066d8:	2330      	movle	r3, #48	; 0x30
 80066da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066e2:	1b52      	subs	r2, r2, r5
 80066e4:	6122      	str	r2, [r4, #16]
 80066e6:	464b      	mov	r3, r9
 80066e8:	4621      	mov	r1, r4
 80066ea:	4640      	mov	r0, r8
 80066ec:	f8cd a000 	str.w	sl, [sp]
 80066f0:	aa03      	add	r2, sp, #12
 80066f2:	f7ff fedf 	bl	80064b4 <_printf_common>
 80066f6:	3001      	adds	r0, #1
 80066f8:	d14c      	bne.n	8006794 <_printf_i+0x200>
 80066fa:	f04f 30ff 	mov.w	r0, #4294967295
 80066fe:	b004      	add	sp, #16
 8006700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006704:	4834      	ldr	r0, [pc, #208]	; (80067d8 <_printf_i+0x244>)
 8006706:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800670a:	6829      	ldr	r1, [r5, #0]
 800670c:	6823      	ldr	r3, [r4, #0]
 800670e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006712:	6029      	str	r1, [r5, #0]
 8006714:	061d      	lsls	r5, r3, #24
 8006716:	d514      	bpl.n	8006742 <_printf_i+0x1ae>
 8006718:	07df      	lsls	r7, r3, #31
 800671a:	bf44      	itt	mi
 800671c:	f043 0320 	orrmi.w	r3, r3, #32
 8006720:	6023      	strmi	r3, [r4, #0]
 8006722:	b91e      	cbnz	r6, 800672c <_printf_i+0x198>
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	f023 0320 	bic.w	r3, r3, #32
 800672a:	6023      	str	r3, [r4, #0]
 800672c:	2310      	movs	r3, #16
 800672e:	e7af      	b.n	8006690 <_printf_i+0xfc>
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	f043 0320 	orr.w	r3, r3, #32
 8006736:	6023      	str	r3, [r4, #0]
 8006738:	2378      	movs	r3, #120	; 0x78
 800673a:	4828      	ldr	r0, [pc, #160]	; (80067dc <_printf_i+0x248>)
 800673c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006740:	e7e3      	b.n	800670a <_printf_i+0x176>
 8006742:	0659      	lsls	r1, r3, #25
 8006744:	bf48      	it	mi
 8006746:	b2b6      	uxthmi	r6, r6
 8006748:	e7e6      	b.n	8006718 <_printf_i+0x184>
 800674a:	4615      	mov	r5, r2
 800674c:	e7bb      	b.n	80066c6 <_printf_i+0x132>
 800674e:	682b      	ldr	r3, [r5, #0]
 8006750:	6826      	ldr	r6, [r4, #0]
 8006752:	1d18      	adds	r0, r3, #4
 8006754:	6961      	ldr	r1, [r4, #20]
 8006756:	6028      	str	r0, [r5, #0]
 8006758:	0635      	lsls	r5, r6, #24
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	d501      	bpl.n	8006762 <_printf_i+0x1ce>
 800675e:	6019      	str	r1, [r3, #0]
 8006760:	e002      	b.n	8006768 <_printf_i+0x1d4>
 8006762:	0670      	lsls	r0, r6, #25
 8006764:	d5fb      	bpl.n	800675e <_printf_i+0x1ca>
 8006766:	8019      	strh	r1, [r3, #0]
 8006768:	2300      	movs	r3, #0
 800676a:	4615      	mov	r5, r2
 800676c:	6123      	str	r3, [r4, #16]
 800676e:	e7ba      	b.n	80066e6 <_printf_i+0x152>
 8006770:	682b      	ldr	r3, [r5, #0]
 8006772:	2100      	movs	r1, #0
 8006774:	1d1a      	adds	r2, r3, #4
 8006776:	602a      	str	r2, [r5, #0]
 8006778:	681d      	ldr	r5, [r3, #0]
 800677a:	6862      	ldr	r2, [r4, #4]
 800677c:	4628      	mov	r0, r5
 800677e:	f000 f82f 	bl	80067e0 <memchr>
 8006782:	b108      	cbz	r0, 8006788 <_printf_i+0x1f4>
 8006784:	1b40      	subs	r0, r0, r5
 8006786:	6060      	str	r0, [r4, #4]
 8006788:	6863      	ldr	r3, [r4, #4]
 800678a:	6123      	str	r3, [r4, #16]
 800678c:	2300      	movs	r3, #0
 800678e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006792:	e7a8      	b.n	80066e6 <_printf_i+0x152>
 8006794:	462a      	mov	r2, r5
 8006796:	4649      	mov	r1, r9
 8006798:	4640      	mov	r0, r8
 800679a:	6923      	ldr	r3, [r4, #16]
 800679c:	47d0      	blx	sl
 800679e:	3001      	adds	r0, #1
 80067a0:	d0ab      	beq.n	80066fa <_printf_i+0x166>
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	079b      	lsls	r3, r3, #30
 80067a6:	d413      	bmi.n	80067d0 <_printf_i+0x23c>
 80067a8:	68e0      	ldr	r0, [r4, #12]
 80067aa:	9b03      	ldr	r3, [sp, #12]
 80067ac:	4298      	cmp	r0, r3
 80067ae:	bfb8      	it	lt
 80067b0:	4618      	movlt	r0, r3
 80067b2:	e7a4      	b.n	80066fe <_printf_i+0x16a>
 80067b4:	2301      	movs	r3, #1
 80067b6:	4632      	mov	r2, r6
 80067b8:	4649      	mov	r1, r9
 80067ba:	4640      	mov	r0, r8
 80067bc:	47d0      	blx	sl
 80067be:	3001      	adds	r0, #1
 80067c0:	d09b      	beq.n	80066fa <_printf_i+0x166>
 80067c2:	3501      	adds	r5, #1
 80067c4:	68e3      	ldr	r3, [r4, #12]
 80067c6:	9903      	ldr	r1, [sp, #12]
 80067c8:	1a5b      	subs	r3, r3, r1
 80067ca:	42ab      	cmp	r3, r5
 80067cc:	dcf2      	bgt.n	80067b4 <_printf_i+0x220>
 80067ce:	e7eb      	b.n	80067a8 <_printf_i+0x214>
 80067d0:	2500      	movs	r5, #0
 80067d2:	f104 0619 	add.w	r6, r4, #25
 80067d6:	e7f5      	b.n	80067c4 <_printf_i+0x230>
 80067d8:	08006cb1 	.word	0x08006cb1
 80067dc:	08006cc2 	.word	0x08006cc2

080067e0 <memchr>:
 80067e0:	4603      	mov	r3, r0
 80067e2:	b510      	push	{r4, lr}
 80067e4:	b2c9      	uxtb	r1, r1
 80067e6:	4402      	add	r2, r0
 80067e8:	4293      	cmp	r3, r2
 80067ea:	4618      	mov	r0, r3
 80067ec:	d101      	bne.n	80067f2 <memchr+0x12>
 80067ee:	2000      	movs	r0, #0
 80067f0:	e003      	b.n	80067fa <memchr+0x1a>
 80067f2:	7804      	ldrb	r4, [r0, #0]
 80067f4:	3301      	adds	r3, #1
 80067f6:	428c      	cmp	r4, r1
 80067f8:	d1f6      	bne.n	80067e8 <memchr+0x8>
 80067fa:	bd10      	pop	{r4, pc}

080067fc <memmove>:
 80067fc:	4288      	cmp	r0, r1
 80067fe:	b510      	push	{r4, lr}
 8006800:	eb01 0402 	add.w	r4, r1, r2
 8006804:	d902      	bls.n	800680c <memmove+0x10>
 8006806:	4284      	cmp	r4, r0
 8006808:	4623      	mov	r3, r4
 800680a:	d807      	bhi.n	800681c <memmove+0x20>
 800680c:	1e43      	subs	r3, r0, #1
 800680e:	42a1      	cmp	r1, r4
 8006810:	d008      	beq.n	8006824 <memmove+0x28>
 8006812:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800681a:	e7f8      	b.n	800680e <memmove+0x12>
 800681c:	4601      	mov	r1, r0
 800681e:	4402      	add	r2, r0
 8006820:	428a      	cmp	r2, r1
 8006822:	d100      	bne.n	8006826 <memmove+0x2a>
 8006824:	bd10      	pop	{r4, pc}
 8006826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800682a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800682e:	e7f7      	b.n	8006820 <memmove+0x24>

08006830 <_free_r>:
 8006830:	b538      	push	{r3, r4, r5, lr}
 8006832:	4605      	mov	r5, r0
 8006834:	2900      	cmp	r1, #0
 8006836:	d040      	beq.n	80068ba <_free_r+0x8a>
 8006838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800683c:	1f0c      	subs	r4, r1, #4
 800683e:	2b00      	cmp	r3, #0
 8006840:	bfb8      	it	lt
 8006842:	18e4      	addlt	r4, r4, r3
 8006844:	f000 f910 	bl	8006a68 <__malloc_lock>
 8006848:	4a1c      	ldr	r2, [pc, #112]	; (80068bc <_free_r+0x8c>)
 800684a:	6813      	ldr	r3, [r2, #0]
 800684c:	b933      	cbnz	r3, 800685c <_free_r+0x2c>
 800684e:	6063      	str	r3, [r4, #4]
 8006850:	6014      	str	r4, [r2, #0]
 8006852:	4628      	mov	r0, r5
 8006854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006858:	f000 b90c 	b.w	8006a74 <__malloc_unlock>
 800685c:	42a3      	cmp	r3, r4
 800685e:	d908      	bls.n	8006872 <_free_r+0x42>
 8006860:	6820      	ldr	r0, [r4, #0]
 8006862:	1821      	adds	r1, r4, r0
 8006864:	428b      	cmp	r3, r1
 8006866:	bf01      	itttt	eq
 8006868:	6819      	ldreq	r1, [r3, #0]
 800686a:	685b      	ldreq	r3, [r3, #4]
 800686c:	1809      	addeq	r1, r1, r0
 800686e:	6021      	streq	r1, [r4, #0]
 8006870:	e7ed      	b.n	800684e <_free_r+0x1e>
 8006872:	461a      	mov	r2, r3
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	b10b      	cbz	r3, 800687c <_free_r+0x4c>
 8006878:	42a3      	cmp	r3, r4
 800687a:	d9fa      	bls.n	8006872 <_free_r+0x42>
 800687c:	6811      	ldr	r1, [r2, #0]
 800687e:	1850      	adds	r0, r2, r1
 8006880:	42a0      	cmp	r0, r4
 8006882:	d10b      	bne.n	800689c <_free_r+0x6c>
 8006884:	6820      	ldr	r0, [r4, #0]
 8006886:	4401      	add	r1, r0
 8006888:	1850      	adds	r0, r2, r1
 800688a:	4283      	cmp	r3, r0
 800688c:	6011      	str	r1, [r2, #0]
 800688e:	d1e0      	bne.n	8006852 <_free_r+0x22>
 8006890:	6818      	ldr	r0, [r3, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	4401      	add	r1, r0
 8006896:	6011      	str	r1, [r2, #0]
 8006898:	6053      	str	r3, [r2, #4]
 800689a:	e7da      	b.n	8006852 <_free_r+0x22>
 800689c:	d902      	bls.n	80068a4 <_free_r+0x74>
 800689e:	230c      	movs	r3, #12
 80068a0:	602b      	str	r3, [r5, #0]
 80068a2:	e7d6      	b.n	8006852 <_free_r+0x22>
 80068a4:	6820      	ldr	r0, [r4, #0]
 80068a6:	1821      	adds	r1, r4, r0
 80068a8:	428b      	cmp	r3, r1
 80068aa:	bf01      	itttt	eq
 80068ac:	6819      	ldreq	r1, [r3, #0]
 80068ae:	685b      	ldreq	r3, [r3, #4]
 80068b0:	1809      	addeq	r1, r1, r0
 80068b2:	6021      	streq	r1, [r4, #0]
 80068b4:	6063      	str	r3, [r4, #4]
 80068b6:	6054      	str	r4, [r2, #4]
 80068b8:	e7cb      	b.n	8006852 <_free_r+0x22>
 80068ba:	bd38      	pop	{r3, r4, r5, pc}
 80068bc:	20001ef8 	.word	0x20001ef8

080068c0 <sbrk_aligned>:
 80068c0:	b570      	push	{r4, r5, r6, lr}
 80068c2:	4e0e      	ldr	r6, [pc, #56]	; (80068fc <sbrk_aligned+0x3c>)
 80068c4:	460c      	mov	r4, r1
 80068c6:	6831      	ldr	r1, [r6, #0]
 80068c8:	4605      	mov	r5, r0
 80068ca:	b911      	cbnz	r1, 80068d2 <sbrk_aligned+0x12>
 80068cc:	f000 f8bc 	bl	8006a48 <_sbrk_r>
 80068d0:	6030      	str	r0, [r6, #0]
 80068d2:	4621      	mov	r1, r4
 80068d4:	4628      	mov	r0, r5
 80068d6:	f000 f8b7 	bl	8006a48 <_sbrk_r>
 80068da:	1c43      	adds	r3, r0, #1
 80068dc:	d00a      	beq.n	80068f4 <sbrk_aligned+0x34>
 80068de:	1cc4      	adds	r4, r0, #3
 80068e0:	f024 0403 	bic.w	r4, r4, #3
 80068e4:	42a0      	cmp	r0, r4
 80068e6:	d007      	beq.n	80068f8 <sbrk_aligned+0x38>
 80068e8:	1a21      	subs	r1, r4, r0
 80068ea:	4628      	mov	r0, r5
 80068ec:	f000 f8ac 	bl	8006a48 <_sbrk_r>
 80068f0:	3001      	adds	r0, #1
 80068f2:	d101      	bne.n	80068f8 <sbrk_aligned+0x38>
 80068f4:	f04f 34ff 	mov.w	r4, #4294967295
 80068f8:	4620      	mov	r0, r4
 80068fa:	bd70      	pop	{r4, r5, r6, pc}
 80068fc:	20001efc 	.word	0x20001efc

08006900 <_malloc_r>:
 8006900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006904:	1ccd      	adds	r5, r1, #3
 8006906:	f025 0503 	bic.w	r5, r5, #3
 800690a:	3508      	adds	r5, #8
 800690c:	2d0c      	cmp	r5, #12
 800690e:	bf38      	it	cc
 8006910:	250c      	movcc	r5, #12
 8006912:	2d00      	cmp	r5, #0
 8006914:	4607      	mov	r7, r0
 8006916:	db01      	blt.n	800691c <_malloc_r+0x1c>
 8006918:	42a9      	cmp	r1, r5
 800691a:	d905      	bls.n	8006928 <_malloc_r+0x28>
 800691c:	230c      	movs	r3, #12
 800691e:	2600      	movs	r6, #0
 8006920:	603b      	str	r3, [r7, #0]
 8006922:	4630      	mov	r0, r6
 8006924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006928:	4e2e      	ldr	r6, [pc, #184]	; (80069e4 <_malloc_r+0xe4>)
 800692a:	f000 f89d 	bl	8006a68 <__malloc_lock>
 800692e:	6833      	ldr	r3, [r6, #0]
 8006930:	461c      	mov	r4, r3
 8006932:	bb34      	cbnz	r4, 8006982 <_malloc_r+0x82>
 8006934:	4629      	mov	r1, r5
 8006936:	4638      	mov	r0, r7
 8006938:	f7ff ffc2 	bl	80068c0 <sbrk_aligned>
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	4604      	mov	r4, r0
 8006940:	d14d      	bne.n	80069de <_malloc_r+0xde>
 8006942:	6834      	ldr	r4, [r6, #0]
 8006944:	4626      	mov	r6, r4
 8006946:	2e00      	cmp	r6, #0
 8006948:	d140      	bne.n	80069cc <_malloc_r+0xcc>
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	4631      	mov	r1, r6
 800694e:	4638      	mov	r0, r7
 8006950:	eb04 0803 	add.w	r8, r4, r3
 8006954:	f000 f878 	bl	8006a48 <_sbrk_r>
 8006958:	4580      	cmp	r8, r0
 800695a:	d13a      	bne.n	80069d2 <_malloc_r+0xd2>
 800695c:	6821      	ldr	r1, [r4, #0]
 800695e:	3503      	adds	r5, #3
 8006960:	1a6d      	subs	r5, r5, r1
 8006962:	f025 0503 	bic.w	r5, r5, #3
 8006966:	3508      	adds	r5, #8
 8006968:	2d0c      	cmp	r5, #12
 800696a:	bf38      	it	cc
 800696c:	250c      	movcc	r5, #12
 800696e:	4638      	mov	r0, r7
 8006970:	4629      	mov	r1, r5
 8006972:	f7ff ffa5 	bl	80068c0 <sbrk_aligned>
 8006976:	3001      	adds	r0, #1
 8006978:	d02b      	beq.n	80069d2 <_malloc_r+0xd2>
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	442b      	add	r3, r5
 800697e:	6023      	str	r3, [r4, #0]
 8006980:	e00e      	b.n	80069a0 <_malloc_r+0xa0>
 8006982:	6822      	ldr	r2, [r4, #0]
 8006984:	1b52      	subs	r2, r2, r5
 8006986:	d41e      	bmi.n	80069c6 <_malloc_r+0xc6>
 8006988:	2a0b      	cmp	r2, #11
 800698a:	d916      	bls.n	80069ba <_malloc_r+0xba>
 800698c:	1961      	adds	r1, r4, r5
 800698e:	42a3      	cmp	r3, r4
 8006990:	6025      	str	r5, [r4, #0]
 8006992:	bf18      	it	ne
 8006994:	6059      	strne	r1, [r3, #4]
 8006996:	6863      	ldr	r3, [r4, #4]
 8006998:	bf08      	it	eq
 800699a:	6031      	streq	r1, [r6, #0]
 800699c:	5162      	str	r2, [r4, r5]
 800699e:	604b      	str	r3, [r1, #4]
 80069a0:	4638      	mov	r0, r7
 80069a2:	f104 060b 	add.w	r6, r4, #11
 80069a6:	f000 f865 	bl	8006a74 <__malloc_unlock>
 80069aa:	f026 0607 	bic.w	r6, r6, #7
 80069ae:	1d23      	adds	r3, r4, #4
 80069b0:	1af2      	subs	r2, r6, r3
 80069b2:	d0b6      	beq.n	8006922 <_malloc_r+0x22>
 80069b4:	1b9b      	subs	r3, r3, r6
 80069b6:	50a3      	str	r3, [r4, r2]
 80069b8:	e7b3      	b.n	8006922 <_malloc_r+0x22>
 80069ba:	6862      	ldr	r2, [r4, #4]
 80069bc:	42a3      	cmp	r3, r4
 80069be:	bf0c      	ite	eq
 80069c0:	6032      	streq	r2, [r6, #0]
 80069c2:	605a      	strne	r2, [r3, #4]
 80069c4:	e7ec      	b.n	80069a0 <_malloc_r+0xa0>
 80069c6:	4623      	mov	r3, r4
 80069c8:	6864      	ldr	r4, [r4, #4]
 80069ca:	e7b2      	b.n	8006932 <_malloc_r+0x32>
 80069cc:	4634      	mov	r4, r6
 80069ce:	6876      	ldr	r6, [r6, #4]
 80069d0:	e7b9      	b.n	8006946 <_malloc_r+0x46>
 80069d2:	230c      	movs	r3, #12
 80069d4:	4638      	mov	r0, r7
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	f000 f84c 	bl	8006a74 <__malloc_unlock>
 80069dc:	e7a1      	b.n	8006922 <_malloc_r+0x22>
 80069de:	6025      	str	r5, [r4, #0]
 80069e0:	e7de      	b.n	80069a0 <_malloc_r+0xa0>
 80069e2:	bf00      	nop
 80069e4:	20001ef8 	.word	0x20001ef8

080069e8 <_realloc_r>:
 80069e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ec:	4680      	mov	r8, r0
 80069ee:	4614      	mov	r4, r2
 80069f0:	460e      	mov	r6, r1
 80069f2:	b921      	cbnz	r1, 80069fe <_realloc_r+0x16>
 80069f4:	4611      	mov	r1, r2
 80069f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069fa:	f7ff bf81 	b.w	8006900 <_malloc_r>
 80069fe:	b92a      	cbnz	r2, 8006a0c <_realloc_r+0x24>
 8006a00:	f7ff ff16 	bl	8006830 <_free_r>
 8006a04:	4625      	mov	r5, r4
 8006a06:	4628      	mov	r0, r5
 8006a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a0c:	f000 f838 	bl	8006a80 <_malloc_usable_size_r>
 8006a10:	4284      	cmp	r4, r0
 8006a12:	4607      	mov	r7, r0
 8006a14:	d802      	bhi.n	8006a1c <_realloc_r+0x34>
 8006a16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a1a:	d812      	bhi.n	8006a42 <_realloc_r+0x5a>
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	4640      	mov	r0, r8
 8006a20:	f7ff ff6e 	bl	8006900 <_malloc_r>
 8006a24:	4605      	mov	r5, r0
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d0ed      	beq.n	8006a06 <_realloc_r+0x1e>
 8006a2a:	42bc      	cmp	r4, r7
 8006a2c:	4622      	mov	r2, r4
 8006a2e:	4631      	mov	r1, r6
 8006a30:	bf28      	it	cs
 8006a32:	463a      	movcs	r2, r7
 8006a34:	f7ff fbac 	bl	8006190 <memcpy>
 8006a38:	4631      	mov	r1, r6
 8006a3a:	4640      	mov	r0, r8
 8006a3c:	f7ff fef8 	bl	8006830 <_free_r>
 8006a40:	e7e1      	b.n	8006a06 <_realloc_r+0x1e>
 8006a42:	4635      	mov	r5, r6
 8006a44:	e7df      	b.n	8006a06 <_realloc_r+0x1e>
	...

08006a48 <_sbrk_r>:
 8006a48:	b538      	push	{r3, r4, r5, lr}
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	4d05      	ldr	r5, [pc, #20]	; (8006a64 <_sbrk_r+0x1c>)
 8006a4e:	4604      	mov	r4, r0
 8006a50:	4608      	mov	r0, r1
 8006a52:	602b      	str	r3, [r5, #0]
 8006a54:	f7fa f96c 	bl	8000d30 <_sbrk>
 8006a58:	1c43      	adds	r3, r0, #1
 8006a5a:	d102      	bne.n	8006a62 <_sbrk_r+0x1a>
 8006a5c:	682b      	ldr	r3, [r5, #0]
 8006a5e:	b103      	cbz	r3, 8006a62 <_sbrk_r+0x1a>
 8006a60:	6023      	str	r3, [r4, #0]
 8006a62:	bd38      	pop	{r3, r4, r5, pc}
 8006a64:	20001f00 	.word	0x20001f00

08006a68 <__malloc_lock>:
 8006a68:	4801      	ldr	r0, [pc, #4]	; (8006a70 <__malloc_lock+0x8>)
 8006a6a:	f000 b811 	b.w	8006a90 <__retarget_lock_acquire_recursive>
 8006a6e:	bf00      	nop
 8006a70:	20001f04 	.word	0x20001f04

08006a74 <__malloc_unlock>:
 8006a74:	4801      	ldr	r0, [pc, #4]	; (8006a7c <__malloc_unlock+0x8>)
 8006a76:	f000 b80c 	b.w	8006a92 <__retarget_lock_release_recursive>
 8006a7a:	bf00      	nop
 8006a7c:	20001f04 	.word	0x20001f04

08006a80 <_malloc_usable_size_r>:
 8006a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a84:	1f18      	subs	r0, r3, #4
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	bfbc      	itt	lt
 8006a8a:	580b      	ldrlt	r3, [r1, r0]
 8006a8c:	18c0      	addlt	r0, r0, r3
 8006a8e:	4770      	bx	lr

08006a90 <__retarget_lock_acquire_recursive>:
 8006a90:	4770      	bx	lr

08006a92 <__retarget_lock_release_recursive>:
 8006a92:	4770      	bx	lr

08006a94 <_init>:
 8006a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a96:	bf00      	nop
 8006a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9a:	bc08      	pop	{r3}
 8006a9c:	469e      	mov	lr, r3
 8006a9e:	4770      	bx	lr

08006aa0 <_fini>:
 8006aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa2:	bf00      	nop
 8006aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa6:	bc08      	pop	{r3}
 8006aa8:	469e      	mov	lr, r3
 8006aaa:	4770      	bx	lr
