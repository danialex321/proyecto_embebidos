
FreeRTOS_V5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f28  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08006038  08006038  00016038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061fc  080061fc  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080061fc  080061fc  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061fc  080061fc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061fc  080061fc  000161fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006200  08006200  00016200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e84  20000014  08006218  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e98  08006218  00021e98  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143d5  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e98  00000000  00000000  00034412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  000372b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  000384d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b89  00000000  00000000  000395b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134d6  00000000  00000000  0003c141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096e5a  00000000  00000000  0004f617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6471  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b84  00000000  00000000  000e64c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08006020 	.word	0x08006020

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08006020 	.word	0x08006020

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fd20 	bl	8000b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f894 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f9e0 	bl	8000520 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000160:	f000 f8ec 	bl	800033c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000164:	f000 f928 	bl	80003b8 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000168:	f000 f964 	bl	8000434 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 800016c:	482b      	ldr	r0, [pc, #172]	; (800021c <main+0xcc>)
 800016e:	f000 fe1d 	bl	8000dac <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8000172:	482b      	ldr	r0, [pc, #172]	; (8000220 <main+0xd0>)
 8000174:	f000 fe1a 	bl	8000dac <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000178:	2100      	movs	r1, #0
 800017a:	482a      	ldr	r0, [pc, #168]	; (8000224 <main+0xd4>)
 800017c:	f002 faa4 	bl	80026c8 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000180:	f003 f906 	bl	8003390 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of ThrottleQueue */
  ThrottleQueueHandle = osMessageQueueNew (32, sizeof(uint32_t), &ThrottleQueue_attributes);
 8000184:	4a28      	ldr	r2, [pc, #160]	; (8000228 <main+0xd8>)
 8000186:	2104      	movs	r1, #4
 8000188:	2020      	movs	r0, #32
 800018a:	f003 fa3f 	bl	800360c <osMessageQueueNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a26      	ldr	r2, [pc, #152]	; (800022c <main+0xdc>)
 8000192:	6013      	str	r3, [r2, #0]

  /* creation of BrakeQueue */
  BrakeQueueHandle = osMessageQueueNew (32, sizeof(uint32_t), &BrakeQueue_attributes);
 8000194:	4a26      	ldr	r2, [pc, #152]	; (8000230 <main+0xe0>)
 8000196:	2104      	movs	r1, #4
 8000198:	2020      	movs	r0, #32
 800019a:	f003 fa37 	bl	800360c <osMessageQueueNew>
 800019e:	4603      	mov	r3, r0
 80001a0:	4a24      	ldr	r2, [pc, #144]	; (8000234 <main+0xe4>)
 80001a2:	6013      	str	r3, [r2, #0]

  /* creation of GearQueue */
  GearQueueHandle = osMessageQueueNew (16, sizeof(char), &GearQueue_attributes);
 80001a4:	4a24      	ldr	r2, [pc, #144]	; (8000238 <main+0xe8>)
 80001a6:	2101      	movs	r1, #1
 80001a8:	2010      	movs	r0, #16
 80001aa:	f003 fa2f 	bl	800360c <osMessageQueueNew>
 80001ae:	4603      	mov	r3, r0
 80001b0:	4a22      	ldr	r2, [pc, #136]	; (800023c <main+0xec>)
 80001b2:	6013      	str	r3, [r2, #0]

  /* creation of SpeedQueue */
  SpeedQueueHandle = osMessageQueueNew (32, sizeof(uint32_t), &SpeedQueue_attributes);
 80001b4:	4a22      	ldr	r2, [pc, #136]	; (8000240 <main+0xf0>)
 80001b6:	2104      	movs	r1, #4
 80001b8:	2020      	movs	r0, #32
 80001ba:	f003 fa27 	bl	800360c <osMessageQueueNew>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a20      	ldr	r2, [pc, #128]	; (8000244 <main+0xf4>)
 80001c2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Throttle */
  ThrottleHandle = osThreadNew(ThrottleInput, NULL, &Throttle_attributes);
 80001c4:	4a20      	ldr	r2, [pc, #128]	; (8000248 <main+0xf8>)
 80001c6:	2100      	movs	r1, #0
 80001c8:	4820      	ldr	r0, [pc, #128]	; (800024c <main+0xfc>)
 80001ca:	f003 f947 	bl	800345c <osThreadNew>
 80001ce:	4603      	mov	r3, r0
 80001d0:	4a1f      	ldr	r2, [pc, #124]	; (8000250 <main+0x100>)
 80001d2:	6013      	str	r3, [r2, #0]

  /* creation of Brake */
  BrakeHandle = osThreadNew(BrakeInput, NULL, &Brake_attributes);
 80001d4:	4a1f      	ldr	r2, [pc, #124]	; (8000254 <main+0x104>)
 80001d6:	2100      	movs	r1, #0
 80001d8:	481f      	ldr	r0, [pc, #124]	; (8000258 <main+0x108>)
 80001da:	f003 f93f 	bl	800345c <osThreadNew>
 80001de:	4603      	mov	r3, r0
 80001e0:	4a1e      	ldr	r2, [pc, #120]	; (800025c <main+0x10c>)
 80001e2:	6013      	str	r3, [r2, #0]

  /* creation of Gear */
  GearHandle = osThreadNew(GearSelection, NULL, &Gear_attributes);
 80001e4:	4a1e      	ldr	r2, [pc, #120]	; (8000260 <main+0x110>)
 80001e6:	2100      	movs	r1, #0
 80001e8:	481e      	ldr	r0, [pc, #120]	; (8000264 <main+0x114>)
 80001ea:	f003 f937 	bl	800345c <osThreadNew>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4a1d      	ldr	r2, [pc, #116]	; (8000268 <main+0x118>)
 80001f2:	6013      	str	r3, [r2, #0]

  /* creation of Data */
  DataHandle = osThreadNew(DataProcessing, NULL, &Data_attributes);
 80001f4:	4a1d      	ldr	r2, [pc, #116]	; (800026c <main+0x11c>)
 80001f6:	2100      	movs	r1, #0
 80001f8:	481d      	ldr	r0, [pc, #116]	; (8000270 <main+0x120>)
 80001fa:	f003 f92f 	bl	800345c <osThreadNew>
 80001fe:	4603      	mov	r3, r0
 8000200:	4a1c      	ldr	r2, [pc, #112]	; (8000274 <main+0x124>)
 8000202:	6013      	str	r3, [r2, #0]

  /* creation of Display */
  DisplayHandle = osThreadNew(OutputDisplay, NULL, &Display_attributes);
 8000204:	4a1c      	ldr	r2, [pc, #112]	; (8000278 <main+0x128>)
 8000206:	2100      	movs	r1, #0
 8000208:	481c      	ldr	r0, [pc, #112]	; (800027c <main+0x12c>)
 800020a:	f003 f927 	bl	800345c <osThreadNew>
 800020e:	4603      	mov	r3, r0
 8000210:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <main+0x130>)
 8000212:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000214:	f003 f8ee 	bl	80033f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000218:	e7fe      	b.n	8000218 <main+0xc8>
 800021a:	bf00      	nop
 800021c:	20000030 	.word	0x20000030
 8000220:	20000060 	.word	0x20000060
 8000224:	20000090 	.word	0x20000090
 8000228:	08006184 	.word	0x08006184
 800022c:	200000ec 	.word	0x200000ec
 8000230:	0800619c 	.word	0x0800619c
 8000234:	200000f0 	.word	0x200000f0
 8000238:	080061b4 	.word	0x080061b4
 800023c:	200000f4 	.word	0x200000f4
 8000240:	080061cc 	.word	0x080061cc
 8000244:	200000f8 	.word	0x200000f8
 8000248:	080060d0 	.word	0x080060d0
 800024c:	0800064d 	.word	0x0800064d
 8000250:	200000d8 	.word	0x200000d8
 8000254:	080060f4 	.word	0x080060f4
 8000258:	0800071d 	.word	0x0800071d
 800025c:	200000dc 	.word	0x200000dc
 8000260:	08006118 	.word	0x08006118
 8000264:	08000799 	.word	0x08000799
 8000268:	200000e0 	.word	0x200000e0
 800026c:	0800613c 	.word	0x0800613c
 8000270:	080007f9 	.word	0x080007f9
 8000274:	200000e4 	.word	0x200000e4
 8000278:	08006160 	.word	0x08006160
 800027c:	08000809 	.word	0x08000809
 8000280:	200000e8 	.word	0x200000e8

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b094      	sub	sp, #80	; 0x50
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800028e:	2228      	movs	r2, #40	; 0x28
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f005 febc 	bl	8006010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	f107 0314 	add.w	r3, r7, #20
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	605a      	str	r2, [r3, #4]
 80002a2:	609a      	str	r2, [r3, #8]
 80002a4:	60da      	str	r2, [r3, #12]
 80002a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002b4:	2301      	movs	r3, #1
 80002b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c2:	2301      	movs	r3, #1
 80002c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c6:	2302      	movs	r3, #2
 80002c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 fb4e 	bl	800197c <HAL_RCC_OscConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002e6:	f000 faa9 	bl	800083c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	230f      	movs	r3, #15
 80002ec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ee:	2302      	movs	r3, #2
 80002f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000300:	f107 0314 	add.w	r3, r7, #20
 8000304:	2102      	movs	r1, #2
 8000306:	4618      	mov	r0, r3
 8000308:	f001 fdba 	bl	8001e80 <HAL_RCC_ClockConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000312:	f000 fa93 	bl	800083c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000316:	2302      	movs	r3, #2
 8000318:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800031a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800031e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	4618      	mov	r0, r3
 8000324:	f001 ff60 	bl	80021e8 <HAL_RCCEx_PeriphCLKConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800032e:	f000 fa85 	bl	800083c <Error_Handler>
  }
}
 8000332:	bf00      	nop
 8000334:	3750      	adds	r7, #80	; 0x50
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800034c:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <MX_ADC1_Init+0x74>)
 800034e:	4a19      	ldr	r2, [pc, #100]	; (80003b4 <MX_ADC1_Init+0x78>)
 8000350:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000352:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <MX_ADC1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <MX_ADC1_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800035e:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <MX_ADC1_Init+0x74>)
 8000360:	2200      	movs	r2, #0
 8000362:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <MX_ADC1_Init+0x74>)
 8000366:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800036a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <MX_ADC1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <MX_ADC1_Init+0x74>)
 8000374:	2201      	movs	r2, #1
 8000376:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000378:	480d      	ldr	r0, [pc, #52]	; (80003b0 <MX_ADC1_Init+0x74>)
 800037a:	f000 fc3f 	bl	8000bfc <HAL_ADC_Init>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000384:	f000 fa5a 	bl	800083c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000388:	2304      	movs	r3, #4
 800038a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800038c:	2301      	movs	r3, #1
 800038e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	4619      	mov	r1, r3
 8000398:	4805      	ldr	r0, [pc, #20]	; (80003b0 <MX_ADC1_Init+0x74>)
 800039a:	f000 fec7 	bl	800112c <HAL_ADC_ConfigChannel>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003a4:	f000 fa4a 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003a8:	bf00      	nop
 80003aa:	3710      	adds	r7, #16
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000030 	.word	0x20000030
 80003b4:	40012400 	.word	0x40012400

080003b8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80003c8:	4b18      	ldr	r3, [pc, #96]	; (800042c <MX_ADC2_Init+0x74>)
 80003ca:	4a19      	ldr	r2, [pc, #100]	; (8000430 <MX_ADC2_Init+0x78>)
 80003cc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ce:	4b17      	ldr	r3, [pc, #92]	; (800042c <MX_ADC2_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <MX_ADC2_Init+0x74>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003da:	4b14      	ldr	r3, [pc, #80]	; (800042c <MX_ADC2_Init+0x74>)
 80003dc:	2200      	movs	r2, #0
 80003de:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <MX_ADC2_Init+0x74>)
 80003e2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003e6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003e8:	4b10      	ldr	r3, [pc, #64]	; (800042c <MX_ADC2_Init+0x74>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80003ee:	4b0f      	ldr	r3, [pc, #60]	; (800042c <MX_ADC2_Init+0x74>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003f4:	480d      	ldr	r0, [pc, #52]	; (800042c <MX_ADC2_Init+0x74>)
 80003f6:	f000 fc01 	bl	8000bfc <HAL_ADC_Init>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000400:	f000 fa1c 	bl	800083c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000404:	2305      	movs	r3, #5
 8000406:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000408:	2301      	movs	r3, #1
 800040a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800040c:	2300      	movs	r3, #0
 800040e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	4619      	mov	r1, r3
 8000414:	4805      	ldr	r0, [pc, #20]	; (800042c <MX_ADC2_Init+0x74>)
 8000416:	f000 fe89 	bl	800112c <HAL_ADC_ConfigChannel>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000420:	f000 fa0c 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000424:	bf00      	nop
 8000426:	3710      	adds	r7, #16
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000060 	.word	0x20000060
 8000430:	40012800 	.word	0x40012800

08000434 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b08e      	sub	sp, #56	; 0x38
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800043a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000448:	f107 0320 	add.w	r3, r7, #32
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
 8000460:	615a      	str	r2, [r3, #20]
 8000462:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000464:	4b2d      	ldr	r3, [pc, #180]	; (800051c <MX_TIM2_Init+0xe8>)
 8000466:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800046a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800046c:	4b2b      	ldr	r3, [pc, #172]	; (800051c <MX_TIM2_Init+0xe8>)
 800046e:	2200      	movs	r2, #0
 8000470:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000472:	4b2a      	ldr	r3, [pc, #168]	; (800051c <MX_TIM2_Init+0xe8>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000478:	4b28      	ldr	r3, [pc, #160]	; (800051c <MX_TIM2_Init+0xe8>)
 800047a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800047e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000480:	4b26      	ldr	r3, [pc, #152]	; (800051c <MX_TIM2_Init+0xe8>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000486:	4b25      	ldr	r3, [pc, #148]	; (800051c <MX_TIM2_Init+0xe8>)
 8000488:	2200      	movs	r2, #0
 800048a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800048c:	4823      	ldr	r0, [pc, #140]	; (800051c <MX_TIM2_Init+0xe8>)
 800048e:	f002 f821 	bl	80024d4 <HAL_TIM_Base_Init>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000498:	f000 f9d0 	bl	800083c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800049c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004a6:	4619      	mov	r1, r3
 80004a8:	481c      	ldr	r0, [pc, #112]	; (800051c <MX_TIM2_Init+0xe8>)
 80004aa:	f002 fb75 	bl	8002b98 <HAL_TIM_ConfigClockSource>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80004b4:	f000 f9c2 	bl	800083c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004b8:	4818      	ldr	r0, [pc, #96]	; (800051c <MX_TIM2_Init+0xe8>)
 80004ba:	f002 f8ad 	bl	8002618 <HAL_TIM_PWM_Init>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80004c4:	f000 f9ba 	bl	800083c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c8:	2300      	movs	r3, #0
 80004ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004cc:	2300      	movs	r3, #0
 80004ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004d0:	f107 0320 	add.w	r3, r7, #32
 80004d4:	4619      	mov	r1, r3
 80004d6:	4811      	ldr	r0, [pc, #68]	; (800051c <MX_TIM2_Init+0xe8>)
 80004d8:	f002 feea 	bl	80032b0 <HAL_TIMEx_MasterConfigSynchronization>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80004e2:	f000 f9ab 	bl	800083c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004e6:	2360      	movs	r3, #96	; 0x60
 80004e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2200      	movs	r2, #0
 80004fa:	4619      	mov	r1, r3
 80004fc:	4807      	ldr	r0, [pc, #28]	; (800051c <MX_TIM2_Init+0xe8>)
 80004fe:	f002 fa8d 	bl	8002a1c <HAL_TIM_PWM_ConfigChannel>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000508:	f000 f998 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800050c:	4803      	ldr	r0, [pc, #12]	; (800051c <MX_TIM2_Init+0xe8>)
 800050e:	f000 fa55 	bl	80009bc <HAL_TIM_MspPostInit>

}
 8000512:	bf00      	nop
 8000514:	3738      	adds	r7, #56	; 0x38
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000090 	.word	0x20000090

08000520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000526:	f107 0310 	add.w	r3, r7, #16
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000534:	4b2e      	ldr	r3, [pc, #184]	; (80005f0 <MX_GPIO_Init+0xd0>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a2d      	ldr	r2, [pc, #180]	; (80005f0 <MX_GPIO_Init+0xd0>)
 800053a:	f043 0320 	orr.w	r3, r3, #32
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b2b      	ldr	r3, [pc, #172]	; (80005f0 <MX_GPIO_Init+0xd0>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f003 0320 	and.w	r3, r3, #32
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <MX_GPIO_Init+0xd0>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a27      	ldr	r2, [pc, #156]	; (80005f0 <MX_GPIO_Init+0xd0>)
 8000552:	f043 0304 	orr.w	r3, r3, #4
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b25      	ldr	r3, [pc, #148]	; (80005f0 <MX_GPIO_Init+0xd0>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f003 0304 	and.w	r3, r3, #4
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <MX_GPIO_Init+0xd0>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <MX_GPIO_Init+0xd0>)
 800056a:	f043 0308 	orr.w	r3, r3, #8
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <MX_GPIO_Init+0xd0>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0308 	and.w	r3, r3, #8
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	210a      	movs	r1, #10
 8000580:	481c      	ldr	r0, [pc, #112]	; (80005f4 <MX_GPIO_Init+0xd4>)
 8000582:	f001 f9e2 	bl	800194a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f640 4103 	movw	r1, #3075	; 0xc03
 800058c:	481a      	ldr	r0, [pc, #104]	; (80005f8 <MX_GPIO_Init+0xd8>)
 800058e:	f001 f9dc 	bl	800194a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000592:	230a      	movs	r3, #10
 8000594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	2301      	movs	r3, #1
 8000598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2302      	movs	r3, #2
 80005a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	4619      	mov	r1, r3
 80005a8:	4812      	ldr	r0, [pc, #72]	; (80005f4 <MX_GPIO_Init+0xd4>)
 80005aa:	f001 f833 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 80005ae:	f640 4303 	movw	r3, #3075	; 0xc03
 80005b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	2302      	movs	r3, #2
 80005be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	4619      	mov	r1, r3
 80005c6:	480c      	ldr	r0, [pc, #48]	; (80005f8 <MX_GPIO_Init+0xd8>)
 80005c8:	f001 f824 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005cc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	4619      	mov	r1, r3
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <MX_GPIO_Init+0xd4>)
 80005e2:	f001 f817 	bl	8001614 <HAL_GPIO_Init>

}
 80005e6:	bf00      	nop
 80005e8:	3720      	adds	r7, #32
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40010800 	.word	0x40010800
 80005f8:	40010c00 	.word	0x40010c00

080005fc <MAP.0>:
/* USER CODE END Header_ThrottleInput */
void ThrottleInput(void *argument)
{
  /* USER CODE BEGIN 5 */
	uint16_t MAP(uint16_t au32_IN, uint16_t au32_INmin, uint16_t au32_INmax, uint16_t au32_OUTmin, uint16_t au32_OUTmax)
		{
 80005fc:	b490      	push	{r4, r7}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	4604      	mov	r4, r0
 8000604:	4608      	mov	r0, r1
 8000606:	4611      	mov	r1, r2
 8000608:	461a      	mov	r2, r3
 800060a:	4623      	mov	r3, r4
 800060c:	81fb      	strh	r3, [r7, #14]
 800060e:	4603      	mov	r3, r0
 8000610:	81bb      	strh	r3, [r7, #12]
 8000612:	460b      	mov	r3, r1
 8000614:	817b      	strh	r3, [r7, #10]
 8000616:	4613      	mov	r3, r2
 8000618:	813b      	strh	r3, [r7, #8]
 800061a:	f8c7 c004 	str.w	ip, [r7, #4]
		    return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 800061e:	89fa      	ldrh	r2, [r7, #14]
 8000620:	89bb      	ldrh	r3, [r7, #12]
 8000622:	1ad3      	subs	r3, r2, r3
 8000624:	8b39      	ldrh	r1, [r7, #24]
 8000626:	893a      	ldrh	r2, [r7, #8]
 8000628:	1a8a      	subs	r2, r1, r2
 800062a:	fb03 f202 	mul.w	r2, r3, r2
 800062e:	8979      	ldrh	r1, [r7, #10]
 8000630:	89bb      	ldrh	r3, [r7, #12]
 8000632:	1acb      	subs	r3, r1, r3
 8000634:	fb92 f3f3 	sdiv	r3, r2, r3
 8000638:	b29a      	uxth	r2, r3
 800063a:	893b      	ldrh	r3, [r7, #8]
 800063c:	4413      	add	r3, r2
 800063e:	b29b      	uxth	r3, r3
		}
 8000640:	4618      	mov	r0, r3
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bc90      	pop	{r4, r7}
 8000648:	4770      	bx	lr
	...

0800064c <ThrottleInput>:
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af02      	add	r7, sp, #8
 8000652:	6078      	str	r0, [r7, #4]
void ThrottleInput(void *argument)
 8000654:	f107 0318 	add.w	r3, r7, #24
 8000658:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_PollForConversion(&hadc2,1000);
 800065a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800065e:	4816      	ldr	r0, [pc, #88]	; (80006b8 <ThrottleInput+0x6c>)
 8000660:	f000 fc52 	bl	8000f08 <HAL_ADC_PollForConversion>
	  throttle = HAL_ADC_GetValue(&hadc2);
 8000664:	4814      	ldr	r0, [pc, #80]	; (80006b8 <ThrottleInput+0x6c>)
 8000666:	f000 fd55 	bl	8001114 <HAL_ADC_GetValue>
 800066a:	4603      	mov	r3, r0
 800066c:	b29a      	uxth	r2, r3
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <ThrottleInput+0x70>)
 8000670:	801a      	strh	r2, [r3, #0]
	  throttleMap = MAP(brake, 0,4020,0,100);
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <ThrottleInput+0x74>)
 8000674:	8818      	ldrh	r0, [r3, #0]
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2264      	movs	r2, #100	; 0x64
 800067c:	9200      	str	r2, [sp, #0]
 800067e:	469c      	mov	ip, r3
 8000680:	2300      	movs	r3, #0
 8000682:	f640 72b4 	movw	r2, #4020	; 0xfb4
 8000686:	2100      	movs	r1, #0
 8000688:	f7ff ffb8 	bl	80005fc <MAP.0>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <ThrottleInput+0x78>)
 8000692:	801a      	strh	r2, [r3, #0]
	  if (throttleMap < 15)
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <ThrottleInput+0x78>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	2b0e      	cmp	r3, #14
 800069a:	d802      	bhi.n	80006a2 <ThrottleInput+0x56>
	  {
		  throttleMap = 0;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <ThrottleInput+0x78>)
 800069e:	2200      	movs	r2, #0
 80006a0:	801a      	strh	r2, [r3, #0]
	  }
	  osMessageQueuePut(ThrottleQueueHandle, &throttleMap,0,200);
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <ThrottleInput+0x7c>)
 80006a4:	6818      	ldr	r0, [r3, #0]
 80006a6:	23c8      	movs	r3, #200	; 0xc8
 80006a8:	2200      	movs	r2, #0
 80006aa:	4906      	ldr	r1, [pc, #24]	; (80006c4 <ThrottleInput+0x78>)
 80006ac:	f003 f834 	bl	8003718 <osMessageQueuePut>
    osDelay(10);
 80006b0:	200a      	movs	r0, #10
 80006b2:	f002 ff7d 	bl	80035b0 <osDelay>
	  HAL_ADC_PollForConversion(&hadc2,1000);
 80006b6:	e7d0      	b.n	800065a <ThrottleInput+0xe>
 80006b8:	20000060 	.word	0x20000060
 80006bc:	200000fc 	.word	0x200000fc
 80006c0:	200000fe 	.word	0x200000fe
 80006c4:	20000100 	.word	0x20000100
 80006c8:	200000ec 	.word	0x200000ec

080006cc <MAP.1>:
/* USER CODE END Header_BrakeInput */
void BrakeInput(void *argument)
{
  /* USER CODE BEGIN BrakeInput */
	uint16_t MAP(uint16_t au32_IN, uint16_t au32_INmin, uint16_t au32_INmax, uint16_t au32_OUTmin, uint16_t au32_OUTmax)
	{
 80006cc:	b490      	push	{r4, r7}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4604      	mov	r4, r0
 80006d4:	4608      	mov	r0, r1
 80006d6:	4611      	mov	r1, r2
 80006d8:	461a      	mov	r2, r3
 80006da:	4623      	mov	r3, r4
 80006dc:	81fb      	strh	r3, [r7, #14]
 80006de:	4603      	mov	r3, r0
 80006e0:	81bb      	strh	r3, [r7, #12]
 80006e2:	460b      	mov	r3, r1
 80006e4:	817b      	strh	r3, [r7, #10]
 80006e6:	4613      	mov	r3, r2
 80006e8:	813b      	strh	r3, [r7, #8]
 80006ea:	f8c7 c004 	str.w	ip, [r7, #4]
	    return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 80006ee:	89fa      	ldrh	r2, [r7, #14]
 80006f0:	89bb      	ldrh	r3, [r7, #12]
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	8b39      	ldrh	r1, [r7, #24]
 80006f6:	893a      	ldrh	r2, [r7, #8]
 80006f8:	1a8a      	subs	r2, r1, r2
 80006fa:	fb03 f202 	mul.w	r2, r3, r2
 80006fe:	8979      	ldrh	r1, [r7, #10]
 8000700:	89bb      	ldrh	r3, [r7, #12]
 8000702:	1acb      	subs	r3, r1, r3
 8000704:	fb92 f3f3 	sdiv	r3, r2, r3
 8000708:	b29a      	uxth	r2, r3
 800070a:	893b      	ldrh	r3, [r7, #8]
 800070c:	4413      	add	r3, r2
 800070e:	b29b      	uxth	r3, r3
	}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bc90      	pop	{r4, r7}
 8000718:	4770      	bx	lr
	...

0800071c <BrakeInput>:
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af02      	add	r7, sp, #8
 8000722:	6078      	str	r0, [r7, #4]
void BrakeInput(void *argument)
 8000724:	f107 0318 	add.w	r3, r7, #24
 8000728:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_PollForConversion(&hadc2,1000);
 800072a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800072e:	4816      	ldr	r0, [pc, #88]	; (8000788 <BrakeInput+0x6c>)
 8000730:	f000 fbea 	bl	8000f08 <HAL_ADC_PollForConversion>
	  brake = HAL_ADC_GetValue(&hadc2);
 8000734:	4814      	ldr	r0, [pc, #80]	; (8000788 <BrakeInput+0x6c>)
 8000736:	f000 fced 	bl	8001114 <HAL_ADC_GetValue>
 800073a:	4603      	mov	r3, r0
 800073c:	b29a      	uxth	r2, r3
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <BrakeInput+0x70>)
 8000740:	801a      	strh	r2, [r3, #0]
	  brakeMap = MAP(brake, 0,4020,0,100);
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <BrakeInput+0x70>)
 8000744:	8818      	ldrh	r0, [r3, #0]
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2264      	movs	r2, #100	; 0x64
 800074c:	9200      	str	r2, [sp, #0]
 800074e:	469c      	mov	ip, r3
 8000750:	2300      	movs	r3, #0
 8000752:	f640 72b4 	movw	r2, #4020	; 0xfb4
 8000756:	2100      	movs	r1, #0
 8000758:	f7ff ffb8 	bl	80006cc <MAP.1>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <BrakeInput+0x74>)
 8000762:	801a      	strh	r2, [r3, #0]
	  if (brakeMap < 15)
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <BrakeInput+0x74>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	2b0e      	cmp	r3, #14
 800076a:	d802      	bhi.n	8000772 <BrakeInput+0x56>
	  	  {
	  		  brakeMap = 0;
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <BrakeInput+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	801a      	strh	r2, [r3, #0]
	  	  }
	  osMessageQueuePut(BrakeQueueHandle, &brakeMap,0,200);
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <BrakeInput+0x78>)
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	23c8      	movs	r3, #200	; 0xc8
 8000778:	2200      	movs	r2, #0
 800077a:	4905      	ldr	r1, [pc, #20]	; (8000790 <BrakeInput+0x74>)
 800077c:	f002 ffcc 	bl	8003718 <osMessageQueuePut>
    osDelay(10);
 8000780:	200a      	movs	r0, #10
 8000782:	f002 ff15 	bl	80035b0 <osDelay>
	  HAL_ADC_PollForConversion(&hadc2,1000);
 8000786:	e7d0      	b.n	800072a <BrakeInput+0xe>
 8000788:	20000060 	.word	0x20000060
 800078c:	200000fe 	.word	0x200000fe
 8000790:	20000102 	.word	0x20000102
 8000794:	200000f0 	.word	0x200000f0

08000798 <GearSelection>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GearSelection */
void GearSelection(void *argument)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GearSelection */
  /* Infinite loop */
  for(;;)
  {
	  if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12)) //if bit0 == 1(which is bit4 in DIP) means car is parked
 80007a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a4:	4811      	ldr	r0, [pc, #68]	; (80007ec <GearSelection+0x54>)
 80007a6:	f001 f8b9 	bl	800191c <HAL_GPIO_ReadPin>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d003      	beq.n	80007b8 <GearSelection+0x20>
	 	  {
	 		  gear = 'P';
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <GearSelection+0x58>)
 80007b2:	2250      	movs	r2, #80	; 0x50
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	e00e      	b.n	80007d6 <GearSelection+0x3e>
	 	  }
	 	  else //car is moving
	 	  {
	 		  if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11)) //bit1 means car is moving
 80007b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007bc:	480b      	ldr	r0, [pc, #44]	; (80007ec <GearSelection+0x54>)
 80007be:	f001 f8ad 	bl	800191c <HAL_GPIO_ReadPin>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d003      	beq.n	80007d0 <GearSelection+0x38>
	 		  {
	 			  gear = '2';
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <GearSelection+0x58>)
 80007ca:	2232      	movs	r2, #50	; 0x32
 80007cc:	701a      	strb	r2, [r3, #0]
 80007ce:	e002      	b.n	80007d6 <GearSelection+0x3e>
	 		  }
	 		  else
	 		  {
	 			  gear = '1';
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <GearSelection+0x58>)
 80007d2:	2231      	movs	r2, #49	; 0x31
 80007d4:	701a      	strb	r2, [r3, #0]
	 		  }
	 	  }
	  osMessageQueuePut(GearQueueHandle,&gear,0,250);
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <GearSelection+0x5c>)
 80007d8:	6818      	ldr	r0, [r3, #0]
 80007da:	23fa      	movs	r3, #250	; 0xfa
 80007dc:	2200      	movs	r2, #0
 80007de:	4904      	ldr	r1, [pc, #16]	; (80007f0 <GearSelection+0x58>)
 80007e0:	f002 ff9a 	bl	8003718 <osMessageQueuePut>
    osDelay(1);
 80007e4:	2001      	movs	r0, #1
 80007e6:	f002 fee3 	bl	80035b0 <osDelay>
	  if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12)) //if bit0 == 1(which is bit4 in DIP) means car is parked
 80007ea:	e7d9      	b.n	80007a0 <GearSelection+0x8>
 80007ec:	40010800 	.word	0x40010800
 80007f0:	20000000 	.word	0x20000000
 80007f4:	200000f4 	.word	0x200000f4

080007f8 <DataProcessing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DataProcessing */
void DataProcessing(void *argument)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DataProcessing */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000800:	2001      	movs	r0, #1
 8000802:	f002 fed5 	bl	80035b0 <osDelay>
 8000806:	e7fb      	b.n	8000800 <DataProcessing+0x8>

08000808 <OutputDisplay>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OutputDisplay */
void OutputDisplay(void *argument)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OutputDisplay */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000810:	2001      	movs	r0, #1
 8000812:	f002 fecd 	bl	80035b0 <osDelay>
 8000816:	e7fb      	b.n	8000810 <OutputDisplay+0x8>

08000818 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d101      	bne.n	800082e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800082a:	f000 f9cb 	bl	8000bc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40012c00 	.word	0x40012c00

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x8>
	...

08000848 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800084e:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <HAL_MspInit+0x68>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4a17      	ldr	r2, [pc, #92]	; (80008b0 <HAL_MspInit+0x68>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6193      	str	r3, [r2, #24]
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <HAL_MspInit+0x68>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <HAL_MspInit+0x68>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	4a11      	ldr	r2, [pc, #68]	; (80008b0 <HAL_MspInit+0x68>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000870:	61d3      	str	r3, [r2, #28]
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <HAL_MspInit+0x68>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	210f      	movs	r1, #15
 8000882:	f06f 0001 	mvn.w	r0, #1
 8000886:	f000 fe9a 	bl	80015be <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <HAL_MspInit+0x6c>)
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <HAL_MspInit+0x6c>)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40010000 	.word	0x40010000

080008b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0318 	add.w	r3, r7, #24
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a28      	ldr	r2, [pc, #160]	; (8000974 <HAL_ADC_MspInit+0xbc>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d122      	bne.n	800091e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <HAL_ADC_MspInit+0xc0>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a26      	ldr	r2, [pc, #152]	; (8000978 <HAL_ADC_MspInit+0xc0>)
 80008de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b24      	ldr	r3, [pc, #144]	; (8000978 <HAL_ADC_MspInit+0xc0>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <HAL_ADC_MspInit+0xc0>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	4a20      	ldr	r2, [pc, #128]	; (8000978 <HAL_ADC_MspInit+0xc0>)
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <HAL_ADC_MspInit+0xc0>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f003 0304 	and.w	r3, r3, #4
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000908:	2310      	movs	r3, #16
 800090a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090c:	2303      	movs	r3, #3
 800090e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 0318 	add.w	r3, r7, #24
 8000914:	4619      	mov	r1, r3
 8000916:	4819      	ldr	r0, [pc, #100]	; (800097c <HAL_ADC_MspInit+0xc4>)
 8000918:	f000 fe7c 	bl	8001614 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800091c:	e026      	b.n	800096c <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a17      	ldr	r2, [pc, #92]	; (8000980 <HAL_ADC_MspInit+0xc8>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d121      	bne.n	800096c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <HAL_ADC_MspInit+0xc0>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a12      	ldr	r2, [pc, #72]	; (8000978 <HAL_ADC_MspInit+0xc0>)
 800092e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b10      	ldr	r3, [pc, #64]	; (8000978 <HAL_ADC_MspInit+0xc0>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_ADC_MspInit+0xc0>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a0c      	ldr	r2, [pc, #48]	; (8000978 <HAL_ADC_MspInit+0xc0>)
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_ADC_MspInit+0xc0>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0304 	and.w	r3, r3, #4
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000958:	2320      	movs	r3, #32
 800095a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095c:	2303      	movs	r3, #3
 800095e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000960:	f107 0318 	add.w	r3, r7, #24
 8000964:	4619      	mov	r1, r3
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <HAL_ADC_MspInit+0xc4>)
 8000968:	f000 fe54 	bl	8001614 <HAL_GPIO_Init>
}
 800096c:	bf00      	nop
 800096e:	3728      	adds	r7, #40	; 0x28
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40012400 	.word	0x40012400
 8000978:	40021000 	.word	0x40021000
 800097c:	40010800 	.word	0x40010800
 8000980:	40012800 	.word	0x40012800

08000984 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000994:	d10b      	bne.n	80009ae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_TIM_Base_MspInit+0x34>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <HAL_TIM_Base_MspInit+0x34>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	61d3      	str	r3, [r2, #28]
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <HAL_TIM_Base_MspInit+0x34>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009da:	d117      	bne.n	8000a0c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <HAL_TIM_MspPostInit+0x58>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <HAL_TIM_MspPostInit+0x58>)
 80009e2:	f043 0304 	orr.w	r3, r3, #4
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <HAL_TIM_MspPostInit+0x58>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0304 	and.w	r3, r3, #4
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009f4:	2301      	movs	r3, #1
 80009f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4619      	mov	r1, r3
 8000a06:	4804      	ldr	r0, [pc, #16]	; (8000a18 <HAL_TIM_MspPostInit+0x5c>)
 8000a08:	f000 fe04 	bl	8001614 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a0c:	bf00      	nop
 8000a0e:	3720      	adds	r7, #32
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40010800 	.word	0x40010800

08000a1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a32:	4b2e      	ldr	r3, [pc, #184]	; (8000aec <HAL_InitTick+0xd0>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	4a2d      	ldr	r2, [pc, #180]	; (8000aec <HAL_InitTick+0xd0>)
 8000a38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a3c:	6193      	str	r3, [r2, #24]
 8000a3e:	4b2b      	ldr	r3, [pc, #172]	; (8000aec <HAL_InitTick+0xd0>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a4a:	f107 020c 	add.w	r2, r7, #12
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	4611      	mov	r1, r2
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 fb79 	bl	800214c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a5a:	f001 fb63 	bl	8002124 <HAL_RCC_GetPCLK2Freq>
 8000a5e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a62:	4a23      	ldr	r2, [pc, #140]	; (8000af0 <HAL_InitTick+0xd4>)
 8000a64:	fba2 2303 	umull	r2, r3, r2, r3
 8000a68:	0c9b      	lsrs	r3, r3, #18
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a6e:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <HAL_InitTick+0xd8>)
 8000a70:	4a21      	ldr	r2, [pc, #132]	; (8000af8 <HAL_InitTick+0xdc>)
 8000a72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <HAL_InitTick+0xd8>)
 8000a76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a7a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a7c:	4a1d      	ldr	r2, [pc, #116]	; (8000af4 <HAL_InitTick+0xd8>)
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a80:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <HAL_InitTick+0xd8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a88:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <HAL_InitTick+0xd8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8e:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <HAL_InitTick+0xd8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a94:	4817      	ldr	r0, [pc, #92]	; (8000af4 <HAL_InitTick+0xd8>)
 8000a96:	f001 fd1d 	bl	80024d4 <HAL_TIM_Base_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000aa0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d11b      	bne.n	8000ae0 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000aa8:	4812      	ldr	r0, [pc, #72]	; (8000af4 <HAL_InitTick+0xd8>)
 8000aaa:	f001 fd63 	bl	8002574 <HAL_TIM_Base_Start_IT>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ab4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d111      	bne.n	8000ae0 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000abc:	2019      	movs	r0, #25
 8000abe:	f000 fd9a 	bl	80015f6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	d808      	bhi.n	8000ada <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	2019      	movs	r0, #25
 8000ace:	f000 fd76 	bl	80015be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <HAL_InitTick+0xe0>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6013      	str	r3, [r2, #0]
 8000ad8:	e002      	b.n	8000ae0 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ae0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3730      	adds	r7, #48	; 0x30
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40021000 	.word	0x40021000
 8000af0:	431bde83 	.word	0x431bde83
 8000af4:	20000104 	.word	0x20000104
 8000af8:	40012c00 	.word	0x40012c00
 8000afc:	20000008 	.word	0x20000008

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <NMI_Handler+0x4>

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <MemManage_Handler+0x4>

08000b12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
	...

08000b2c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <TIM1_UP_IRQHandler+0x10>)
 8000b32:	f001 fe6b 	bl	800280c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000104 	.word	0x20000104

08000b40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b4c:	480c      	ldr	r0, [pc, #48]	; (8000b80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b4e:	490d      	ldr	r1, [pc, #52]	; (8000b84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b50:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b54:	e002      	b.n	8000b5c <LoopCopyDataInit>

08000b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5a:	3304      	adds	r3, #4

08000b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b60:	d3f9      	bcc.n	8000b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b64:	4c0a      	ldr	r4, [pc, #40]	; (8000b90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b68:	e001      	b.n	8000b6e <LoopFillZerobss>

08000b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b6c:	3204      	adds	r2, #4

08000b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b70:	d3fb      	bcc.n	8000b6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b72:	f7ff ffe5 	bl	8000b40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b76:	f005 fa19 	bl	8005fac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b7a:	f7ff fae9 	bl	8000150 <main>
  bx lr
 8000b7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b84:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b88:	08006204 	.word	0x08006204
  ldr r2, =_sbss
 8000b8c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b90:	20001e98 	.word	0x20001e98

08000b94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC1_2_IRQHandler>
	...

08000b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_Init+0x28>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <HAL_Init+0x28>)
 8000ba2:	f043 0310 	orr.w	r3, r3, #16
 8000ba6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f000 fcfd 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bae:	200f      	movs	r0, #15
 8000bb0:	f7ff ff34 	bl	8000a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb4:	f7ff fe48 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40022000 	.word	0x40022000

08000bc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <HAL_IncTick+0x1c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_IncTick+0x20>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	4a03      	ldr	r2, [pc, #12]	; (8000be4 <HAL_IncTick+0x20>)
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	2000000c 	.word	0x2000000c
 8000be4:	2000014c 	.word	0x2000014c

08000be8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return uwTick;
 8000bec:	4b02      	ldr	r3, [pc, #8]	; (8000bf8 <HAL_GetTick+0x10>)
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	2000014c 	.word	0x2000014c

08000bfc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c04:	2300      	movs	r3, #0
 8000c06:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e0be      	b.n	8000d9c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d109      	bne.n	8000c40 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff fe3c 	bl	80008b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f000 fbc5 	bl	80013d0 <ADC_ConversionStop_Disable>
 8000c46:	4603      	mov	r3, r0
 8000c48:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4e:	f003 0310 	and.w	r3, r3, #16
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f040 8099 	bne.w	8000d8a <HAL_ADC_Init+0x18e>
 8000c58:	7dfb      	ldrb	r3, [r7, #23]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f040 8095 	bne.w	8000d8a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c68:	f023 0302 	bic.w	r3, r3, #2
 8000c6c:	f043 0202 	orr.w	r2, r3, #2
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c7c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	7b1b      	ldrb	r3, [r3, #12]
 8000c82:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c84:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c94:	d003      	beq.n	8000c9e <HAL_ADC_Init+0xa2>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d102      	bne.n	8000ca4 <HAL_ADC_Init+0xa8>
 8000c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca2:	e000      	b.n	8000ca6 <HAL_ADC_Init+0xaa>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	7d1b      	ldrb	r3, [r3, #20]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d119      	bne.n	8000ce8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	7b1b      	ldrb	r3, [r3, #12]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d109      	bne.n	8000cd0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	035a      	lsls	r2, r3, #13
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	e00b      	b.n	8000ce8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd4:	f043 0220 	orr.w	r2, r3, #32
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce0:	f043 0201 	orr.w	r2, r3, #1
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <HAL_ADC_Init+0x1a8>)
 8000d04:	4013      	ands	r3, r2
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	6812      	ldr	r2, [r2, #0]
 8000d0a:	68b9      	ldr	r1, [r7, #8]
 8000d0c:	430b      	orrs	r3, r1
 8000d0e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d18:	d003      	beq.n	8000d22 <HAL_ADC_Init+0x126>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d104      	bne.n	8000d2c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	691b      	ldr	r3, [r3, #16]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	051b      	lsls	r3, r3, #20
 8000d2a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d32:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	689a      	ldr	r2, [r3, #8]
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <HAL_ADC_Init+0x1ac>)
 8000d48:	4013      	ands	r3, r2
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d10b      	bne.n	8000d68 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5a:	f023 0303 	bic.w	r3, r3, #3
 8000d5e:	f043 0201 	orr.w	r2, r3, #1
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d66:	e018      	b.n	8000d9a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6c:	f023 0312 	bic.w	r3, r3, #18
 8000d70:	f043 0210 	orr.w	r2, r3, #16
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7c:	f043 0201 	orr.w	r2, r3, #1
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d88:	e007      	b.n	8000d9a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8e:	f043 0210 	orr.w	r2, r3, #16
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	ffe1f7fd 	.word	0xffe1f7fd
 8000da8:	ff1f0efe 	.word	0xff1f0efe

08000dac <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d101      	bne.n	8000dc6 <HAL_ADC_Start+0x1a>
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	e098      	b.n	8000ef8 <HAL_ADC_Start+0x14c>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f000 faa4 	bl	800131c <ADC_Enable>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f040 8087 	bne.w	8000eee <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000de8:	f023 0301 	bic.w	r3, r3, #1
 8000dec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a41      	ldr	r2, [pc, #260]	; (8000f00 <HAL_ADC_Start+0x154>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d105      	bne.n	8000e0a <HAL_ADC_Start+0x5e>
 8000dfe:	4b41      	ldr	r3, [pc, #260]	; (8000f04 <HAL_ADC_Start+0x158>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d115      	bne.n	8000e36 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d026      	beq.n	8000e72 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e2c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e34:	e01d      	b.n	8000e72 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a2f      	ldr	r2, [pc, #188]	; (8000f04 <HAL_ADC_Start+0x158>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d004      	beq.n	8000e56 <HAL_ADC_Start+0xaa>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a2b      	ldr	r2, [pc, #172]	; (8000f00 <HAL_ADC_Start+0x154>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d10d      	bne.n	8000e72 <HAL_ADC_Start+0xc6>
 8000e56:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <HAL_ADC_Start+0x158>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d007      	beq.n	8000e72 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d006      	beq.n	8000e8c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e82:	f023 0206 	bic.w	r2, r3, #6
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e8a:	e002      	b.n	8000e92 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f06f 0202 	mvn.w	r2, #2
 8000ea2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000eae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000eb2:	d113      	bne.n	8000edc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000eb8:	4a11      	ldr	r2, [pc, #68]	; (8000f00 <HAL_ADC_Start+0x154>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d105      	bne.n	8000eca <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <HAL_ADC_Start+0x158>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d108      	bne.n	8000edc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	e00c      	b.n	8000ef6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	e003      	b.n	8000ef6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40012800 	.word	0x40012800
 8000f04:	40012400 	.word	0x40012400

08000f08 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b087      	sub	sp, #28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f1e:	f7ff fe63 	bl	8000be8 <HAL_GetTick>
 8000f22:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00b      	beq.n	8000f4a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f36:	f043 0220 	orr.w	r2, r3, #32
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e0d3      	b.n	80010f2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d131      	bne.n	8000fbc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d12a      	bne.n	8000fbc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f66:	e021      	b.n	8000fac <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6e:	d01d      	beq.n	8000fac <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d007      	beq.n	8000f86 <HAL_ADC_PollForConversion+0x7e>
 8000f76:	f7ff fe37 	bl	8000be8 <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d212      	bcs.n	8000fac <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d10b      	bne.n	8000fac <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f98:	f043 0204 	orr.w	r2, r3, #4
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e0a2      	b.n	80010f2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0d6      	beq.n	8000f68 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fba:	e070      	b.n	800109e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000fbc:	4b4f      	ldr	r3, [pc, #316]	; (80010fc <HAL_ADC_PollForConversion+0x1f4>)
 8000fbe:	681c      	ldr	r4, [r3, #0]
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	f001 f9c7 	bl	8002354 <HAL_RCCEx_GetPeriphCLKFreq>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6919      	ldr	r1, [r3, #16]
 8000fd2:	4b4b      	ldr	r3, [pc, #300]	; (8001100 <HAL_ADC_PollForConversion+0x1f8>)
 8000fd4:	400b      	ands	r3, r1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d118      	bne.n	800100c <HAL_ADC_PollForConversion+0x104>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68d9      	ldr	r1, [r3, #12]
 8000fe0:	4b48      	ldr	r3, [pc, #288]	; (8001104 <HAL_ADC_PollForConversion+0x1fc>)
 8000fe2:	400b      	ands	r3, r1
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d111      	bne.n	800100c <HAL_ADC_PollForConversion+0x104>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6919      	ldr	r1, [r3, #16]
 8000fee:	4b46      	ldr	r3, [pc, #280]	; (8001108 <HAL_ADC_PollForConversion+0x200>)
 8000ff0:	400b      	ands	r3, r1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d108      	bne.n	8001008 <HAL_ADC_PollForConversion+0x100>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68d9      	ldr	r1, [r3, #12]
 8000ffc:	4b43      	ldr	r3, [pc, #268]	; (800110c <HAL_ADC_PollForConversion+0x204>)
 8000ffe:	400b      	ands	r3, r1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d101      	bne.n	8001008 <HAL_ADC_PollForConversion+0x100>
 8001004:	2314      	movs	r3, #20
 8001006:	e020      	b.n	800104a <HAL_ADC_PollForConversion+0x142>
 8001008:	2329      	movs	r3, #41	; 0x29
 800100a:	e01e      	b.n	800104a <HAL_ADC_PollForConversion+0x142>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6919      	ldr	r1, [r3, #16]
 8001012:	4b3d      	ldr	r3, [pc, #244]	; (8001108 <HAL_ADC_PollForConversion+0x200>)
 8001014:	400b      	ands	r3, r1
 8001016:	2b00      	cmp	r3, #0
 8001018:	d106      	bne.n	8001028 <HAL_ADC_PollForConversion+0x120>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	68d9      	ldr	r1, [r3, #12]
 8001020:	4b3a      	ldr	r3, [pc, #232]	; (800110c <HAL_ADC_PollForConversion+0x204>)
 8001022:	400b      	ands	r3, r1
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00d      	beq.n	8001044 <HAL_ADC_PollForConversion+0x13c>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6919      	ldr	r1, [r3, #16]
 800102e:	4b38      	ldr	r3, [pc, #224]	; (8001110 <HAL_ADC_PollForConversion+0x208>)
 8001030:	400b      	ands	r3, r1
 8001032:	2b00      	cmp	r3, #0
 8001034:	d108      	bne.n	8001048 <HAL_ADC_PollForConversion+0x140>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68d9      	ldr	r1, [r3, #12]
 800103c:	4b34      	ldr	r3, [pc, #208]	; (8001110 <HAL_ADC_PollForConversion+0x208>)
 800103e:	400b      	ands	r3, r1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <HAL_ADC_PollForConversion+0x140>
 8001044:	2354      	movs	r3, #84	; 0x54
 8001046:	e000      	b.n	800104a <HAL_ADC_PollForConversion+0x142>
 8001048:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800104a:	fb02 f303 	mul.w	r3, r2, r3
 800104e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001050:	e021      	b.n	8001096 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001058:	d01a      	beq.n	8001090 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d007      	beq.n	8001070 <HAL_ADC_PollForConversion+0x168>
 8001060:	f7ff fdc2 	bl	8000be8 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	d20f      	bcs.n	8001090 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	429a      	cmp	r2, r3
 8001076:	d90b      	bls.n	8001090 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107c:	f043 0204 	orr.w	r2, r3, #4
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e030      	b.n	80010f2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3301      	adds	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	429a      	cmp	r2, r3
 800109c:	d8d9      	bhi.n	8001052 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f06f 0212 	mvn.w	r2, #18
 80010a6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80010be:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80010c2:	d115      	bne.n	80010f0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d111      	bne.n	80010f0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d105      	bne.n	80010f0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e8:	f043 0201 	orr.w	r2, r3, #1
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	371c      	adds	r7, #28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd90      	pop	{r4, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000004 	.word	0x20000004
 8001100:	24924924 	.word	0x24924924
 8001104:	00924924 	.word	0x00924924
 8001108:	12492492 	.word	0x12492492
 800110c:	00492492 	.word	0x00492492
 8001110:	00249249 	.word	0x00249249

08001114 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001144:	2b01      	cmp	r3, #1
 8001146:	d101      	bne.n	800114c <HAL_ADC_ConfigChannel+0x20>
 8001148:	2302      	movs	r3, #2
 800114a:	e0dc      	b.n	8001306 <HAL_ADC_ConfigChannel+0x1da>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b06      	cmp	r3, #6
 800115a:	d81c      	bhi.n	8001196 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	3b05      	subs	r3, #5
 800116e:	221f      	movs	r2, #31
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	4019      	ands	r1, r3
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	3b05      	subs	r3, #5
 8001188:	fa00 f203 	lsl.w	r2, r0, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	430a      	orrs	r2, r1
 8001192:	635a      	str	r2, [r3, #52]	; 0x34
 8001194:	e03c      	b.n	8001210 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b0c      	cmp	r3, #12
 800119c:	d81c      	bhi.n	80011d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	3b23      	subs	r3, #35	; 0x23
 80011b0:	221f      	movs	r2, #31
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	4019      	ands	r1, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	6818      	ldr	r0, [r3, #0]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	3b23      	subs	r3, #35	; 0x23
 80011ca:	fa00 f203 	lsl.w	r2, r0, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	631a      	str	r2, [r3, #48]	; 0x30
 80011d6:	e01b      	b.n	8001210 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	3b41      	subs	r3, #65	; 0x41
 80011ea:	221f      	movs	r2, #31
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	4019      	ands	r1, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	3b41      	subs	r3, #65	; 0x41
 8001204:	fa00 f203 	lsl.w	r2, r0, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	430a      	orrs	r2, r1
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b09      	cmp	r3, #9
 8001216:	d91c      	bls.n	8001252 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68d9      	ldr	r1, [r3, #12]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4613      	mov	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4413      	add	r3, r2
 8001228:	3b1e      	subs	r3, #30
 800122a:	2207      	movs	r2, #7
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	4019      	ands	r1, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	6898      	ldr	r0, [r3, #8]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4613      	mov	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	3b1e      	subs	r3, #30
 8001244:	fa00 f203 	lsl.w	r2, r0, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	e019      	b.n	8001286 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6919      	ldr	r1, [r3, #16]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	2207      	movs	r2, #7
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	4019      	ands	r1, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	6898      	ldr	r0, [r3, #8]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	fa00 f203 	lsl.w	r2, r0, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	430a      	orrs	r2, r1
 8001284:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b10      	cmp	r3, #16
 800128c:	d003      	beq.n	8001296 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001292:	2b11      	cmp	r3, #17
 8001294:	d132      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a1d      	ldr	r2, [pc, #116]	; (8001310 <HAL_ADC_ConfigChannel+0x1e4>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d125      	bne.n	80012ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d126      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012bc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b10      	cmp	r3, #16
 80012c4:	d11a      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <HAL_ADC_ConfigChannel+0x1e8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a13      	ldr	r2, [pc, #76]	; (8001318 <HAL_ADC_ConfigChannel+0x1ec>)
 80012cc:	fba2 2303 	umull	r2, r3, r2, r3
 80012d0:	0c9a      	lsrs	r2, r3, #18
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012dc:	e002      	b.n	80012e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f9      	bne.n	80012de <HAL_ADC_ConfigChannel+0x1b2>
 80012ea:	e007      	b.n	80012fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f0:	f043 0220 	orr.w	r2, r3, #32
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001304:	7bfb      	ldrb	r3, [r7, #15]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	40012400 	.word	0x40012400
 8001314:	20000004 	.word	0x20000004
 8001318:	431bde83 	.word	0x431bde83

0800131c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	2b01      	cmp	r3, #1
 8001338:	d040      	beq.n	80013bc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f042 0201 	orr.w	r2, r2, #1
 8001348:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <ADC_Enable+0xac>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a1f      	ldr	r2, [pc, #124]	; (80013cc <ADC_Enable+0xb0>)
 8001350:	fba2 2303 	umull	r2, r3, r2, r3
 8001354:	0c9b      	lsrs	r3, r3, #18
 8001356:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001358:	e002      	b.n	8001360 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	3b01      	subs	r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f9      	bne.n	800135a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001366:	f7ff fc3f 	bl	8000be8 <HAL_GetTick>
 800136a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800136c:	e01f      	b.n	80013ae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800136e:	f7ff fc3b 	bl	8000be8 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d918      	bls.n	80013ae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b01      	cmp	r3, #1
 8001388:	d011      	beq.n	80013ae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138e:	f043 0210 	orr.w	r2, r3, #16
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139a:	f043 0201 	orr.w	r2, r3, #1
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e007      	b.n	80013be <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d1d8      	bne.n	800136e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000004 	.word	0x20000004
 80013cc:	431bde83 	.word	0x431bde83

080013d0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d12e      	bne.n	8001448 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0201 	bic.w	r2, r2, #1
 80013f8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013fa:	f7ff fbf5 	bl	8000be8 <HAL_GetTick>
 80013fe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001400:	e01b      	b.n	800143a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001402:	f7ff fbf1 	bl	8000be8 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d914      	bls.n	800143a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b01      	cmp	r3, #1
 800141c:	d10d      	bne.n	800143a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001422:	f043 0210 	orr.w	r2, r3, #16
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142e:	f043 0201 	orr.w	r2, r3, #1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e007      	b.n	800144a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	2b01      	cmp	r3, #1
 8001446:	d0dc      	beq.n	8001402 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001470:	4013      	ands	r3, r2
 8001472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800147c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001486:	4a04      	ldr	r2, [pc, #16]	; (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	60d3      	str	r3, [r2, #12]
}
 800148c:	bf00      	nop
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <__NVIC_GetPriorityGrouping+0x18>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	f003 0307 	and.w	r3, r3, #7
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	db0b      	blt.n	80014e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	f003 021f 	and.w	r2, r3, #31
 80014d0:	4906      	ldr	r1, [pc, #24]	; (80014ec <__NVIC_EnableIRQ+0x34>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	095b      	lsrs	r3, r3, #5
 80014d8:	2001      	movs	r0, #1
 80014da:	fa00 f202 	lsl.w	r2, r0, r2
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	e000e100 	.word	0xe000e100

080014f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	db0a      	blt.n	800151a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	490c      	ldr	r1, [pc, #48]	; (800153c <__NVIC_SetPriority+0x4c>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	0112      	lsls	r2, r2, #4
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	440b      	add	r3, r1
 8001514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001518:	e00a      	b.n	8001530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4908      	ldr	r1, [pc, #32]	; (8001540 <__NVIC_SetPriority+0x50>)
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	3b04      	subs	r3, #4
 8001528:	0112      	lsls	r2, r2, #4
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	440b      	add	r3, r1
 800152e:	761a      	strb	r2, [r3, #24]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000e100 	.word	0xe000e100
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001544:	b480      	push	{r7}
 8001546:	b089      	sub	sp, #36	; 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f1c3 0307 	rsb	r3, r3, #7
 800155e:	2b04      	cmp	r3, #4
 8001560:	bf28      	it	cs
 8001562:	2304      	movcs	r3, #4
 8001564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3304      	adds	r3, #4
 800156a:	2b06      	cmp	r3, #6
 800156c:	d902      	bls.n	8001574 <NVIC_EncodePriority+0x30>
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3b03      	subs	r3, #3
 8001572:	e000      	b.n	8001576 <NVIC_EncodePriority+0x32>
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	f04f 32ff 	mov.w	r2, #4294967295
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	401a      	ands	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800158c:	f04f 31ff 	mov.w	r1, #4294967295
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	43d9      	mvns	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	4313      	orrs	r3, r2
         );
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3724      	adds	r7, #36	; 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff4f 	bl	8001454 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff64 	bl	800149c <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ffb2 	bl	8001544 <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff81 	bl	80014f0 <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff57 	bl	80014b8 <__NVIC_EnableIRQ>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001614:	b480      	push	{r7}
 8001616:	b08b      	sub	sp, #44	; 0x2c
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800161e:	2300      	movs	r3, #0
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001626:	e169      	b.n	80018fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001628:	2201      	movs	r2, #1
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	429a      	cmp	r2, r3
 8001642:	f040 8158 	bne.w	80018f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	4a9a      	ldr	r2, [pc, #616]	; (80018b4 <HAL_GPIO_Init+0x2a0>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d05e      	beq.n	800170e <HAL_GPIO_Init+0xfa>
 8001650:	4a98      	ldr	r2, [pc, #608]	; (80018b4 <HAL_GPIO_Init+0x2a0>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d875      	bhi.n	8001742 <HAL_GPIO_Init+0x12e>
 8001656:	4a98      	ldr	r2, [pc, #608]	; (80018b8 <HAL_GPIO_Init+0x2a4>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d058      	beq.n	800170e <HAL_GPIO_Init+0xfa>
 800165c:	4a96      	ldr	r2, [pc, #600]	; (80018b8 <HAL_GPIO_Init+0x2a4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d86f      	bhi.n	8001742 <HAL_GPIO_Init+0x12e>
 8001662:	4a96      	ldr	r2, [pc, #600]	; (80018bc <HAL_GPIO_Init+0x2a8>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d052      	beq.n	800170e <HAL_GPIO_Init+0xfa>
 8001668:	4a94      	ldr	r2, [pc, #592]	; (80018bc <HAL_GPIO_Init+0x2a8>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d869      	bhi.n	8001742 <HAL_GPIO_Init+0x12e>
 800166e:	4a94      	ldr	r2, [pc, #592]	; (80018c0 <HAL_GPIO_Init+0x2ac>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d04c      	beq.n	800170e <HAL_GPIO_Init+0xfa>
 8001674:	4a92      	ldr	r2, [pc, #584]	; (80018c0 <HAL_GPIO_Init+0x2ac>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d863      	bhi.n	8001742 <HAL_GPIO_Init+0x12e>
 800167a:	4a92      	ldr	r2, [pc, #584]	; (80018c4 <HAL_GPIO_Init+0x2b0>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d046      	beq.n	800170e <HAL_GPIO_Init+0xfa>
 8001680:	4a90      	ldr	r2, [pc, #576]	; (80018c4 <HAL_GPIO_Init+0x2b0>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d85d      	bhi.n	8001742 <HAL_GPIO_Init+0x12e>
 8001686:	2b12      	cmp	r3, #18
 8001688:	d82a      	bhi.n	80016e0 <HAL_GPIO_Init+0xcc>
 800168a:	2b12      	cmp	r3, #18
 800168c:	d859      	bhi.n	8001742 <HAL_GPIO_Init+0x12e>
 800168e:	a201      	add	r2, pc, #4	; (adr r2, 8001694 <HAL_GPIO_Init+0x80>)
 8001690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001694:	0800170f 	.word	0x0800170f
 8001698:	080016e9 	.word	0x080016e9
 800169c:	080016fb 	.word	0x080016fb
 80016a0:	0800173d 	.word	0x0800173d
 80016a4:	08001743 	.word	0x08001743
 80016a8:	08001743 	.word	0x08001743
 80016ac:	08001743 	.word	0x08001743
 80016b0:	08001743 	.word	0x08001743
 80016b4:	08001743 	.word	0x08001743
 80016b8:	08001743 	.word	0x08001743
 80016bc:	08001743 	.word	0x08001743
 80016c0:	08001743 	.word	0x08001743
 80016c4:	08001743 	.word	0x08001743
 80016c8:	08001743 	.word	0x08001743
 80016cc:	08001743 	.word	0x08001743
 80016d0:	08001743 	.word	0x08001743
 80016d4:	08001743 	.word	0x08001743
 80016d8:	080016f1 	.word	0x080016f1
 80016dc:	08001705 	.word	0x08001705
 80016e0:	4a79      	ldr	r2, [pc, #484]	; (80018c8 <HAL_GPIO_Init+0x2b4>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d013      	beq.n	800170e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016e6:	e02c      	b.n	8001742 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	623b      	str	r3, [r7, #32]
          break;
 80016ee:	e029      	b.n	8001744 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	3304      	adds	r3, #4
 80016f6:	623b      	str	r3, [r7, #32]
          break;
 80016f8:	e024      	b.n	8001744 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	3308      	adds	r3, #8
 8001700:	623b      	str	r3, [r7, #32]
          break;
 8001702:	e01f      	b.n	8001744 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	330c      	adds	r3, #12
 800170a:	623b      	str	r3, [r7, #32]
          break;
 800170c:	e01a      	b.n	8001744 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001716:	2304      	movs	r3, #4
 8001718:	623b      	str	r3, [r7, #32]
          break;
 800171a:	e013      	b.n	8001744 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001724:	2308      	movs	r3, #8
 8001726:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	611a      	str	r2, [r3, #16]
          break;
 800172e:	e009      	b.n	8001744 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001730:	2308      	movs	r3, #8
 8001732:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69fa      	ldr	r2, [r7, #28]
 8001738:	615a      	str	r2, [r3, #20]
          break;
 800173a:	e003      	b.n	8001744 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
          break;
 8001740:	e000      	b.n	8001744 <HAL_GPIO_Init+0x130>
          break;
 8001742:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2bff      	cmp	r3, #255	; 0xff
 8001748:	d801      	bhi.n	800174e <HAL_GPIO_Init+0x13a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	e001      	b.n	8001752 <HAL_GPIO_Init+0x13e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3304      	adds	r3, #4
 8001752:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2bff      	cmp	r3, #255	; 0xff
 8001758:	d802      	bhi.n	8001760 <HAL_GPIO_Init+0x14c>
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	e002      	b.n	8001766 <HAL_GPIO_Init+0x152>
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	3b08      	subs	r3, #8
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	210f      	movs	r1, #15
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	401a      	ands	r2, r3
 8001778:	6a39      	ldr	r1, [r7, #32]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	fa01 f303 	lsl.w	r3, r1, r3
 8001780:	431a      	orrs	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 80b1 	beq.w	80018f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001794:	4b4d      	ldr	r3, [pc, #308]	; (80018cc <HAL_GPIO_Init+0x2b8>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	4a4c      	ldr	r2, [pc, #304]	; (80018cc <HAL_GPIO_Init+0x2b8>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6193      	str	r3, [r2, #24]
 80017a0:	4b4a      	ldr	r3, [pc, #296]	; (80018cc <HAL_GPIO_Init+0x2b8>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017ac:	4a48      	ldr	r2, [pc, #288]	; (80018d0 <HAL_GPIO_Init+0x2bc>)
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	089b      	lsrs	r3, r3, #2
 80017b2:	3302      	adds	r3, #2
 80017b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	220f      	movs	r2, #15
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	4013      	ands	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a40      	ldr	r2, [pc, #256]	; (80018d4 <HAL_GPIO_Init+0x2c0>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d013      	beq.n	8001800 <HAL_GPIO_Init+0x1ec>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a3f      	ldr	r2, [pc, #252]	; (80018d8 <HAL_GPIO_Init+0x2c4>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d00d      	beq.n	80017fc <HAL_GPIO_Init+0x1e8>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a3e      	ldr	r2, [pc, #248]	; (80018dc <HAL_GPIO_Init+0x2c8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d007      	beq.n	80017f8 <HAL_GPIO_Init+0x1e4>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a3d      	ldr	r2, [pc, #244]	; (80018e0 <HAL_GPIO_Init+0x2cc>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d101      	bne.n	80017f4 <HAL_GPIO_Init+0x1e0>
 80017f0:	2303      	movs	r3, #3
 80017f2:	e006      	b.n	8001802 <HAL_GPIO_Init+0x1ee>
 80017f4:	2304      	movs	r3, #4
 80017f6:	e004      	b.n	8001802 <HAL_GPIO_Init+0x1ee>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e002      	b.n	8001802 <HAL_GPIO_Init+0x1ee>
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <HAL_GPIO_Init+0x1ee>
 8001800:	2300      	movs	r3, #0
 8001802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001804:	f002 0203 	and.w	r2, r2, #3
 8001808:	0092      	lsls	r2, r2, #2
 800180a:	4093      	lsls	r3, r2
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4313      	orrs	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001812:	492f      	ldr	r1, [pc, #188]	; (80018d0 <HAL_GPIO_Init+0x2bc>)
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	089b      	lsrs	r3, r3, #2
 8001818:	3302      	adds	r3, #2
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d006      	beq.n	800183a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800182c:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	492c      	ldr	r1, [pc, #176]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	600b      	str	r3, [r1, #0]
 8001838:	e006      	b.n	8001848 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800183a:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	43db      	mvns	r3, r3
 8001842:	4928      	ldr	r1, [pc, #160]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 8001844:	4013      	ands	r3, r2
 8001846:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d006      	beq.n	8001862 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001854:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	4922      	ldr	r1, [pc, #136]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
 8001860:	e006      	b.n	8001870 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001862:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	43db      	mvns	r3, r3
 800186a:	491e      	ldr	r1, [pc, #120]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 800186c:	4013      	ands	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	4918      	ldr	r1, [pc, #96]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	608b      	str	r3, [r1, #8]
 8001888:	e006      	b.n	8001898 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800188a:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	43db      	mvns	r3, r3
 8001892:	4914      	ldr	r1, [pc, #80]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 8001894:	4013      	ands	r3, r2
 8001896:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d021      	beq.n	80018e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	490e      	ldr	r1, [pc, #56]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	60cb      	str	r3, [r1, #12]
 80018b0:	e021      	b.n	80018f6 <HAL_GPIO_Init+0x2e2>
 80018b2:	bf00      	nop
 80018b4:	10320000 	.word	0x10320000
 80018b8:	10310000 	.word	0x10310000
 80018bc:	10220000 	.word	0x10220000
 80018c0:	10210000 	.word	0x10210000
 80018c4:	10120000 	.word	0x10120000
 80018c8:	10110000 	.word	0x10110000
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40010000 	.word	0x40010000
 80018d4:	40010800 	.word	0x40010800
 80018d8:	40010c00 	.word	0x40010c00
 80018dc:	40011000 	.word	0x40011000
 80018e0:	40011400 	.word	0x40011400
 80018e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_GPIO_Init+0x304>)
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	4909      	ldr	r1, [pc, #36]	; (8001918 <HAL_GPIO_Init+0x304>)
 80018f2:	4013      	ands	r3, r2
 80018f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	3301      	adds	r3, #1
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	fa22 f303 	lsr.w	r3, r2, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	f47f ae8e 	bne.w	8001628 <HAL_GPIO_Init+0x14>
  }
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	372c      	adds	r7, #44	; 0x2c
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	40010400 	.word	0x40010400

0800191c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	887b      	ldrh	r3, [r7, #2]
 800192e:	4013      	ands	r3, r2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	e001      	b.n	800193e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	807b      	strh	r3, [r7, #2]
 8001956:	4613      	mov	r3, r2
 8001958:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800195a:	787b      	ldrb	r3, [r7, #1]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001960:	887a      	ldrh	r2, [r7, #2]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001966:	e003      	b.n	8001970 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001968:	887b      	ldrh	r3, [r7, #2]
 800196a:	041a      	lsls	r2, r3, #16
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	611a      	str	r2, [r3, #16]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
	...

0800197c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e272      	b.n	8001e74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 8087 	beq.w	8001aaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800199c:	4b92      	ldr	r3, [pc, #584]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d00c      	beq.n	80019c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019a8:	4b8f      	ldr	r3, [pc, #572]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d112      	bne.n	80019da <HAL_RCC_OscConfig+0x5e>
 80019b4:	4b8c      	ldr	r3, [pc, #560]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c0:	d10b      	bne.n	80019da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c2:	4b89      	ldr	r3, [pc, #548]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d06c      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x12c>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d168      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e24c      	b.n	8001e74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e2:	d106      	bne.n	80019f2 <HAL_RCC_OscConfig+0x76>
 80019e4:	4b80      	ldr	r3, [pc, #512]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a7f      	ldr	r2, [pc, #508]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	e02e      	b.n	8001a50 <HAL_RCC_OscConfig+0xd4>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x98>
 80019fa:	4b7b      	ldr	r3, [pc, #492]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a7a      	ldr	r2, [pc, #488]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	4b78      	ldr	r3, [pc, #480]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a77      	ldr	r2, [pc, #476]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	e01d      	b.n	8001a50 <HAL_RCC_OscConfig+0xd4>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a1c:	d10c      	bne.n	8001a38 <HAL_RCC_OscConfig+0xbc>
 8001a1e:	4b72      	ldr	r3, [pc, #456]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a71      	ldr	r2, [pc, #452]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	4b6f      	ldr	r3, [pc, #444]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a6e      	ldr	r2, [pc, #440]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e00b      	b.n	8001a50 <HAL_RCC_OscConfig+0xd4>
 8001a38:	4b6b      	ldr	r3, [pc, #428]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a6a      	ldr	r2, [pc, #424]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	4b68      	ldr	r3, [pc, #416]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a67      	ldr	r2, [pc, #412]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d013      	beq.n	8001a80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff f8c6 	bl	8000be8 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a60:	f7ff f8c2 	bl	8000be8 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b64      	cmp	r3, #100	; 0x64
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e200      	b.n	8001e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a72:	4b5d      	ldr	r3, [pc, #372]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0xe4>
 8001a7e:	e014      	b.n	8001aaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7ff f8b2 	bl	8000be8 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a88:	f7ff f8ae 	bl	8000be8 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b64      	cmp	r3, #100	; 0x64
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e1ec      	b.n	8001e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9a:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x10c>
 8001aa6:	e000      	b.n	8001aaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d063      	beq.n	8001b7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ab6:	4b4c      	ldr	r3, [pc, #304]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00b      	beq.n	8001ada <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ac2:	4b49      	ldr	r3, [pc, #292]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d11c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x18c>
 8001ace:	4b46      	ldr	r3, [pc, #280]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d116      	bne.n	8001b08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ada:	4b43      	ldr	r3, [pc, #268]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d005      	beq.n	8001af2 <HAL_RCC_OscConfig+0x176>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e1c0      	b.n	8001e74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af2:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4939      	ldr	r1, [pc, #228]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b06:	e03a      	b.n	8001b7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b10:	4b36      	ldr	r3, [pc, #216]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7ff f867 	bl	8000be8 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1e:	f7ff f863 	bl	8000be8 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e1a1      	b.n	8001e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b30:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3c:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4927      	ldr	r1, [pc, #156]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]
 8001b50:	e015      	b.n	8001b7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b52:	4b26      	ldr	r3, [pc, #152]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff f846 	bl	8000be8 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b60:	f7ff f842 	bl	8000be8 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e180      	b.n	8001e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b72:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d03a      	beq.n	8001c00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d019      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <HAL_RCC_OscConfig+0x274>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b98:	f7ff f826 	bl	8000be8 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba0:	f7ff f822 	bl	8000be8 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e160      	b.n	8001e74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	f000 faf4 	bl	80021ac <RCC_Delay>
 8001bc4:	e01c      	b.n	8001c00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bcc:	f7ff f80c 	bl	8000be8 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd2:	e00f      	b.n	8001bf4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd4:	f7ff f808 	bl	8000be8 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d908      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e146      	b.n	8001e74 <HAL_RCC_OscConfig+0x4f8>
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000
 8001bec:	42420000 	.word	0x42420000
 8001bf0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf4:	4b92      	ldr	r3, [pc, #584]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1e9      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80a6 	beq.w	8001d5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c12:	4b8b      	ldr	r3, [pc, #556]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10d      	bne.n	8001c3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	4b88      	ldr	r3, [pc, #544]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	4a87      	ldr	r2, [pc, #540]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c28:	61d3      	str	r3, [r2, #28]
 8001c2a:	4b85      	ldr	r3, [pc, #532]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c36:	2301      	movs	r3, #1
 8001c38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3a:	4b82      	ldr	r3, [pc, #520]	; (8001e44 <HAL_RCC_OscConfig+0x4c8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d118      	bne.n	8001c78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c46:	4b7f      	ldr	r3, [pc, #508]	; (8001e44 <HAL_RCC_OscConfig+0x4c8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a7e      	ldr	r2, [pc, #504]	; (8001e44 <HAL_RCC_OscConfig+0x4c8>)
 8001c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c52:	f7fe ffc9 	bl	8000be8 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5a:	f7fe ffc5 	bl	8000be8 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b64      	cmp	r3, #100	; 0x64
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e103      	b.n	8001e74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6c:	4b75      	ldr	r3, [pc, #468]	; (8001e44 <HAL_RCC_OscConfig+0x4c8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d106      	bne.n	8001c8e <HAL_RCC_OscConfig+0x312>
 8001c80:	4b6f      	ldr	r3, [pc, #444]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	4a6e      	ldr	r2, [pc, #440]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6213      	str	r3, [r2, #32]
 8001c8c:	e02d      	b.n	8001cea <HAL_RCC_OscConfig+0x36e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x334>
 8001c96:	4b6a      	ldr	r3, [pc, #424]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	4a69      	ldr	r2, [pc, #420]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	f023 0301 	bic.w	r3, r3, #1
 8001ca0:	6213      	str	r3, [r2, #32]
 8001ca2:	4b67      	ldr	r3, [pc, #412]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	4a66      	ldr	r2, [pc, #408]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	f023 0304 	bic.w	r3, r3, #4
 8001cac:	6213      	str	r3, [r2, #32]
 8001cae:	e01c      	b.n	8001cea <HAL_RCC_OscConfig+0x36e>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	2b05      	cmp	r3, #5
 8001cb6:	d10c      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x356>
 8001cb8:	4b61      	ldr	r3, [pc, #388]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	4a60      	ldr	r2, [pc, #384]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	f043 0304 	orr.w	r3, r3, #4
 8001cc2:	6213      	str	r3, [r2, #32]
 8001cc4:	4b5e      	ldr	r3, [pc, #376]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4a5d      	ldr	r2, [pc, #372]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6213      	str	r3, [r2, #32]
 8001cd0:	e00b      	b.n	8001cea <HAL_RCC_OscConfig+0x36e>
 8001cd2:	4b5b      	ldr	r3, [pc, #364]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	4a5a      	ldr	r2, [pc, #360]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	6213      	str	r3, [r2, #32]
 8001cde:	4b58      	ldr	r3, [pc, #352]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	4a57      	ldr	r2, [pc, #348]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	f023 0304 	bic.w	r3, r3, #4
 8001ce8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d015      	beq.n	8001d1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf2:	f7fe ff79 	bl	8000be8 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7fe ff75 	bl	8000be8 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e0b1      	b.n	8001e74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d10:	4b4b      	ldr	r3, [pc, #300]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0ee      	beq.n	8001cfa <HAL_RCC_OscConfig+0x37e>
 8001d1c:	e014      	b.n	8001d48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1e:	f7fe ff63 	bl	8000be8 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d24:	e00a      	b.n	8001d3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d26:	f7fe ff5f 	bl	8000be8 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e09b      	b.n	8001e74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3c:	4b40      	ldr	r3, [pc, #256]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1ee      	bne.n	8001d26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d105      	bne.n	8001d5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4e:	4b3c      	ldr	r3, [pc, #240]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	4a3b      	ldr	r2, [pc, #236]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 8087 	beq.w	8001e72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d64:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d061      	beq.n	8001e34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d146      	bne.n	8001e06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d78:	4b33      	ldr	r3, [pc, #204]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7fe ff33 	bl	8000be8 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d86:	f7fe ff2f 	bl	8000be8 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e06d      	b.n	8001e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d98:	4b29      	ldr	r3, [pc, #164]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1f0      	bne.n	8001d86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dac:	d108      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dae:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	4921      	ldr	r1, [pc, #132]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc0:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a19      	ldr	r1, [r3, #32]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	430b      	orrs	r3, r1
 8001dd2:	491b      	ldr	r1, [pc, #108]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dde:	f7fe ff03 	bl	8000be8 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de6:	f7fe feff 	bl	8000be8 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e03d      	b.n	8001e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x46a>
 8001e04:	e035      	b.n	8001e72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7fe feec 	bl	8000be8 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e14:	f7fe fee8 	bl	8000be8 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e026      	b.n	8001e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x498>
 8001e32:	e01e      	b.n	8001e72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d107      	bne.n	8001e4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e019      	b.n	8001e74 <HAL_RCC_OscConfig+0x4f8>
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40007000 	.word	0x40007000
 8001e48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_RCC_OscConfig+0x500>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000

08001e80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0d0      	b.n	8002036 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e94:	4b6a      	ldr	r3, [pc, #424]	; (8002040 <HAL_RCC_ClockConfig+0x1c0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d910      	bls.n	8001ec4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	4b67      	ldr	r3, [pc, #412]	; (8002040 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 0207 	bic.w	r2, r3, #7
 8001eaa:	4965      	ldr	r1, [pc, #404]	; (8002040 <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb2:	4b63      	ldr	r3, [pc, #396]	; (8002040 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0b8      	b.n	8002036 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d020      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001edc:	4b59      	ldr	r3, [pc, #356]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	4a58      	ldr	r2, [pc, #352]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ee6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef4:	4b53      	ldr	r3, [pc, #332]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	4a52      	ldr	r2, [pc, #328]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001efe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f00:	4b50      	ldr	r3, [pc, #320]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	494d      	ldr	r1, [pc, #308]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d040      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d107      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f26:	4b47      	ldr	r3, [pc, #284]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d115      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e07f      	b.n	8002036 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d107      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3e:	4b41      	ldr	r3, [pc, #260]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d109      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e073      	b.n	8002036 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4e:	4b3d      	ldr	r3, [pc, #244]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e06b      	b.n	8002036 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f5e:	4b39      	ldr	r3, [pc, #228]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f023 0203 	bic.w	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4936      	ldr	r1, [pc, #216]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f70:	f7fe fe3a 	bl	8000be8 <HAL_GetTick>
 8001f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f78:	f7fe fe36 	bl	8000be8 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e053      	b.n	8002036 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8e:	4b2d      	ldr	r3, [pc, #180]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 020c 	and.w	r2, r3, #12
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d1eb      	bne.n	8001f78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa0:	4b27      	ldr	r3, [pc, #156]	; (8002040 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d210      	bcs.n	8001fd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fae:	4b24      	ldr	r3, [pc, #144]	; (8002040 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 0207 	bic.w	r2, r3, #7
 8001fb6:	4922      	ldr	r1, [pc, #136]	; (8002040 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbe:	4b20      	ldr	r3, [pc, #128]	; (8002040 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e032      	b.n	8002036 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fdc:	4b19      	ldr	r3, [pc, #100]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4916      	ldr	r1, [pc, #88]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d009      	beq.n	800200e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ffa:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	490e      	ldr	r1, [pc, #56]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	4313      	orrs	r3, r2
 800200c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800200e:	f000 f821 	bl	8002054 <HAL_RCC_GetSysClockFreq>
 8002012:	4602      	mov	r2, r0
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	490a      	ldr	r1, [pc, #40]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 8002020:	5ccb      	ldrb	r3, [r1, r3]
 8002022:	fa22 f303 	lsr.w	r3, r2, r3
 8002026:	4a09      	ldr	r2, [pc, #36]	; (800204c <HAL_RCC_ClockConfig+0x1cc>)
 8002028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <HAL_RCC_ClockConfig+0x1d0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe fcf4 	bl	8000a1c <HAL_InitTick>

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40022000 	.word	0x40022000
 8002044:	40021000 	.word	0x40021000
 8002048:	080061e4 	.word	0x080061e4
 800204c:	20000004 	.word	0x20000004
 8002050:	20000008 	.word	0x20000008

08002054 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002054:	b490      	push	{r4, r7}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800205a:	4b29      	ldr	r3, [pc, #164]	; (8002100 <HAL_RCC_GetSysClockFreq+0xac>)
 800205c:	1d3c      	adds	r4, r7, #4
 800205e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002060:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002064:	f240 2301 	movw	r3, #513	; 0x201
 8002068:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800207e:	4b21      	ldr	r3, [pc, #132]	; (8002104 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b04      	cmp	r3, #4
 800208c:	d002      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x40>
 800208e:	2b08      	cmp	r3, #8
 8002090:	d003      	beq.n	800209a <HAL_RCC_GetSysClockFreq+0x46>
 8002092:	e02b      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002094:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002096:	623b      	str	r3, [r7, #32]
      break;
 8002098:	e02b      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	0c9b      	lsrs	r3, r3, #18
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	3328      	adds	r3, #40	; 0x28
 80020a4:	443b      	add	r3, r7
 80020a6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020aa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d012      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020b6:	4b13      	ldr	r3, [pc, #76]	; (8002104 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	0c5b      	lsrs	r3, r3, #17
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	3328      	adds	r3, #40	; 0x28
 80020c2:	443b      	add	r3, r7
 80020c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020ce:	fb03 f202 	mul.w	r2, r3, r2
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
 80020da:	e004      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	4a0b      	ldr	r2, [pc, #44]	; (800210c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e0:	fb02 f303 	mul.w	r3, r2, r3
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	623b      	str	r3, [r7, #32]
      break;
 80020ea:	e002      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020ee:	623b      	str	r3, [r7, #32]
      break;
 80020f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020f2:	6a3b      	ldr	r3, [r7, #32]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3728      	adds	r7, #40	; 0x28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc90      	pop	{r4, r7}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	08006098 	.word	0x08006098
 8002104:	40021000 	.word	0x40021000
 8002108:	007a1200 	.word	0x007a1200
 800210c:	003d0900 	.word	0x003d0900

08002110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002114:	4b02      	ldr	r3, [pc, #8]	; (8002120 <HAL_RCC_GetHCLKFreq+0x10>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	20000004 	.word	0x20000004

08002124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002128:	f7ff fff2 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 800212c:	4602      	mov	r2, r0
 800212e:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	0adb      	lsrs	r3, r3, #11
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	4903      	ldr	r1, [pc, #12]	; (8002148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800213a:	5ccb      	ldrb	r3, [r1, r3]
 800213c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002140:	4618      	mov	r0, r3
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000
 8002148:	080061f4 	.word	0x080061f4

0800214c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	220f      	movs	r2, #15
 800215a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <HAL_RCC_GetClockConfig+0x58>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0203 	and.w	r2, r3, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <HAL_RCC_GetClockConfig+0x58>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_GetClockConfig+0x58>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002180:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_RCC_GetClockConfig+0x58>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	08db      	lsrs	r3, r3, #3
 8002186:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800218e:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0207 	and.w	r2, r3, #7
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40022000 	.word	0x40022000

080021ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <RCC_Delay+0x34>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <RCC_Delay+0x38>)
 80021ba:	fba2 2303 	umull	r2, r3, r2, r3
 80021be:	0a5b      	lsrs	r3, r3, #9
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	fb02 f303 	mul.w	r3, r2, r3
 80021c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021c8:	bf00      	nop
  }
  while (Delay --);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1e5a      	subs	r2, r3, #1
 80021ce:	60fa      	str	r2, [r7, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f9      	bne.n	80021c8 <RCC_Delay+0x1c>
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	20000004 	.word	0x20000004
 80021e4:	10624dd3 	.word	0x10624dd3

080021e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	d07d      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002204:	2300      	movs	r3, #0
 8002206:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002208:	4b4f      	ldr	r3, [pc, #316]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10d      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002214:	4b4c      	ldr	r3, [pc, #304]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	4a4b      	ldr	r2, [pc, #300]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800221a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221e:	61d3      	str	r3, [r2, #28]
 8002220:	4b49      	ldr	r3, [pc, #292]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222c:	2301      	movs	r3, #1
 800222e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002230:	4b46      	ldr	r3, [pc, #280]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d118      	bne.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800223c:	4b43      	ldr	r3, [pc, #268]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a42      	ldr	r2, [pc, #264]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002246:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002248:	f7fe fcce 	bl	8000be8 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224e:	e008      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002250:	f7fe fcca 	bl	8000be8 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	; 0x64
 800225c:	d901      	bls.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e06d      	b.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002262:	4b3a      	ldr	r3, [pc, #232]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800226e:	4b36      	ldr	r3, [pc, #216]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002276:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d02e      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	429a      	cmp	r2, r3
 800228a:	d027      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800228c:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002294:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002296:	4b2e      	ldr	r3, [pc, #184]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002298:	2201      	movs	r2, #1
 800229a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800229c:	4b2c      	ldr	r3, [pc, #176]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022a2:	4a29      	ldr	r2, [pc, #164]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d014      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b2:	f7fe fc99 	bl	8000be8 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b8:	e00a      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ba:	f7fe fc95 	bl	8000be8 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e036      	b.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d0:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0ee      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022dc:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	4917      	ldr	r1, [pc, #92]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022ee:	7dfb      	ldrb	r3, [r7, #23]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d105      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f4:	4b14      	ldr	r3, [pc, #80]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	4a13      	ldr	r2, [pc, #76]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800230c:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	490b      	ldr	r1, [pc, #44]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231a:	4313      	orrs	r3, r2
 800231c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	d008      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800232a:	4b07      	ldr	r3, [pc, #28]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	4904      	ldr	r1, [pc, #16]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002338:	4313      	orrs	r3, r2
 800233a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000
 800234c:	40007000 	.word	0x40007000
 8002350:	42420440 	.word	0x42420440

08002354 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002354:	b590      	push	{r4, r7, lr}
 8002356:	b08d      	sub	sp, #52	; 0x34
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800235c:	4b58      	ldr	r3, [pc, #352]	; (80024c0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800235e:	f107 040c 	add.w	r4, r7, #12
 8002362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002368:	f240 2301 	movw	r3, #513	; 0x201
 800236c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
 8002372:	2300      	movs	r3, #0
 8002374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002376:	2300      	movs	r3, #0
 8002378:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	2300      	movs	r3, #0
 8002380:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b10      	cmp	r3, #16
 8002386:	d00a      	beq.n	800239e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b10      	cmp	r3, #16
 800238c:	f200 808e 	bhi.w	80024ac <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d049      	beq.n	800242a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b02      	cmp	r3, #2
 800239a:	d079      	beq.n	8002490 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800239c:	e086      	b.n	80024ac <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800239e:	4b49      	ldr	r3, [pc, #292]	; (80024c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80023a4:	4b47      	ldr	r3, [pc, #284]	; (80024c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d07f      	beq.n	80024b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	0c9b      	lsrs	r3, r3, #18
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	3330      	adds	r3, #48	; 0x30
 80023ba:	443b      	add	r3, r7
 80023bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023c0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d017      	beq.n	80023fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023cc:	4b3d      	ldr	r3, [pc, #244]	; (80024c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	0c5b      	lsrs	r3, r3, #17
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	3330      	adds	r3, #48	; 0x30
 80023d8:	443b      	add	r3, r7
 80023da:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00d      	beq.n	8002406 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80023ea:	4a37      	ldr	r2, [pc, #220]	; (80024c8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	fb02 f303 	mul.w	r3, r2, r3
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023fa:	e004      	b.n	8002406 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	4a33      	ldr	r2, [pc, #204]	; (80024cc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002400:	fb02 f303 	mul.w	r3, r2, r3
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002406:	4b2f      	ldr	r3, [pc, #188]	; (80024c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002412:	d102      	bne.n	800241a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002418:	e04a      	b.n	80024b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800241a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	4a2c      	ldr	r2, [pc, #176]	; (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002420:	fba2 2303 	umull	r2, r3, r2, r3
 8002424:	085b      	lsrs	r3, r3, #1
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002428:	e042      	b.n	80024b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800242a:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800243a:	d108      	bne.n	800244e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800244a:	62bb      	str	r3, [r7, #40]	; 0x28
 800244c:	e01f      	b.n	800248e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002458:	d109      	bne.n	800246e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800245a:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002466:	f649 4340 	movw	r3, #40000	; 0x9c40
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
 800246c:	e00f      	b.n	800248e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002474:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002478:	d11c      	bne.n	80024b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d016      	beq.n	80024b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002486:	f24f 4324 	movw	r3, #62500	; 0xf424
 800248a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800248c:	e012      	b.n	80024b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800248e:	e011      	b.n	80024b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002490:	f7ff fe48 	bl	8002124 <HAL_RCC_GetPCLK2Freq>
 8002494:	4602      	mov	r2, r0
 8002496:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	0b9b      	lsrs	r3, r3, #14
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	3301      	adds	r3, #1
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80024aa:	e004      	b.n	80024b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80024ac:	bf00      	nop
 80024ae:	e002      	b.n	80024b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80024b0:	bf00      	nop
 80024b2:	e000      	b.n	80024b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80024b4:	bf00      	nop
    }
  }
  return (frequency);
 80024b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3734      	adds	r7, #52	; 0x34
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd90      	pop	{r4, r7, pc}
 80024c0:	080060a8 	.word	0x080060a8
 80024c4:	40021000 	.word	0x40021000
 80024c8:	007a1200 	.word	0x007a1200
 80024cc:	003d0900 	.word	0x003d0900
 80024d0:	aaaaaaab 	.word	0xaaaaaaab

080024d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e041      	b.n	800256a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d106      	bne.n	8002500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7fe fa42 	bl	8000984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3304      	adds	r3, #4
 8002510:	4619      	mov	r1, r3
 8002512:	4610      	mov	r0, r2
 8002514:	f000 fc28 	bl	8002d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b01      	cmp	r3, #1
 8002586:	d001      	beq.n	800258c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e03a      	b.n	8002602 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a18      	ldr	r2, [pc, #96]	; (800260c <HAL_TIM_Base_Start_IT+0x98>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00e      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x58>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b6:	d009      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x58>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a14      	ldr	r2, [pc, #80]	; (8002610 <HAL_TIM_Base_Start_IT+0x9c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d004      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x58>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a13      	ldr	r2, [pc, #76]	; (8002614 <HAL_TIM_Base_Start_IT+0xa0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d111      	bne.n	80025f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b06      	cmp	r3, #6
 80025dc:	d010      	beq.n	8002600 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 0201 	orr.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ee:	e007      	b.n	8002600 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0201 	orr.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr
 800260c:	40012c00 	.word	0x40012c00
 8002610:	40000400 	.word	0x40000400
 8002614:	40000800 	.word	0x40000800

08002618 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e041      	b.n	80026ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d106      	bne.n	8002644 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f839 	bl	80026b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3304      	adds	r3, #4
 8002654:	4619      	mov	r1, r3
 8002656:	4610      	mov	r0, r2
 8002658:	f000 fb86 	bl	8002d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d109      	bne.n	80026ec <HAL_TIM_PWM_Start+0x24>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	bf14      	ite	ne
 80026e4:	2301      	movne	r3, #1
 80026e6:	2300      	moveq	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	e022      	b.n	8002732 <HAL_TIM_PWM_Start+0x6a>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d109      	bne.n	8002706 <HAL_TIM_PWM_Start+0x3e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	bf14      	ite	ne
 80026fe:	2301      	movne	r3, #1
 8002700:	2300      	moveq	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	e015      	b.n	8002732 <HAL_TIM_PWM_Start+0x6a>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b08      	cmp	r3, #8
 800270a:	d109      	bne.n	8002720 <HAL_TIM_PWM_Start+0x58>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b01      	cmp	r3, #1
 8002716:	bf14      	ite	ne
 8002718:	2301      	movne	r3, #1
 800271a:	2300      	moveq	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	e008      	b.n	8002732 <HAL_TIM_PWM_Start+0x6a>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b01      	cmp	r3, #1
 800272a:	bf14      	ite	ne
 800272c:	2301      	movne	r3, #1
 800272e:	2300      	moveq	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e05e      	b.n	80027f8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d104      	bne.n	800274a <HAL_TIM_PWM_Start+0x82>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002748:	e013      	b.n	8002772 <HAL_TIM_PWM_Start+0xaa>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b04      	cmp	r3, #4
 800274e:	d104      	bne.n	800275a <HAL_TIM_PWM_Start+0x92>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002758:	e00b      	b.n	8002772 <HAL_TIM_PWM_Start+0xaa>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b08      	cmp	r3, #8
 800275e:	d104      	bne.n	800276a <HAL_TIM_PWM_Start+0xa2>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002768:	e003      	b.n	8002772 <HAL_TIM_PWM_Start+0xaa>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2202      	movs	r2, #2
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2201      	movs	r2, #1
 8002778:	6839      	ldr	r1, [r7, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fd74 	bl	8003268 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a1e      	ldr	r2, [pc, #120]	; (8002800 <HAL_TIM_PWM_Start+0x138>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d107      	bne.n	800279a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002798:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a18      	ldr	r2, [pc, #96]	; (8002800 <HAL_TIM_PWM_Start+0x138>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d00e      	beq.n	80027c2 <HAL_TIM_PWM_Start+0xfa>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ac:	d009      	beq.n	80027c2 <HAL_TIM_PWM_Start+0xfa>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a14      	ldr	r2, [pc, #80]	; (8002804 <HAL_TIM_PWM_Start+0x13c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d004      	beq.n	80027c2 <HAL_TIM_PWM_Start+0xfa>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a12      	ldr	r2, [pc, #72]	; (8002808 <HAL_TIM_PWM_Start+0x140>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d111      	bne.n	80027e6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2b06      	cmp	r3, #6
 80027d2:	d010      	beq.n	80027f6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e4:	e007      	b.n	80027f6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 0201 	orr.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40012c00 	.word	0x40012c00
 8002804:	40000400 	.word	0x40000400
 8002808:	40000800 	.word	0x40000800

0800280c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b02      	cmp	r3, #2
 8002820:	d122      	bne.n	8002868 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b02      	cmp	r3, #2
 800282e:	d11b      	bne.n	8002868 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0202 	mvn.w	r2, #2
 8002838:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fa6f 	bl	8002d32 <HAL_TIM_IC_CaptureCallback>
 8002854:	e005      	b.n	8002862 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fa62 	bl	8002d20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 fa71 	bl	8002d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b04      	cmp	r3, #4
 8002874:	d122      	bne.n	80028bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b04      	cmp	r3, #4
 8002882:	d11b      	bne.n	80028bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0204 	mvn.w	r2, #4
 800288c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2202      	movs	r2, #2
 8002892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fa45 	bl	8002d32 <HAL_TIM_IC_CaptureCallback>
 80028a8:	e005      	b.n	80028b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fa38 	bl	8002d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 fa47 	bl	8002d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d122      	bne.n	8002910 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d11b      	bne.n	8002910 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0208 	mvn.w	r2, #8
 80028e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2204      	movs	r2, #4
 80028e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fa1b 	bl	8002d32 <HAL_TIM_IC_CaptureCallback>
 80028fc:	e005      	b.n	800290a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fa0e 	bl	8002d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 fa1d 	bl	8002d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0310 	and.w	r3, r3, #16
 800291a:	2b10      	cmp	r3, #16
 800291c:	d122      	bne.n	8002964 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b10      	cmp	r3, #16
 800292a:	d11b      	bne.n	8002964 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0210 	mvn.w	r2, #16
 8002934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2208      	movs	r2, #8
 800293a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f9f1 	bl	8002d32 <HAL_TIM_IC_CaptureCallback>
 8002950:	e005      	b.n	800295e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f9e4 	bl	8002d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f9f3 	bl	8002d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b01      	cmp	r3, #1
 8002970:	d10e      	bne.n	8002990 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b01      	cmp	r3, #1
 800297e:	d107      	bne.n	8002990 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0201 	mvn.w	r2, #1
 8002988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fd ff44 	bl	8000818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299a:	2b80      	cmp	r3, #128	; 0x80
 800299c:	d10e      	bne.n	80029bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a8:	2b80      	cmp	r3, #128	; 0x80
 80029aa:	d107      	bne.n	80029bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fce1 	bl	800337e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c6:	2b40      	cmp	r3, #64	; 0x40
 80029c8:	d10e      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d4:	2b40      	cmp	r3, #64	; 0x40
 80029d6:	d107      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f9b7 	bl	8002d56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f003 0320 	and.w	r3, r3, #32
 80029f2:	2b20      	cmp	r3, #32
 80029f4:	d10e      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b20      	cmp	r3, #32
 8002a02:	d107      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0220 	mvn.w	r2, #32
 8002a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fcac 	bl	800336c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e0ac      	b.n	8002b90 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b0c      	cmp	r3, #12
 8002a42:	f200 809f 	bhi.w	8002b84 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002a46:	a201      	add	r2, pc, #4	; (adr r2, 8002a4c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4c:	08002a81 	.word	0x08002a81
 8002a50:	08002b85 	.word	0x08002b85
 8002a54:	08002b85 	.word	0x08002b85
 8002a58:	08002b85 	.word	0x08002b85
 8002a5c:	08002ac1 	.word	0x08002ac1
 8002a60:	08002b85 	.word	0x08002b85
 8002a64:	08002b85 	.word	0x08002b85
 8002a68:	08002b85 	.word	0x08002b85
 8002a6c:	08002b03 	.word	0x08002b03
 8002a70:	08002b85 	.word	0x08002b85
 8002a74:	08002b85 	.word	0x08002b85
 8002a78:	08002b85 	.word	0x08002b85
 8002a7c:	08002b43 	.word	0x08002b43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 f9d0 	bl	8002e2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0208 	orr.w	r2, r2, #8
 8002a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0204 	bic.w	r2, r2, #4
 8002aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6999      	ldr	r1, [r3, #24]
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	691a      	ldr	r2, [r3, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	619a      	str	r2, [r3, #24]
      break;
 8002abe:	e062      	b.n	8002b86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fa16 	bl	8002ef8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6999      	ldr	r1, [r3, #24]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	021a      	lsls	r2, r3, #8
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	619a      	str	r2, [r3, #24]
      break;
 8002b00:	e041      	b.n	8002b86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68b9      	ldr	r1, [r7, #8]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 fa5f 	bl	8002fcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69da      	ldr	r2, [r3, #28]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f042 0208 	orr.w	r2, r2, #8
 8002b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	69da      	ldr	r2, [r3, #28]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0204 	bic.w	r2, r2, #4
 8002b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69d9      	ldr	r1, [r3, #28]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	61da      	str	r2, [r3, #28]
      break;
 8002b40:	e021      	b.n	8002b86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 faa9 	bl	80030a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69da      	ldr	r2, [r3, #28]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69da      	ldr	r2, [r3, #28]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	69d9      	ldr	r1, [r3, #28]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	021a      	lsls	r2, r3, #8
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	61da      	str	r2, [r3, #28]
      break;
 8002b82:	e000      	b.n	8002b86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002b84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <HAL_TIM_ConfigClockSource+0x18>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e0b3      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x180>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be8:	d03e      	beq.n	8002c68 <HAL_TIM_ConfigClockSource+0xd0>
 8002bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bee:	f200 8087 	bhi.w	8002d00 <HAL_TIM_ConfigClockSource+0x168>
 8002bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf6:	f000 8085 	beq.w	8002d04 <HAL_TIM_ConfigClockSource+0x16c>
 8002bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfe:	d87f      	bhi.n	8002d00 <HAL_TIM_ConfigClockSource+0x168>
 8002c00:	2b70      	cmp	r3, #112	; 0x70
 8002c02:	d01a      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0xa2>
 8002c04:	2b70      	cmp	r3, #112	; 0x70
 8002c06:	d87b      	bhi.n	8002d00 <HAL_TIM_ConfigClockSource+0x168>
 8002c08:	2b60      	cmp	r3, #96	; 0x60
 8002c0a:	d050      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x116>
 8002c0c:	2b60      	cmp	r3, #96	; 0x60
 8002c0e:	d877      	bhi.n	8002d00 <HAL_TIM_ConfigClockSource+0x168>
 8002c10:	2b50      	cmp	r3, #80	; 0x50
 8002c12:	d03c      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0xf6>
 8002c14:	2b50      	cmp	r3, #80	; 0x50
 8002c16:	d873      	bhi.n	8002d00 <HAL_TIM_ConfigClockSource+0x168>
 8002c18:	2b40      	cmp	r3, #64	; 0x40
 8002c1a:	d058      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x136>
 8002c1c:	2b40      	cmp	r3, #64	; 0x40
 8002c1e:	d86f      	bhi.n	8002d00 <HAL_TIM_ConfigClockSource+0x168>
 8002c20:	2b30      	cmp	r3, #48	; 0x30
 8002c22:	d064      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x156>
 8002c24:	2b30      	cmp	r3, #48	; 0x30
 8002c26:	d86b      	bhi.n	8002d00 <HAL_TIM_ConfigClockSource+0x168>
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d060      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x156>
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d867      	bhi.n	8002d00 <HAL_TIM_ConfigClockSource+0x168>
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d05c      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x156>
 8002c34:	2b10      	cmp	r3, #16
 8002c36:	d05a      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c38:	e062      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	6899      	ldr	r1, [r3, #8]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f000 faee 	bl	800322a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	609a      	str	r2, [r3, #8]
      break;
 8002c66:	e04e      	b.n	8002d06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	6899      	ldr	r1, [r3, #8]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f000 fad7 	bl	800322a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c8a:	609a      	str	r2, [r3, #8]
      break;
 8002c8c:	e03b      	b.n	8002d06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6859      	ldr	r1, [r3, #4]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f000 fa4e 	bl	800313c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2150      	movs	r1, #80	; 0x50
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 faa5 	bl	80031f6 <TIM_ITRx_SetConfig>
      break;
 8002cac:	e02b      	b.n	8002d06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6859      	ldr	r1, [r3, #4]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f000 fa6c 	bl	8003198 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2160      	movs	r1, #96	; 0x60
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fa95 	bl	80031f6 <TIM_ITRx_SetConfig>
      break;
 8002ccc:	e01b      	b.n	8002d06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6859      	ldr	r1, [r3, #4]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f000 fa2e 	bl	800313c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2140      	movs	r1, #64	; 0x40
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fa85 	bl	80031f6 <TIM_ITRx_SetConfig>
      break;
 8002cec:	e00b      	b.n	8002d06 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	f000 fa7c 	bl	80031f6 <TIM_ITRx_SetConfig>
        break;
 8002cfe:	e002      	b.n	8002d06 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d00:	bf00      	nop
 8002d02:	e000      	b.n	8002d06 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d04:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr

08002d32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a29      	ldr	r2, [pc, #164]	; (8002e20 <TIM_Base_SetConfig+0xb8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d00b      	beq.n	8002d98 <TIM_Base_SetConfig+0x30>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d86:	d007      	beq.n	8002d98 <TIM_Base_SetConfig+0x30>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a26      	ldr	r2, [pc, #152]	; (8002e24 <TIM_Base_SetConfig+0xbc>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d003      	beq.n	8002d98 <TIM_Base_SetConfig+0x30>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a25      	ldr	r2, [pc, #148]	; (8002e28 <TIM_Base_SetConfig+0xc0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d108      	bne.n	8002daa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a1c      	ldr	r2, [pc, #112]	; (8002e20 <TIM_Base_SetConfig+0xb8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00b      	beq.n	8002dca <TIM_Base_SetConfig+0x62>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db8:	d007      	beq.n	8002dca <TIM_Base_SetConfig+0x62>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a19      	ldr	r2, [pc, #100]	; (8002e24 <TIM_Base_SetConfig+0xbc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d003      	beq.n	8002dca <TIM_Base_SetConfig+0x62>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a18      	ldr	r2, [pc, #96]	; (8002e28 <TIM_Base_SetConfig+0xc0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d108      	bne.n	8002ddc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a07      	ldr	r2, [pc, #28]	; (8002e20 <TIM_Base_SetConfig+0xb8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d103      	bne.n	8002e10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	615a      	str	r2, [r3, #20]
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	40012c00 	.word	0x40012c00
 8002e24:	40000400 	.word	0x40000400
 8002e28:	40000800 	.word	0x40000800

08002e2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	f023 0201 	bic.w	r2, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0303 	bic.w	r3, r3, #3
 8002e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f023 0302 	bic.w	r3, r3, #2
 8002e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a1c      	ldr	r2, [pc, #112]	; (8002ef4 <TIM_OC1_SetConfig+0xc8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d10c      	bne.n	8002ea2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f023 0308 	bic.w	r3, r3, #8
 8002e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f023 0304 	bic.w	r3, r3, #4
 8002ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a13      	ldr	r2, [pc, #76]	; (8002ef4 <TIM_OC1_SetConfig+0xc8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d111      	bne.n	8002ece <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	621a      	str	r2, [r3, #32]
}
 8002ee8:	bf00      	nop
 8002eea:	371c      	adds	r7, #28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40012c00 	.word	0x40012c00

08002ef8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	f023 0210 	bic.w	r2, r3, #16
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	021b      	lsls	r3, r3, #8
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f023 0320 	bic.w	r3, r3, #32
 8002f42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a1d      	ldr	r2, [pc, #116]	; (8002fc8 <TIM_OC2_SetConfig+0xd0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d10d      	bne.n	8002f74 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a14      	ldr	r2, [pc, #80]	; (8002fc8 <TIM_OC2_SetConfig+0xd0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d113      	bne.n	8002fa4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	621a      	str	r2, [r3, #32]
}
 8002fbe:	bf00      	nop
 8002fc0:	371c      	adds	r7, #28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	40012c00 	.word	0x40012c00

08002fcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0303 	bic.w	r3, r3, #3
 8003002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a1d      	ldr	r2, [pc, #116]	; (800309c <TIM_OC3_SetConfig+0xd0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d10d      	bne.n	8003046 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	021b      	lsls	r3, r3, #8
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a14      	ldr	r2, [pc, #80]	; (800309c <TIM_OC3_SetConfig+0xd0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d113      	bne.n	8003076 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800305c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	621a      	str	r2, [r3, #32]
}
 8003090:	bf00      	nop
 8003092:	371c      	adds	r7, #28
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40012c00 	.word	0x40012c00

080030a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	031b      	lsls	r3, r3, #12
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a0f      	ldr	r2, [pc, #60]	; (8003138 <TIM_OC4_SetConfig+0x98>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d109      	bne.n	8003114 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003106:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	019b      	lsls	r3, r3, #6
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	621a      	str	r2, [r3, #32]
}
 800312e:	bf00      	nop
 8003130:	371c      	adds	r7, #28
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	40012c00 	.word	0x40012c00

0800313c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	f023 0201 	bic.w	r2, r3, #1
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f023 030a 	bic.w	r3, r3, #10
 8003178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4313      	orrs	r3, r2
 8003180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	621a      	str	r2, [r3, #32]
}
 800318e:	bf00      	nop
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	f023 0210 	bic.w	r2, r3, #16
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	031b      	lsls	r3, r3, #12
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	621a      	str	r2, [r3, #32]
}
 80031ec:	bf00      	nop
 80031ee:	371c      	adds	r7, #28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr

080031f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b085      	sub	sp, #20
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	f043 0307 	orr.w	r3, r3, #7
 8003218:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	609a      	str	r2, [r3, #8]
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr

0800322a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800322a:	b480      	push	{r7}
 800322c:	b087      	sub	sp, #28
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003244:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	021a      	lsls	r2, r3, #8
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	431a      	orrs	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	4313      	orrs	r3, r2
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	4313      	orrs	r3, r2
 8003256:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	609a      	str	r2, [r3, #8]
}
 800325e:	bf00      	nop
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	2201      	movs	r2, #1
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a1a      	ldr	r2, [r3, #32]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	43db      	mvns	r3, r3
 800328a:	401a      	ands	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a1a      	ldr	r2, [r3, #32]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	fa01 f303 	lsl.w	r3, r1, r3
 80032a0:	431a      	orrs	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	621a      	str	r2, [r3, #32]
}
 80032a6:	bf00      	nop
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr

080032b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e046      	b.n	8003356 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a16      	ldr	r2, [pc, #88]	; (8003360 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d00e      	beq.n	800332a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003314:	d009      	beq.n	800332a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a12      	ldr	r2, [pc, #72]	; (8003364 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d004      	beq.n	800332a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a10      	ldr	r2, [pc, #64]	; (8003368 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d10c      	bne.n	8003344 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003330:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	4313      	orrs	r3, r2
 800333a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr
 8003360:	40012c00 	.word	0x40012c00
 8003364:	40000400 	.word	0x40000400
 8003368:	40000800 	.word	0x40000800

0800336c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr

0800337e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003396:	f3ef 8305 	mrs	r3, IPSR
 800339a:	60bb      	str	r3, [r7, #8]
  return(result);
 800339c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10f      	bne.n	80033c2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a2:	f3ef 8310 	mrs	r3, PRIMASK
 80033a6:	607b      	str	r3, [r7, #4]
  return(result);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d109      	bne.n	80033c2 <osKernelInitialize+0x32>
 80033ae:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <osKernelInitialize+0x60>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d109      	bne.n	80033ca <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033b6:	f3ef 8311 	mrs	r3, BASEPRI
 80033ba:	603b      	str	r3, [r7, #0]
  return(result);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80033c2:	f06f 0305 	mvn.w	r3, #5
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	e00c      	b.n	80033e4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80033ca:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <osKernelInitialize+0x60>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d105      	bne.n	80033de <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80033d2:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <osKernelInitialize+0x60>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	e002      	b.n	80033e4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80033de:	f04f 33ff 	mov.w	r3, #4294967295
 80033e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80033e4:	68fb      	ldr	r3, [r7, #12]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr
 80033f0:	20000150 	.word	0x20000150

080033f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033fa:	f3ef 8305 	mrs	r3, IPSR
 80033fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8003400:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10f      	bne.n	8003426 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003406:	f3ef 8310 	mrs	r3, PRIMASK
 800340a:	607b      	str	r3, [r7, #4]
  return(result);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d109      	bne.n	8003426 <osKernelStart+0x32>
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <osKernelStart+0x64>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d109      	bne.n	800342e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800341a:	f3ef 8311 	mrs	r3, BASEPRI
 800341e:	603b      	str	r3, [r7, #0]
  return(result);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003426:	f06f 0305 	mvn.w	r3, #5
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e00e      	b.n	800344c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800342e:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <osKernelStart+0x64>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d107      	bne.n	8003446 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003436:	4b08      	ldr	r3, [pc, #32]	; (8003458 <osKernelStart+0x64>)
 8003438:	2202      	movs	r2, #2
 800343a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800343c:	f001 f9b0 	bl	80047a0 <vTaskStartScheduler>
      stat = osOK;
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	e002      	b.n	800344c <osKernelStart+0x58>
    } else {
      stat = osError;
 8003446:	f04f 33ff 	mov.w	r3, #4294967295
 800344a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800344c:	68fb      	ldr	r3, [r7, #12]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000150 	.word	0x20000150

0800345c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800345c:	b580      	push	{r7, lr}
 800345e:	b092      	sub	sp, #72	; 0x48
 8003460:	af04      	add	r7, sp, #16
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800346c:	f3ef 8305 	mrs	r3, IPSR
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003474:	2b00      	cmp	r3, #0
 8003476:	f040 8094 	bne.w	80035a2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800347a:	f3ef 8310 	mrs	r3, PRIMASK
 800347e:	623b      	str	r3, [r7, #32]
  return(result);
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	2b00      	cmp	r3, #0
 8003484:	f040 808d 	bne.w	80035a2 <osThreadNew+0x146>
 8003488:	4b48      	ldr	r3, [pc, #288]	; (80035ac <osThreadNew+0x150>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b02      	cmp	r3, #2
 800348e:	d106      	bne.n	800349e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003490:	f3ef 8311 	mrs	r3, BASEPRI
 8003494:	61fb      	str	r3, [r7, #28]
  return(result);
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	2b00      	cmp	r3, #0
 800349a:	f040 8082 	bne.w	80035a2 <osThreadNew+0x146>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d07e      	beq.n	80035a2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80034a4:	2380      	movs	r3, #128	; 0x80
 80034a6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80034a8:	2318      	movs	r3, #24
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80034ac:	2300      	movs	r3, #0
 80034ae:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80034b0:	f107 031b 	add.w	r3, r7, #27
 80034b4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80034b6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d045      	beq.n	800354e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <osThreadNew+0x74>
        name = attr->name;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80034de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <osThreadNew+0x9a>
 80034e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e6:	2b38      	cmp	r3, #56	; 0x38
 80034e8:	d805      	bhi.n	80034f6 <osThreadNew+0x9a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <osThreadNew+0x9e>
        return (NULL);
 80034f6:	2300      	movs	r3, #0
 80034f8:	e054      	b.n	80035a4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	089b      	lsrs	r3, r3, #2
 8003508:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00e      	beq.n	8003530 <osThreadNew+0xd4>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	2b5b      	cmp	r3, #91	; 0x5b
 8003518:	d90a      	bls.n	8003530 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800351e:	2b00      	cmp	r3, #0
 8003520:	d006      	beq.n	8003530 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <osThreadNew+0xd4>
        mem = 1;
 800352a:	2301      	movs	r3, #1
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28
 800352e:	e010      	b.n	8003552 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10c      	bne.n	8003552 <osThreadNew+0xf6>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d108      	bne.n	8003552 <osThreadNew+0xf6>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d104      	bne.n	8003552 <osThreadNew+0xf6>
          mem = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	62bb      	str	r3, [r7, #40]	; 0x28
 800354c:	e001      	b.n	8003552 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003554:	2b01      	cmp	r3, #1
 8003556:	d110      	bne.n	800357a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003560:	9202      	str	r2, [sp, #8]
 8003562:	9301      	str	r3, [sp, #4]
 8003564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800356c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 ff4a 	bl	8004408 <xTaskCreateStatic>
 8003574:	4603      	mov	r3, r0
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	e013      	b.n	80035a2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	2b00      	cmp	r3, #0
 800357e:	d110      	bne.n	80035a2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003582:	b29a      	uxth	r2, r3
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 ff94 	bl	80044c0 <xTaskCreate>
 8003598:	4603      	mov	r3, r0
 800359a:	2b01      	cmp	r3, #1
 800359c:	d001      	beq.n	80035a2 <osThreadNew+0x146>
          hTask = NULL;
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80035a2:	697b      	ldr	r3, [r7, #20]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3738      	adds	r7, #56	; 0x38
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	20000150 	.word	0x20000150

080035b0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035b8:	f3ef 8305 	mrs	r3, IPSR
 80035bc:	613b      	str	r3, [r7, #16]
  return(result);
 80035be:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10f      	bne.n	80035e4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035c4:	f3ef 8310 	mrs	r3, PRIMASK
 80035c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d109      	bne.n	80035e4 <osDelay+0x34>
 80035d0:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <osDelay+0x58>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d109      	bne.n	80035ec <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80035d8:	f3ef 8311 	mrs	r3, BASEPRI
 80035dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <osDelay+0x3c>
    stat = osErrorISR;
 80035e4:	f06f 0305 	mvn.w	r3, #5
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e007      	b.n	80035fc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <osDelay+0x4c>
      vTaskDelay(ticks);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f001 f89e 	bl	8004738 <vTaskDelay>
    }
  }

  return (stat);
 80035fc:	697b      	ldr	r3, [r7, #20]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20000150 	.word	0x20000150

0800360c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800360c:	b580      	push	{r7, lr}
 800360e:	b08c      	sub	sp, #48	; 0x30
 8003610:	af02      	add	r7, sp, #8
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003618:	2300      	movs	r3, #0
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800361c:	f3ef 8305 	mrs	r3, IPSR
 8003620:	61bb      	str	r3, [r7, #24]
  return(result);
 8003622:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003624:	2b00      	cmp	r3, #0
 8003626:	d16f      	bne.n	8003708 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003628:	f3ef 8310 	mrs	r3, PRIMASK
 800362c:	617b      	str	r3, [r7, #20]
  return(result);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d169      	bne.n	8003708 <osMessageQueueNew+0xfc>
 8003634:	4b37      	ldr	r3, [pc, #220]	; (8003714 <osMessageQueueNew+0x108>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d105      	bne.n	8003648 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800363c:	f3ef 8311 	mrs	r3, BASEPRI
 8003640:	613b      	str	r3, [r7, #16]
  return(result);
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d15f      	bne.n	8003708 <osMessageQueueNew+0xfc>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d05c      	beq.n	8003708 <osMessageQueueNew+0xfc>
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d059      	beq.n	8003708 <osMessageQueueNew+0xfc>
    mem = -1;
 8003654:	f04f 33ff 	mov.w	r3, #4294967295
 8003658:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d029      	beq.n	80036b4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d012      	beq.n	800368e <osMessageQueueNew+0x82>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	2b4f      	cmp	r3, #79	; 0x4f
 800366e:	d90e      	bls.n	800368e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	68b9      	ldr	r1, [r7, #8]
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	429a      	cmp	r2, r3
 8003686:	d302      	bcc.n	800368e <osMessageQueueNew+0x82>
        mem = 1;
 8003688:	2301      	movs	r3, #1
 800368a:	623b      	str	r3, [r7, #32]
 800368c:	e014      	b.n	80036b8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d110      	bne.n	80036b8 <osMessageQueueNew+0xac>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10c      	bne.n	80036b8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d108      	bne.n	80036b8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d104      	bne.n	80036b8 <osMessageQueueNew+0xac>
          mem = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	623b      	str	r3, [r7, #32]
 80036b2:	e001      	b.n	80036b8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d10b      	bne.n	80036d6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2100      	movs	r1, #0
 80036c8:	9100      	str	r1, [sp, #0]
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 f9e1 	bl	8003a94 <xQueueGenericCreateStatic>
 80036d2:	6278      	str	r0, [r7, #36]	; 0x24
 80036d4:	e008      	b.n	80036e8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d105      	bne.n	80036e8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80036dc:	2200      	movs	r2, #0
 80036de:	68b9      	ldr	r1, [r7, #8]
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 fa4e 	bl	8003b82 <xQueueGenericCreate>
 80036e6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00c      	beq.n	8003708 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <osMessageQueueNew+0xf0>
        name = attr->name;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	e001      	b.n	8003700 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003700:	69f9      	ldr	r1, [r7, #28]
 8003702:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003704:	f000 fe24 	bl	8004350 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800370a:	4618      	mov	r0, r3
 800370c:	3728      	adds	r7, #40	; 0x28
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000150 	.word	0x20000150

08003718 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	; 0x28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800372c:	2300      	movs	r3, #0
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003730:	f3ef 8305 	mrs	r3, IPSR
 8003734:	61fb      	str	r3, [r7, #28]
  return(result);
 8003736:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10f      	bne.n	800375c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800373c:	f3ef 8310 	mrs	r3, PRIMASK
 8003740:	61bb      	str	r3, [r7, #24]
  return(result);
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d109      	bne.n	800375c <osMessageQueuePut+0x44>
 8003748:	4b2b      	ldr	r3, [pc, #172]	; (80037f8 <osMessageQueuePut+0xe0>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d12e      	bne.n	80037ae <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003750:	f3ef 8311 	mrs	r3, BASEPRI
 8003754:	617b      	str	r3, [r7, #20]
  return(result);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d028      	beq.n	80037ae <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d005      	beq.n	800376e <osMessageQueuePut+0x56>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <osMessageQueuePut+0x56>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800376e:	f06f 0303 	mvn.w	r3, #3
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003774:	e039      	b.n	80037ea <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800377a:	f107 0210 	add.w	r2, r7, #16
 800377e:	2300      	movs	r3, #0
 8003780:	68b9      	ldr	r1, [r7, #8]
 8003782:	6a38      	ldr	r0, [r7, #32]
 8003784:	f000 fb5c 	bl	8003e40 <xQueueGenericSendFromISR>
 8003788:	4603      	mov	r3, r0
 800378a:	2b01      	cmp	r3, #1
 800378c:	d003      	beq.n	8003796 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800378e:	f06f 0302 	mvn.w	r3, #2
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003794:	e029      	b.n	80037ea <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d026      	beq.n	80037ea <osMessageQueuePut+0xd2>
 800379c:	4b17      	ldr	r3, [pc, #92]	; (80037fc <osMessageQueuePut+0xe4>)
 800379e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80037ac:	e01d      	b.n	80037ea <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <osMessageQueuePut+0xa2>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80037ba:	f06f 0303 	mvn.w	r3, #3
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
 80037c0:	e014      	b.n	80037ec <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80037c2:	2300      	movs	r3, #0
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	68b9      	ldr	r1, [r7, #8]
 80037c8:	6a38      	ldr	r0, [r7, #32]
 80037ca:	f000 fa3b 	bl	8003c44 <xQueueGenericSend>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d00b      	beq.n	80037ec <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80037da:	f06f 0301 	mvn.w	r3, #1
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
 80037e0:	e004      	b.n	80037ec <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80037e2:	f06f 0302 	mvn.w	r3, #2
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
 80037e8:	e000      	b.n	80037ec <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80037ea:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3728      	adds	r7, #40	; 0x28
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000150 	.word	0x20000150
 80037fc:	e000ed04 	.word	0xe000ed04

08003800 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4a06      	ldr	r2, [pc, #24]	; (8003828 <vApplicationGetIdleTaskMemory+0x28>)
 8003810:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	4a05      	ldr	r2, [pc, #20]	; (800382c <vApplicationGetIdleTaskMemory+0x2c>)
 8003816:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2280      	movs	r2, #128	; 0x80
 800381c:	601a      	str	r2, [r3, #0]
}
 800381e:	bf00      	nop
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr
 8003828:	20000154 	.word	0x20000154
 800382c:	200001b0 	.word	0x200001b0

08003830 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4a07      	ldr	r2, [pc, #28]	; (800385c <vApplicationGetTimerTaskMemory+0x2c>)
 8003840:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	4a06      	ldr	r2, [pc, #24]	; (8003860 <vApplicationGetTimerTaskMemory+0x30>)
 8003846:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800384e:	601a      	str	r2, [r3, #0]
}
 8003850:	bf00      	nop
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	200003b0 	.word	0x200003b0
 8003860:	2000040c 	.word	0x2000040c

08003864 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f103 0208 	add.w	r2, r3, #8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f04f 32ff 	mov.w	r2, #4294967295
 800387c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f103 0208 	add.w	r2, r3, #8
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f103 0208 	add.w	r2, r3, #8
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr

080038a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bc80      	pop	{r7}
 80038b8:	4770      	bx	lr

080038ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038ba:	b480      	push	{r7}
 80038bc:	b085      	sub	sp, #20
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	601a      	str	r2, [r3, #0]
}
 80038f6:	bf00      	nop
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003916:	d103      	bne.n	8003920 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	e00c      	b.n	800393a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3308      	adds	r3, #8
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	e002      	b.n	800392e <vListInsert+0x2e>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	429a      	cmp	r2, r3
 8003938:	d2f6      	bcs.n	8003928 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	601a      	str	r2, [r3, #0]
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr

08003970 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6892      	ldr	r2, [r2, #8]
 8003986:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6852      	ldr	r2, [r2, #4]
 8003990:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	429a      	cmp	r2, r3
 800399a:	d103      	bne.n	80039a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	1e5a      	subs	r2, r3, #1
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr
	...

080039c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10a      	bne.n	80039ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80039ea:	bf00      	nop
 80039ec:	e7fe      	b.n	80039ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80039ee:	f002 f805 	bl	80059fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fa:	68f9      	ldr	r1, [r7, #12]
 80039fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039fe:	fb01 f303 	mul.w	r3, r1, r3
 8003a02:	441a      	add	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	68f9      	ldr	r1, [r7, #12]
 8003a22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a24:	fb01 f303 	mul.w	r3, r1, r3
 8003a28:	441a      	add	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	22ff      	movs	r2, #255	; 0xff
 8003a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	22ff      	movs	r2, #255	; 0xff
 8003a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d114      	bne.n	8003a6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d01a      	beq.n	8003a82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	3310      	adds	r3, #16
 8003a50:	4618      	mov	r0, r3
 8003a52:	f001 f92f 	bl	8004cb4 <xTaskRemoveFromEventList>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d012      	beq.n	8003a82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <xQueueGenericReset+0xcc>)
 8003a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	e009      	b.n	8003a82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	3310      	adds	r3, #16
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff fef6 	bl	8003864 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	3324      	adds	r3, #36	; 0x24
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff fef1 	bl	8003864 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a82:	f001 ffeb 	bl	8005a5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a86:	2301      	movs	r3, #1
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	e000ed04 	.word	0xe000ed04

08003a94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08e      	sub	sp, #56	; 0x38
 8003a98:	af02      	add	r7, sp, #8
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10a      	bne.n	8003abe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003aba:	bf00      	nop
 8003abc:	e7fe      	b.n	8003abc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10a      	bne.n	8003ada <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ad6:	bf00      	nop
 8003ad8:	e7fe      	b.n	8003ad8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <xQueueGenericCreateStatic+0x52>
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <xQueueGenericCreateStatic+0x56>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <xQueueGenericCreateStatic+0x58>
 8003aea:	2300      	movs	r3, #0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	623b      	str	r3, [r7, #32]
}
 8003b02:	bf00      	nop
 8003b04:	e7fe      	b.n	8003b04 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d102      	bne.n	8003b12 <xQueueGenericCreateStatic+0x7e>
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <xQueueGenericCreateStatic+0x82>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <xQueueGenericCreateStatic+0x84>
 8003b16:	2300      	movs	r3, #0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10a      	bne.n	8003b32 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b20:	f383 8811 	msr	BASEPRI, r3
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	61fb      	str	r3, [r7, #28]
}
 8003b2e:	bf00      	nop
 8003b30:	e7fe      	b.n	8003b30 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003b32:	2350      	movs	r3, #80	; 0x50
 8003b34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2b50      	cmp	r3, #80	; 0x50
 8003b3a:	d00a      	beq.n	8003b52 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	61bb      	str	r3, [r7, #24]
}
 8003b4e:	bf00      	nop
 8003b50:	e7fe      	b.n	8003b50 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00d      	beq.n	8003b78 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b64:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f843 	bl	8003bfe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3730      	adds	r7, #48	; 0x30
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b08a      	sub	sp, #40	; 0x28
 8003b86:	af02      	add	r7, sp, #8
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10a      	bne.n	8003bac <xQueueGenericCreate+0x2a>
	__asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	613b      	str	r3, [r7, #16]
}
 8003ba8:	bf00      	nop
 8003baa:	e7fe      	b.n	8003baa <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d102      	bne.n	8003bb8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61fb      	str	r3, [r7, #28]
 8003bb6:	e004      	b.n	8003bc2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	fb02 f303 	mul.w	r3, r2, r3
 8003bc0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	3350      	adds	r3, #80	; 0x50
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f002 f818 	bl	8005bfc <pvPortMalloc>
 8003bcc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00f      	beq.n	8003bf4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	3350      	adds	r3, #80	; 0x50
 8003bd8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003be2:	79fa      	ldrb	r2, [r7, #7]
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	4613      	mov	r3, r2
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 f805 	bl	8003bfe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003bf4:	69bb      	ldr	r3, [r7, #24]
	}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3720      	adds	r7, #32
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	607a      	str	r2, [r7, #4]
 8003c0a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d103      	bne.n	8003c1a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	e002      	b.n	8003c20 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	69b8      	ldr	r0, [r7, #24]
 8003c30:	f7ff fec8 	bl	80039c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	78fa      	ldrb	r2, [r7, #3]
 8003c38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08e      	sub	sp, #56	; 0x38
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c52:	2300      	movs	r3, #0
 8003c54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10a      	bne.n	8003c76 <xQueueGenericSend+0x32>
	__asm volatile
 8003c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c72:	bf00      	nop
 8003c74:	e7fe      	b.n	8003c74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d103      	bne.n	8003c84 <xQueueGenericSend+0x40>
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <xQueueGenericSend+0x44>
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <xQueueGenericSend+0x46>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10a      	bne.n	8003ca4 <xQueueGenericSend+0x60>
	__asm volatile
 8003c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ca0:	bf00      	nop
 8003ca2:	e7fe      	b.n	8003ca2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d103      	bne.n	8003cb2 <xQueueGenericSend+0x6e>
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <xQueueGenericSend+0x72>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <xQueueGenericSend+0x74>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10a      	bne.n	8003cd2 <xQueueGenericSend+0x8e>
	__asm volatile
 8003cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	623b      	str	r3, [r7, #32]
}
 8003cce:	bf00      	nop
 8003cd0:	e7fe      	b.n	8003cd0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cd2:	f001 f9b1 	bl	8005038 <xTaskGetSchedulerState>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d102      	bne.n	8003ce2 <xQueueGenericSend+0x9e>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <xQueueGenericSend+0xa2>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <xQueueGenericSend+0xa4>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10a      	bne.n	8003d02 <xQueueGenericSend+0xbe>
	__asm volatile
 8003cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	61fb      	str	r3, [r7, #28]
}
 8003cfe:	bf00      	nop
 8003d00:	e7fe      	b.n	8003d00 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d02:	f001 fe7b 	bl	80059fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d302      	bcc.n	8003d18 <xQueueGenericSend+0xd4>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d129      	bne.n	8003d6c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d1e:	f000 fa07 	bl	8004130 <prvCopyDataToQueue>
 8003d22:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d010      	beq.n	8003d4e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2e:	3324      	adds	r3, #36	; 0x24
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 ffbf 	bl	8004cb4 <xTaskRemoveFromEventList>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d013      	beq.n	8003d64 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d3c:	4b3f      	ldr	r3, [pc, #252]	; (8003e3c <xQueueGenericSend+0x1f8>)
 8003d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	e00a      	b.n	8003d64 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d007      	beq.n	8003d64 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d54:	4b39      	ldr	r3, [pc, #228]	; (8003e3c <xQueueGenericSend+0x1f8>)
 8003d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d64:	f001 fe7a 	bl	8005a5c <vPortExitCritical>
				return pdPASS;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e063      	b.n	8003e34 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d103      	bne.n	8003d7a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d72:	f001 fe73 	bl	8005a5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	e05c      	b.n	8003e34 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d106      	bne.n	8003d8e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d80:	f107 0314 	add.w	r3, r7, #20
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fff9 	bl	8004d7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d8e:	f001 fe65 	bl	8005a5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d92:	f000 fd6b 	bl	800486c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d96:	f001 fe31 	bl	80059fc <vPortEnterCritical>
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003da0:	b25b      	sxtb	r3, r3
 8003da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da6:	d103      	bne.n	8003db0 <xQueueGenericSend+0x16c>
 8003da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003db6:	b25b      	sxtb	r3, r3
 8003db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbc:	d103      	bne.n	8003dc6 <xQueueGenericSend+0x182>
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dc6:	f001 fe49 	bl	8005a5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003dca:	1d3a      	adds	r2, r7, #4
 8003dcc:	f107 0314 	add.w	r3, r7, #20
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 ffe8 	bl	8004da8 <xTaskCheckForTimeOut>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d124      	bne.n	8003e28 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003dde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003de0:	f000 fa9e 	bl	8004320 <prvIsQueueFull>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d018      	beq.n	8003e1c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dec:	3310      	adds	r3, #16
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	4611      	mov	r1, r2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 ff0e 	bl	8004c14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dfa:	f000 fa29 	bl	8004250 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003dfe:	f000 fd43 	bl	8004888 <xTaskResumeAll>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f47f af7c 	bne.w	8003d02 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003e0a:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <xQueueGenericSend+0x1f8>)
 8003e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	e772      	b.n	8003d02 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e1e:	f000 fa17 	bl	8004250 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e22:	f000 fd31 	bl	8004888 <xTaskResumeAll>
 8003e26:	e76c      	b.n	8003d02 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e2a:	f000 fa11 	bl	8004250 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e2e:	f000 fd2b 	bl	8004888 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e32:	2300      	movs	r3, #0
		}
	}
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3738      	adds	r7, #56	; 0x38
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	e000ed04 	.word	0xe000ed04

08003e40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08e      	sub	sp, #56	; 0x38
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
 8003e4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10a      	bne.n	8003e6e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e6a:	bf00      	nop
 8003e6c:	e7fe      	b.n	8003e6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d103      	bne.n	8003e7c <xQueueGenericSendFromISR+0x3c>
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <xQueueGenericSendFromISR+0x40>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <xQueueGenericSendFromISR+0x42>
 8003e80:	2300      	movs	r3, #0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10a      	bne.n	8003e9c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	623b      	str	r3, [r7, #32]
}
 8003e98:	bf00      	nop
 8003e9a:	e7fe      	b.n	8003e9a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d103      	bne.n	8003eaa <xQueueGenericSendFromISR+0x6a>
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <xQueueGenericSendFromISR+0x6e>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <xQueueGenericSendFromISR+0x70>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10a      	bne.n	8003eca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	61fb      	str	r3, [r7, #28]
}
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003eca:	f001 fe59 	bl	8005b80 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003ece:	f3ef 8211 	mrs	r2, BASEPRI
 8003ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	61ba      	str	r2, [r7, #24]
 8003ee4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ee6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d302      	bcc.n	8003efc <xQueueGenericSendFromISR+0xbc>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d12c      	bne.n	8003f56 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	68b9      	ldr	r1, [r7, #8]
 8003f0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f0c:	f000 f910 	bl	8004130 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f10:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f18:	d112      	bne.n	8003f40 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d016      	beq.n	8003f50 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f24:	3324      	adds	r3, #36	; 0x24
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fec4 	bl	8004cb4 <xTaskRemoveFromEventList>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00e      	beq.n	8003f50 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00b      	beq.n	8003f50 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	e007      	b.n	8003f50 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f44:	3301      	adds	r3, #1
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	b25a      	sxtb	r2, r3
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003f50:	2301      	movs	r3, #1
 8003f52:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003f54:	e001      	b.n	8003f5a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	637b      	str	r3, [r7, #52]	; 0x34
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3738      	adds	r7, #56	; 0x38
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08c      	sub	sp, #48	; 0x30
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <xQueueReceive+0x30>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	623b      	str	r3, [r7, #32]
}
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d103      	bne.n	8003fae <xQueueReceive+0x3e>
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <xQueueReceive+0x42>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <xQueueReceive+0x44>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10a      	bne.n	8003fce <xQueueReceive+0x5e>
	__asm volatile
 8003fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbc:	f383 8811 	msr	BASEPRI, r3
 8003fc0:	f3bf 8f6f 	isb	sy
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	61fb      	str	r3, [r7, #28]
}
 8003fca:	bf00      	nop
 8003fcc:	e7fe      	b.n	8003fcc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fce:	f001 f833 	bl	8005038 <xTaskGetSchedulerState>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <xQueueReceive+0x6e>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <xQueueReceive+0x72>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <xQueueReceive+0x74>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10a      	bne.n	8003ffe <xQueueReceive+0x8e>
	__asm volatile
 8003fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fec:	f383 8811 	msr	BASEPRI, r3
 8003ff0:	f3bf 8f6f 	isb	sy
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	61bb      	str	r3, [r7, #24]
}
 8003ffa:	bf00      	nop
 8003ffc:	e7fe      	b.n	8003ffc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ffe:	f001 fcfd 	bl	80059fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	2b00      	cmp	r3, #0
 800400c:	d01f      	beq.n	800404e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800400e:	68b9      	ldr	r1, [r7, #8]
 8004010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004012:	f000 f8f7 	bl	8004204 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	1e5a      	subs	r2, r3, #1
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00f      	beq.n	8004046 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004028:	3310      	adds	r3, #16
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fe42 	bl	8004cb4 <xTaskRemoveFromEventList>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d007      	beq.n	8004046 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004036:	4b3d      	ldr	r3, [pc, #244]	; (800412c <xQueueReceive+0x1bc>)
 8004038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	f3bf 8f4f 	dsb	sy
 8004042:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004046:	f001 fd09 	bl	8005a5c <vPortExitCritical>
				return pdPASS;
 800404a:	2301      	movs	r3, #1
 800404c:	e069      	b.n	8004122 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d103      	bne.n	800405c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004054:	f001 fd02 	bl	8005a5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004058:	2300      	movs	r3, #0
 800405a:	e062      	b.n	8004122 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004062:	f107 0310 	add.w	r3, r7, #16
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fe88 	bl	8004d7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800406c:	2301      	movs	r3, #1
 800406e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004070:	f001 fcf4 	bl	8005a5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004074:	f000 fbfa 	bl	800486c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004078:	f001 fcc0 	bl	80059fc <vPortEnterCritical>
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004082:	b25b      	sxtb	r3, r3
 8004084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004088:	d103      	bne.n	8004092 <xQueueReceive+0x122>
 800408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004098:	b25b      	sxtb	r3, r3
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d103      	bne.n	80040a8 <xQueueReceive+0x138>
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040a8:	f001 fcd8 	bl	8005a5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040ac:	1d3a      	adds	r2, r7, #4
 80040ae:	f107 0310 	add.w	r3, r7, #16
 80040b2:	4611      	mov	r1, r2
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 fe77 	bl	8004da8 <xTaskCheckForTimeOut>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d123      	bne.n	8004108 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040c2:	f000 f917 	bl	80042f4 <prvIsQueueEmpty>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d017      	beq.n	80040fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	3324      	adds	r3, #36	; 0x24
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	4611      	mov	r1, r2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 fd9d 	bl	8004c14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80040da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040dc:	f000 f8b8 	bl	8004250 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80040e0:	f000 fbd2 	bl	8004888 <xTaskResumeAll>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d189      	bne.n	8003ffe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80040ea:	4b10      	ldr	r3, [pc, #64]	; (800412c <xQueueReceive+0x1bc>)
 80040ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	e780      	b.n	8003ffe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80040fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040fe:	f000 f8a7 	bl	8004250 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004102:	f000 fbc1 	bl	8004888 <xTaskResumeAll>
 8004106:	e77a      	b.n	8003ffe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800410a:	f000 f8a1 	bl	8004250 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800410e:	f000 fbbb 	bl	8004888 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004114:	f000 f8ee 	bl	80042f4 <prvIsQueueEmpty>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	f43f af6f 	beq.w	8003ffe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004120:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004122:	4618      	mov	r0, r3
 8004124:	3730      	adds	r7, #48	; 0x30
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	e000ed04 	.word	0xe000ed04

08004130 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800413c:	2300      	movs	r3, #0
 800413e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10d      	bne.n	800416a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d14d      	bne.n	80041f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 ff8a 	bl	8005074 <xTaskPriorityDisinherit>
 8004160:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	605a      	str	r2, [r3, #4]
 8004168:	e043      	b.n	80041f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d119      	bne.n	80041a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6898      	ldr	r0, [r3, #8]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	461a      	mov	r2, r3
 800417a:	68b9      	ldr	r1, [r7, #8]
 800417c:	f001 ff3a 	bl	8005ff4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	441a      	add	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	429a      	cmp	r2, r3
 8004198:	d32b      	bcc.n	80041f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	609a      	str	r2, [r3, #8]
 80041a2:	e026      	b.n	80041f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	68d8      	ldr	r0, [r3, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	461a      	mov	r2, r3
 80041ae:	68b9      	ldr	r1, [r7, #8]
 80041b0:	f001 ff20 	bl	8005ff4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	425b      	negs	r3, r3
 80041be:	441a      	add	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d207      	bcs.n	80041e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	425b      	negs	r3, r3
 80041da:	441a      	add	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d105      	bne.n	80041f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80041fa:	697b      	ldr	r3, [r7, #20]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	2b00      	cmp	r3, #0
 8004214:	d018      	beq.n	8004248 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	441a      	add	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	429a      	cmp	r2, r3
 800422e:	d303      	bcc.n	8004238 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68d9      	ldr	r1, [r3, #12]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	461a      	mov	r2, r3
 8004242:	6838      	ldr	r0, [r7, #0]
 8004244:	f001 fed6 	bl	8005ff4 <memcpy>
	}
}
 8004248:	bf00      	nop
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004258:	f001 fbd0 	bl	80059fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004262:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004264:	e011      	b.n	800428a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	2b00      	cmp	r3, #0
 800426c:	d012      	beq.n	8004294 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3324      	adds	r3, #36	; 0x24
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fd1e 	bl	8004cb4 <xTaskRemoveFromEventList>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800427e:	f000 fdf5 	bl	8004e6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004282:	7bfb      	ldrb	r3, [r7, #15]
 8004284:	3b01      	subs	r3, #1
 8004286:	b2db      	uxtb	r3, r3
 8004288:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800428a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800428e:	2b00      	cmp	r3, #0
 8004290:	dce9      	bgt.n	8004266 <prvUnlockQueue+0x16>
 8004292:	e000      	b.n	8004296 <prvUnlockQueue+0x46>
					break;
 8004294:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	22ff      	movs	r2, #255	; 0xff
 800429a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800429e:	f001 fbdd 	bl	8005a5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80042a2:	f001 fbab 	bl	80059fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042ae:	e011      	b.n	80042d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d012      	beq.n	80042de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3310      	adds	r3, #16
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 fcf9 	bl	8004cb4 <xTaskRemoveFromEventList>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80042c8:	f000 fdd0 	bl	8004e6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80042cc:	7bbb      	ldrb	r3, [r7, #14]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	dce9      	bgt.n	80042b0 <prvUnlockQueue+0x60>
 80042dc:	e000      	b.n	80042e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80042de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	22ff      	movs	r2, #255	; 0xff
 80042e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80042e8:	f001 fbb8 	bl	8005a5c <vPortExitCritical>
}
 80042ec:	bf00      	nop
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042fc:	f001 fb7e 	bl	80059fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004304:	2b00      	cmp	r3, #0
 8004306:	d102      	bne.n	800430e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004308:	2301      	movs	r3, #1
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	e001      	b.n	8004312 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800430e:	2300      	movs	r3, #0
 8004310:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004312:	f001 fba3 	bl	8005a5c <vPortExitCritical>

	return xReturn;
 8004316:	68fb      	ldr	r3, [r7, #12]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004328:	f001 fb68 	bl	80059fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004334:	429a      	cmp	r2, r3
 8004336:	d102      	bne.n	800433e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004338:	2301      	movs	r3, #1
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	e001      	b.n	8004342 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004342:	f001 fb8b 	bl	8005a5c <vPortExitCritical>

	return xReturn;
 8004346:	68fb      	ldr	r3, [r7, #12]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800435a:	2300      	movs	r3, #0
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	e014      	b.n	800438a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004360:	4a0e      	ldr	r2, [pc, #56]	; (800439c <vQueueAddToRegistry+0x4c>)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10b      	bne.n	8004384 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800436c:	490b      	ldr	r1, [pc, #44]	; (800439c <vQueueAddToRegistry+0x4c>)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004376:	4a09      	ldr	r2, [pc, #36]	; (800439c <vQueueAddToRegistry+0x4c>)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	4413      	add	r3, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004382:	e006      	b.n	8004392 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3301      	adds	r3, #1
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2b07      	cmp	r3, #7
 800438e:	d9e7      	bls.n	8004360 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004390:	bf00      	nop
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr
 800439c:	2000080c 	.word	0x2000080c

080043a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80043b0:	f001 fb24 	bl	80059fc <vPortEnterCritical>
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043ba:	b25b      	sxtb	r3, r3
 80043bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c0:	d103      	bne.n	80043ca <vQueueWaitForMessageRestricted+0x2a>
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043d0:	b25b      	sxtb	r3, r3
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d6:	d103      	bne.n	80043e0 <vQueueWaitForMessageRestricted+0x40>
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043e0:	f001 fb3c 	bl	8005a5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d106      	bne.n	80043fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	3324      	adds	r3, #36	; 0x24
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	68b9      	ldr	r1, [r7, #8]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fc31 	bl	8004c5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80043fa:	6978      	ldr	r0, [r7, #20]
 80043fc:	f7ff ff28 	bl	8004250 <prvUnlockQueue>
	}
 8004400:	bf00      	nop
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08e      	sub	sp, #56	; 0x38
 800440c:	af04      	add	r7, sp, #16
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10a      	bne.n	8004432 <xTaskCreateStatic+0x2a>
	__asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	623b      	str	r3, [r7, #32]
}
 800442e:	bf00      	nop
 8004430:	e7fe      	b.n	8004430 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10a      	bne.n	800444e <xTaskCreateStatic+0x46>
	__asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	61fb      	str	r3, [r7, #28]
}
 800444a:	bf00      	nop
 800444c:	e7fe      	b.n	800444c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800444e:	235c      	movs	r3, #92	; 0x5c
 8004450:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	2b5c      	cmp	r3, #92	; 0x5c
 8004456:	d00a      	beq.n	800446e <xTaskCreateStatic+0x66>
	__asm volatile
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	61bb      	str	r3, [r7, #24]
}
 800446a:	bf00      	nop
 800446c:	e7fe      	b.n	800446c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800446e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01e      	beq.n	80044b2 <xTaskCreateStatic+0xaa>
 8004474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004476:	2b00      	cmp	r3, #0
 8004478:	d01b      	beq.n	80044b2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800447a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004482:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	2202      	movs	r2, #2
 8004488:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800448c:	2300      	movs	r3, #0
 800448e:	9303      	str	r3, [sp, #12]
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	9302      	str	r3, [sp, #8]
 8004494:	f107 0314 	add.w	r3, r7, #20
 8004498:	9301      	str	r3, [sp, #4]
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	68b9      	ldr	r1, [r7, #8]
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 f850 	bl	800454a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044ac:	f000 f8d4 	bl	8004658 <prvAddNewTaskToReadyList>
 80044b0:	e001      	b.n	80044b6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80044b6:	697b      	ldr	r3, [r7, #20]
	}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3728      	adds	r7, #40	; 0x28
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08c      	sub	sp, #48	; 0x30
 80044c4:	af04      	add	r7, sp, #16
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	4613      	mov	r3, r2
 80044ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044d0:	88fb      	ldrh	r3, [r7, #6]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f001 fb91 	bl	8005bfc <pvPortMalloc>
 80044da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00e      	beq.n	8004500 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80044e2:	205c      	movs	r0, #92	; 0x5c
 80044e4:	f001 fb8a 	bl	8005bfc <pvPortMalloc>
 80044e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	631a      	str	r2, [r3, #48]	; 0x30
 80044f6:	e005      	b.n	8004504 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80044f8:	6978      	ldr	r0, [r7, #20]
 80044fa:	f001 fc43 	bl	8005d84 <vPortFree>
 80044fe:	e001      	b.n	8004504 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004500:	2300      	movs	r3, #0
 8004502:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d017      	beq.n	800453a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004512:	88fa      	ldrh	r2, [r7, #6]
 8004514:	2300      	movs	r3, #0
 8004516:	9303      	str	r3, [sp, #12]
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	9302      	str	r3, [sp, #8]
 800451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451e:	9301      	str	r3, [sp, #4]
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 f80e 	bl	800454a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800452e:	69f8      	ldr	r0, [r7, #28]
 8004530:	f000 f892 	bl	8004658 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004534:	2301      	movs	r3, #1
 8004536:	61bb      	str	r3, [r7, #24]
 8004538:	e002      	b.n	8004540 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800453a:	f04f 33ff 	mov.w	r3, #4294967295
 800453e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004540:	69bb      	ldr	r3, [r7, #24]
	}
 8004542:	4618      	mov	r0, r3
 8004544:	3720      	adds	r7, #32
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b088      	sub	sp, #32
 800454e:	af00      	add	r7, sp, #0
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	607a      	str	r2, [r7, #4]
 8004556:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	461a      	mov	r2, r3
 8004562:	21a5      	movs	r1, #165	; 0xa5
 8004564:	f001 fd54 	bl	8006010 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004572:	3b01      	subs	r3, #1
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	f023 0307 	bic.w	r3, r3, #7
 8004580:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <prvInitialiseNewTask+0x58>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	617b      	str	r3, [r7, #20]
}
 800459e:	bf00      	nop
 80045a0:	e7fe      	b.n	80045a0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045a2:	2300      	movs	r3, #0
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	e012      	b.n	80045ce <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	4413      	add	r3, r2
 80045ae:	7819      	ldrb	r1, [r3, #0]
 80045b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	4413      	add	r3, r2
 80045b6:	3334      	adds	r3, #52	; 0x34
 80045b8:	460a      	mov	r2, r1
 80045ba:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	4413      	add	r3, r2
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d006      	beq.n	80045d6 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	3301      	adds	r3, #1
 80045cc:	61fb      	str	r3, [r7, #28]
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	2b0f      	cmp	r3, #15
 80045d2:	d9e9      	bls.n	80045a8 <prvInitialiseNewTask+0x5e>
 80045d4:	e000      	b.n	80045d8 <prvInitialiseNewTask+0x8e>
		{
			break;
 80045d6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80045e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e2:	2b37      	cmp	r3, #55	; 0x37
 80045e4:	d901      	bls.n	80045ea <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80045e6:	2337      	movs	r3, #55	; 0x37
 80045e8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045f4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	2200      	movs	r2, #0
 80045fa:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	3304      	adds	r3, #4
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff f94e 	bl	80038a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	3318      	adds	r3, #24
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff f949 	bl	80038a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004614:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004624:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	2200      	movs	r2, #0
 800462a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	68f9      	ldr	r1, [r7, #12]
 8004638:	69b8      	ldr	r0, [r7, #24]
 800463a:	f001 f8ef 	bl	800581c <pxPortInitialiseStack>
 800463e:	4602      	mov	r2, r0
 8004640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004642:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800464a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800464e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004650:	bf00      	nop
 8004652:	3720      	adds	r7, #32
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004660:	f001 f9cc 	bl	80059fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004664:	4b2d      	ldr	r3, [pc, #180]	; (800471c <prvAddNewTaskToReadyList+0xc4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3301      	adds	r3, #1
 800466a:	4a2c      	ldr	r2, [pc, #176]	; (800471c <prvAddNewTaskToReadyList+0xc4>)
 800466c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800466e:	4b2c      	ldr	r3, [pc, #176]	; (8004720 <prvAddNewTaskToReadyList+0xc8>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d109      	bne.n	800468a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004676:	4a2a      	ldr	r2, [pc, #168]	; (8004720 <prvAddNewTaskToReadyList+0xc8>)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800467c:	4b27      	ldr	r3, [pc, #156]	; (800471c <prvAddNewTaskToReadyList+0xc4>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d110      	bne.n	80046a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004684:	f000 fc16 	bl	8004eb4 <prvInitialiseTaskLists>
 8004688:	e00d      	b.n	80046a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800468a:	4b26      	ldr	r3, [pc, #152]	; (8004724 <prvAddNewTaskToReadyList+0xcc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d109      	bne.n	80046a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004692:	4b23      	ldr	r3, [pc, #140]	; (8004720 <prvAddNewTaskToReadyList+0xc8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	429a      	cmp	r2, r3
 800469e:	d802      	bhi.n	80046a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80046a0:	4a1f      	ldr	r2, [pc, #124]	; (8004720 <prvAddNewTaskToReadyList+0xc8>)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80046a6:	4b20      	ldr	r3, [pc, #128]	; (8004728 <prvAddNewTaskToReadyList+0xd0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3301      	adds	r3, #1
 80046ac:	4a1e      	ldr	r2, [pc, #120]	; (8004728 <prvAddNewTaskToReadyList+0xd0>)
 80046ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80046b0:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <prvAddNewTaskToReadyList+0xd0>)
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046bc:	4b1b      	ldr	r3, [pc, #108]	; (800472c <prvAddNewTaskToReadyList+0xd4>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d903      	bls.n	80046cc <prvAddNewTaskToReadyList+0x74>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	4a18      	ldr	r2, [pc, #96]	; (800472c <prvAddNewTaskToReadyList+0xd4>)
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d0:	4613      	mov	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4a15      	ldr	r2, [pc, #84]	; (8004730 <prvAddNewTaskToReadyList+0xd8>)
 80046da:	441a      	add	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3304      	adds	r3, #4
 80046e0:	4619      	mov	r1, r3
 80046e2:	4610      	mov	r0, r2
 80046e4:	f7ff f8e9 	bl	80038ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80046e8:	f001 f9b8 	bl	8005a5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80046ec:	4b0d      	ldr	r3, [pc, #52]	; (8004724 <prvAddNewTaskToReadyList+0xcc>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00e      	beq.n	8004712 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046f4:	4b0a      	ldr	r3, [pc, #40]	; (8004720 <prvAddNewTaskToReadyList+0xc8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fe:	429a      	cmp	r2, r3
 8004700:	d207      	bcs.n	8004712 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004702:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <prvAddNewTaskToReadyList+0xdc>)
 8004704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004712:	bf00      	nop
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000d20 	.word	0x20000d20
 8004720:	2000084c 	.word	0x2000084c
 8004724:	20000d2c 	.word	0x20000d2c
 8004728:	20000d3c 	.word	0x20000d3c
 800472c:	20000d28 	.word	0x20000d28
 8004730:	20000850 	.word	0x20000850
 8004734:	e000ed04 	.word	0xe000ed04

08004738 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d017      	beq.n	800477a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800474a:	4b13      	ldr	r3, [pc, #76]	; (8004798 <vTaskDelay+0x60>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <vTaskDelay+0x30>
	__asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	60bb      	str	r3, [r7, #8]
}
 8004764:	bf00      	nop
 8004766:	e7fe      	b.n	8004766 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004768:	f000 f880 	bl	800486c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800476c:	2100      	movs	r1, #0
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fcee 	bl	8005150 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004774:	f000 f888 	bl	8004888 <xTaskResumeAll>
 8004778:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d107      	bne.n	8004790 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004780:	4b06      	ldr	r3, [pc, #24]	; (800479c <vTaskDelay+0x64>)
 8004782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004790:	bf00      	nop
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	20000d48 	.word	0x20000d48
 800479c:	e000ed04 	.word	0xe000ed04

080047a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08a      	sub	sp, #40	; 0x28
 80047a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047ae:	463a      	mov	r2, r7
 80047b0:	1d39      	adds	r1, r7, #4
 80047b2:	f107 0308 	add.w	r3, r7, #8
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff f822 	bl	8003800 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80047bc:	6839      	ldr	r1, [r7, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	9202      	str	r2, [sp, #8]
 80047c4:	9301      	str	r3, [sp, #4]
 80047c6:	2300      	movs	r3, #0
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	2300      	movs	r3, #0
 80047cc:	460a      	mov	r2, r1
 80047ce:	4921      	ldr	r1, [pc, #132]	; (8004854 <vTaskStartScheduler+0xb4>)
 80047d0:	4821      	ldr	r0, [pc, #132]	; (8004858 <vTaskStartScheduler+0xb8>)
 80047d2:	f7ff fe19 	bl	8004408 <xTaskCreateStatic>
 80047d6:	4603      	mov	r3, r0
 80047d8:	4a20      	ldr	r2, [pc, #128]	; (800485c <vTaskStartScheduler+0xbc>)
 80047da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80047dc:	4b1f      	ldr	r3, [pc, #124]	; (800485c <vTaskStartScheduler+0xbc>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80047e4:	2301      	movs	r3, #1
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	e001      	b.n	80047ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80047ea:	2300      	movs	r3, #0
 80047ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d102      	bne.n	80047fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80047f4:	f000 fd00 	bl	80051f8 <xTimerCreateTimerTask>
 80047f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d116      	bne.n	800482e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	613b      	str	r3, [r7, #16]
}
 8004812:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004814:	4b12      	ldr	r3, [pc, #72]	; (8004860 <vTaskStartScheduler+0xc0>)
 8004816:	f04f 32ff 	mov.w	r2, #4294967295
 800481a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800481c:	4b11      	ldr	r3, [pc, #68]	; (8004864 <vTaskStartScheduler+0xc4>)
 800481e:	2201      	movs	r2, #1
 8004820:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004822:	4b11      	ldr	r3, [pc, #68]	; (8004868 <vTaskStartScheduler+0xc8>)
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004828:	f001 f876 	bl	8005918 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800482c:	e00e      	b.n	800484c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004834:	d10a      	bne.n	800484c <vTaskStartScheduler+0xac>
	__asm volatile
 8004836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	60fb      	str	r3, [r7, #12]
}
 8004848:	bf00      	nop
 800484a:	e7fe      	b.n	800484a <vTaskStartScheduler+0xaa>
}
 800484c:	bf00      	nop
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	080060b8 	.word	0x080060b8
 8004858:	08004e85 	.word	0x08004e85
 800485c:	20000d44 	.word	0x20000d44
 8004860:	20000d40 	.word	0x20000d40
 8004864:	20000d2c 	.word	0x20000d2c
 8004868:	20000d24 	.word	0x20000d24

0800486c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004870:	4b04      	ldr	r3, [pc, #16]	; (8004884 <vTaskSuspendAll+0x18>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3301      	adds	r3, #1
 8004876:	4a03      	ldr	r2, [pc, #12]	; (8004884 <vTaskSuspendAll+0x18>)
 8004878:	6013      	str	r3, [r2, #0]
}
 800487a:	bf00      	nop
 800487c:	46bd      	mov	sp, r7
 800487e:	bc80      	pop	{r7}
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20000d48 	.word	0x20000d48

08004888 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800488e:	2300      	movs	r3, #0
 8004890:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004892:	2300      	movs	r3, #0
 8004894:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004896:	4b42      	ldr	r3, [pc, #264]	; (80049a0 <xTaskResumeAll+0x118>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10a      	bne.n	80048b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	603b      	str	r3, [r7, #0]
}
 80048b0:	bf00      	nop
 80048b2:	e7fe      	b.n	80048b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80048b4:	f001 f8a2 	bl	80059fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80048b8:	4b39      	ldr	r3, [pc, #228]	; (80049a0 <xTaskResumeAll+0x118>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3b01      	subs	r3, #1
 80048be:	4a38      	ldr	r2, [pc, #224]	; (80049a0 <xTaskResumeAll+0x118>)
 80048c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048c2:	4b37      	ldr	r3, [pc, #220]	; (80049a0 <xTaskResumeAll+0x118>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d162      	bne.n	8004990 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048ca:	4b36      	ldr	r3, [pc, #216]	; (80049a4 <xTaskResumeAll+0x11c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d05e      	beq.n	8004990 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048d2:	e02f      	b.n	8004934 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80048d4:	4b34      	ldr	r3, [pc, #208]	; (80049a8 <xTaskResumeAll+0x120>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3318      	adds	r3, #24
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff f845 	bl	8003970 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3304      	adds	r3, #4
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff f840 	bl	8003970 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f4:	4b2d      	ldr	r3, [pc, #180]	; (80049ac <xTaskResumeAll+0x124>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d903      	bls.n	8004904 <xTaskResumeAll+0x7c>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	4a2a      	ldr	r2, [pc, #168]	; (80049ac <xTaskResumeAll+0x124>)
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004908:	4613      	mov	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4a27      	ldr	r2, [pc, #156]	; (80049b0 <xTaskResumeAll+0x128>)
 8004912:	441a      	add	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	3304      	adds	r3, #4
 8004918:	4619      	mov	r1, r3
 800491a:	4610      	mov	r0, r2
 800491c:	f7fe ffcd 	bl	80038ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004924:	4b23      	ldr	r3, [pc, #140]	; (80049b4 <xTaskResumeAll+0x12c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	429a      	cmp	r2, r3
 800492c:	d302      	bcc.n	8004934 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800492e:	4b22      	ldr	r3, [pc, #136]	; (80049b8 <xTaskResumeAll+0x130>)
 8004930:	2201      	movs	r2, #1
 8004932:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004934:	4b1c      	ldr	r3, [pc, #112]	; (80049a8 <xTaskResumeAll+0x120>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1cb      	bne.n	80048d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004942:	f000 fb55 	bl	8004ff0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004946:	4b1d      	ldr	r3, [pc, #116]	; (80049bc <xTaskResumeAll+0x134>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d010      	beq.n	8004974 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004952:	f000 f845 	bl	80049e0 <xTaskIncrementTick>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800495c:	4b16      	ldr	r3, [pc, #88]	; (80049b8 <xTaskResumeAll+0x130>)
 800495e:	2201      	movs	r2, #1
 8004960:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	3b01      	subs	r3, #1
 8004966:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f1      	bne.n	8004952 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800496e:	4b13      	ldr	r3, [pc, #76]	; (80049bc <xTaskResumeAll+0x134>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004974:	4b10      	ldr	r3, [pc, #64]	; (80049b8 <xTaskResumeAll+0x130>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d009      	beq.n	8004990 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800497c:	2301      	movs	r3, #1
 800497e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004980:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <xTaskResumeAll+0x138>)
 8004982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004990:	f001 f864 	bl	8005a5c <vPortExitCritical>

	return xAlreadyYielded;
 8004994:	68bb      	ldr	r3, [r7, #8]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20000d48 	.word	0x20000d48
 80049a4:	20000d20 	.word	0x20000d20
 80049a8:	20000ce0 	.word	0x20000ce0
 80049ac:	20000d28 	.word	0x20000d28
 80049b0:	20000850 	.word	0x20000850
 80049b4:	2000084c 	.word	0x2000084c
 80049b8:	20000d34 	.word	0x20000d34
 80049bc:	20000d30 	.word	0x20000d30
 80049c0:	e000ed04 	.word	0xe000ed04

080049c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80049ca:	4b04      	ldr	r3, [pc, #16]	; (80049dc <xTaskGetTickCount+0x18>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80049d0:	687b      	ldr	r3, [r7, #4]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr
 80049dc:	20000d24 	.word	0x20000d24

080049e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80049e6:	2300      	movs	r3, #0
 80049e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ea:	4b51      	ldr	r3, [pc, #324]	; (8004b30 <xTaskIncrementTick+0x150>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f040 808e 	bne.w	8004b10 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049f4:	4b4f      	ldr	r3, [pc, #316]	; (8004b34 <xTaskIncrementTick+0x154>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3301      	adds	r3, #1
 80049fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049fc:	4a4d      	ldr	r2, [pc, #308]	; (8004b34 <xTaskIncrementTick+0x154>)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d120      	bne.n	8004a4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a08:	4b4b      	ldr	r3, [pc, #300]	; (8004b38 <xTaskIncrementTick+0x158>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <xTaskIncrementTick+0x48>
	__asm volatile
 8004a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	603b      	str	r3, [r7, #0]
}
 8004a24:	bf00      	nop
 8004a26:	e7fe      	b.n	8004a26 <xTaskIncrementTick+0x46>
 8004a28:	4b43      	ldr	r3, [pc, #268]	; (8004b38 <xTaskIncrementTick+0x158>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	4b43      	ldr	r3, [pc, #268]	; (8004b3c <xTaskIncrementTick+0x15c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a41      	ldr	r2, [pc, #260]	; (8004b38 <xTaskIncrementTick+0x158>)
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	4a41      	ldr	r2, [pc, #260]	; (8004b3c <xTaskIncrementTick+0x15c>)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	4b40      	ldr	r3, [pc, #256]	; (8004b40 <xTaskIncrementTick+0x160>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3301      	adds	r3, #1
 8004a42:	4a3f      	ldr	r2, [pc, #252]	; (8004b40 <xTaskIncrementTick+0x160>)
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	f000 fad3 	bl	8004ff0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a4a:	4b3e      	ldr	r3, [pc, #248]	; (8004b44 <xTaskIncrementTick+0x164>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d34e      	bcc.n	8004af2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a54:	4b38      	ldr	r3, [pc, #224]	; (8004b38 <xTaskIncrementTick+0x158>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <xTaskIncrementTick+0x82>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e000      	b.n	8004a64 <xTaskIncrementTick+0x84>
 8004a62:	2300      	movs	r3, #0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d004      	beq.n	8004a72 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a68:	4b36      	ldr	r3, [pc, #216]	; (8004b44 <xTaskIncrementTick+0x164>)
 8004a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a6e:	601a      	str	r2, [r3, #0]
					break;
 8004a70:	e03f      	b.n	8004af2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a72:	4b31      	ldr	r3, [pc, #196]	; (8004b38 <xTaskIncrementTick+0x158>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d203      	bcs.n	8004a92 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a8a:	4a2e      	ldr	r2, [pc, #184]	; (8004b44 <xTaskIncrementTick+0x164>)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6013      	str	r3, [r2, #0]
						break;
 8004a90:	e02f      	b.n	8004af2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	3304      	adds	r3, #4
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fe ff6a 	bl	8003970 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d004      	beq.n	8004aae <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	3318      	adds	r3, #24
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fe ff61 	bl	8003970 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab2:	4b25      	ldr	r3, [pc, #148]	; (8004b48 <xTaskIncrementTick+0x168>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d903      	bls.n	8004ac2 <xTaskIncrementTick+0xe2>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abe:	4a22      	ldr	r2, [pc, #136]	; (8004b48 <xTaskIncrementTick+0x168>)
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4a1f      	ldr	r2, [pc, #124]	; (8004b4c <xTaskIncrementTick+0x16c>)
 8004ad0:	441a      	add	r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4610      	mov	r0, r2
 8004ada:	f7fe feee 	bl	80038ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae2:	4b1b      	ldr	r3, [pc, #108]	; (8004b50 <xTaskIncrementTick+0x170>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d3b3      	bcc.n	8004a54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004aec:	2301      	movs	r3, #1
 8004aee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004af0:	e7b0      	b.n	8004a54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004af2:	4b17      	ldr	r3, [pc, #92]	; (8004b50 <xTaskIncrementTick+0x170>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af8:	4914      	ldr	r1, [pc, #80]	; (8004b4c <xTaskIncrementTick+0x16c>)
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	440b      	add	r3, r1
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d907      	bls.n	8004b1a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	e004      	b.n	8004b1a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004b10:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <xTaskIncrementTick+0x174>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3301      	adds	r3, #1
 8004b16:	4a0f      	ldr	r2, [pc, #60]	; (8004b54 <xTaskIncrementTick+0x174>)
 8004b18:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004b1a:	4b0f      	ldr	r3, [pc, #60]	; (8004b58 <xTaskIncrementTick+0x178>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004b22:	2301      	movs	r3, #1
 8004b24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004b26:	697b      	ldr	r3, [r7, #20]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	20000d48 	.word	0x20000d48
 8004b34:	20000d24 	.word	0x20000d24
 8004b38:	20000cd8 	.word	0x20000cd8
 8004b3c:	20000cdc 	.word	0x20000cdc
 8004b40:	20000d38 	.word	0x20000d38
 8004b44:	20000d40 	.word	0x20000d40
 8004b48:	20000d28 	.word	0x20000d28
 8004b4c:	20000850 	.word	0x20000850
 8004b50:	2000084c 	.word	0x2000084c
 8004b54:	20000d30 	.word	0x20000d30
 8004b58:	20000d34 	.word	0x20000d34

08004b5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b62:	4b27      	ldr	r3, [pc, #156]	; (8004c00 <vTaskSwitchContext+0xa4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b6a:	4b26      	ldr	r3, [pc, #152]	; (8004c04 <vTaskSwitchContext+0xa8>)
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b70:	e041      	b.n	8004bf6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004b72:	4b24      	ldr	r3, [pc, #144]	; (8004c04 <vTaskSwitchContext+0xa8>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004b78:	4b23      	ldr	r3, [pc, #140]	; (8004c08 <vTaskSwitchContext+0xac>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	e010      	b.n	8004ba2 <vTaskSwitchContext+0x46>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10a      	bne.n	8004b9c <vTaskSwitchContext+0x40>
	__asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	607b      	str	r3, [r7, #4]
}
 8004b98:	bf00      	nop
 8004b9a:	e7fe      	b.n	8004b9a <vTaskSwitchContext+0x3e>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	491a      	ldr	r1, [pc, #104]	; (8004c0c <vTaskSwitchContext+0xb0>)
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0e4      	beq.n	8004b80 <vTaskSwitchContext+0x24>
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4a12      	ldr	r2, [pc, #72]	; (8004c0c <vTaskSwitchContext+0xb0>)
 8004bc2:	4413      	add	r3, r2
 8004bc4:	60bb      	str	r3, [r7, #8]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	605a      	str	r2, [r3, #4]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	3308      	adds	r3, #8
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d104      	bne.n	8004be6 <vTaskSwitchContext+0x8a>
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	605a      	str	r2, [r3, #4]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	4a08      	ldr	r2, [pc, #32]	; (8004c10 <vTaskSwitchContext+0xb4>)
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	4a05      	ldr	r2, [pc, #20]	; (8004c08 <vTaskSwitchContext+0xac>)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6013      	str	r3, [r2, #0]
}
 8004bf6:	bf00      	nop
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr
 8004c00:	20000d48 	.word	0x20000d48
 8004c04:	20000d34 	.word	0x20000d34
 8004c08:	20000d28 	.word	0x20000d28
 8004c0c:	20000850 	.word	0x20000850
 8004c10:	2000084c 	.word	0x2000084c

08004c14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10a      	bne.n	8004c3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	60fb      	str	r3, [r7, #12]
}
 8004c36:	bf00      	nop
 8004c38:	e7fe      	b.n	8004c38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c3a:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <vTaskPlaceOnEventList+0x44>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3318      	adds	r3, #24
 8004c40:	4619      	mov	r1, r3
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fe fe5c 	bl	8003900 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c48:	2101      	movs	r1, #1
 8004c4a:	6838      	ldr	r0, [r7, #0]
 8004c4c:	f000 fa80 	bl	8005150 <prvAddCurrentTaskToDelayedList>
}
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	2000084c 	.word	0x2000084c

08004c5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10a      	bne.n	8004c84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	617b      	str	r3, [r7, #20]
}
 8004c80:	bf00      	nop
 8004c82:	e7fe      	b.n	8004c82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c84:	4b0a      	ldr	r3, [pc, #40]	; (8004cb0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3318      	adds	r3, #24
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f7fe fe14 	bl	80038ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004c98:	f04f 33ff 	mov.w	r3, #4294967295
 8004c9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	68b8      	ldr	r0, [r7, #8]
 8004ca2:	f000 fa55 	bl	8005150 <prvAddCurrentTaskToDelayedList>
	}
 8004ca6:	bf00      	nop
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	2000084c 	.word	0x2000084c

08004cb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10a      	bne.n	8004ce0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	60fb      	str	r3, [r7, #12]
}
 8004cdc:	bf00      	nop
 8004cde:	e7fe      	b.n	8004cde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	3318      	adds	r3, #24
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fe fe43 	bl	8003970 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cea:	4b1e      	ldr	r3, [pc, #120]	; (8004d64 <xTaskRemoveFromEventList+0xb0>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d11d      	bne.n	8004d2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fe fe3a 	bl	8003970 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d00:	4b19      	ldr	r3, [pc, #100]	; (8004d68 <xTaskRemoveFromEventList+0xb4>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d903      	bls.n	8004d10 <xTaskRemoveFromEventList+0x5c>
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	4a16      	ldr	r2, [pc, #88]	; (8004d68 <xTaskRemoveFromEventList+0xb4>)
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4a13      	ldr	r2, [pc, #76]	; (8004d6c <xTaskRemoveFromEventList+0xb8>)
 8004d1e:	441a      	add	r2, r3
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	3304      	adds	r3, #4
 8004d24:	4619      	mov	r1, r3
 8004d26:	4610      	mov	r0, r2
 8004d28:	f7fe fdc7 	bl	80038ba <vListInsertEnd>
 8004d2c:	e005      	b.n	8004d3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	3318      	adds	r3, #24
 8004d32:	4619      	mov	r1, r3
 8004d34:	480e      	ldr	r0, [pc, #56]	; (8004d70 <xTaskRemoveFromEventList+0xbc>)
 8004d36:	f7fe fdc0 	bl	80038ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3e:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <xTaskRemoveFromEventList+0xc0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d905      	bls.n	8004d54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d4c:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <xTaskRemoveFromEventList+0xc4>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	e001      	b.n	8004d58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004d54:	2300      	movs	r3, #0
 8004d56:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004d58:	697b      	ldr	r3, [r7, #20]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20000d48 	.word	0x20000d48
 8004d68:	20000d28 	.word	0x20000d28
 8004d6c:	20000850 	.word	0x20000850
 8004d70:	20000ce0 	.word	0x20000ce0
 8004d74:	2000084c 	.word	0x2000084c
 8004d78:	20000d34 	.word	0x20000d34

08004d7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d84:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <vTaskInternalSetTimeOutState+0x24>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d8c:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <vTaskInternalSetTimeOutState+0x28>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	605a      	str	r2, [r3, #4]
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	20000d38 	.word	0x20000d38
 8004da4:	20000d24 	.word	0x20000d24

08004da8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10a      	bne.n	8004dce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbc:	f383 8811 	msr	BASEPRI, r3
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	613b      	str	r3, [r7, #16]
}
 8004dca:	bf00      	nop
 8004dcc:	e7fe      	b.n	8004dcc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10a      	bne.n	8004dea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	60fb      	str	r3, [r7, #12]
}
 8004de6:	bf00      	nop
 8004de8:	e7fe      	b.n	8004de8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004dea:	f000 fe07 	bl	80059fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004dee:	4b1d      	ldr	r3, [pc, #116]	; (8004e64 <xTaskCheckForTimeOut+0xbc>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e06:	d102      	bne.n	8004e0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	61fb      	str	r3, [r7, #28]
 8004e0c:	e023      	b.n	8004e56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	4b15      	ldr	r3, [pc, #84]	; (8004e68 <xTaskCheckForTimeOut+0xc0>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d007      	beq.n	8004e2a <xTaskCheckForTimeOut+0x82>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d302      	bcc.n	8004e2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e24:	2301      	movs	r3, #1
 8004e26:	61fb      	str	r3, [r7, #28]
 8004e28:	e015      	b.n	8004e56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d20b      	bcs.n	8004e4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	1ad2      	subs	r2, r2, r3
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7ff ff9b 	bl	8004d7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e46:	2300      	movs	r3, #0
 8004e48:	61fb      	str	r3, [r7, #28]
 8004e4a:	e004      	b.n	8004e56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e52:	2301      	movs	r3, #1
 8004e54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e56:	f000 fe01 	bl	8005a5c <vPortExitCritical>

	return xReturn;
 8004e5a:	69fb      	ldr	r3, [r7, #28]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3720      	adds	r7, #32
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20000d24 	.word	0x20000d24
 8004e68:	20000d38 	.word	0x20000d38

08004e6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e70:	4b03      	ldr	r3, [pc, #12]	; (8004e80 <vTaskMissedYield+0x14>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	601a      	str	r2, [r3, #0]
}
 8004e76:	bf00      	nop
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	20000d34 	.word	0x20000d34

08004e84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e8c:	f000 f852 	bl	8004f34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e90:	4b06      	ldr	r3, [pc, #24]	; (8004eac <prvIdleTask+0x28>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d9f9      	bls.n	8004e8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e98:	4b05      	ldr	r3, [pc, #20]	; (8004eb0 <prvIdleTask+0x2c>)
 8004e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ea8:	e7f0      	b.n	8004e8c <prvIdleTask+0x8>
 8004eaa:	bf00      	nop
 8004eac:	20000850 	.word	0x20000850
 8004eb0:	e000ed04 	.word	0xe000ed04

08004eb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004eba:	2300      	movs	r3, #0
 8004ebc:	607b      	str	r3, [r7, #4]
 8004ebe:	e00c      	b.n	8004eda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4a12      	ldr	r2, [pc, #72]	; (8004f14 <prvInitialiseTaskLists+0x60>)
 8004ecc:	4413      	add	r3, r2
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fe fcc8 	bl	8003864 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	607b      	str	r3, [r7, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b37      	cmp	r3, #55	; 0x37
 8004ede:	d9ef      	bls.n	8004ec0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ee0:	480d      	ldr	r0, [pc, #52]	; (8004f18 <prvInitialiseTaskLists+0x64>)
 8004ee2:	f7fe fcbf 	bl	8003864 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ee6:	480d      	ldr	r0, [pc, #52]	; (8004f1c <prvInitialiseTaskLists+0x68>)
 8004ee8:	f7fe fcbc 	bl	8003864 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004eec:	480c      	ldr	r0, [pc, #48]	; (8004f20 <prvInitialiseTaskLists+0x6c>)
 8004eee:	f7fe fcb9 	bl	8003864 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ef2:	480c      	ldr	r0, [pc, #48]	; (8004f24 <prvInitialiseTaskLists+0x70>)
 8004ef4:	f7fe fcb6 	bl	8003864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ef8:	480b      	ldr	r0, [pc, #44]	; (8004f28 <prvInitialiseTaskLists+0x74>)
 8004efa:	f7fe fcb3 	bl	8003864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004efe:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <prvInitialiseTaskLists+0x78>)
 8004f00:	4a05      	ldr	r2, [pc, #20]	; (8004f18 <prvInitialiseTaskLists+0x64>)
 8004f02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f04:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <prvInitialiseTaskLists+0x7c>)
 8004f06:	4a05      	ldr	r2, [pc, #20]	; (8004f1c <prvInitialiseTaskLists+0x68>)
 8004f08:	601a      	str	r2, [r3, #0]
}
 8004f0a:	bf00      	nop
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000850 	.word	0x20000850
 8004f18:	20000cb0 	.word	0x20000cb0
 8004f1c:	20000cc4 	.word	0x20000cc4
 8004f20:	20000ce0 	.word	0x20000ce0
 8004f24:	20000cf4 	.word	0x20000cf4
 8004f28:	20000d0c 	.word	0x20000d0c
 8004f2c:	20000cd8 	.word	0x20000cd8
 8004f30:	20000cdc 	.word	0x20000cdc

08004f34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f3a:	e019      	b.n	8004f70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f3c:	f000 fd5e 	bl	80059fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004f40:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <prvCheckTasksWaitingTermination+0x50>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7fe fd0f 	bl	8003970 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f52:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <prvCheckTasksWaitingTermination+0x54>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	4a0b      	ldr	r2, [pc, #44]	; (8004f88 <prvCheckTasksWaitingTermination+0x54>)
 8004f5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f5c:	4b0b      	ldr	r3, [pc, #44]	; (8004f8c <prvCheckTasksWaitingTermination+0x58>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	4a0a      	ldr	r2, [pc, #40]	; (8004f8c <prvCheckTasksWaitingTermination+0x58>)
 8004f64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f66:	f000 fd79 	bl	8005a5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f810 	bl	8004f90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f70:	4b06      	ldr	r3, [pc, #24]	; (8004f8c <prvCheckTasksWaitingTermination+0x58>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1e1      	bne.n	8004f3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f78:	bf00      	nop
 8004f7a:	bf00      	nop
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20000cf4 	.word	0x20000cf4
 8004f88:	20000d20 	.word	0x20000d20
 8004f8c:	20000d08 	.word	0x20000d08

08004f90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d108      	bne.n	8004fb4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 feec 	bl	8005d84 <vPortFree>
				vPortFree( pxTCB );
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 fee9 	bl	8005d84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004fb2:	e018      	b.n	8004fe6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d103      	bne.n	8004fc6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fee0 	bl	8005d84 <vPortFree>
	}
 8004fc4:	e00f      	b.n	8004fe6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d00a      	beq.n	8004fe6 <prvDeleteTCB+0x56>
	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	60fb      	str	r3, [r7, #12]
}
 8004fe2:	bf00      	nop
 8004fe4:	e7fe      	b.n	8004fe4 <prvDeleteTCB+0x54>
	}
 8004fe6:	bf00      	nop
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ff6:	4b0e      	ldr	r3, [pc, #56]	; (8005030 <prvResetNextTaskUnblockTime+0x40>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <prvResetNextTaskUnblockTime+0x14>
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <prvResetNextTaskUnblockTime+0x16>
 8005004:	2300      	movs	r3, #0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d004      	beq.n	8005014 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800500a:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <prvResetNextTaskUnblockTime+0x44>)
 800500c:	f04f 32ff 	mov.w	r2, #4294967295
 8005010:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005012:	e008      	b.n	8005026 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005014:	4b06      	ldr	r3, [pc, #24]	; (8005030 <prvResetNextTaskUnblockTime+0x40>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	4a04      	ldr	r2, [pc, #16]	; (8005034 <prvResetNextTaskUnblockTime+0x44>)
 8005024:	6013      	str	r3, [r2, #0]
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr
 8005030:	20000cd8 	.word	0x20000cd8
 8005034:	20000d40 	.word	0x20000d40

08005038 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800503e:	4b0b      	ldr	r3, [pc, #44]	; (800506c <xTaskGetSchedulerState+0x34>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d102      	bne.n	800504c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005046:	2301      	movs	r3, #1
 8005048:	607b      	str	r3, [r7, #4]
 800504a:	e008      	b.n	800505e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800504c:	4b08      	ldr	r3, [pc, #32]	; (8005070 <xTaskGetSchedulerState+0x38>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d102      	bne.n	800505a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005054:	2302      	movs	r3, #2
 8005056:	607b      	str	r3, [r7, #4]
 8005058:	e001      	b.n	800505e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800505a:	2300      	movs	r3, #0
 800505c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800505e:	687b      	ldr	r3, [r7, #4]
	}
 8005060:	4618      	mov	r0, r3
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	bc80      	pop	{r7}
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	20000d2c 	.word	0x20000d2c
 8005070:	20000d48 	.word	0x20000d48

08005074 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005080:	2300      	movs	r3, #0
 8005082:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d056      	beq.n	8005138 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800508a:	4b2e      	ldr	r3, [pc, #184]	; (8005144 <xTaskPriorityDisinherit+0xd0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	429a      	cmp	r2, r3
 8005092:	d00a      	beq.n	80050aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	60fb      	str	r3, [r7, #12]
}
 80050a6:	bf00      	nop
 80050a8:	e7fe      	b.n	80050a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10a      	bne.n	80050c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	60bb      	str	r3, [r7, #8]
}
 80050c4:	bf00      	nop
 80050c6:	e7fe      	b.n	80050c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050cc:	1e5a      	subs	r2, r3, #1
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050da:	429a      	cmp	r2, r3
 80050dc:	d02c      	beq.n	8005138 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d128      	bne.n	8005138 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	3304      	adds	r3, #4
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7fe fc40 	bl	8003970 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005108:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <xTaskPriorityDisinherit+0xd4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d903      	bls.n	8005118 <xTaskPriorityDisinherit+0xa4>
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	4a0c      	ldr	r2, [pc, #48]	; (8005148 <xTaskPriorityDisinherit+0xd4>)
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511c:	4613      	mov	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4a09      	ldr	r2, [pc, #36]	; (800514c <xTaskPriorityDisinherit+0xd8>)
 8005126:	441a      	add	r2, r3
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	3304      	adds	r3, #4
 800512c:	4619      	mov	r1, r3
 800512e:	4610      	mov	r0, r2
 8005130:	f7fe fbc3 	bl	80038ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005134:	2301      	movs	r3, #1
 8005136:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005138:	697b      	ldr	r3, [r7, #20]
	}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	2000084c 	.word	0x2000084c
 8005148:	20000d28 	.word	0x20000d28
 800514c:	20000850 	.word	0x20000850

08005150 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800515a:	4b21      	ldr	r3, [pc, #132]	; (80051e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005160:	4b20      	ldr	r3, [pc, #128]	; (80051e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3304      	adds	r3, #4
 8005166:	4618      	mov	r0, r3
 8005168:	f7fe fc02 	bl	8003970 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005172:	d10a      	bne.n	800518a <prvAddCurrentTaskToDelayedList+0x3a>
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d007      	beq.n	800518a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800517a:	4b1a      	ldr	r3, [pc, #104]	; (80051e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3304      	adds	r3, #4
 8005180:	4619      	mov	r1, r3
 8005182:	4819      	ldr	r0, [pc, #100]	; (80051e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005184:	f7fe fb99 	bl	80038ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005188:	e026      	b.n	80051d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4413      	add	r3, r2
 8005190:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005192:	4b14      	ldr	r3, [pc, #80]	; (80051e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d209      	bcs.n	80051b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051a2:	4b12      	ldr	r3, [pc, #72]	; (80051ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	4b0f      	ldr	r3, [pc, #60]	; (80051e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	3304      	adds	r3, #4
 80051ac:	4619      	mov	r1, r3
 80051ae:	4610      	mov	r0, r2
 80051b0:	f7fe fba6 	bl	8003900 <vListInsert>
}
 80051b4:	e010      	b.n	80051d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051b6:	4b0e      	ldr	r3, [pc, #56]	; (80051f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	4b0a      	ldr	r3, [pc, #40]	; (80051e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3304      	adds	r3, #4
 80051c0:	4619      	mov	r1, r3
 80051c2:	4610      	mov	r0, r2
 80051c4:	f7fe fb9c 	bl	8003900 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051c8:	4b0a      	ldr	r3, [pc, #40]	; (80051f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d202      	bcs.n	80051d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80051d2:	4a08      	ldr	r2, [pc, #32]	; (80051f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	6013      	str	r3, [r2, #0]
}
 80051d8:	bf00      	nop
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	20000d24 	.word	0x20000d24
 80051e4:	2000084c 	.word	0x2000084c
 80051e8:	20000d0c 	.word	0x20000d0c
 80051ec:	20000cdc 	.word	0x20000cdc
 80051f0:	20000cd8 	.word	0x20000cd8
 80051f4:	20000d40 	.word	0x20000d40

080051f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08a      	sub	sp, #40	; 0x28
 80051fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80051fe:	2300      	movs	r3, #0
 8005200:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005202:	f000 facb 	bl	800579c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005206:	4b1c      	ldr	r3, [pc, #112]	; (8005278 <xTimerCreateTimerTask+0x80>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d021      	beq.n	8005252 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005212:	2300      	movs	r3, #0
 8005214:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005216:	1d3a      	adds	r2, r7, #4
 8005218:	f107 0108 	add.w	r1, r7, #8
 800521c:	f107 030c 	add.w	r3, r7, #12
 8005220:	4618      	mov	r0, r3
 8005222:	f7fe fb05 	bl	8003830 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	9202      	str	r2, [sp, #8]
 800522e:	9301      	str	r3, [sp, #4]
 8005230:	2302      	movs	r3, #2
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	2300      	movs	r3, #0
 8005236:	460a      	mov	r2, r1
 8005238:	4910      	ldr	r1, [pc, #64]	; (800527c <xTimerCreateTimerTask+0x84>)
 800523a:	4811      	ldr	r0, [pc, #68]	; (8005280 <xTimerCreateTimerTask+0x88>)
 800523c:	f7ff f8e4 	bl	8004408 <xTaskCreateStatic>
 8005240:	4603      	mov	r3, r0
 8005242:	4a10      	ldr	r2, [pc, #64]	; (8005284 <xTimerCreateTimerTask+0x8c>)
 8005244:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005246:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <xTimerCreateTimerTask+0x8c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800524e:	2301      	movs	r3, #1
 8005250:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10a      	bne.n	800526e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	613b      	str	r3, [r7, #16]
}
 800526a:	bf00      	nop
 800526c:	e7fe      	b.n	800526c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800526e:	697b      	ldr	r3, [r7, #20]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	20000d7c 	.word	0x20000d7c
 800527c:	080060c0 	.word	0x080060c0
 8005280:	080053a5 	.word	0x080053a5
 8005284:	20000d80 	.word	0x20000d80

08005288 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08a      	sub	sp, #40	; 0x28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005296:	2300      	movs	r3, #0
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	623b      	str	r3, [r7, #32]
}
 80052b2:	bf00      	nop
 80052b4:	e7fe      	b.n	80052b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80052b6:	4b1a      	ldr	r3, [pc, #104]	; (8005320 <xTimerGenericCommand+0x98>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d02a      	beq.n	8005314 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b05      	cmp	r3, #5
 80052ce:	dc18      	bgt.n	8005302 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80052d0:	f7ff feb2 	bl	8005038 <xTaskGetSchedulerState>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d109      	bne.n	80052ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80052da:	4b11      	ldr	r3, [pc, #68]	; (8005320 <xTimerGenericCommand+0x98>)
 80052dc:	6818      	ldr	r0, [r3, #0]
 80052de:	f107 0110 	add.w	r1, r7, #16
 80052e2:	2300      	movs	r3, #0
 80052e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e6:	f7fe fcad 	bl	8003c44 <xQueueGenericSend>
 80052ea:	6278      	str	r0, [r7, #36]	; 0x24
 80052ec:	e012      	b.n	8005314 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80052ee:	4b0c      	ldr	r3, [pc, #48]	; (8005320 <xTimerGenericCommand+0x98>)
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	f107 0110 	add.w	r1, r7, #16
 80052f6:	2300      	movs	r3, #0
 80052f8:	2200      	movs	r2, #0
 80052fa:	f7fe fca3 	bl	8003c44 <xQueueGenericSend>
 80052fe:	6278      	str	r0, [r7, #36]	; 0x24
 8005300:	e008      	b.n	8005314 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005302:	4b07      	ldr	r3, [pc, #28]	; (8005320 <xTimerGenericCommand+0x98>)
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	f107 0110 	add.w	r1, r7, #16
 800530a:	2300      	movs	r3, #0
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	f7fe fd97 	bl	8003e40 <xQueueGenericSendFromISR>
 8005312:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005316:	4618      	mov	r0, r3
 8005318:	3728      	adds	r7, #40	; 0x28
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	20000d7c 	.word	0x20000d7c

08005324 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b088      	sub	sp, #32
 8005328:	af02      	add	r7, sp, #8
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800532e:	4b1c      	ldr	r3, [pc, #112]	; (80053a0 <prvProcessExpiredTimer+0x7c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	3304      	adds	r3, #4
 800533c:	4618      	mov	r0, r3
 800533e:	f7fe fb17 	bl	8003970 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d122      	bne.n	8005390 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	18d1      	adds	r1, r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	6978      	ldr	r0, [r7, #20]
 8005358:	f000 f8c8 	bl	80054ec <prvInsertTimerInActiveList>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d016      	beq.n	8005390 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005362:	2300      	movs	r3, #0
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	2300      	movs	r3, #0
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	2100      	movs	r1, #0
 800536c:	6978      	ldr	r0, [r7, #20]
 800536e:	f7ff ff8b 	bl	8005288 <xTimerGenericCommand>
 8005372:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10a      	bne.n	8005390 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	60fb      	str	r3, [r7, #12]
}
 800538c:	bf00      	nop
 800538e:	e7fe      	b.n	800538e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	6978      	ldr	r0, [r7, #20]
 8005396:	4798      	blx	r3
}
 8005398:	bf00      	nop
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20000d74 	.word	0x20000d74

080053a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053ac:	f107 0308 	add.w	r3, r7, #8
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 f857 	bl	8005464 <prvGetNextExpireTime>
 80053b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4619      	mov	r1, r3
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f803 	bl	80053c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80053c2:	f000 f8d5 	bl	8005570 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053c6:	e7f1      	b.n	80053ac <prvTimerTask+0x8>

080053c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80053d2:	f7ff fa4b 	bl	800486c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053d6:	f107 0308 	add.w	r3, r7, #8
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 f866 	bl	80054ac <prvSampleTimeNow>
 80053e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d130      	bne.n	800544a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10a      	bne.n	8005404 <prvProcessTimerOrBlockTask+0x3c>
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d806      	bhi.n	8005404 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80053f6:	f7ff fa47 	bl	8004888 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80053fa:	68f9      	ldr	r1, [r7, #12]
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7ff ff91 	bl	8005324 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005402:	e024      	b.n	800544e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d008      	beq.n	800541c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800540a:	4b13      	ldr	r3, [pc, #76]	; (8005458 <prvProcessTimerOrBlockTask+0x90>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	bf0c      	ite	eq
 8005414:	2301      	moveq	r3, #1
 8005416:	2300      	movne	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800541c:	4b0f      	ldr	r3, [pc, #60]	; (800545c <prvProcessTimerOrBlockTask+0x94>)
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	4619      	mov	r1, r3
 800542a:	f7fe ffb9 	bl	80043a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800542e:	f7ff fa2b 	bl	8004888 <xTaskResumeAll>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10a      	bne.n	800544e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005438:	4b09      	ldr	r3, [pc, #36]	; (8005460 <prvProcessTimerOrBlockTask+0x98>)
 800543a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	f3bf 8f6f 	isb	sy
}
 8005448:	e001      	b.n	800544e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800544a:	f7ff fa1d 	bl	8004888 <xTaskResumeAll>
}
 800544e:	bf00      	nop
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20000d78 	.word	0x20000d78
 800545c:	20000d7c 	.word	0x20000d7c
 8005460:	e000ed04 	.word	0xe000ed04

08005464 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800546c:	4b0e      	ldr	r3, [pc, #56]	; (80054a8 <prvGetNextExpireTime+0x44>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	bf0c      	ite	eq
 8005476:	2301      	moveq	r3, #1
 8005478:	2300      	movne	r3, #0
 800547a:	b2db      	uxtb	r3, r3
 800547c:	461a      	mov	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d105      	bne.n	8005496 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800548a:	4b07      	ldr	r3, [pc, #28]	; (80054a8 <prvGetNextExpireTime+0x44>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	e001      	b.n	800549a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800549a:	68fb      	ldr	r3, [r7, #12]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bc80      	pop	{r7}
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	20000d74 	.word	0x20000d74

080054ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80054b4:	f7ff fa86 	bl	80049c4 <xTaskGetTickCount>
 80054b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80054ba:	4b0b      	ldr	r3, [pc, #44]	; (80054e8 <prvSampleTimeNow+0x3c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d205      	bcs.n	80054d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80054c4:	f000 f908 	bl	80056d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	e002      	b.n	80054d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80054d6:	4a04      	ldr	r2, [pc, #16]	; (80054e8 <prvSampleTimeNow+0x3c>)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80054dc:	68fb      	ldr	r3, [r7, #12]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20000d84 	.word	0x20000d84

080054ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80054fa:	2300      	movs	r3, #0
 80054fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	429a      	cmp	r2, r3
 8005510:	d812      	bhi.n	8005538 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	1ad2      	subs	r2, r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	429a      	cmp	r2, r3
 800551e:	d302      	bcc.n	8005526 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005520:	2301      	movs	r3, #1
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	e01b      	b.n	800555e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005526:	4b10      	ldr	r3, [pc, #64]	; (8005568 <prvInsertTimerInActiveList+0x7c>)
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	3304      	adds	r3, #4
 800552e:	4619      	mov	r1, r3
 8005530:	4610      	mov	r0, r2
 8005532:	f7fe f9e5 	bl	8003900 <vListInsert>
 8005536:	e012      	b.n	800555e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	429a      	cmp	r2, r3
 800553e:	d206      	bcs.n	800554e <prvInsertTimerInActiveList+0x62>
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	429a      	cmp	r2, r3
 8005546:	d302      	bcc.n	800554e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005548:	2301      	movs	r3, #1
 800554a:	617b      	str	r3, [r7, #20]
 800554c:	e007      	b.n	800555e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800554e:	4b07      	ldr	r3, [pc, #28]	; (800556c <prvInsertTimerInActiveList+0x80>)
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3304      	adds	r3, #4
 8005556:	4619      	mov	r1, r3
 8005558:	4610      	mov	r0, r2
 800555a:	f7fe f9d1 	bl	8003900 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800555e:	697b      	ldr	r3, [r7, #20]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	20000d78 	.word	0x20000d78
 800556c:	20000d74 	.word	0x20000d74

08005570 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08e      	sub	sp, #56	; 0x38
 8005574:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005576:	e09d      	b.n	80056b4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	da18      	bge.n	80055b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800557e:	1d3b      	adds	r3, r7, #4
 8005580:	3304      	adds	r3, #4
 8005582:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10a      	bne.n	80055a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	61fb      	str	r3, [r7, #28]
}
 800559c:	bf00      	nop
 800559e:	e7fe      	b.n	800559e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80055a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055a6:	6850      	ldr	r0, [r2, #4]
 80055a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055aa:	6892      	ldr	r2, [r2, #8]
 80055ac:	4611      	mov	r1, r2
 80055ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	db7d      	blt.n	80056b2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80055ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d004      	beq.n	80055cc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c4:	3304      	adds	r3, #4
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fe f9d2 	bl	8003970 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055cc:	463b      	mov	r3, r7
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff ff6c 	bl	80054ac <prvSampleTimeNow>
 80055d4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b09      	cmp	r3, #9
 80055da:	d86b      	bhi.n	80056b4 <prvProcessReceivedCommands+0x144>
 80055dc:	a201      	add	r2, pc, #4	; (adr r2, 80055e4 <prvProcessReceivedCommands+0x74>)
 80055de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e2:	bf00      	nop
 80055e4:	0800560d 	.word	0x0800560d
 80055e8:	0800560d 	.word	0x0800560d
 80055ec:	0800560d 	.word	0x0800560d
 80055f0:	080056b5 	.word	0x080056b5
 80055f4:	08005669 	.word	0x08005669
 80055f8:	080056a1 	.word	0x080056a1
 80055fc:	0800560d 	.word	0x0800560d
 8005600:	0800560d 	.word	0x0800560d
 8005604:	080056b5 	.word	0x080056b5
 8005608:	08005669 	.word	0x08005669
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	18d1      	adds	r1, r2, r3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800561a:	f7ff ff67 	bl	80054ec <prvInsertTimerInActiveList>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d047      	beq.n	80056b4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800562a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800562c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d13f      	bne.n	80056b4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	441a      	add	r2, r3
 800563c:	2300      	movs	r3, #0
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	2300      	movs	r3, #0
 8005642:	2100      	movs	r1, #0
 8005644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005646:	f7ff fe1f 	bl	8005288 <xTimerGenericCommand>
 800564a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d130      	bne.n	80056b4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	61bb      	str	r3, [r7, #24]
}
 8005664:	bf00      	nop
 8005666:	e7fe      	b.n	8005666 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800566e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10a      	bne.n	800568c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	617b      	str	r3, [r7, #20]
}
 8005688:	bf00      	nop
 800568a:	e7fe      	b.n	800568a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	699a      	ldr	r2, [r3, #24]
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	18d1      	adds	r1, r2, r3
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800569a:	f7ff ff27 	bl	80054ec <prvInsertTimerInActiveList>
					break;
 800569e:	e009      	b.n	80056b4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80056a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d104      	bne.n	80056b4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80056aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056ac:	f000 fb6a 	bl	8005d84 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80056b0:	e000      	b.n	80056b4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80056b2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056b4:	4b07      	ldr	r3, [pc, #28]	; (80056d4 <prvProcessReceivedCommands+0x164>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	1d39      	adds	r1, r7, #4
 80056ba:	2200      	movs	r2, #0
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fe fc57 	bl	8003f70 <xQueueReceive>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f47f af57 	bne.w	8005578 <prvProcessReceivedCommands+0x8>
	}
}
 80056ca:	bf00      	nop
 80056cc:	bf00      	nop
 80056ce:	3730      	adds	r7, #48	; 0x30
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	20000d7c 	.word	0x20000d7c

080056d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b088      	sub	sp, #32
 80056dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056de:	e045      	b.n	800576c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056e0:	4b2c      	ldr	r3, [pc, #176]	; (8005794 <prvSwitchTimerLists+0xbc>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056ea:	4b2a      	ldr	r3, [pc, #168]	; (8005794 <prvSwitchTimerLists+0xbc>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3304      	adds	r3, #4
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fe f939 	bl	8003970 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d12e      	bne.n	800576c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4413      	add	r3, r2
 8005716:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	429a      	cmp	r2, r3
 800571e:	d90e      	bls.n	800573e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800572c:	4b19      	ldr	r3, [pc, #100]	; (8005794 <prvSwitchTimerLists+0xbc>)
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3304      	adds	r3, #4
 8005734:	4619      	mov	r1, r3
 8005736:	4610      	mov	r0, r2
 8005738:	f7fe f8e2 	bl	8003900 <vListInsert>
 800573c:	e016      	b.n	800576c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800573e:	2300      	movs	r3, #0
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	2300      	movs	r3, #0
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	2100      	movs	r1, #0
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f7ff fd9d 	bl	8005288 <xTimerGenericCommand>
 800574e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10a      	bne.n	800576c <prvSwitchTimerLists+0x94>
	__asm volatile
 8005756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	603b      	str	r3, [r7, #0]
}
 8005768:	bf00      	nop
 800576a:	e7fe      	b.n	800576a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800576c:	4b09      	ldr	r3, [pc, #36]	; (8005794 <prvSwitchTimerLists+0xbc>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1b4      	bne.n	80056e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005776:	4b07      	ldr	r3, [pc, #28]	; (8005794 <prvSwitchTimerLists+0xbc>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800577c:	4b06      	ldr	r3, [pc, #24]	; (8005798 <prvSwitchTimerLists+0xc0>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a04      	ldr	r2, [pc, #16]	; (8005794 <prvSwitchTimerLists+0xbc>)
 8005782:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005784:	4a04      	ldr	r2, [pc, #16]	; (8005798 <prvSwitchTimerLists+0xc0>)
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	6013      	str	r3, [r2, #0]
}
 800578a:	bf00      	nop
 800578c:	3718      	adds	r7, #24
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000d74 	.word	0x20000d74
 8005798:	20000d78 	.word	0x20000d78

0800579c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80057a2:	f000 f92b 	bl	80059fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80057a6:	4b15      	ldr	r3, [pc, #84]	; (80057fc <prvCheckForValidListAndQueue+0x60>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d120      	bne.n	80057f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80057ae:	4814      	ldr	r0, [pc, #80]	; (8005800 <prvCheckForValidListAndQueue+0x64>)
 80057b0:	f7fe f858 	bl	8003864 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80057b4:	4813      	ldr	r0, [pc, #76]	; (8005804 <prvCheckForValidListAndQueue+0x68>)
 80057b6:	f7fe f855 	bl	8003864 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80057ba:	4b13      	ldr	r3, [pc, #76]	; (8005808 <prvCheckForValidListAndQueue+0x6c>)
 80057bc:	4a10      	ldr	r2, [pc, #64]	; (8005800 <prvCheckForValidListAndQueue+0x64>)
 80057be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80057c0:	4b12      	ldr	r3, [pc, #72]	; (800580c <prvCheckForValidListAndQueue+0x70>)
 80057c2:	4a10      	ldr	r2, [pc, #64]	; (8005804 <prvCheckForValidListAndQueue+0x68>)
 80057c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80057c6:	2300      	movs	r3, #0
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	4b11      	ldr	r3, [pc, #68]	; (8005810 <prvCheckForValidListAndQueue+0x74>)
 80057cc:	4a11      	ldr	r2, [pc, #68]	; (8005814 <prvCheckForValidListAndQueue+0x78>)
 80057ce:	2110      	movs	r1, #16
 80057d0:	200a      	movs	r0, #10
 80057d2:	f7fe f95f 	bl	8003a94 <xQueueGenericCreateStatic>
 80057d6:	4603      	mov	r3, r0
 80057d8:	4a08      	ldr	r2, [pc, #32]	; (80057fc <prvCheckForValidListAndQueue+0x60>)
 80057da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80057dc:	4b07      	ldr	r3, [pc, #28]	; (80057fc <prvCheckForValidListAndQueue+0x60>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d005      	beq.n	80057f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80057e4:	4b05      	ldr	r3, [pc, #20]	; (80057fc <prvCheckForValidListAndQueue+0x60>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	490b      	ldr	r1, [pc, #44]	; (8005818 <prvCheckForValidListAndQueue+0x7c>)
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe fdb0 	bl	8004350 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057f0:	f000 f934 	bl	8005a5c <vPortExitCritical>
}
 80057f4:	bf00      	nop
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20000d7c 	.word	0x20000d7c
 8005800:	20000d4c 	.word	0x20000d4c
 8005804:	20000d60 	.word	0x20000d60
 8005808:	20000d74 	.word	0x20000d74
 800580c:	20000d78 	.word	0x20000d78
 8005810:	20000e28 	.word	0x20000e28
 8005814:	20000d88 	.word	0x20000d88
 8005818:	080060c8 	.word	0x080060c8

0800581c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	3b04      	subs	r3, #4
 800582c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005834:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	3b04      	subs	r3, #4
 800583a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f023 0201 	bic.w	r2, r3, #1
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3b04      	subs	r3, #4
 800584a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800584c:	4a08      	ldr	r2, [pc, #32]	; (8005870 <pxPortInitialiseStack+0x54>)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3b14      	subs	r3, #20
 8005856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3b20      	subs	r3, #32
 8005862:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005864:	68fb      	ldr	r3, [r7, #12]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr
 8005870:	08005875 	.word	0x08005875

08005874 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800587a:	2300      	movs	r3, #0
 800587c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800587e:	4b12      	ldr	r3, [pc, #72]	; (80058c8 <prvTaskExitError+0x54>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005886:	d00a      	beq.n	800589e <prvTaskExitError+0x2a>
	__asm volatile
 8005888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	60fb      	str	r3, [r7, #12]
}
 800589a:	bf00      	nop
 800589c:	e7fe      	b.n	800589c <prvTaskExitError+0x28>
	__asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	60bb      	str	r3, [r7, #8]
}
 80058b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80058b2:	bf00      	nop
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d0fc      	beq.n	80058b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058ba:	bf00      	nop
 80058bc:	bf00      	nop
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bc80      	pop	{r7}
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	20000010 	.word	0x20000010
 80058cc:	00000000 	.word	0x00000000

080058d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80058d0:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <pxCurrentTCBConst2>)
 80058d2:	6819      	ldr	r1, [r3, #0]
 80058d4:	6808      	ldr	r0, [r1, #0]
 80058d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80058da:	f380 8809 	msr	PSP, r0
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f04f 0000 	mov.w	r0, #0
 80058e6:	f380 8811 	msr	BASEPRI, r0
 80058ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80058ee:	4770      	bx	lr

080058f0 <pxCurrentTCBConst2>:
 80058f0:	2000084c 	.word	0x2000084c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop

080058f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80058f8:	4806      	ldr	r0, [pc, #24]	; (8005914 <prvPortStartFirstTask+0x1c>)
 80058fa:	6800      	ldr	r0, [r0, #0]
 80058fc:	6800      	ldr	r0, [r0, #0]
 80058fe:	f380 8808 	msr	MSP, r0
 8005902:	b662      	cpsie	i
 8005904:	b661      	cpsie	f
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	df00      	svc	0
 8005910:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005912:	bf00      	nop
 8005914:	e000ed08 	.word	0xe000ed08

08005918 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800591e:	4b32      	ldr	r3, [pc, #200]	; (80059e8 <xPortStartScheduler+0xd0>)
 8005920:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	22ff      	movs	r2, #255	; 0xff
 800592e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	b2db      	uxtb	r3, r3
 8005936:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	b2db      	uxtb	r3, r3
 800593c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005940:	b2da      	uxtb	r2, r3
 8005942:	4b2a      	ldr	r3, [pc, #168]	; (80059ec <xPortStartScheduler+0xd4>)
 8005944:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005946:	4b2a      	ldr	r3, [pc, #168]	; (80059f0 <xPortStartScheduler+0xd8>)
 8005948:	2207      	movs	r2, #7
 800594a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800594c:	e009      	b.n	8005962 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800594e:	4b28      	ldr	r3, [pc, #160]	; (80059f0 <xPortStartScheduler+0xd8>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3b01      	subs	r3, #1
 8005954:	4a26      	ldr	r2, [pc, #152]	; (80059f0 <xPortStartScheduler+0xd8>)
 8005956:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	b2db      	uxtb	r3, r3
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	b2db      	uxtb	r3, r3
 8005960:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005962:	78fb      	ldrb	r3, [r7, #3]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596a:	2b80      	cmp	r3, #128	; 0x80
 800596c:	d0ef      	beq.n	800594e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800596e:	4b20      	ldr	r3, [pc, #128]	; (80059f0 <xPortStartScheduler+0xd8>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f1c3 0307 	rsb	r3, r3, #7
 8005976:	2b04      	cmp	r3, #4
 8005978:	d00a      	beq.n	8005990 <xPortStartScheduler+0x78>
	__asm volatile
 800597a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	60bb      	str	r3, [r7, #8]
}
 800598c:	bf00      	nop
 800598e:	e7fe      	b.n	800598e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005990:	4b17      	ldr	r3, [pc, #92]	; (80059f0 <xPortStartScheduler+0xd8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	4a16      	ldr	r2, [pc, #88]	; (80059f0 <xPortStartScheduler+0xd8>)
 8005998:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800599a:	4b15      	ldr	r3, [pc, #84]	; (80059f0 <xPortStartScheduler+0xd8>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059a2:	4a13      	ldr	r2, [pc, #76]	; (80059f0 <xPortStartScheduler+0xd8>)
 80059a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059ae:	4b11      	ldr	r3, [pc, #68]	; (80059f4 <xPortStartScheduler+0xdc>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a10      	ldr	r2, [pc, #64]	; (80059f4 <xPortStartScheduler+0xdc>)
 80059b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059ba:	4b0e      	ldr	r3, [pc, #56]	; (80059f4 <xPortStartScheduler+0xdc>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a0d      	ldr	r2, [pc, #52]	; (80059f4 <xPortStartScheduler+0xdc>)
 80059c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80059c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059c6:	f000 f8b9 	bl	8005b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059ca:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <xPortStartScheduler+0xe0>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059d0:	f7ff ff92 	bl	80058f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059d4:	f7ff f8c2 	bl	8004b5c <vTaskSwitchContext>
	prvTaskExitError();
 80059d8:	f7ff ff4c 	bl	8005874 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	e000e400 	.word	0xe000e400
 80059ec:	20000e78 	.word	0x20000e78
 80059f0:	20000e7c 	.word	0x20000e7c
 80059f4:	e000ed20 	.word	0xe000ed20
 80059f8:	20000010 	.word	0x20000010

080059fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	607b      	str	r3, [r7, #4]
}
 8005a14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a16:	4b0f      	ldr	r3, [pc, #60]	; (8005a54 <vPortEnterCritical+0x58>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	4a0d      	ldr	r2, [pc, #52]	; (8005a54 <vPortEnterCritical+0x58>)
 8005a1e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a20:	4b0c      	ldr	r3, [pc, #48]	; (8005a54 <vPortEnterCritical+0x58>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d10f      	bne.n	8005a48 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a28:	4b0b      	ldr	r3, [pc, #44]	; (8005a58 <vPortEnterCritical+0x5c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	603b      	str	r3, [r7, #0]
}
 8005a44:	bf00      	nop
 8005a46:	e7fe      	b.n	8005a46 <vPortEnterCritical+0x4a>
	}
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bc80      	pop	{r7}
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	20000010 	.word	0x20000010
 8005a58:	e000ed04 	.word	0xe000ed04

08005a5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a62:	4b11      	ldr	r3, [pc, #68]	; (8005aa8 <vPortExitCritical+0x4c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10a      	bne.n	8005a80 <vPortExitCritical+0x24>
	__asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	607b      	str	r3, [r7, #4]
}
 8005a7c:	bf00      	nop
 8005a7e:	e7fe      	b.n	8005a7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a80:	4b09      	ldr	r3, [pc, #36]	; (8005aa8 <vPortExitCritical+0x4c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	4a08      	ldr	r2, [pc, #32]	; (8005aa8 <vPortExitCritical+0x4c>)
 8005a88:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a8a:	4b07      	ldr	r3, [pc, #28]	; (8005aa8 <vPortExitCritical+0x4c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d105      	bne.n	8005a9e <vPortExitCritical+0x42>
 8005a92:	2300      	movs	r3, #0
 8005a94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	f383 8811 	msr	BASEPRI, r3
}
 8005a9c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bc80      	pop	{r7}
 8005aa6:	4770      	bx	lr
 8005aa8:	20000010 	.word	0x20000010
 8005aac:	00000000 	.word	0x00000000

08005ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ab0:	f3ef 8009 	mrs	r0, PSP
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	4b0d      	ldr	r3, [pc, #52]	; (8005af0 <pxCurrentTCBConst>)
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ac0:	6010      	str	r0, [r2, #0]
 8005ac2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005ac6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005aca:	f380 8811 	msr	BASEPRI, r0
 8005ace:	f7ff f845 	bl	8004b5c <vTaskSwitchContext>
 8005ad2:	f04f 0000 	mov.w	r0, #0
 8005ad6:	f380 8811 	msr	BASEPRI, r0
 8005ada:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005ade:	6819      	ldr	r1, [r3, #0]
 8005ae0:	6808      	ldr	r0, [r1, #0]
 8005ae2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ae6:	f380 8809 	msr	PSP, r0
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	4770      	bx	lr

08005af0 <pxCurrentTCBConst>:
 8005af0:	2000084c 	.word	0x2000084c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop

08005af8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	607b      	str	r3, [r7, #4]
}
 8005b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b12:	f7fe ff65 	bl	80049e0 <xTaskIncrementTick>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b1c:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <SysTick_Handler+0x40>)
 8005b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	2300      	movs	r3, #0
 8005b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	f383 8811 	msr	BASEPRI, r3
}
 8005b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b30:	bf00      	nop
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	e000ed04 	.word	0xe000ed04

08005b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b40:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <vPortSetupTimerInterrupt+0x30>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b46:	4b0a      	ldr	r3, [pc, #40]	; (8005b70 <vPortSetupTimerInterrupt+0x34>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b4c:	4b09      	ldr	r3, [pc, #36]	; (8005b74 <vPortSetupTimerInterrupt+0x38>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a09      	ldr	r2, [pc, #36]	; (8005b78 <vPortSetupTimerInterrupt+0x3c>)
 8005b52:	fba2 2303 	umull	r2, r3, r2, r3
 8005b56:	099b      	lsrs	r3, r3, #6
 8005b58:	4a08      	ldr	r2, [pc, #32]	; (8005b7c <vPortSetupTimerInterrupt+0x40>)
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b5e:	4b03      	ldr	r3, [pc, #12]	; (8005b6c <vPortSetupTimerInterrupt+0x30>)
 8005b60:	2207      	movs	r2, #7
 8005b62:	601a      	str	r2, [r3, #0]
}
 8005b64:	bf00      	nop
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bc80      	pop	{r7}
 8005b6a:	4770      	bx	lr
 8005b6c:	e000e010 	.word	0xe000e010
 8005b70:	e000e018 	.word	0xe000e018
 8005b74:	20000004 	.word	0x20000004
 8005b78:	10624dd3 	.word	0x10624dd3
 8005b7c:	e000e014 	.word	0xe000e014

08005b80 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b86:	f3ef 8305 	mrs	r3, IPSR
 8005b8a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b0f      	cmp	r3, #15
 8005b90:	d914      	bls.n	8005bbc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b92:	4a16      	ldr	r2, [pc, #88]	; (8005bec <vPortValidateInterruptPriority+0x6c>)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4413      	add	r3, r2
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b9c:	4b14      	ldr	r3, [pc, #80]	; (8005bf0 <vPortValidateInterruptPriority+0x70>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	7afa      	ldrb	r2, [r7, #11]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d20a      	bcs.n	8005bbc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005baa:	f383 8811 	msr	BASEPRI, r3
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	607b      	str	r3, [r7, #4]
}
 8005bb8:	bf00      	nop
 8005bba:	e7fe      	b.n	8005bba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bbc:	4b0d      	ldr	r3, [pc, #52]	; (8005bf4 <vPortValidateInterruptPriority+0x74>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bc4:	4b0c      	ldr	r3, [pc, #48]	; (8005bf8 <vPortValidateInterruptPriority+0x78>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d90a      	bls.n	8005be2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	603b      	str	r3, [r7, #0]
}
 8005bde:	bf00      	nop
 8005be0:	e7fe      	b.n	8005be0 <vPortValidateInterruptPriority+0x60>
	}
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bc80      	pop	{r7}
 8005bea:	4770      	bx	lr
 8005bec:	e000e3f0 	.word	0xe000e3f0
 8005bf0:	20000e78 	.word	0x20000e78
 8005bf4:	e000ed0c 	.word	0xe000ed0c
 8005bf8:	20000e7c 	.word	0x20000e7c

08005bfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b08a      	sub	sp, #40	; 0x28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c04:	2300      	movs	r3, #0
 8005c06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c08:	f7fe fe30 	bl	800486c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c0c:	4b58      	ldr	r3, [pc, #352]	; (8005d70 <pvPortMalloc+0x174>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c14:	f000 f910 	bl	8005e38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c18:	4b56      	ldr	r3, [pc, #344]	; (8005d74 <pvPortMalloc+0x178>)
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f040 808e 	bne.w	8005d42 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d01d      	beq.n	8005c68 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c2c:	2208      	movs	r2, #8
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4413      	add	r3, r2
 8005c32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d014      	beq.n	8005c68 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f023 0307 	bic.w	r3, r3, #7
 8005c44:	3308      	adds	r3, #8
 8005c46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <pvPortMalloc+0x6c>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	617b      	str	r3, [r7, #20]
}
 8005c64:	bf00      	nop
 8005c66:	e7fe      	b.n	8005c66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d069      	beq.n	8005d42 <pvPortMalloc+0x146>
 8005c6e:	4b42      	ldr	r3, [pc, #264]	; (8005d78 <pvPortMalloc+0x17c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d864      	bhi.n	8005d42 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c78:	4b40      	ldr	r3, [pc, #256]	; (8005d7c <pvPortMalloc+0x180>)
 8005c7a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c7c:	4b3f      	ldr	r3, [pc, #252]	; (8005d7c <pvPortMalloc+0x180>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c82:	e004      	b.n	8005c8e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d903      	bls.n	8005ca0 <pvPortMalloc+0xa4>
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1f1      	bne.n	8005c84 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ca0:	4b33      	ldr	r3, [pc, #204]	; (8005d70 <pvPortMalloc+0x174>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d04b      	beq.n	8005d42 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2208      	movs	r2, #8
 8005cb0:	4413      	add	r3, r2
 8005cb2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	1ad2      	subs	r2, r2, r3
 8005cc4:	2308      	movs	r3, #8
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d91f      	bls.n	8005d0c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <pvPortMalloc+0xf8>
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	613b      	str	r3, [r7, #16]
}
 8005cf0:	bf00      	nop
 8005cf2:	e7fe      	b.n	8005cf2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	1ad2      	subs	r2, r2, r3
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d06:	69b8      	ldr	r0, [r7, #24]
 8005d08:	f000 f8f8 	bl	8005efc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d0c:	4b1a      	ldr	r3, [pc, #104]	; (8005d78 <pvPortMalloc+0x17c>)
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	4a18      	ldr	r2, [pc, #96]	; (8005d78 <pvPortMalloc+0x17c>)
 8005d18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d1a:	4b17      	ldr	r3, [pc, #92]	; (8005d78 <pvPortMalloc+0x17c>)
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	4b18      	ldr	r3, [pc, #96]	; (8005d80 <pvPortMalloc+0x184>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d203      	bcs.n	8005d2e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d26:	4b14      	ldr	r3, [pc, #80]	; (8005d78 <pvPortMalloc+0x17c>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a15      	ldr	r2, [pc, #84]	; (8005d80 <pvPortMalloc+0x184>)
 8005d2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	4b10      	ldr	r3, [pc, #64]	; (8005d74 <pvPortMalloc+0x178>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	2200      	movs	r2, #0
 8005d40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d42:	f7fe fda1 	bl	8004888 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <pvPortMalloc+0x16a>
	__asm volatile
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	60fb      	str	r3, [r7, #12]
}
 8005d62:	bf00      	nop
 8005d64:	e7fe      	b.n	8005d64 <pvPortMalloc+0x168>
	return pvReturn;
 8005d66:	69fb      	ldr	r3, [r7, #28]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3728      	adds	r7, #40	; 0x28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	20001e88 	.word	0x20001e88
 8005d74:	20001e94 	.word	0x20001e94
 8005d78:	20001e8c 	.word	0x20001e8c
 8005d7c:	20001e80 	.word	0x20001e80
 8005d80:	20001e90 	.word	0x20001e90

08005d84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d048      	beq.n	8005e28 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d96:	2308      	movs	r3, #8
 8005d98:	425b      	negs	r3, r3
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	4b21      	ldr	r3, [pc, #132]	; (8005e30 <vPortFree+0xac>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4013      	ands	r3, r2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10a      	bne.n	8005dc8 <vPortFree+0x44>
	__asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	60fb      	str	r3, [r7, #12]
}
 8005dc4:	bf00      	nop
 8005dc6:	e7fe      	b.n	8005dc6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00a      	beq.n	8005de6 <vPortFree+0x62>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	60bb      	str	r3, [r7, #8]
}
 8005de2:	bf00      	nop
 8005de4:	e7fe      	b.n	8005de4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	4b11      	ldr	r3, [pc, #68]	; (8005e30 <vPortFree+0xac>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4013      	ands	r3, r2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d019      	beq.n	8005e28 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d115      	bne.n	8005e28 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	4b0b      	ldr	r3, [pc, #44]	; (8005e30 <vPortFree+0xac>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	43db      	mvns	r3, r3
 8005e06:	401a      	ands	r2, r3
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e0c:	f7fe fd2e 	bl	800486c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	4b07      	ldr	r3, [pc, #28]	; (8005e34 <vPortFree+0xb0>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4413      	add	r3, r2
 8005e1a:	4a06      	ldr	r2, [pc, #24]	; (8005e34 <vPortFree+0xb0>)
 8005e1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e1e:	6938      	ldr	r0, [r7, #16]
 8005e20:	f000 f86c 	bl	8005efc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005e24:	f7fe fd30 	bl	8004888 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e28:	bf00      	nop
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20001e94 	.word	0x20001e94
 8005e34:	20001e8c 	.word	0x20001e8c

08005e38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e44:	4b27      	ldr	r3, [pc, #156]	; (8005ee4 <prvHeapInit+0xac>)
 8005e46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00c      	beq.n	8005e6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3307      	adds	r3, #7
 8005e56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 0307 	bic.w	r3, r3, #7
 8005e5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	4a1f      	ldr	r2, [pc, #124]	; (8005ee4 <prvHeapInit+0xac>)
 8005e68:	4413      	add	r3, r2
 8005e6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e70:	4a1d      	ldr	r2, [pc, #116]	; (8005ee8 <prvHeapInit+0xb0>)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e76:	4b1c      	ldr	r3, [pc, #112]	; (8005ee8 <prvHeapInit+0xb0>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	4413      	add	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e84:	2208      	movs	r2, #8
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	1a9b      	subs	r3, r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0307 	bic.w	r3, r3, #7
 8005e92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4a15      	ldr	r2, [pc, #84]	; (8005eec <prvHeapInit+0xb4>)
 8005e98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e9a:	4b14      	ldr	r3, [pc, #80]	; (8005eec <prvHeapInit+0xb4>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ea2:	4b12      	ldr	r3, [pc, #72]	; (8005eec <prvHeapInit+0xb4>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	1ad2      	subs	r2, r2, r3
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005eb8:	4b0c      	ldr	r3, [pc, #48]	; (8005eec <prvHeapInit+0xb4>)
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	4a0a      	ldr	r2, [pc, #40]	; (8005ef0 <prvHeapInit+0xb8>)
 8005ec6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	4a09      	ldr	r2, [pc, #36]	; (8005ef4 <prvHeapInit+0xbc>)
 8005ece:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ed0:	4b09      	ldr	r3, [pc, #36]	; (8005ef8 <prvHeapInit+0xc0>)
 8005ed2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ed6:	601a      	str	r2, [r3, #0]
}
 8005ed8:	bf00      	nop
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bc80      	pop	{r7}
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	20000e80 	.word	0x20000e80
 8005ee8:	20001e80 	.word	0x20001e80
 8005eec:	20001e88 	.word	0x20001e88
 8005ef0:	20001e90 	.word	0x20001e90
 8005ef4:	20001e8c 	.word	0x20001e8c
 8005ef8:	20001e94 	.word	0x20001e94

08005efc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f04:	4b27      	ldr	r3, [pc, #156]	; (8005fa4 <prvInsertBlockIntoFreeList+0xa8>)
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	e002      	b.n	8005f10 <prvInsertBlockIntoFreeList+0x14>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d8f7      	bhi.n	8005f0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	4413      	add	r3, r2
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d108      	bne.n	8005f3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	441a      	add	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	441a      	add	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d118      	bne.n	8005f84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	4b14      	ldr	r3, [pc, #80]	; (8005fa8 <prvInsertBlockIntoFreeList+0xac>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d00d      	beq.n	8005f7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	441a      	add	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	e008      	b.n	8005f8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f7a:	4b0b      	ldr	r3, [pc, #44]	; (8005fa8 <prvInsertBlockIntoFreeList+0xac>)
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	e003      	b.n	8005f8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d002      	beq.n	8005f9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f9a:	bf00      	nop
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bc80      	pop	{r7}
 8005fa2:	4770      	bx	lr
 8005fa4:	20001e80 	.word	0x20001e80
 8005fa8:	20001e88 	.word	0x20001e88

08005fac <__libc_init_array>:
 8005fac:	b570      	push	{r4, r5, r6, lr}
 8005fae:	2600      	movs	r6, #0
 8005fb0:	4d0c      	ldr	r5, [pc, #48]	; (8005fe4 <__libc_init_array+0x38>)
 8005fb2:	4c0d      	ldr	r4, [pc, #52]	; (8005fe8 <__libc_init_array+0x3c>)
 8005fb4:	1b64      	subs	r4, r4, r5
 8005fb6:	10a4      	asrs	r4, r4, #2
 8005fb8:	42a6      	cmp	r6, r4
 8005fba:	d109      	bne.n	8005fd0 <__libc_init_array+0x24>
 8005fbc:	f000 f830 	bl	8006020 <_init>
 8005fc0:	2600      	movs	r6, #0
 8005fc2:	4d0a      	ldr	r5, [pc, #40]	; (8005fec <__libc_init_array+0x40>)
 8005fc4:	4c0a      	ldr	r4, [pc, #40]	; (8005ff0 <__libc_init_array+0x44>)
 8005fc6:	1b64      	subs	r4, r4, r5
 8005fc8:	10a4      	asrs	r4, r4, #2
 8005fca:	42a6      	cmp	r6, r4
 8005fcc:	d105      	bne.n	8005fda <__libc_init_array+0x2e>
 8005fce:	bd70      	pop	{r4, r5, r6, pc}
 8005fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd4:	4798      	blx	r3
 8005fd6:	3601      	adds	r6, #1
 8005fd8:	e7ee      	b.n	8005fb8 <__libc_init_array+0xc>
 8005fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fde:	4798      	blx	r3
 8005fe0:	3601      	adds	r6, #1
 8005fe2:	e7f2      	b.n	8005fca <__libc_init_array+0x1e>
 8005fe4:	080061fc 	.word	0x080061fc
 8005fe8:	080061fc 	.word	0x080061fc
 8005fec:	080061fc 	.word	0x080061fc
 8005ff0:	08006200 	.word	0x08006200

08005ff4 <memcpy>:
 8005ff4:	440a      	add	r2, r1
 8005ff6:	4291      	cmp	r1, r2
 8005ff8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ffc:	d100      	bne.n	8006000 <memcpy+0xc>
 8005ffe:	4770      	bx	lr
 8006000:	b510      	push	{r4, lr}
 8006002:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006006:	4291      	cmp	r1, r2
 8006008:	f803 4f01 	strb.w	r4, [r3, #1]!
 800600c:	d1f9      	bne.n	8006002 <memcpy+0xe>
 800600e:	bd10      	pop	{r4, pc}

08006010 <memset>:
 8006010:	4603      	mov	r3, r0
 8006012:	4402      	add	r2, r0
 8006014:	4293      	cmp	r3, r2
 8006016:	d100      	bne.n	800601a <memset+0xa>
 8006018:	4770      	bx	lr
 800601a:	f803 1b01 	strb.w	r1, [r3], #1
 800601e:	e7f9      	b.n	8006014 <memset+0x4>

08006020 <_init>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	bf00      	nop
 8006024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006026:	bc08      	pop	{r3}
 8006028:	469e      	mov	lr, r3
 800602a:	4770      	bx	lr

0800602c <_fini>:
 800602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602e:	bf00      	nop
 8006030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006032:	bc08      	pop	{r3}
 8006034:	469e      	mov	lr, r3
 8006036:	4770      	bx	lr
