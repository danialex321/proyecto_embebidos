
FreeRTOS_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d48  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08004e58  08004e58  00014e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005028  08005028  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005028  08005028  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005028  08005028  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005028  08005028  00015028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800502c  0800502c  0001502c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e04  20000010  08005040  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e14  08005040  00021e14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014245  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000308f  00000000  00000000  0003427e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  00037310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  00038568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a61  00000000  00000000  00039668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d65  00000000  00000000  0003d0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096e4e  00000000  00000000  00050e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7c7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c00  00000000  00000000  000e7ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004e40 	.word	0x08004e40

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004e40 	.word	0x08004e40

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000160:	b5b0      	push	{r4, r5, r7, lr}
 8000162:	b08a      	sub	sp, #40	; 0x28
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
 800016c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800016e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000172:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000176:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800017a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 800017c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800017e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000180:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000182:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 800018c:	68bb      	ldr	r3, [r7, #8]
 800018e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000190:	f107 0310 	add.w	r3, r7, #16
 8000194:	4618      	mov	r0, r3
 8000196:	f000 f80e 	bl	80001b6 <Lcd_init>

	return lcd;
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	461d      	mov	r5, r3
 800019e:	f107 0410 	add.w	r4, r7, #16
 80001a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80001aa:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80001ae:	68f8      	ldr	r0, [r7, #12]
 80001b0:	3728      	adds	r7, #40	; 0x28
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bdb0      	pop	{r4, r5, r7, pc}

080001b6 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80001b6:	b580      	push	{r7, lr}
 80001b8:	b082      	sub	sp, #8
 80001ba:	af00      	add	r7, sp, #0
 80001bc:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	7d9b      	ldrb	r3, [r3, #22]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d10c      	bne.n	80001e0 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80001c6:	2133      	movs	r1, #51	; 0x33
 80001c8:	6878      	ldr	r0, [r7, #4]
 80001ca:	f000 f857 	bl	800027c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80001ce:	2132      	movs	r1, #50	; 0x32
 80001d0:	6878      	ldr	r0, [r7, #4]
 80001d2:	f000 f853 	bl	800027c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80001d6:	2128      	movs	r1, #40	; 0x28
 80001d8:	6878      	ldr	r0, [r7, #4]
 80001da:	f000 f84f 	bl	800027c <lcd_write_command>
 80001de:	e003      	b.n	80001e8 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80001e0:	2138      	movs	r1, #56	; 0x38
 80001e2:	6878      	ldr	r0, [r7, #4]
 80001e4:	f000 f84a 	bl	800027c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80001e8:	2101      	movs	r1, #1
 80001ea:	6878      	ldr	r0, [r7, #4]
 80001ec:	f000 f846 	bl	800027c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80001f0:	210c      	movs	r1, #12
 80001f2:	6878      	ldr	r0, [r7, #4]
 80001f4:	f000 f842 	bl	800027c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80001f8:	2106      	movs	r1, #6
 80001fa:	6878      	ldr	r0, [r7, #4]
 80001fc:	f000 f83e 	bl	800027c <lcd_write_command>
}
 8000200:	bf00      	nop
 8000202:	3708      	adds	r7, #8
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}

08000208 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000208:	b590      	push	{r4, r7, lr}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
 8000210:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000212:	2300      	movs	r3, #0
 8000214:	73fb      	strb	r3, [r7, #15]
 8000216:	e00a      	b.n	800022e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000218:	7bfb      	ldrb	r3, [r7, #15]
 800021a:	683a      	ldr	r2, [r7, #0]
 800021c:	4413      	add	r3, r2
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	4619      	mov	r1, r3
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	f000 f858 	bl	80002d8 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000228:	7bfb      	ldrb	r3, [r7, #15]
 800022a:	3301      	adds	r3, #1
 800022c:	73fb      	strb	r3, [r7, #15]
 800022e:	7bfc      	ldrb	r4, [r7, #15]
 8000230:	6838      	ldr	r0, [r7, #0]
 8000232:	f7ff ff8d 	bl	8000150 <strlen>
 8000236:	4603      	mov	r3, r0
 8000238:	429c      	cmp	r4, r3
 800023a:	d3ed      	bcc.n	8000218 <Lcd_string+0x10>
	}
}
 800023c:	bf00      	nop
 800023e:	bf00      	nop
 8000240:	3714      	adds	r7, #20
 8000242:	46bd      	mov	sp, r7
 8000244:	bd90      	pop	{r4, r7, pc}
	...

08000248 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	460b      	mov	r3, r1
 8000252:	70fb      	strb	r3, [r7, #3]
 8000254:	4613      	mov	r3, r2
 8000256:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000258:	78fb      	ldrb	r3, [r7, #3]
 800025a:	4a07      	ldr	r2, [pc, #28]	; (8000278 <Lcd_cursor+0x30>)
 800025c:	5cd2      	ldrb	r2, [r2, r3]
 800025e:	78bb      	ldrb	r3, [r7, #2]
 8000260:	4413      	add	r3, r2
 8000262:	b2db      	uxtb	r3, r3
 8000264:	3b80      	subs	r3, #128	; 0x80
 8000266:	b2db      	uxtb	r3, r3
 8000268:	4619      	mov	r1, r3
 800026a:	6878      	ldr	r0, [r7, #4]
 800026c:	f000 f806 	bl	800027c <lcd_write_command>
	#endif
}
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	08004ef8 	.word	0x08004ef8

0800027c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	460b      	mov	r3, r1
 8000286:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	6898      	ldr	r0, [r3, #8]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	899b      	ldrh	r3, [r3, #12]
 8000290:	2200      	movs	r2, #0
 8000292:	4619      	mov	r1, r3
 8000294:	f001 f8b2 	bl	80013fc <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	7d9b      	ldrb	r3, [r3, #22]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d111      	bne.n	80002c4 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80002a0:	78fb      	ldrb	r3, [r7, #3]
 80002a2:	091b      	lsrs	r3, r3, #4
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	2204      	movs	r2, #4
 80002a8:	4619      	mov	r1, r3
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f000 f842 	bl	8000334 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80002b0:	78fb      	ldrb	r3, [r7, #3]
 80002b2:	f003 030f 	and.w	r3, r3, #15
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	2204      	movs	r2, #4
 80002ba:	4619      	mov	r1, r3
 80002bc:	6878      	ldr	r0, [r7, #4]
 80002be:	f000 f839 	bl	8000334 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80002c2:	e005      	b.n	80002d0 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80002c4:	78fb      	ldrb	r3, [r7, #3]
 80002c6:	2208      	movs	r2, #8
 80002c8:	4619      	mov	r1, r3
 80002ca:	6878      	ldr	r0, [r7, #4]
 80002cc:	f000 f832 	bl	8000334 <lcd_write>
}
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	460b      	mov	r3, r1
 80002e2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	6898      	ldr	r0, [r3, #8]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	899b      	ldrh	r3, [r3, #12]
 80002ec:	2201      	movs	r2, #1
 80002ee:	4619      	mov	r1, r3
 80002f0:	f001 f884 	bl	80013fc <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	7d9b      	ldrb	r3, [r3, #22]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d111      	bne.n	8000320 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80002fc:	78fb      	ldrb	r3, [r7, #3]
 80002fe:	091b      	lsrs	r3, r3, #4
 8000300:	b2db      	uxtb	r3, r3
 8000302:	2204      	movs	r2, #4
 8000304:	4619      	mov	r1, r3
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	f000 f814 	bl	8000334 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800030c:	78fb      	ldrb	r3, [r7, #3]
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	b2db      	uxtb	r3, r3
 8000314:	2204      	movs	r2, #4
 8000316:	4619      	mov	r1, r3
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f000 f80b 	bl	8000334 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800031e:	e005      	b.n	800032c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000320:	78fb      	ldrb	r3, [r7, #3]
 8000322:	2208      	movs	r2, #8
 8000324:	4619      	mov	r1, r3
 8000326:	6878      	ldr	r0, [r7, #4]
 8000328:	f000 f804 	bl	8000334 <lcd_write>
}
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}

08000334 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	70fb      	strb	r3, [r7, #3]
 8000340:	4613      	mov	r3, r2
 8000342:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000344:	2300      	movs	r3, #0
 8000346:	73fb      	strb	r3, [r7, #15]
 8000348:	e019      	b.n	800037e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	4413      	add	r3, r2
 8000354:	6818      	ldr	r0, [r3, #0]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	685a      	ldr	r2, [r3, #4]
 800035a:	7bfb      	ldrb	r3, [r7, #15]
 800035c:	005b      	lsls	r3, r3, #1
 800035e:	4413      	add	r3, r2
 8000360:	8819      	ldrh	r1, [r3, #0]
 8000362:	78fa      	ldrb	r2, [r7, #3]
 8000364:	7bfb      	ldrb	r3, [r7, #15]
 8000366:	fa42 f303 	asr.w	r3, r2, r3
 800036a:	b2db      	uxtb	r3, r3
 800036c:	f003 0301 	and.w	r3, r3, #1
 8000370:	b2db      	uxtb	r3, r3
 8000372:	461a      	mov	r2, r3
 8000374:	f001 f842 	bl	80013fc <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000378:	7bfb      	ldrb	r3, [r7, #15]
 800037a:	3301      	adds	r3, #1
 800037c:	73fb      	strb	r3, [r7, #15]
 800037e:	7bfa      	ldrb	r2, [r7, #15]
 8000380:	78bb      	ldrb	r3, [r7, #2]
 8000382:	429a      	cmp	r2, r3
 8000384:	d3e1      	bcc.n	800034a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	6918      	ldr	r0, [r3, #16]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	8a9b      	ldrh	r3, [r3, #20]
 800038e:	2201      	movs	r2, #1
 8000390:	4619      	mov	r1, r3
 8000392:	f001 f833 	bl	80013fc <HAL_GPIO_WritePin>
	DELAY(1);
 8000396:	2001      	movs	r0, #1
 8000398:	f000 fb96 	bl	8000ac8 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	6918      	ldr	r0, [r3, #16]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	8a9b      	ldrh	r3, [r3, #20]
 80003a4:	2200      	movs	r2, #0
 80003a6:	4619      	mov	r1, r3
 80003a8:	f001 f828 	bl	80013fc <HAL_GPIO_WritePin>
}
 80003ac:	bf00      	nop
 80003ae:	3710      	adds	r7, #16
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b4:	b590      	push	{r4, r7, lr}
 80003b6:	b091      	sub	sp, #68	; 0x44
 80003b8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ba:	f000 fb53 	bl	8000a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003be:	f000 f8a3 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c2:	f000 f93b 	bl	800063c <MX_GPIO_Init>
  MX_ADC1_Init();
 80003c6:	f000 f8fb 	bl	80005c0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
    Lcd_PortType ports[] = { GPIOB, GPIOB, GPIOB, GPIOB };
 80003ca:	4b35      	ldr	r3, [pc, #212]	; (80004a0 <main+0xec>)
 80003cc:	f107 0420 	add.w	r4, r7, #32
 80003d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
    Lcd_PinType pins[] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_10, GPIO_PIN_11};
 80003d6:	4a33      	ldr	r2, [pc, #204]	; (80004a4 <main+0xf0>)
 80003d8:	f107 0318 	add.w	r3, r7, #24
 80003dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003e0:	e883 0003 	stmia.w	r3, {r0, r1}
    Lcd_HandleTypeDef lcd;
    // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
    lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_3, LCD_4_BIT_MODE);
 80003e4:	4638      	mov	r0, r7
 80003e6:	f107 0218 	add.w	r2, r7, #24
 80003ea:	f107 0120 	add.w	r1, r7, #32
 80003ee:	2300      	movs	r3, #0
 80003f0:	9303      	str	r3, [sp, #12]
 80003f2:	2308      	movs	r3, #8
 80003f4:	9302      	str	r3, [sp, #8]
 80003f6:	4b2c      	ldr	r3, [pc, #176]	; (80004a8 <main+0xf4>)
 80003f8:	9301      	str	r3, [sp, #4]
 80003fa:	2302      	movs	r3, #2
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	4b2a      	ldr	r3, [pc, #168]	; (80004a8 <main+0xf4>)
 8000400:	f7ff feae 	bl	8000160 <Lcd_create>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000404:	f001 ff48 	bl	8002298 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of BrakeQ */
  BrakeQHandle = osMessageQueueNew (16, sizeof(uint16_t), &BrakeQ_attributes);
 8000408:	4a28      	ldr	r2, [pc, #160]	; (80004ac <main+0xf8>)
 800040a:	2102      	movs	r1, #2
 800040c:	2010      	movs	r0, #16
 800040e:	f002 f881 	bl	8002514 <osMessageQueueNew>
 8000412:	4603      	mov	r3, r0
 8000414:	4a26      	ldr	r2, [pc, #152]	; (80004b0 <main+0xfc>)
 8000416:	6013      	str	r3, [r2, #0]

  /* creation of ThrottleQ */
  ThrottleQHandle = osMessageQueueNew (16, sizeof(uint16_t), &ThrottleQ_attributes);
 8000418:	4a26      	ldr	r2, [pc, #152]	; (80004b4 <main+0x100>)
 800041a:	2102      	movs	r1, #2
 800041c:	2010      	movs	r0, #16
 800041e:	f002 f879 	bl	8002514 <osMessageQueueNew>
 8000422:	4603      	mov	r3, r0
 8000424:	4a24      	ldr	r2, [pc, #144]	; (80004b8 <main+0x104>)
 8000426:	6013      	str	r3, [r2, #0]

  /* creation of GearQ */
  GearQHandle = osMessageQueueNew (16, sizeof(char), &GearQ_attributes);
 8000428:	4a24      	ldr	r2, [pc, #144]	; (80004bc <main+0x108>)
 800042a:	2101      	movs	r1, #1
 800042c:	2010      	movs	r0, #16
 800042e:	f002 f871 	bl	8002514 <osMessageQueueNew>
 8000432:	4603      	mov	r3, r0
 8000434:	4a22      	ldr	r2, [pc, #136]	; (80004c0 <main+0x10c>)
 8000436:	6013      	str	r3, [r2, #0]

  /* creation of SpeedQ */
  SpeedQHandle = osMessageQueueNew (16, sizeof(uint16_t), &SpeedQ_attributes);
 8000438:	4a22      	ldr	r2, [pc, #136]	; (80004c4 <main+0x110>)
 800043a:	2102      	movs	r1, #2
 800043c:	2010      	movs	r0, #16
 800043e:	f002 f869 	bl	8002514 <osMessageQueueNew>
 8000442:	4603      	mov	r3, r0
 8000444:	4a20      	ldr	r2, [pc, #128]	; (80004c8 <main+0x114>)
 8000446:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Brake */
  BrakeHandle = osThreadNew(BrakeInput, NULL, &Brake_attributes);
 8000448:	4a20      	ldr	r2, [pc, #128]	; (80004cc <main+0x118>)
 800044a:	2100      	movs	r1, #0
 800044c:	4820      	ldr	r0, [pc, #128]	; (80004d0 <main+0x11c>)
 800044e:	f001 ff89 	bl	8002364 <osThreadNew>
 8000452:	4603      	mov	r3, r0
 8000454:	4a1f      	ldr	r2, [pc, #124]	; (80004d4 <main+0x120>)
 8000456:	6013      	str	r3, [r2, #0]

  /* creation of Throttle */
  ThrottleHandle = osThreadNew(ThrottleInput, NULL, &Throttle_attributes);
 8000458:	4a1f      	ldr	r2, [pc, #124]	; (80004d8 <main+0x124>)
 800045a:	2100      	movs	r1, #0
 800045c:	481f      	ldr	r0, [pc, #124]	; (80004dc <main+0x128>)
 800045e:	f001 ff81 	bl	8002364 <osThreadNew>
 8000462:	4603      	mov	r3, r0
 8000464:	4a1e      	ldr	r2, [pc, #120]	; (80004e0 <main+0x12c>)
 8000466:	6013      	str	r3, [r2, #0]

  /* creation of Gear */
  GearHandle = osThreadNew(GearSelection, NULL, &Gear_attributes);
 8000468:	4a1e      	ldr	r2, [pc, #120]	; (80004e4 <main+0x130>)
 800046a:	2100      	movs	r1, #0
 800046c:	481e      	ldr	r0, [pc, #120]	; (80004e8 <main+0x134>)
 800046e:	f001 ff79 	bl	8002364 <osThreadNew>
 8000472:	4603      	mov	r3, r0
 8000474:	4a1d      	ldr	r2, [pc, #116]	; (80004ec <main+0x138>)
 8000476:	6013      	str	r3, [r2, #0]

  /* creation of Data */
  DataHandle = osThreadNew(DataInput, NULL, &Data_attributes);
 8000478:	4a1d      	ldr	r2, [pc, #116]	; (80004f0 <main+0x13c>)
 800047a:	2100      	movs	r1, #0
 800047c:	481d      	ldr	r0, [pc, #116]	; (80004f4 <main+0x140>)
 800047e:	f001 ff71 	bl	8002364 <osThreadNew>
 8000482:	4603      	mov	r3, r0
 8000484:	4a1c      	ldr	r2, [pc, #112]	; (80004f8 <main+0x144>)
 8000486:	6013      	str	r3, [r2, #0]

  /* creation of Display */
  DisplayHandle = osThreadNew(DisplayInput, NULL, &Display_attributes);
 8000488:	4a1c      	ldr	r2, [pc, #112]	; (80004fc <main+0x148>)
 800048a:	2100      	movs	r1, #0
 800048c:	481c      	ldr	r0, [pc, #112]	; (8000500 <main+0x14c>)
 800048e:	f001 ff69 	bl	8002364 <osThreadNew>
 8000492:	4603      	mov	r3, r0
 8000494:	4a1b      	ldr	r2, [pc, #108]	; (8000504 <main+0x150>)
 8000496:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000498:	f001 ff30 	bl	80022fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800049c:	e7fe      	b.n	800049c <main+0xe8>
 800049e:	bf00      	nop
 80004a0:	08004ea8 	.word	0x08004ea8
 80004a4:	08004eb8 	.word	0x08004eb8
 80004a8:	40010800 	.word	0x40010800
 80004ac:	08004fb0 	.word	0x08004fb0
 80004b0:	20000070 	.word	0x20000070
 80004b4:	08004fc8 	.word	0x08004fc8
 80004b8:	20000074 	.word	0x20000074
 80004bc:	08004fe0 	.word	0x08004fe0
 80004c0:	20000078 	.word	0x20000078
 80004c4:	08004ff8 	.word	0x08004ff8
 80004c8:	2000007c 	.word	0x2000007c
 80004cc:	08004efc 	.word	0x08004efc
 80004d0:	080006fd 	.word	0x080006fd
 80004d4:	2000005c 	.word	0x2000005c
 80004d8:	08004f20 	.word	0x08004f20
 80004dc:	08000785 	.word	0x08000785
 80004e0:	20000060 	.word	0x20000060
 80004e4:	08004f44 	.word	0x08004f44
 80004e8:	08000795 	.word	0x08000795
 80004ec:	20000064 	.word	0x20000064
 80004f0:	08004f68 	.word	0x08004f68
 80004f4:	080007a5 	.word	0x080007a5
 80004f8:	20000068 	.word	0x20000068
 80004fc:	08004f8c 	.word	0x08004f8c
 8000500:	080007b5 	.word	0x080007b5
 8000504:	2000006c 	.word	0x2000006c

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000512:	2228      	movs	r2, #40	; 0x28
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f004 fc8a 	bl	8004e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000538:	2301      	movs	r3, #1
 800053a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000540:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000546:	2301      	movs	r3, #1
 8000548:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054a:	2302      	movs	r3, #2
 800054c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000552:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000554:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000558:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800055e:	4618      	mov	r0, r3
 8000560:	f000 ff64 	bl	800142c <HAL_RCC_OscConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800056a:	f000 f93a 	bl	80007e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	230f      	movs	r3, #15
 8000570:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000572:	2302      	movs	r3, #2
 8000574:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800057a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	2102      	movs	r1, #2
 800058a:	4618      	mov	r0, r3
 800058c:	f001 f9d0 	bl	8001930 <HAL_RCC_ClockConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000596:	f000 f924 	bl	80007e2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800059a:	2302      	movs	r3, #2
 800059c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800059e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005a2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fb76 	bl	8001c98 <HAL_RCCEx_PeriphCLKConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005b2:	f000 f916 	bl	80007e2 <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3750      	adds	r7, #80	; 0x50
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <MX_ADC1_Init+0x74>)
 80005d2:	4a19      	ldr	r2, [pc, #100]	; (8000638 <MX_ADC1_Init+0x78>)
 80005d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_ADC1_Init+0x74>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <MX_ADC1_Init+0x74>)
 80005de:	2201      	movs	r2, #1
 80005e0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_ADC1_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_ADC1_Init+0x74>)
 80005ea:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f0:	4b10      	ldr	r3, [pc, #64]	; (8000634 <MX_ADC1_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_ADC1_Init+0x74>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <MX_ADC1_Init+0x74>)
 80005fe:	f000 fa87 	bl	8000b10 <HAL_ADC_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000608:	f000 f8eb 	bl	80007e2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800060c:	2302      	movs	r3, #2
 800060e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000610:	2301      	movs	r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <MX_ADC1_Init+0x74>)
 800061e:	f000 fb4f 	bl	8000cc0 <HAL_ADC_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000628:	f000 f8db 	bl	80007e2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000002c 	.word	0x2000002c
 8000638:	40012400 	.word	0x40012400

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	f107 0310 	add.w	r3, r7, #16
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <MX_GPIO_Init+0xb4>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a26      	ldr	r2, [pc, #152]	; (80006f0 <MX_GPIO_Init+0xb4>)
 8000656:	f043 0320 	orr.w	r3, r3, #32
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <MX_GPIO_Init+0xb4>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0320 	and.w	r3, r3, #32
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <MX_GPIO_Init+0xb4>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <MX_GPIO_Init+0xb4>)
 800066e:	f043 0304 	orr.w	r3, r3, #4
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <MX_GPIO_Init+0xb4>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0304 	and.w	r3, r3, #4
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_GPIO_Init+0xb4>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a1a      	ldr	r2, [pc, #104]	; (80006f0 <MX_GPIO_Init+0xb4>)
 8000686:	f043 0308 	orr.w	r3, r3, #8
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_GPIO_Init+0xb4>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0308 	and.w	r3, r3, #8
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	210a      	movs	r1, #10
 800069c:	4815      	ldr	r0, [pc, #84]	; (80006f4 <MX_GPIO_Init+0xb8>)
 800069e:	f000 fead 	bl	80013fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f640 4103 	movw	r1, #3075	; 0xc03
 80006a8:	4813      	ldr	r0, [pc, #76]	; (80006f8 <MX_GPIO_Init+0xbc>)
 80006aa:	f000 fea7 	bl	80013fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80006ae:	230a      	movs	r3, #10
 80006b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2302      	movs	r3, #2
 80006bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	4619      	mov	r1, r3
 80006c4:	480b      	ldr	r0, [pc, #44]	; (80006f4 <MX_GPIO_Init+0xb8>)
 80006c6:	f000 fd15 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 80006ca:	f640 4303 	movw	r3, #3075	; 0xc03
 80006ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2302      	movs	r3, #2
 80006da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	4619      	mov	r1, r3
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_GPIO_Init+0xbc>)
 80006e4:	f000 fd06 	bl	80010f4 <HAL_GPIO_Init>

}
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40010800 	.word	0x40010800
 80006f8:	40010c00 	.word	0x40010c00

080006fc <BrakeInput>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BrakeInput */
void BrakeInput(void *argument)
{
 80006fc:	b5b0      	push	{r4, r5, r7, lr}
 80006fe:	b098      	sub	sp, #96	; 0x60
 8000700:	af04      	add	r7, sp, #16
 8000702:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
	// Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
	    Lcd_PortType ports[] = { GPIOB, GPIOB, GPIOB, GPIOB };
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <BrakeInput+0x78>)
 8000706:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800070a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800070c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
	    Lcd_PinType pins[] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_10, GPIO_PIN_11};
 8000710:	4a19      	ldr	r2, [pc, #100]	; (8000778 <BrakeInput+0x7c>)
 8000712:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000716:	e892 0003 	ldmia.w	r2, {r0, r1}
 800071a:	e883 0003 	stmia.w	r3, {r0, r1}
	    Lcd_HandleTypeDef lcd;
	    // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
	    lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_3, LCD_4_BIT_MODE);
 800071e:	4638      	mov	r0, r7
 8000720:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000724:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000728:	2300      	movs	r3, #0
 800072a:	9303      	str	r3, [sp, #12]
 800072c:	2308      	movs	r3, #8
 800072e:	9302      	str	r3, [sp, #8]
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <BrakeInput+0x80>)
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	2302      	movs	r3, #2
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4b10      	ldr	r3, [pc, #64]	; (800077c <BrakeInput+0x80>)
 800073a:	f7ff fd11 	bl	8000160 <Lcd_create>
 800073e:	f107 0420 	add.w	r4, r7, #32
 8000742:	463d      	mov	r5, r7
 8000744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000748:	e895 0003 	ldmia.w	r5, {r0, r1}
 800074c:	e884 0003 	stmia.w	r4, {r0, r1}
  /* Infinite loop */
  for(;;)
  {
	  Lcd_cursor(&lcd, 0,1);
 8000750:	f107 0320 	add.w	r3, r7, #32
 8000754:	2201      	movs	r2, #1
 8000756:	2100      	movs	r1, #0
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff fd75 	bl	8000248 <Lcd_cursor>
	  Lcd_string(&lcd, "Testing 3 LCD");
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	4907      	ldr	r1, [pc, #28]	; (8000780 <BrakeInput+0x84>)
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fd4f 	bl	8000208 <Lcd_string>
	  osDelay(1);
 800076a:	2001      	movs	r0, #1
 800076c:	f001 fea4 	bl	80024b8 <osDelay>
	  Lcd_cursor(&lcd, 0,1);
 8000770:	e7ee      	b.n	8000750 <BrakeInput+0x54>
 8000772:	bf00      	nop
 8000774:	08004ea8 	.word	0x08004ea8
 8000778:	08004eb8 	.word	0x08004eb8
 800077c:	40010800 	.word	0x40010800
 8000780:	08004ec0 	.word	0x08004ec0

08000784 <ThrottleInput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ThrottleInput */
void ThrottleInput(void *argument)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ThrottleInput */

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800078c:	2001      	movs	r0, #1
 800078e:	f001 fe93 	bl	80024b8 <osDelay>
 8000792:	e7fb      	b.n	800078c <ThrottleInput+0x8>

08000794 <GearSelection>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GearSelection */
void GearSelection(void *argument)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GearSelection */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800079c:	2001      	movs	r0, #1
 800079e:	f001 fe8b 	bl	80024b8 <osDelay>
 80007a2:	e7fb      	b.n	800079c <GearSelection+0x8>

080007a4 <DataInput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DataInput */
void DataInput(void *argument)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DataInput */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f001 fe83 	bl	80024b8 <osDelay>
 80007b2:	e7fb      	b.n	80007ac <DataInput+0x8>

080007b4 <DisplayInput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DisplayInput */
void DisplayInput(void *argument)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DisplayInput */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007bc:	2001      	movs	r0, #1
 80007be:	f001 fe7b 	bl	80024b8 <osDelay>
 80007c2:	e7fb      	b.n	80007bc <DisplayInput+0x8>

080007c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007d4:	d101      	bne.n	80007da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007d6:	f000 f95b 	bl	8000a90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e6:	b672      	cpsid	i
}
 80007e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ea:	e7fe      	b.n	80007ea <Error_Handler+0x8>

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <HAL_MspInit+0x68>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	4a17      	ldr	r2, [pc, #92]	; (8000854 <HAL_MspInit+0x68>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6193      	str	r3, [r2, #24]
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_MspInit+0x68>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_MspInit+0x68>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	4a11      	ldr	r2, [pc, #68]	; (8000854 <HAL_MspInit+0x68>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	61d3      	str	r3, [r2, #28]
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_MspInit+0x68>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	210f      	movs	r1, #15
 8000826:	f06f 0001 	mvn.w	r0, #1
 800082a:	f000 fc38 	bl	800109e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_MspInit+0x6c>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <HAL_MspInit+0x6c>)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000
 8000858:	40010000 	.word	0x40010000

0800085c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <HAL_ADC_MspInit+0x6c>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d121      	bne.n	80008c0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <HAL_ADC_MspInit+0x70>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a12      	ldr	r2, [pc, #72]	; (80008cc <HAL_ADC_MspInit+0x70>)
 8000882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b10      	ldr	r3, [pc, #64]	; (80008cc <HAL_ADC_MspInit+0x70>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000894:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <HAL_ADC_MspInit+0x70>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a0c      	ldr	r2, [pc, #48]	; (80008cc <HAL_ADC_MspInit+0x70>)
 800089a:	f043 0304 	orr.w	r3, r3, #4
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <HAL_ADC_MspInit+0x70>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f003 0304 	and.w	r3, r3, #4
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008ac:	2304      	movs	r3, #4
 80008ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b0:	2303      	movs	r3, #3
 80008b2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	4619      	mov	r1, r3
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <HAL_ADC_MspInit+0x74>)
 80008bc:	f000 fc1a 	bl	80010f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008c0:	bf00      	nop
 80008c2:	3720      	adds	r7, #32
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40012400 	.word	0x40012400
 80008cc:	40021000 	.word	0x40021000
 80008d0:	40010800 	.word	0x40010800

080008d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08e      	sub	sp, #56	; 0x38
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008e4:	2300      	movs	r3, #0
 80008e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80008ea:	4b34      	ldr	r3, [pc, #208]	; (80009bc <HAL_InitTick+0xe8>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	4a33      	ldr	r2, [pc, #204]	; (80009bc <HAL_InitTick+0xe8>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	61d3      	str	r3, [r2, #28]
 80008f6:	4b31      	ldr	r3, [pc, #196]	; (80009bc <HAL_InitTick+0xe8>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000902:	f107 0210 	add.w	r2, r7, #16
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4611      	mov	r1, r2
 800090c:	4618      	mov	r0, r3
 800090e:	f001 f975 	bl	8001bfc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000912:	6a3b      	ldr	r3, [r7, #32]
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000918:	2b00      	cmp	r3, #0
 800091a:	d103      	bne.n	8000924 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800091c:	f001 f95a 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
 8000920:	6378      	str	r0, [r7, #52]	; 0x34
 8000922:	e004      	b.n	800092e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000924:	f001 f956 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
 8000928:	4603      	mov	r3, r0
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800092e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000930:	4a23      	ldr	r2, [pc, #140]	; (80009c0 <HAL_InitTick+0xec>)
 8000932:	fba2 2303 	umull	r2, r3, r2, r3
 8000936:	0c9b      	lsrs	r3, r3, #18
 8000938:	3b01      	subs	r3, #1
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800093c:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <HAL_InitTick+0xf0>)
 800093e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000942:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <HAL_InitTick+0xf0>)
 8000946:	f240 32e7 	movw	r2, #999	; 0x3e7
 800094a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800094c:	4a1d      	ldr	r2, [pc, #116]	; (80009c4 <HAL_InitTick+0xf0>)
 800094e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000950:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <HAL_InitTick+0xf0>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <HAL_InitTick+0xf0>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <HAL_InitTick+0xf0>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000964:	4817      	ldr	r0, [pc, #92]	; (80009c4 <HAL_InitTick+0xf0>)
 8000966:	f001 fa4d 	bl	8001e04 <HAL_TIM_Base_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000970:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000974:	2b00      	cmp	r3, #0
 8000976:	d11b      	bne.n	80009b0 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000978:	4812      	ldr	r0, [pc, #72]	; (80009c4 <HAL_InitTick+0xf0>)
 800097a:	f001 fa9b 	bl	8001eb4 <HAL_TIM_Base_Start_IT>
 800097e:	4603      	mov	r3, r0
 8000980:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000984:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000988:	2b00      	cmp	r3, #0
 800098a:	d111      	bne.n	80009b0 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800098c:	201c      	movs	r0, #28
 800098e:	f000 fba2 	bl	80010d6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b0f      	cmp	r3, #15
 8000996:	d808      	bhi.n	80009aa <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000998:	2200      	movs	r2, #0
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	201c      	movs	r0, #28
 800099e:	f000 fb7e 	bl	800109e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009a2:	4a09      	ldr	r2, [pc, #36]	; (80009c8 <HAL_InitTick+0xf4>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	e002      	b.n	80009b0 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3738      	adds	r7, #56	; 0x38
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40021000 	.word	0x40021000
 80009c0:	431bde83 	.word	0x431bde83
 80009c4:	20000080 	.word	0x20000080
 80009c8:	20000004 	.word	0x20000004

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler+0x4>

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <MemManage_Handler+0x4>

080009de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
	...

080009f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <TIM2_IRQHandler+0x10>)
 80009fe:	f001 faab 	bl	8001f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000080 	.word	0x20000080

08000a0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <Reset_Handler>:
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <LoopFillZerobss+0x12>)
 8000a1a:	490d      	ldr	r1, [pc, #52]	; (8000a50 <LoopFillZerobss+0x16>)
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <LoopFillZerobss+0x1a>)
 8000a1e:	2300      	movs	r3, #0
 8000a20:	e002      	b.n	8000a28 <LoopCopyDataInit>

08000a22 <CopyDataInit>:
 8000a22:	58d4      	ldr	r4, [r2, r3]
 8000a24:	50c4      	str	r4, [r0, r3]
 8000a26:	3304      	adds	r3, #4

08000a28 <LoopCopyDataInit>:
 8000a28:	18c4      	adds	r4, r0, r3
 8000a2a:	428c      	cmp	r4, r1
 8000a2c:	d3f9      	bcc.n	8000a22 <CopyDataInit>
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <LoopFillZerobss+0x1e>)
 8000a30:	4c0a      	ldr	r4, [pc, #40]	; (8000a5c <LoopFillZerobss+0x22>)
 8000a32:	2300      	movs	r3, #0
 8000a34:	e001      	b.n	8000a3a <LoopFillZerobss>

08000a36 <FillZerobss>:
 8000a36:	6013      	str	r3, [r2, #0]
 8000a38:	3204      	adds	r2, #4

08000a3a <LoopFillZerobss>:
 8000a3a:	42a2      	cmp	r2, r4
 8000a3c:	d3fb      	bcc.n	8000a36 <FillZerobss>
 8000a3e:	f7ff ffe5 	bl	8000a0c <SystemInit>
 8000a42:	f004 f9c3 	bl	8004dcc <__libc_init_array>
 8000a46:	f7ff fcb5 	bl	80003b4 <main>
 8000a4a:	4770      	bx	lr
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	20000010 	.word	0x20000010
 8000a54:	08005030 	.word	0x08005030
 8000a58:	20000010 	.word	0x20000010
 8000a5c:	20001e14 	.word	0x20001e14

08000a60 <ADC1_2_IRQHandler>:
 8000a60:	e7fe      	b.n	8000a60 <ADC1_2_IRQHandler>
	...

08000a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_Init+0x28>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <HAL_Init+0x28>)
 8000a6e:	f043 0310 	orr.w	r3, r3, #16
 8000a72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 fb07 	bl	8001088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7a:	200f      	movs	r0, #15
 8000a7c:	f7ff ff2a 	bl	80008d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a80:	f7ff feb4 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40022000 	.word	0x40022000

08000a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_IncTick+0x1c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a03      	ldr	r2, [pc, #12]	; (8000ab0 <HAL_IncTick+0x20>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	200000c8 	.word	0x200000c8

08000ab4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab8:	4b02      	ldr	r3, [pc, #8]	; (8000ac4 <HAL_GetTick+0x10>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	200000c8 	.word	0x200000c8

08000ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad0:	f7ff fff0 	bl	8000ab4 <HAL_GetTick>
 8000ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae0:	d005      	beq.n	8000aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_Delay+0x44>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4413      	add	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aee:	bf00      	nop
 8000af0:	f7ff ffe0 	bl	8000ab4 <HAL_GetTick>
 8000af4:	4602      	mov	r2, r0
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d8f7      	bhi.n	8000af0 <HAL_Delay+0x28>
  {
  }
}
 8000b00:	bf00      	nop
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000008 	.word	0x20000008

08000b10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d101      	bne.n	8000b32 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e0be      	b.n	8000cb0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d109      	bne.n	8000b54 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff fe84 	bl	800085c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f000 f9ab 	bl	8000eb0 <ADC_ConversionStop_Disable>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b62:	f003 0310 	and.w	r3, r3, #16
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8099 	bne.w	8000c9e <HAL_ADC_Init+0x18e>
 8000b6c:	7dfb      	ldrb	r3, [r7, #23]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f040 8095 	bne.w	8000c9e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b7c:	f023 0302 	bic.w	r3, r3, #2
 8000b80:	f043 0202 	orr.w	r2, r3, #2
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b90:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	7b1b      	ldrb	r3, [r3, #12]
 8000b96:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b98:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ba8:	d003      	beq.n	8000bb2 <HAL_ADC_Init+0xa2>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d102      	bne.n	8000bb8 <HAL_ADC_Init+0xa8>
 8000bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb6:	e000      	b.n	8000bba <HAL_ADC_Init+0xaa>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	7d1b      	ldrb	r3, [r3, #20]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d119      	bne.n	8000bfc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	7b1b      	ldrb	r3, [r3, #12]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d109      	bne.n	8000be4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	035a      	lsls	r2, r3, #13
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	e00b      	b.n	8000bfc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be8:	f043 0220 	orr.w	r2, r3, #32
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf4:	f043 0201 	orr.w	r2, r3, #1
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <HAL_ADC_Init+0x1a8>)
 8000c18:	4013      	ands	r3, r2
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	6812      	ldr	r2, [r2, #0]
 8000c1e:	68b9      	ldr	r1, [r7, #8]
 8000c20:	430b      	orrs	r3, r1
 8000c22:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c2c:	d003      	beq.n	8000c36 <HAL_ADC_Init+0x126>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d104      	bne.n	8000c40 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	691b      	ldr	r3, [r3, #16]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	051b      	lsls	r3, r3, #20
 8000c3e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c46:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	430a      	orrs	r2, r1
 8000c52:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	689a      	ldr	r2, [r3, #8]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_ADC_Init+0x1ac>)
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d10b      	bne.n	8000c7c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6e:	f023 0303 	bic.w	r3, r3, #3
 8000c72:	f043 0201 	orr.w	r2, r3, #1
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c7a:	e018      	b.n	8000cae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c80:	f023 0312 	bic.w	r3, r3, #18
 8000c84:	f043 0210 	orr.w	r2, r3, #16
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c90:	f043 0201 	orr.w	r2, r3, #1
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c9c:	e007      	b.n	8000cae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca2:	f043 0210 	orr.w	r2, r3, #16
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	ffe1f7fd 	.word	0xffe1f7fd
 8000cbc:	ff1f0efe 	.word	0xff1f0efe

08000cc0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d101      	bne.n	8000ce0 <HAL_ADC_ConfigChannel+0x20>
 8000cdc:	2302      	movs	r3, #2
 8000cde:	e0dc      	b.n	8000e9a <HAL_ADC_ConfigChannel+0x1da>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b06      	cmp	r3, #6
 8000cee:	d81c      	bhi.n	8000d2a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	3b05      	subs	r3, #5
 8000d02:	221f      	movs	r2, #31
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	4019      	ands	r1, r3
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	6818      	ldr	r0, [r3, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	4613      	mov	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	3b05      	subs	r3, #5
 8000d1c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	430a      	orrs	r2, r1
 8000d26:	635a      	str	r2, [r3, #52]	; 0x34
 8000d28:	e03c      	b.n	8000da4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2b0c      	cmp	r3, #12
 8000d30:	d81c      	bhi.n	8000d6c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685a      	ldr	r2, [r3, #4]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4413      	add	r3, r2
 8000d42:	3b23      	subs	r3, #35	; 0x23
 8000d44:	221f      	movs	r2, #31
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	4019      	ands	r1, r3
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	6818      	ldr	r0, [r3, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	4613      	mov	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4413      	add	r3, r2
 8000d5c:	3b23      	subs	r3, #35	; 0x23
 8000d5e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	430a      	orrs	r2, r1
 8000d68:	631a      	str	r2, [r3, #48]	; 0x30
 8000d6a:	e01b      	b.n	8000da4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	4613      	mov	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	4413      	add	r3, r2
 8000d7c:	3b41      	subs	r3, #65	; 0x41
 8000d7e:	221f      	movs	r2, #31
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	4019      	ands	r1, r3
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	6818      	ldr	r0, [r3, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	4613      	mov	r3, r2
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	3b41      	subs	r3, #65	; 0x41
 8000d98:	fa00 f203 	lsl.w	r2, r0, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	430a      	orrs	r2, r1
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b09      	cmp	r3, #9
 8000daa:	d91c      	bls.n	8000de6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	68d9      	ldr	r1, [r3, #12]
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	4613      	mov	r3, r2
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	4413      	add	r3, r2
 8000dbc:	3b1e      	subs	r3, #30
 8000dbe:	2207      	movs	r2, #7
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	4019      	ands	r1, r3
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	6898      	ldr	r0, [r3, #8]
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	3b1e      	subs	r3, #30
 8000dd8:	fa00 f203 	lsl.w	r2, r0, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	e019      	b.n	8000e1a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	6919      	ldr	r1, [r3, #16]
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4613      	mov	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4413      	add	r3, r2
 8000df6:	2207      	movs	r2, #7
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	4019      	ands	r1, r3
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	6898      	ldr	r0, [r3, #8]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	430a      	orrs	r2, r1
 8000e18:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b10      	cmp	r3, #16
 8000e20:	d003      	beq.n	8000e2a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e26:	2b11      	cmp	r3, #17
 8000e28:	d132      	bne.n	8000e90 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a1d      	ldr	r2, [pc, #116]	; (8000ea4 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d125      	bne.n	8000e80 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d126      	bne.n	8000e90 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e50:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b10      	cmp	r3, #16
 8000e58:	d11a      	bne.n	8000e90 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a13      	ldr	r2, [pc, #76]	; (8000eac <HAL_ADC_ConfigChannel+0x1ec>)
 8000e60:	fba2 2303 	umull	r2, r3, r2, r3
 8000e64:	0c9a      	lsrs	r2, r3, #18
 8000e66:	4613      	mov	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e70:	e002      	b.n	8000e78 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	3b01      	subs	r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1f9      	bne.n	8000e72 <HAL_ADC_ConfigChannel+0x1b2>
 8000e7e:	e007      	b.n	8000e90 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e84:	f043 0220 	orr.w	r2, r3, #32
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	40012400 	.word	0x40012400
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	431bde83 	.word	0x431bde83

08000eb0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d12e      	bne.n	8000f28 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 0201 	bic.w	r2, r2, #1
 8000ed8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000eda:	f7ff fdeb 	bl	8000ab4 <HAL_GetTick>
 8000ede:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ee0:	e01b      	b.n	8000f1a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ee2:	f7ff fde7 	bl	8000ab4 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d914      	bls.n	8000f1a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d10d      	bne.n	8000f1a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f02:	f043 0210 	orr.w	r2, r3, #16
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0e:	f043 0201 	orr.w	r2, r3, #1
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e007      	b.n	8000f2a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d0dc      	beq.n	8000ee2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	db0b      	blt.n	8000fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 021f 	and.w	r2, r3, #31
 8000fb0:	4906      	ldr	r1, [pc, #24]	; (8000fcc <__NVIC_EnableIRQ+0x34>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	095b      	lsrs	r3, r3, #5
 8000fb8:	2001      	movs	r0, #1
 8000fba:	fa00 f202 	lsl.w	r2, r0, r2
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff4f 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b0:	f7ff ff64 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 80010b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	6978      	ldr	r0, [r7, #20]
 80010bc:	f7ff ffb2 	bl	8001024 <NVIC_EncodePriority>
 80010c0:	4602      	mov	r2, r0
 80010c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff81 	bl	8000fd0 <__NVIC_SetPriority>
}
 80010ce:	bf00      	nop
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff57 	bl	8000f98 <__NVIC_EnableIRQ>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b08b      	sub	sp, #44	; 0x2c
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001106:	e169      	b.n	80013dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001108:	2201      	movs	r2, #1
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	429a      	cmp	r2, r3
 8001122:	f040 8158 	bne.w	80013d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	4a9a      	ldr	r2, [pc, #616]	; (8001394 <HAL_GPIO_Init+0x2a0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d05e      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
 8001130:	4a98      	ldr	r2, [pc, #608]	; (8001394 <HAL_GPIO_Init+0x2a0>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d875      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 8001136:	4a98      	ldr	r2, [pc, #608]	; (8001398 <HAL_GPIO_Init+0x2a4>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d058      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
 800113c:	4a96      	ldr	r2, [pc, #600]	; (8001398 <HAL_GPIO_Init+0x2a4>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d86f      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 8001142:	4a96      	ldr	r2, [pc, #600]	; (800139c <HAL_GPIO_Init+0x2a8>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d052      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
 8001148:	4a94      	ldr	r2, [pc, #592]	; (800139c <HAL_GPIO_Init+0x2a8>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d869      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 800114e:	4a94      	ldr	r2, [pc, #592]	; (80013a0 <HAL_GPIO_Init+0x2ac>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d04c      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
 8001154:	4a92      	ldr	r2, [pc, #584]	; (80013a0 <HAL_GPIO_Init+0x2ac>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d863      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 800115a:	4a92      	ldr	r2, [pc, #584]	; (80013a4 <HAL_GPIO_Init+0x2b0>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d046      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
 8001160:	4a90      	ldr	r2, [pc, #576]	; (80013a4 <HAL_GPIO_Init+0x2b0>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d85d      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 8001166:	2b12      	cmp	r3, #18
 8001168:	d82a      	bhi.n	80011c0 <HAL_GPIO_Init+0xcc>
 800116a:	2b12      	cmp	r3, #18
 800116c:	d859      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 800116e:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <HAL_GPIO_Init+0x80>)
 8001170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001174:	080011ef 	.word	0x080011ef
 8001178:	080011c9 	.word	0x080011c9
 800117c:	080011db 	.word	0x080011db
 8001180:	0800121d 	.word	0x0800121d
 8001184:	08001223 	.word	0x08001223
 8001188:	08001223 	.word	0x08001223
 800118c:	08001223 	.word	0x08001223
 8001190:	08001223 	.word	0x08001223
 8001194:	08001223 	.word	0x08001223
 8001198:	08001223 	.word	0x08001223
 800119c:	08001223 	.word	0x08001223
 80011a0:	08001223 	.word	0x08001223
 80011a4:	08001223 	.word	0x08001223
 80011a8:	08001223 	.word	0x08001223
 80011ac:	08001223 	.word	0x08001223
 80011b0:	08001223 	.word	0x08001223
 80011b4:	08001223 	.word	0x08001223
 80011b8:	080011d1 	.word	0x080011d1
 80011bc:	080011e5 	.word	0x080011e5
 80011c0:	4a79      	ldr	r2, [pc, #484]	; (80013a8 <HAL_GPIO_Init+0x2b4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d013      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011c6:	e02c      	b.n	8001222 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	623b      	str	r3, [r7, #32]
          break;
 80011ce:	e029      	b.n	8001224 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	3304      	adds	r3, #4
 80011d6:	623b      	str	r3, [r7, #32]
          break;
 80011d8:	e024      	b.n	8001224 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	3308      	adds	r3, #8
 80011e0:	623b      	str	r3, [r7, #32]
          break;
 80011e2:	e01f      	b.n	8001224 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	330c      	adds	r3, #12
 80011ea:	623b      	str	r3, [r7, #32]
          break;
 80011ec:	e01a      	b.n	8001224 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011f6:	2304      	movs	r3, #4
 80011f8:	623b      	str	r3, [r7, #32]
          break;
 80011fa:	e013      	b.n	8001224 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d105      	bne.n	8001210 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001204:	2308      	movs	r3, #8
 8001206:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69fa      	ldr	r2, [r7, #28]
 800120c:	611a      	str	r2, [r3, #16]
          break;
 800120e:	e009      	b.n	8001224 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001210:	2308      	movs	r3, #8
 8001212:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69fa      	ldr	r2, [r7, #28]
 8001218:	615a      	str	r2, [r3, #20]
          break;
 800121a:	e003      	b.n	8001224 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
          break;
 8001220:	e000      	b.n	8001224 <HAL_GPIO_Init+0x130>
          break;
 8001222:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2bff      	cmp	r3, #255	; 0xff
 8001228:	d801      	bhi.n	800122e <HAL_GPIO_Init+0x13a>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	e001      	b.n	8001232 <HAL_GPIO_Init+0x13e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3304      	adds	r3, #4
 8001232:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	2bff      	cmp	r3, #255	; 0xff
 8001238:	d802      	bhi.n	8001240 <HAL_GPIO_Init+0x14c>
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	e002      	b.n	8001246 <HAL_GPIO_Init+0x152>
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	3b08      	subs	r3, #8
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	210f      	movs	r1, #15
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	fa01 f303 	lsl.w	r3, r1, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	401a      	ands	r2, r3
 8001258:	6a39      	ldr	r1, [r7, #32]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	fa01 f303 	lsl.w	r3, r1, r3
 8001260:	431a      	orrs	r2, r3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 80b1 	beq.w	80013d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001274:	4b4d      	ldr	r3, [pc, #308]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a4c      	ldr	r2, [pc, #304]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b4a      	ldr	r3, [pc, #296]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800128c:	4a48      	ldr	r2, [pc, #288]	; (80013b0 <HAL_GPIO_Init+0x2bc>)
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3302      	adds	r3, #2
 8001294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001298:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	4013      	ands	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a40      	ldr	r2, [pc, #256]	; (80013b4 <HAL_GPIO_Init+0x2c0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d013      	beq.n	80012e0 <HAL_GPIO_Init+0x1ec>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a3f      	ldr	r2, [pc, #252]	; (80013b8 <HAL_GPIO_Init+0x2c4>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d00d      	beq.n	80012dc <HAL_GPIO_Init+0x1e8>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a3e      	ldr	r2, [pc, #248]	; (80013bc <HAL_GPIO_Init+0x2c8>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d007      	beq.n	80012d8 <HAL_GPIO_Init+0x1e4>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a3d      	ldr	r2, [pc, #244]	; (80013c0 <HAL_GPIO_Init+0x2cc>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d101      	bne.n	80012d4 <HAL_GPIO_Init+0x1e0>
 80012d0:	2303      	movs	r3, #3
 80012d2:	e006      	b.n	80012e2 <HAL_GPIO_Init+0x1ee>
 80012d4:	2304      	movs	r3, #4
 80012d6:	e004      	b.n	80012e2 <HAL_GPIO_Init+0x1ee>
 80012d8:	2302      	movs	r3, #2
 80012da:	e002      	b.n	80012e2 <HAL_GPIO_Init+0x1ee>
 80012dc:	2301      	movs	r3, #1
 80012de:	e000      	b.n	80012e2 <HAL_GPIO_Init+0x1ee>
 80012e0:	2300      	movs	r3, #0
 80012e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e4:	f002 0203 	and.w	r2, r2, #3
 80012e8:	0092      	lsls	r2, r2, #2
 80012ea:	4093      	lsls	r3, r2
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012f2:	492f      	ldr	r1, [pc, #188]	; (80013b0 <HAL_GPIO_Init+0x2bc>)
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	3302      	adds	r3, #2
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d006      	beq.n	800131a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800130c:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	492c      	ldr	r1, [pc, #176]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	600b      	str	r3, [r1, #0]
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800131a:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	43db      	mvns	r3, r3
 8001322:	4928      	ldr	r1, [pc, #160]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001324:	4013      	ands	r3, r2
 8001326:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d006      	beq.n	8001342 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001334:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	4922      	ldr	r1, [pc, #136]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	43db      	mvns	r3, r3
 800134a:	491e      	ldr	r1, [pc, #120]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 800134c:	4013      	ands	r3, r2
 800134e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d006      	beq.n	800136a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800135c:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	4918      	ldr	r1, [pc, #96]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	608b      	str	r3, [r1, #8]
 8001368:	e006      	b.n	8001378 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800136a:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	43db      	mvns	r3, r3
 8001372:	4914      	ldr	r1, [pc, #80]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001374:	4013      	ands	r3, r2
 8001376:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d021      	beq.n	80013c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	490e      	ldr	r1, [pc, #56]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	60cb      	str	r3, [r1, #12]
 8001390:	e021      	b.n	80013d6 <HAL_GPIO_Init+0x2e2>
 8001392:	bf00      	nop
 8001394:	10320000 	.word	0x10320000
 8001398:	10310000 	.word	0x10310000
 800139c:	10220000 	.word	0x10220000
 80013a0:	10210000 	.word	0x10210000
 80013a4:	10120000 	.word	0x10120000
 80013a8:	10110000 	.word	0x10110000
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40010000 	.word	0x40010000
 80013b4:	40010800 	.word	0x40010800
 80013b8:	40010c00 	.word	0x40010c00
 80013bc:	40011000 	.word	0x40011000
 80013c0:	40011400 	.word	0x40011400
 80013c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_GPIO_Init+0x304>)
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	4909      	ldr	r1, [pc, #36]	; (80013f8 <HAL_GPIO_Init+0x304>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	3301      	adds	r3, #1
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	fa22 f303 	lsr.w	r3, r2, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f47f ae8e 	bne.w	8001108 <HAL_GPIO_Init+0x14>
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	372c      	adds	r7, #44	; 0x2c
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	40010400 	.word	0x40010400

080013fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	807b      	strh	r3, [r7, #2]
 8001408:	4613      	mov	r3, r2
 800140a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800140c:	787b      	ldrb	r3, [r7, #1]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001412:	887a      	ldrh	r2, [r7, #2]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001418:	e003      	b.n	8001422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800141a:	887b      	ldrh	r3, [r7, #2]
 800141c:	041a      	lsls	r2, r3, #16
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	611a      	str	r2, [r3, #16]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e272      	b.n	8001924 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 8087 	beq.w	800155a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800144c:	4b92      	ldr	r3, [pc, #584]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 030c 	and.w	r3, r3, #12
 8001454:	2b04      	cmp	r3, #4
 8001456:	d00c      	beq.n	8001472 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001458:	4b8f      	ldr	r3, [pc, #572]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 030c 	and.w	r3, r3, #12
 8001460:	2b08      	cmp	r3, #8
 8001462:	d112      	bne.n	800148a <HAL_RCC_OscConfig+0x5e>
 8001464:	4b8c      	ldr	r3, [pc, #560]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001470:	d10b      	bne.n	800148a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001472:	4b89      	ldr	r3, [pc, #548]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d06c      	beq.n	8001558 <HAL_RCC_OscConfig+0x12c>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d168      	bne.n	8001558 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e24c      	b.n	8001924 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001492:	d106      	bne.n	80014a2 <HAL_RCC_OscConfig+0x76>
 8001494:	4b80      	ldr	r3, [pc, #512]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a7f      	ldr	r2, [pc, #508]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 800149a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	e02e      	b.n	8001500 <HAL_RCC_OscConfig+0xd4>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x98>
 80014aa:	4b7b      	ldr	r3, [pc, #492]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a7a      	ldr	r2, [pc, #488]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	4b78      	ldr	r3, [pc, #480]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a77      	ldr	r2, [pc, #476]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e01d      	b.n	8001500 <HAL_RCC_OscConfig+0xd4>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0xbc>
 80014ce:	4b72      	ldr	r3, [pc, #456]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a71      	ldr	r2, [pc, #452]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4b6f      	ldr	r3, [pc, #444]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a6e      	ldr	r2, [pc, #440]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e00b      	b.n	8001500 <HAL_RCC_OscConfig+0xd4>
 80014e8:	4b6b      	ldr	r3, [pc, #428]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a6a      	ldr	r2, [pc, #424]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b68      	ldr	r3, [pc, #416]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a67      	ldr	r2, [pc, #412]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d013      	beq.n	8001530 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fad4 	bl	8000ab4 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fad0 	bl	8000ab4 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	; 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e200      	b.n	8001924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0xe4>
 800152e:	e014      	b.n	800155a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fac0 	bl	8000ab4 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fabc 	bl	8000ab4 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	; 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e1ec      	b.n	8001924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154a:	4b53      	ldr	r3, [pc, #332]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x10c>
 8001556:	e000      	b.n	800155a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d063      	beq.n	800162e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001566:	4b4c      	ldr	r3, [pc, #304]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 030c 	and.w	r3, r3, #12
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00b      	beq.n	800158a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001572:	4b49      	ldr	r3, [pc, #292]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b08      	cmp	r3, #8
 800157c:	d11c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x18c>
 800157e:	4b46      	ldr	r3, [pc, #280]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d116      	bne.n	80015b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158a:	4b43      	ldr	r3, [pc, #268]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d005      	beq.n	80015a2 <HAL_RCC_OscConfig+0x176>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d001      	beq.n	80015a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e1c0      	b.n	8001924 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a2:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4939      	ldr	r1, [pc, #228]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b6:	e03a      	b.n	800162e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d020      	beq.n	8001602 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c0:	4b36      	ldr	r3, [pc, #216]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff fa75 	bl	8000ab4 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ce:	f7ff fa71 	bl	8000ab4 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e1a1      	b.n	8001924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ec:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4927      	ldr	r1, [pc, #156]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	600b      	str	r3, [r1, #0]
 8001600:	e015      	b.n	800162e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001602:	4b26      	ldr	r3, [pc, #152]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff fa54 	bl	8000ab4 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001610:	f7ff fa50 	bl	8000ab4 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e180      	b.n	8001924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d03a      	beq.n	80016b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d019      	beq.n	8001676 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <HAL_RCC_OscConfig+0x274>)
 8001644:	2201      	movs	r2, #1
 8001646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001648:	f7ff fa34 	bl	8000ab4 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001650:	f7ff fa30 	bl	8000ab4 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e160      	b.n	8001924 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f0      	beq.n	8001650 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800166e:	2001      	movs	r0, #1
 8001670:	f000 faf4 	bl	8001c5c <RCC_Delay>
 8001674:	e01c      	b.n	80016b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_RCC_OscConfig+0x274>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167c:	f7ff fa1a 	bl	8000ab4 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001682:	e00f      	b.n	80016a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001684:	f7ff fa16 	bl	8000ab4 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d908      	bls.n	80016a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e146      	b.n	8001924 <HAL_RCC_OscConfig+0x4f8>
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	42420000 	.word	0x42420000
 80016a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a4:	4b92      	ldr	r3, [pc, #584]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1e9      	bne.n	8001684 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 80a6 	beq.w	800180a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c2:	4b8b      	ldr	r3, [pc, #556]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10d      	bne.n	80016ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	4b88      	ldr	r3, [pc, #544]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4a87      	ldr	r2, [pc, #540]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	61d3      	str	r3, [r2, #28]
 80016da:	4b85      	ldr	r3, [pc, #532]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016e6:	2301      	movs	r3, #1
 80016e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ea:	4b82      	ldr	r3, [pc, #520]	; (80018f4 <HAL_RCC_OscConfig+0x4c8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d118      	bne.n	8001728 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f6:	4b7f      	ldr	r3, [pc, #508]	; (80018f4 <HAL_RCC_OscConfig+0x4c8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a7e      	ldr	r2, [pc, #504]	; (80018f4 <HAL_RCC_OscConfig+0x4c8>)
 80016fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001702:	f7ff f9d7 	bl	8000ab4 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800170a:	f7ff f9d3 	bl	8000ab4 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b64      	cmp	r3, #100	; 0x64
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e103      	b.n	8001924 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171c:	4b75      	ldr	r3, [pc, #468]	; (80018f4 <HAL_RCC_OscConfig+0x4c8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d106      	bne.n	800173e <HAL_RCC_OscConfig+0x312>
 8001730:	4b6f      	ldr	r3, [pc, #444]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	4a6e      	ldr	r2, [pc, #440]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6213      	str	r3, [r2, #32]
 800173c:	e02d      	b.n	800179a <HAL_RCC_OscConfig+0x36e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0x334>
 8001746:	4b6a      	ldr	r3, [pc, #424]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	4a69      	ldr	r2, [pc, #420]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 800174c:	f023 0301 	bic.w	r3, r3, #1
 8001750:	6213      	str	r3, [r2, #32]
 8001752:	4b67      	ldr	r3, [pc, #412]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	4a66      	ldr	r2, [pc, #408]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	f023 0304 	bic.w	r3, r3, #4
 800175c:	6213      	str	r3, [r2, #32]
 800175e:	e01c      	b.n	800179a <HAL_RCC_OscConfig+0x36e>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2b05      	cmp	r3, #5
 8001766:	d10c      	bne.n	8001782 <HAL_RCC_OscConfig+0x356>
 8001768:	4b61      	ldr	r3, [pc, #388]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	4a60      	ldr	r2, [pc, #384]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	6213      	str	r3, [r2, #32]
 8001774:	4b5e      	ldr	r3, [pc, #376]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	4a5d      	ldr	r2, [pc, #372]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6213      	str	r3, [r2, #32]
 8001780:	e00b      	b.n	800179a <HAL_RCC_OscConfig+0x36e>
 8001782:	4b5b      	ldr	r3, [pc, #364]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	4a5a      	ldr	r2, [pc, #360]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	6213      	str	r3, [r2, #32]
 800178e:	4b58      	ldr	r3, [pc, #352]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4a57      	ldr	r2, [pc, #348]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 8001794:	f023 0304 	bic.w	r3, r3, #4
 8001798:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d015      	beq.n	80017ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a2:	f7ff f987 	bl	8000ab4 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a8:	e00a      	b.n	80017c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017aa:	f7ff f983 	bl	8000ab4 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e0b1      	b.n	8001924 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c0:	4b4b      	ldr	r3, [pc, #300]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0ee      	beq.n	80017aa <HAL_RCC_OscConfig+0x37e>
 80017cc:	e014      	b.n	80017f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ce:	f7ff f971 	bl	8000ab4 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d4:	e00a      	b.n	80017ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d6:	f7ff f96d 	bl	8000ab4 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e09b      	b.n	8001924 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ec:	4b40      	ldr	r3, [pc, #256]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1ee      	bne.n	80017d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d105      	bne.n	800180a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017fe:	4b3c      	ldr	r3, [pc, #240]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	4a3b      	ldr	r2, [pc, #236]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001808:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 8087 	beq.w	8001922 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001814:	4b36      	ldr	r3, [pc, #216]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	2b08      	cmp	r3, #8
 800181e:	d061      	beq.n	80018e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d146      	bne.n	80018b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001828:	4b33      	ldr	r3, [pc, #204]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff f941 	bl	8000ab4 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001836:	f7ff f93d 	bl	8000ab4 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e06d      	b.n	8001924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001848:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f0      	bne.n	8001836 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185c:	d108      	bne.n	8001870 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800185e:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	4921      	ldr	r1, [pc, #132]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	4313      	orrs	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001870:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a19      	ldr	r1, [r3, #32]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	430b      	orrs	r3, r1
 8001882:	491b      	ldr	r1, [pc, #108]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188e:	f7ff f911 	bl	8000ab4 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001896:	f7ff f90d 	bl	8000ab4 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e03d      	b.n	8001924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x46a>
 80018b4:	e035      	b.n	8001922 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_RCC_OscConfig+0x4cc>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018bc:	f7ff f8fa 	bl	8000ab4 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff f8f6 	bl	8000ab4 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e026      	b.n	8001924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x498>
 80018e2:	e01e      	b.n	8001922 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d107      	bne.n	80018fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e019      	b.n	8001924 <HAL_RCC_OscConfig+0x4f8>
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40007000 	.word	0x40007000
 80018f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_RCC_OscConfig+0x500>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	429a      	cmp	r2, r3
 800190e:	d106      	bne.n	800191e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191a:	429a      	cmp	r2, r3
 800191c:	d001      	beq.n	8001922 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40021000 	.word	0x40021000

08001930 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0d0      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001944:	4b6a      	ldr	r3, [pc, #424]	; (8001af0 <HAL_RCC_ClockConfig+0x1c0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d910      	bls.n	8001974 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b67      	ldr	r3, [pc, #412]	; (8001af0 <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 0207 	bic.w	r2, r3, #7
 800195a:	4965      	ldr	r1, [pc, #404]	; (8001af0 <HAL_RCC_ClockConfig+0x1c0>)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b63      	ldr	r3, [pc, #396]	; (8001af0 <HAL_RCC_ClockConfig+0x1c0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0b8      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d020      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800198c:	4b59      	ldr	r3, [pc, #356]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4a58      	ldr	r2, [pc, #352]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001996:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a4:	4b53      	ldr	r3, [pc, #332]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	4a52      	ldr	r2, [pc, #328]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 80019aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b0:	4b50      	ldr	r3, [pc, #320]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	494d      	ldr	r1, [pc, #308]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d040      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d6:	4b47      	ldr	r3, [pc, #284]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d115      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e07f      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d107      	bne.n	80019fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ee:	4b41      	ldr	r3, [pc, #260]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d109      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e073      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fe:	4b3d      	ldr	r3, [pc, #244]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e06b      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a0e:	4b39      	ldr	r3, [pc, #228]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f023 0203 	bic.w	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4936      	ldr	r1, [pc, #216]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a20:	f7ff f848 	bl	8000ab4 <HAL_GetTick>
 8001a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	e00a      	b.n	8001a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a28:	f7ff f844 	bl	8000ab4 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e053      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3e:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 020c 	and.w	r2, r3, #12
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d1eb      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a50:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d210      	bcs.n	8001a80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f023 0207 	bic.w	r2, r3, #7
 8001a66:	4922      	ldr	r1, [pc, #136]	; (8001af0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6e:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e032      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d008      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a8c:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	4916      	ldr	r1, [pc, #88]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d009      	beq.n	8001abe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	490e      	ldr	r1, [pc, #56]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001abe:	f000 f821 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	490a      	ldr	r1, [pc, #40]	; (8001af8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad0:	5ccb      	ldrb	r3, [r1, r3]
 8001ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad6:	4a09      	ldr	r2, [pc, #36]	; (8001afc <HAL_RCC_ClockConfig+0x1cc>)
 8001ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_RCC_ClockConfig+0x1d0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fef8 	bl	80008d4 <HAL_InitTick>

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40022000 	.word	0x40022000
 8001af4:	40021000 	.word	0x40021000
 8001af8:	08005010 	.word	0x08005010
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000004 	.word	0x20000004

08001b04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b04:	b490      	push	{r4, r7}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b0a:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001b0c:	1d3c      	adds	r4, r7, #4
 8001b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b14:	f240 2301 	movw	r3, #513	; 0x201
 8001b18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
 8001b22:	2300      	movs	r3, #0
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b2e:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 030c 	and.w	r3, r3, #12
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d002      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0x40>
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d003      	beq.n	8001b4a <HAL_RCC_GetSysClockFreq+0x46>
 8001b42:	e02b      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b44:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b46:	623b      	str	r3, [r7, #32]
      break;
 8001b48:	e02b      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	0c9b      	lsrs	r3, r3, #18
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	3328      	adds	r3, #40	; 0x28
 8001b54:	443b      	add	r3, r7
 8001b56:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b5a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d012      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	0c5b      	lsrs	r3, r3, #17
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	3328      	adds	r3, #40	; 0x28
 8001b72:	443b      	add	r3, r7
 8001b74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b7e:	fb03 f202 	mul.w	r2, r3, r2
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8a:	e004      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b90:	fb02 f303 	mul.w	r3, r2, r3
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	623b      	str	r3, [r7, #32]
      break;
 8001b9a:	e002      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b9e:	623b      	str	r3, [r7, #32]
      break;
 8001ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3728      	adds	r7, #40	; 0x28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc90      	pop	{r4, r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	08004ed0 	.word	0x08004ed0
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	007a1200 	.word	0x007a1200
 8001bbc:	003d0900 	.word	0x003d0900

08001bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc4:	4b02      	ldr	r3, [pc, #8]	; (8001bd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	20000000 	.word	0x20000000

08001bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bd8:	f7ff fff2 	bl	8001bc0 <HAL_RCC_GetHCLKFreq>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	0a1b      	lsrs	r3, r3, #8
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	4903      	ldr	r1, [pc, #12]	; (8001bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bea:	5ccb      	ldrb	r3, [r1, r3]
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	08005020 	.word	0x08005020

08001bfc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	220f      	movs	r2, #15
 8001c0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <HAL_RCC_GetClockConfig+0x58>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0203 	and.w	r2, r3, #3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c18:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <HAL_RCC_GetClockConfig+0x58>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_RCC_GetClockConfig+0x58>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_RCC_GetClockConfig+0x58>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	08db      	lsrs	r3, r3, #3
 8001c36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_RCC_GetClockConfig+0x5c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0207 	and.w	r2, r3, #7
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40022000 	.word	0x40022000

08001c5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <RCC_Delay+0x34>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <RCC_Delay+0x38>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	0a5b      	lsrs	r3, r3, #9
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	fb02 f303 	mul.w	r3, r2, r3
 8001c76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c78:	bf00      	nop
  }
  while (Delay --);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	1e5a      	subs	r2, r3, #1
 8001c7e:	60fa      	str	r2, [r7, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f9      	bne.n	8001c78 <RCC_Delay+0x1c>
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	20000000 	.word	0x20000000
 8001c94:	10624dd3 	.word	0x10624dd3

08001c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d07d      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb8:	4b4f      	ldr	r3, [pc, #316]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10d      	bne.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc4:	4b4c      	ldr	r3, [pc, #304]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	4a4b      	ldr	r2, [pc, #300]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cce:	61d3      	str	r3, [r2, #28]
 8001cd0:	4b49      	ldr	r3, [pc, #292]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce0:	4b46      	ldr	r3, [pc, #280]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d118      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cec:	4b43      	ldr	r3, [pc, #268]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a42      	ldr	r2, [pc, #264]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf8:	f7fe fedc 	bl	8000ab4 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfe:	e008      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d00:	f7fe fed8 	bl	8000ab4 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e06d      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d12:	4b3a      	ldr	r3, [pc, #232]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d1e:	4b36      	ldr	r3, [pc, #216]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d26:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d02e      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d027      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d3c:	4b2e      	ldr	r3, [pc, #184]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d44:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d46:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d4c:	4b2c      	ldr	r3, [pc, #176]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d52:	4a29      	ldr	r2, [pc, #164]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d014      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d62:	f7fe fea7 	bl	8000ab4 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d68:	e00a      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f7fe fea3 	bl	8000ab4 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e036      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d80:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0ee      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	4917      	ldr	r1, [pc, #92]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d9e:	7dfb      	ldrb	r3, [r7, #23]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d105      	bne.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	4a13      	ldr	r2, [pc, #76]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	490b      	ldr	r1, [pc, #44]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d008      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	4904      	ldr	r1, [pc, #16]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40007000 	.word	0x40007000
 8001e00:	42420440 	.word	0x42420440

08001e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e041      	b.n	8001e9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d106      	bne.n	8001e30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f839 	bl	8001ea2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3304      	adds	r3, #4
 8001e40:	4619      	mov	r1, r3
 8001e42:	4610      	mov	r0, r2
 8001e44:	f000 f9b4 	bl	80021b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d001      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e03a      	b.n	8001f42 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0201 	orr.w	r2, r2, #1
 8001ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a18      	ldr	r2, [pc, #96]	; (8001f4c <HAL_TIM_Base_Start_IT+0x98>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00e      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0x58>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef6:	d009      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0x58>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a14      	ldr	r2, [pc, #80]	; (8001f50 <HAL_TIM_Base_Start_IT+0x9c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d004      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0x58>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a13      	ldr	r2, [pc, #76]	; (8001f54 <HAL_TIM_Base_Start_IT+0xa0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d111      	bne.n	8001f30 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b06      	cmp	r3, #6
 8001f1c:	d010      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 0201 	orr.w	r2, r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f2e:	e007      	b.n	8001f40 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	40012c00 	.word	0x40012c00
 8001f50:	40000400 	.word	0x40000400
 8001f54:	40000800 	.word	0x40000800

08001f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d122      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d11b      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0202 	mvn.w	r2, #2
 8001f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f8ed 	bl	800217a <HAL_TIM_IC_CaptureCallback>
 8001fa0:	e005      	b.n	8001fae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8e0 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f8ef 	bl	800218c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d122      	bne.n	8002008 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d11b      	bne.n	8002008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0204 	mvn.w	r2, #4
 8001fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f8c3 	bl	800217a <HAL_TIM_IC_CaptureCallback>
 8001ff4:	e005      	b.n	8002002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f8b6 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f8c5 	bl	800218c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b08      	cmp	r3, #8
 8002014:	d122      	bne.n	800205c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b08      	cmp	r3, #8
 8002022:	d11b      	bne.n	800205c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0208 	mvn.w	r2, #8
 800202c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2204      	movs	r2, #4
 8002032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f899 	bl	800217a <HAL_TIM_IC_CaptureCallback>
 8002048:	e005      	b.n	8002056 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f88c 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f89b 	bl	800218c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b10      	cmp	r3, #16
 8002068:	d122      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2b10      	cmp	r3, #16
 8002076:	d11b      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0210 	mvn.w	r2, #16
 8002080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2208      	movs	r2, #8
 8002086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f86f 	bl	800217a <HAL_TIM_IC_CaptureCallback>
 800209c:	e005      	b.n	80020aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f862 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f871 	bl	800218c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d10e      	bne.n	80020dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d107      	bne.n	80020dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0201 	mvn.w	r2, #1
 80020d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7fe fb74 	bl	80007c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e6:	2b80      	cmp	r3, #128	; 0x80
 80020e8:	d10e      	bne.n	8002108 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f4:	2b80      	cmp	r3, #128	; 0x80
 80020f6:	d107      	bne.n	8002108 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f8bf 	bl	8002286 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002112:	2b40      	cmp	r3, #64	; 0x40
 8002114:	d10e      	bne.n	8002134 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002120:	2b40      	cmp	r3, #64	; 0x40
 8002122:	d107      	bne.n	8002134 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800212c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f835 	bl	800219e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0320 	and.w	r3, r3, #32
 800213e:	2b20      	cmp	r3, #32
 8002140:	d10e      	bne.n	8002160 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0320 	and.w	r3, r3, #32
 800214c:	2b20      	cmp	r3, #32
 800214e:	d107      	bne.n	8002160 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0220 	mvn.w	r2, #32
 8002158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f88a 	bl	8002274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr

0800217a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a29      	ldr	r2, [pc, #164]	; (8002268 <TIM_Base_SetConfig+0xb8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d00b      	beq.n	80021e0 <TIM_Base_SetConfig+0x30>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ce:	d007      	beq.n	80021e0 <TIM_Base_SetConfig+0x30>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a26      	ldr	r2, [pc, #152]	; (800226c <TIM_Base_SetConfig+0xbc>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d003      	beq.n	80021e0 <TIM_Base_SetConfig+0x30>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a25      	ldr	r2, [pc, #148]	; (8002270 <TIM_Base_SetConfig+0xc0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d108      	bne.n	80021f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a1c      	ldr	r2, [pc, #112]	; (8002268 <TIM_Base_SetConfig+0xb8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00b      	beq.n	8002212 <TIM_Base_SetConfig+0x62>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002200:	d007      	beq.n	8002212 <TIM_Base_SetConfig+0x62>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a19      	ldr	r2, [pc, #100]	; (800226c <TIM_Base_SetConfig+0xbc>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d003      	beq.n	8002212 <TIM_Base_SetConfig+0x62>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a18      	ldr	r2, [pc, #96]	; (8002270 <TIM_Base_SetConfig+0xc0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d108      	bne.n	8002224 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4313      	orrs	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	4313      	orrs	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a07      	ldr	r2, [pc, #28]	; (8002268 <TIM_Base_SetConfig+0xb8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d103      	bne.n	8002258 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	615a      	str	r2, [r3, #20]
}
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	40012c00 	.word	0x40012c00
 800226c:	40000400 	.word	0x40000400
 8002270:	40000800 	.word	0x40000800

08002274 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr

08002286 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr

08002298 <osKernelInitialize>:
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	f3ef 8305 	mrs	r3, IPSR
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10f      	bne.n	80022ca <osKernelInitialize+0x32>
 80022aa:	f3ef 8310 	mrs	r3, PRIMASK
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <osKernelInitialize+0x32>
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <osKernelInitialize+0x60>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d109      	bne.n	80022d2 <osKernelInitialize+0x3a>
 80022be:	f3ef 8311 	mrs	r3, BASEPRI
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <osKernelInitialize+0x3a>
 80022ca:	f06f 0305 	mvn.w	r3, #5
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	e00c      	b.n	80022ec <osKernelInitialize+0x54>
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <osKernelInitialize+0x60>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d105      	bne.n	80022e6 <osKernelInitialize+0x4e>
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <osKernelInitialize+0x60>)
 80022dc:	2201      	movs	r2, #1
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	e002      	b.n	80022ec <osKernelInitialize+0x54>
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	200000cc 	.word	0x200000cc

080022fc <osKernelStart>:
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	f3ef 8305 	mrs	r3, IPSR
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10f      	bne.n	800232e <osKernelStart+0x32>
 800230e:	f3ef 8310 	mrs	r3, PRIMASK
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d109      	bne.n	800232e <osKernelStart+0x32>
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <osKernelStart+0x64>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d109      	bne.n	8002336 <osKernelStart+0x3a>
 8002322:	f3ef 8311 	mrs	r3, BASEPRI
 8002326:	603b      	str	r3, [r7, #0]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <osKernelStart+0x3a>
 800232e:	f06f 0305 	mvn.w	r3, #5
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	e00e      	b.n	8002354 <osKernelStart+0x58>
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <osKernelStart+0x64>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d107      	bne.n	800234e <osKernelStart+0x52>
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <osKernelStart+0x64>)
 8002340:	2202      	movs	r2, #2
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	f001 f93c 	bl	80035c0 <vTaskStartScheduler>
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	e002      	b.n	8002354 <osKernelStart+0x58>
 800234e:	f04f 33ff 	mov.w	r3, #4294967295
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200000cc 	.word	0x200000cc

08002364 <osThreadNew>:
 8002364:	b580      	push	{r7, lr}
 8002366:	b092      	sub	sp, #72	; 0x48
 8002368:	af04      	add	r7, sp, #16
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	f3ef 8305 	mrs	r3, IPSR
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	2b00      	cmp	r3, #0
 800237e:	f040 8094 	bne.w	80024aa <osThreadNew+0x146>
 8002382:	f3ef 8310 	mrs	r3, PRIMASK
 8002386:	623b      	str	r3, [r7, #32]
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	2b00      	cmp	r3, #0
 800238c:	f040 808d 	bne.w	80024aa <osThreadNew+0x146>
 8002390:	4b48      	ldr	r3, [pc, #288]	; (80024b4 <osThreadNew+0x150>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d106      	bne.n	80023a6 <osThreadNew+0x42>
 8002398:	f3ef 8311 	mrs	r3, BASEPRI
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f040 8082 	bne.w	80024aa <osThreadNew+0x146>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d07e      	beq.n	80024aa <osThreadNew+0x146>
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	633b      	str	r3, [r7, #48]	; 0x30
 80023b0:	2318      	movs	r3, #24
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023b4:	2300      	movs	r3, #0
 80023b6:	76fb      	strb	r3, [r7, #27]
 80023b8:	f107 031b 	add.w	r3, r7, #27
 80023bc:	637b      	str	r3, [r7, #52]	; 0x34
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d045      	beq.n	8002456 <osThreadNew+0xf2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <osThreadNew+0x74>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	637b      	str	r3, [r7, #52]	; 0x34
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <osThreadNew+0x82>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <osThreadNew+0x9a>
 80023ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ee:	2b38      	cmp	r3, #56	; 0x38
 80023f0:	d805      	bhi.n	80023fe <osThreadNew+0x9a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <osThreadNew+0x9e>
 80023fe:	2300      	movs	r3, #0
 8002400:	e054      	b.n	80024ac <osThreadNew+0x148>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <osThreadNew+0xae>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	089b      	lsrs	r3, r3, #2
 8002410:	633b      	str	r3, [r7, #48]	; 0x30
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00e      	beq.n	8002438 <osThreadNew+0xd4>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b5b      	cmp	r3, #91	; 0x5b
 8002420:	d90a      	bls.n	8002438 <osThreadNew+0xd4>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d006      	beq.n	8002438 <osThreadNew+0xd4>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <osThreadNew+0xd4>
 8002432:	2301      	movs	r3, #1
 8002434:	62bb      	str	r3, [r7, #40]	; 0x28
 8002436:	e010      	b.n	800245a <osThreadNew+0xf6>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10c      	bne.n	800245a <osThreadNew+0xf6>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d108      	bne.n	800245a <osThreadNew+0xf6>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d104      	bne.n	800245a <osThreadNew+0xf6>
 8002450:	2300      	movs	r3, #0
 8002452:	62bb      	str	r3, [r7, #40]	; 0x28
 8002454:	e001      	b.n	800245a <osThreadNew+0xf6>
 8002456:	2300      	movs	r3, #0
 8002458:	62bb      	str	r3, [r7, #40]	; 0x28
 800245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245c:	2b01      	cmp	r3, #1
 800245e:	d110      	bne.n	8002482 <osThreadNew+0x11e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6892      	ldr	r2, [r2, #8]
 8002468:	9202      	str	r2, [sp, #8]
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002474:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 fed6 	bl	8003228 <xTaskCreateStatic>
 800247c:	4603      	mov	r3, r0
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	e013      	b.n	80024aa <osThreadNew+0x146>
 8002482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002484:	2b00      	cmp	r3, #0
 8002486:	d110      	bne.n	80024aa <osThreadNew+0x146>
 8002488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248a:	b29a      	uxth	r2, r3
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	9301      	str	r3, [sp, #4]
 8002492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 ff20 	bl	80032e0 <xTaskCreate>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d001      	beq.n	80024aa <osThreadNew+0x146>
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	4618      	mov	r0, r3
 80024ae:	3738      	adds	r7, #56	; 0x38
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	200000cc 	.word	0x200000cc

080024b8 <osDelay>:
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	f3ef 8305 	mrs	r3, IPSR
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10f      	bne.n	80024ec <osDelay+0x34>
 80024cc:	f3ef 8310 	mrs	r3, PRIMASK
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d109      	bne.n	80024ec <osDelay+0x34>
 80024d8:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <osDelay+0x58>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d109      	bne.n	80024f4 <osDelay+0x3c>
 80024e0:	f3ef 8311 	mrs	r3, BASEPRI
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <osDelay+0x3c>
 80024ec:	f06f 0305 	mvn.w	r3, #5
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	e007      	b.n	8002504 <osDelay+0x4c>
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <osDelay+0x4c>
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f001 f82a 	bl	8003558 <vTaskDelay>
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	200000cc 	.word	0x200000cc

08002514 <osMessageQueueNew>:
 8002514:	b580      	push	{r7, lr}
 8002516:	b08c      	sub	sp, #48	; 0x30
 8002518:	af02      	add	r7, sp, #8
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	2300      	movs	r3, #0
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
 8002524:	f3ef 8305 	mrs	r3, IPSR
 8002528:	61bb      	str	r3, [r7, #24]
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d16f      	bne.n	8002610 <osMessageQueueNew+0xfc>
 8002530:	f3ef 8310 	mrs	r3, PRIMASK
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d169      	bne.n	8002610 <osMessageQueueNew+0xfc>
 800253c:	4b37      	ldr	r3, [pc, #220]	; (800261c <osMessageQueueNew+0x108>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d105      	bne.n	8002550 <osMessageQueueNew+0x3c>
 8002544:	f3ef 8311 	mrs	r3, BASEPRI
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d15f      	bne.n	8002610 <osMessageQueueNew+0xfc>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d05c      	beq.n	8002610 <osMessageQueueNew+0xfc>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d059      	beq.n	8002610 <osMessageQueueNew+0xfc>
 800255c:	f04f 33ff 	mov.w	r3, #4294967295
 8002560:	623b      	str	r3, [r7, #32]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d029      	beq.n	80025bc <osMessageQueueNew+0xa8>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d012      	beq.n	8002596 <osMessageQueueNew+0x82>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2b4f      	cmp	r3, #79	; 0x4f
 8002576:	d90e      	bls.n	8002596 <osMessageQueueNew+0x82>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <osMessageQueueNew+0x82>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	429a      	cmp	r2, r3
 800258e:	d302      	bcc.n	8002596 <osMessageQueueNew+0x82>
 8002590:	2301      	movs	r3, #1
 8002592:	623b      	str	r3, [r7, #32]
 8002594:	e014      	b.n	80025c0 <osMessageQueueNew+0xac>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d110      	bne.n	80025c0 <osMessageQueueNew+0xac>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10c      	bne.n	80025c0 <osMessageQueueNew+0xac>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d108      	bne.n	80025c0 <osMessageQueueNew+0xac>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <osMessageQueueNew+0xac>
 80025b6:	2300      	movs	r3, #0
 80025b8:	623b      	str	r3, [r7, #32]
 80025ba:	e001      	b.n	80025c0 <osMessageQueueNew+0xac>
 80025bc:	2300      	movs	r3, #0
 80025be:	623b      	str	r3, [r7, #32]
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d10b      	bne.n	80025de <osMessageQueueNew+0xca>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2100      	movs	r1, #0
 80025d0:	9100      	str	r1, [sp, #0]
 80025d2:	68b9      	ldr	r1, [r7, #8]
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 f96d 	bl	80028b4 <xQueueGenericCreateStatic>
 80025da:	6278      	str	r0, [r7, #36]	; 0x24
 80025dc:	e008      	b.n	80025f0 <osMessageQueueNew+0xdc>
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d105      	bne.n	80025f0 <osMessageQueueNew+0xdc>
 80025e4:	2200      	movs	r2, #0
 80025e6:	68b9      	ldr	r1, [r7, #8]
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 f9da 	bl	80029a2 <xQueueGenericCreate>
 80025ee:	6278      	str	r0, [r7, #36]	; 0x24
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00c      	beq.n	8002610 <osMessageQueueNew+0xfc>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <osMessageQueueNew+0xf0>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	e001      	b.n	8002608 <osMessageQueueNew+0xf4>
 8002604:	2300      	movs	r3, #0
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	69f9      	ldr	r1, [r7, #28]
 800260a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800260c:	f000 fdb0 	bl	8003170 <vQueueAddToRegistry>
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	4618      	mov	r0, r3
 8002614:	3728      	adds	r7, #40	; 0x28
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200000cc 	.word	0x200000cc

08002620 <vApplicationGetIdleTaskMemory>:
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4a06      	ldr	r2, [pc, #24]	; (8002648 <vApplicationGetIdleTaskMemory+0x28>)
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	4a05      	ldr	r2, [pc, #20]	; (800264c <vApplicationGetIdleTaskMemory+0x2c>)
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2280      	movs	r2, #128	; 0x80
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	bf00      	nop
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	200000d0 	.word	0x200000d0
 800264c:	2000012c 	.word	0x2000012c

08002650 <vApplicationGetTimerTaskMemory>:
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4a07      	ldr	r2, [pc, #28]	; (800267c <vApplicationGetTimerTaskMemory+0x2c>)
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	4a06      	ldr	r2, [pc, #24]	; (8002680 <vApplicationGetTimerTaskMemory+0x30>)
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	2000032c 	.word	0x2000032c
 8002680:	20000388 	.word	0x20000388

08002684 <vListInitialise>:
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f103 0208 	add.w	r2, r3, #8
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f04f 32ff 	mov.w	r2, #4294967295
 800269c:	609a      	str	r2, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f103 0208 	add.w	r2, r3, #8
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	60da      	str	r2, [r3, #12]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f103 0208 	add.w	r2, r3, #8
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	611a      	str	r2, [r3, #16]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr

080026c2 <vListInitialiseItem>:
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	611a      	str	r2, [r3, #16]
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <vListInsertEnd>:
 80026da:	b480      	push	{r7}
 80026dc:	b085      	sub	sp, #20
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	609a      	str	r2, [r3, #8]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	611a      	str	r2, [r3, #16]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	bf00      	nop
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr

08002720 <vListInsert>:
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002736:	d103      	bne.n	8002740 <vListInsert+0x20>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	e00c      	b.n	800275a <vListInsert+0x3a>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3308      	adds	r3, #8
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	e002      	b.n	800274e <vListInsert+0x2e>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	429a      	cmp	r2, r3
 8002758:	d2f6      	bcs.n	8002748 <vListInsert+0x28>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	609a      	str	r2, [r3, #8]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	611a      	str	r2, [r3, #16]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <uxListRemove>:
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6892      	ldr	r2, [r2, #8]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6852      	ldr	r2, [r2, #4]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d103      	bne.n	80027c4 <uxListRemove+0x34>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	1e5a      	subs	r2, r3, #1
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr
	...

080027e4 <xQueueGenericReset>:
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10a      	bne.n	800280e <xQueueGenericReset+0x2a>
 80027f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fc:	f383 8811 	msr	BASEPRI, r3
 8002800:	f3bf 8f6f 	isb	sy
 8002804:	f3bf 8f4f 	dsb	sy
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	bf00      	nop
 800280c:	e7fe      	b.n	800280c <xQueueGenericReset+0x28>
 800280e:	f002 f805 	bl	800481c <vPortEnterCritical>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281a:	68f9      	ldr	r1, [r7, #12]
 800281c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	441a      	add	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	605a      	str	r2, [r3, #4]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	639a      	str	r2, [r3, #56]	; 0x38
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	609a      	str	r2, [r3, #8]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283e:	3b01      	subs	r3, #1
 8002840:	68f9      	ldr	r1, [r7, #12]
 8002842:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	441a      	add	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	22ff      	movs	r2, #255	; 0xff
 8002852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	22ff      	movs	r2, #255	; 0xff
 800285a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d114      	bne.n	800288e <xQueueGenericReset+0xaa>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d01a      	beq.n	80028a2 <xQueueGenericReset+0xbe>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	3310      	adds	r3, #16
 8002870:	4618      	mov	r0, r3
 8002872:	f001 f92f 	bl	8003ad4 <xTaskRemoveFromEventList>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d012      	beq.n	80028a2 <xQueueGenericReset+0xbe>
 800287c:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <xQueueGenericReset+0xcc>)
 800287e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	f3bf 8f6f 	isb	sy
 800288c:	e009      	b.n	80028a2 <xQueueGenericReset+0xbe>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	3310      	adds	r3, #16
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fef6 	bl	8002684 <vListInitialise>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3324      	adds	r3, #36	; 0x24
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fef1 	bl	8002684 <vListInitialise>
 80028a2:	f001 ffeb 	bl	800487c <vPortExitCritical>
 80028a6:	2301      	movs	r3, #1
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	e000ed04 	.word	0xe000ed04

080028b4 <xQueueGenericCreateStatic>:
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08e      	sub	sp, #56	; 0x38
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	603b      	str	r3, [r7, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <xQueueGenericCreateStatic+0x2a>
 80028c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028cc:	f383 8811 	msr	BASEPRI, r3
 80028d0:	f3bf 8f6f 	isb	sy
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028da:	bf00      	nop
 80028dc:	e7fe      	b.n	80028dc <xQueueGenericCreateStatic+0x28>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10a      	bne.n	80028fa <xQueueGenericCreateStatic+0x46>
 80028e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e8:	f383 8811 	msr	BASEPRI, r3
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
 80028f6:	bf00      	nop
 80028f8:	e7fe      	b.n	80028f8 <xQueueGenericCreateStatic+0x44>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <xQueueGenericCreateStatic+0x52>
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <xQueueGenericCreateStatic+0x56>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <xQueueGenericCreateStatic+0x58>
 800290a:	2300      	movs	r3, #0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10a      	bne.n	8002926 <xQueueGenericCreateStatic+0x72>
 8002910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	623b      	str	r3, [r7, #32]
 8002922:	bf00      	nop
 8002924:	e7fe      	b.n	8002924 <xQueueGenericCreateStatic+0x70>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d102      	bne.n	8002932 <xQueueGenericCreateStatic+0x7e>
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <xQueueGenericCreateStatic+0x82>
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <xQueueGenericCreateStatic+0x84>
 8002936:	2300      	movs	r3, #0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10a      	bne.n	8002952 <xQueueGenericCreateStatic+0x9e>
 800293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002940:	f383 8811 	msr	BASEPRI, r3
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	bf00      	nop
 8002950:	e7fe      	b.n	8002950 <xQueueGenericCreateStatic+0x9c>
 8002952:	2350      	movs	r3, #80	; 0x50
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2b50      	cmp	r3, #80	; 0x50
 800295a:	d00a      	beq.n	8002972 <xQueueGenericCreateStatic+0xbe>
 800295c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002960:	f383 8811 	msr	BASEPRI, r3
 8002964:	f3bf 8f6f 	isb	sy
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	61bb      	str	r3, [r7, #24]
 800296e:	bf00      	nop
 8002970:	e7fe      	b.n	8002970 <xQueueGenericCreateStatic+0xbc>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00d      	beq.n	8002998 <xQueueGenericCreateStatic+0xe4>
 800297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002984:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	4613      	mov	r3, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f843 	bl	8002a1e <prvInitialiseNewQueue>
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	4618      	mov	r0, r3
 800299c:	3730      	adds	r7, #48	; 0x30
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <xQueueGenericCreate>:
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b08a      	sub	sp, #40	; 0x28
 80029a6:	af02      	add	r7, sp, #8
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	4613      	mov	r3, r2
 80029ae:	71fb      	strb	r3, [r7, #7]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10a      	bne.n	80029cc <xQueueGenericCreate+0x2a>
 80029b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ba:	f383 8811 	msr	BASEPRI, r3
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	bf00      	nop
 80029ca:	e7fe      	b.n	80029ca <xQueueGenericCreate+0x28>
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d102      	bne.n	80029d8 <xQueueGenericCreate+0x36>
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
 80029d6:	e004      	b.n	80029e2 <xQueueGenericCreate+0x40>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	fb02 f303 	mul.w	r3, r2, r3
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3350      	adds	r3, #80	; 0x50
 80029e6:	4618      	mov	r0, r3
 80029e8:	f002 f818 	bl	8004a1c <pvPortMalloc>
 80029ec:	61b8      	str	r0, [r7, #24]
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00f      	beq.n	8002a14 <xQueueGenericCreate+0x72>
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	3350      	adds	r3, #80	; 0x50
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a02:	79fa      	ldrb	r2, [r7, #7]
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	68b9      	ldr	r1, [r7, #8]
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f805 	bl	8002a1e <prvInitialiseNewQueue>
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	4618      	mov	r0, r3
 8002a18:	3720      	adds	r7, #32
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <prvInitialiseNewQueue>:
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	70fb      	strb	r3, [r7, #3]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d103      	bne.n	8002a3a <prvInitialiseNewQueue+0x1c>
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	e002      	b.n	8002a40 <prvInitialiseNewQueue+0x22>
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	69b8      	ldr	r0, [r7, #24]
 8002a50:	f7ff fec8 	bl	80027e4 <xQueueGenericReset>
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8002a5c:	bf00      	nop
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <xQueueGenericSend>:
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08e      	sub	sp, #56	; 0x38
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	2300      	movs	r3, #0
 8002a74:	637b      	str	r3, [r7, #52]	; 0x34
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	633b      	str	r3, [r7, #48]	; 0x30
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10a      	bne.n	8002a96 <xQueueGenericSend+0x32>
 8002a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a84:	f383 8811 	msr	BASEPRI, r3
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a92:	bf00      	nop
 8002a94:	e7fe      	b.n	8002a94 <xQueueGenericSend+0x30>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d103      	bne.n	8002aa4 <xQueueGenericSend+0x40>
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <xQueueGenericSend+0x44>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <xQueueGenericSend+0x46>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10a      	bne.n	8002ac4 <xQueueGenericSend+0x60>
 8002aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab2:	f383 8811 	msr	BASEPRI, r3
 8002ab6:	f3bf 8f6f 	isb	sy
 8002aba:	f3bf 8f4f 	dsb	sy
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac0:	bf00      	nop
 8002ac2:	e7fe      	b.n	8002ac2 <xQueueGenericSend+0x5e>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d103      	bne.n	8002ad2 <xQueueGenericSend+0x6e>
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <xQueueGenericSend+0x72>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <xQueueGenericSend+0x74>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10a      	bne.n	8002af2 <xQueueGenericSend+0x8e>
 8002adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae0:	f383 8811 	msr	BASEPRI, r3
 8002ae4:	f3bf 8f6f 	isb	sy
 8002ae8:	f3bf 8f4f 	dsb	sy
 8002aec:	623b      	str	r3, [r7, #32]
 8002aee:	bf00      	nop
 8002af0:	e7fe      	b.n	8002af0 <xQueueGenericSend+0x8c>
 8002af2:	f001 f9b1 	bl	8003e58 <xTaskGetSchedulerState>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d102      	bne.n	8002b02 <xQueueGenericSend+0x9e>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <xQueueGenericSend+0xa2>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <xQueueGenericSend+0xa4>
 8002b06:	2300      	movs	r3, #0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10a      	bne.n	8002b22 <xQueueGenericSend+0xbe>
 8002b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b10:	f383 8811 	msr	BASEPRI, r3
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	bf00      	nop
 8002b20:	e7fe      	b.n	8002b20 <xQueueGenericSend+0xbc>
 8002b22:	f001 fe7b 	bl	800481c <vPortEnterCritical>
 8002b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d302      	bcc.n	8002b38 <xQueueGenericSend+0xd4>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d129      	bne.n	8002b8c <xQueueGenericSend+0x128>
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	68b9      	ldr	r1, [r7, #8]
 8002b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b3e:	f000 fa07 	bl	8002f50 <prvCopyDataToQueue>
 8002b42:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d010      	beq.n	8002b6e <xQueueGenericSend+0x10a>
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4e:	3324      	adds	r3, #36	; 0x24
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 ffbf 	bl	8003ad4 <xTaskRemoveFromEventList>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d013      	beq.n	8002b84 <xQueueGenericSend+0x120>
 8002b5c:	4b3f      	ldr	r3, [pc, #252]	; (8002c5c <xQueueGenericSend+0x1f8>)
 8002b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	f3bf 8f6f 	isb	sy
 8002b6c:	e00a      	b.n	8002b84 <xQueueGenericSend+0x120>
 8002b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d007      	beq.n	8002b84 <xQueueGenericSend+0x120>
 8002b74:	4b39      	ldr	r3, [pc, #228]	; (8002c5c <xQueueGenericSend+0x1f8>)
 8002b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	f3bf 8f6f 	isb	sy
 8002b84:	f001 fe7a 	bl	800487c <vPortExitCritical>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e063      	b.n	8002c54 <xQueueGenericSend+0x1f0>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d103      	bne.n	8002b9a <xQueueGenericSend+0x136>
 8002b92:	f001 fe73 	bl	800487c <vPortExitCritical>
 8002b96:	2300      	movs	r3, #0
 8002b98:	e05c      	b.n	8002c54 <xQueueGenericSend+0x1f0>
 8002b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d106      	bne.n	8002bae <xQueueGenericSend+0x14a>
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 fff9 	bl	8003b9c <vTaskInternalSetTimeOutState>
 8002baa:	2301      	movs	r3, #1
 8002bac:	637b      	str	r3, [r7, #52]	; 0x34
 8002bae:	f001 fe65 	bl	800487c <vPortExitCritical>
 8002bb2:	f000 fd6b 	bl	800368c <vTaskSuspendAll>
 8002bb6:	f001 fe31 	bl	800481c <vPortEnterCritical>
 8002bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bc0:	b25b      	sxtb	r3, r3
 8002bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc6:	d103      	bne.n	8002bd0 <xQueueGenericSend+0x16c>
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bd6:	b25b      	sxtb	r3, r3
 8002bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bdc:	d103      	bne.n	8002be6 <xQueueGenericSend+0x182>
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002be6:	f001 fe49 	bl	800487c <vPortExitCritical>
 8002bea:	1d3a      	adds	r2, r7, #4
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 ffe8 	bl	8003bc8 <xTaskCheckForTimeOut>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d124      	bne.n	8002c48 <xQueueGenericSend+0x1e4>
 8002bfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c00:	f000 fa9e 	bl	8003140 <prvIsQueueFull>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d018      	beq.n	8002c3c <xQueueGenericSend+0x1d8>
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0c:	3310      	adds	r3, #16
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 ff0e 	bl	8003a34 <vTaskPlaceOnEventList>
 8002c18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c1a:	f000 fa29 	bl	8003070 <prvUnlockQueue>
 8002c1e:	f000 fd43 	bl	80036a8 <xTaskResumeAll>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f47f af7c 	bne.w	8002b22 <xQueueGenericSend+0xbe>
 8002c2a:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <xQueueGenericSend+0x1f8>)
 8002c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	f3bf 8f4f 	dsb	sy
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	e772      	b.n	8002b22 <xQueueGenericSend+0xbe>
 8002c3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c3e:	f000 fa17 	bl	8003070 <prvUnlockQueue>
 8002c42:	f000 fd31 	bl	80036a8 <xTaskResumeAll>
 8002c46:	e76c      	b.n	8002b22 <xQueueGenericSend+0xbe>
 8002c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c4a:	f000 fa11 	bl	8003070 <prvUnlockQueue>
 8002c4e:	f000 fd2b 	bl	80036a8 <xTaskResumeAll>
 8002c52:	2300      	movs	r3, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	3738      	adds	r7, #56	; 0x38
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	e000ed04 	.word	0xe000ed04

08002c60 <xQueueGenericSendFromISR>:
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08e      	sub	sp, #56	; 0x38
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	633b      	str	r3, [r7, #48]	; 0x30
 8002c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10a      	bne.n	8002c8e <xQueueGenericSendFromISR+0x2e>
 8002c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7c:	f383 8811 	msr	BASEPRI, r3
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8a:	bf00      	nop
 8002c8c:	e7fe      	b.n	8002c8c <xQueueGenericSendFromISR+0x2c>
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d103      	bne.n	8002c9c <xQueueGenericSendFromISR+0x3c>
 8002c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <xQueueGenericSendFromISR+0x40>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <xQueueGenericSendFromISR+0x42>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10a      	bne.n	8002cbc <xQueueGenericSendFromISR+0x5c>
 8002ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002caa:	f383 8811 	msr	BASEPRI, r3
 8002cae:	f3bf 8f6f 	isb	sy
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	623b      	str	r3, [r7, #32]
 8002cb8:	bf00      	nop
 8002cba:	e7fe      	b.n	8002cba <xQueueGenericSendFromISR+0x5a>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d103      	bne.n	8002cca <xQueueGenericSendFromISR+0x6a>
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <xQueueGenericSendFromISR+0x6e>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <xQueueGenericSendFromISR+0x70>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10a      	bne.n	8002cea <xQueueGenericSendFromISR+0x8a>
 8002cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	61fb      	str	r3, [r7, #28]
 8002ce6:	bf00      	nop
 8002ce8:	e7fe      	b.n	8002ce8 <xQueueGenericSendFromISR+0x88>
 8002cea:	f001 fe59 	bl	80049a0 <vPortValidateInterruptPriority>
 8002cee:	f3ef 8211 	mrs	r2, BASEPRI
 8002cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf6:	f383 8811 	msr	BASEPRI, r3
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	61ba      	str	r2, [r7, #24]
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d302      	bcc.n	8002d1c <xQueueGenericSendFromISR+0xbc>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d12c      	bne.n	8002d76 <xQueueGenericSendFromISR+0x116>
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d2c:	f000 f910 	bl	8002f50 <prvCopyDataToQueue>
 8002d30:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d38:	d112      	bne.n	8002d60 <xQueueGenericSendFromISR+0x100>
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d016      	beq.n	8002d70 <xQueueGenericSendFromISR+0x110>
 8002d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d44:	3324      	adds	r3, #36	; 0x24
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fec4 	bl	8003ad4 <xTaskRemoveFromEventList>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00e      	beq.n	8002d70 <xQueueGenericSendFromISR+0x110>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00b      	beq.n	8002d70 <xQueueGenericSendFromISR+0x110>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	e007      	b.n	8002d70 <xQueueGenericSendFromISR+0x110>
 8002d60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d64:	3301      	adds	r3, #1
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	b25a      	sxtb	r2, r3
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d70:	2301      	movs	r3, #1
 8002d72:	637b      	str	r3, [r7, #52]	; 0x34
 8002d74:	e001      	b.n	8002d7a <xQueueGenericSendFromISR+0x11a>
 8002d76:	2300      	movs	r3, #0
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
 8002d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	bf00      	nop
 8002d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3738      	adds	r7, #56	; 0x38
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <xQueueReceive>:
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08c      	sub	sp, #48	; 0x30
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10a      	bne.n	8002dc0 <xQueueReceive+0x30>
 8002daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dae:	f383 8811 	msr	BASEPRI, r3
 8002db2:	f3bf 8f6f 	isb	sy
 8002db6:	f3bf 8f4f 	dsb	sy
 8002dba:	623b      	str	r3, [r7, #32]
 8002dbc:	bf00      	nop
 8002dbe:	e7fe      	b.n	8002dbe <xQueueReceive+0x2e>
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d103      	bne.n	8002dce <xQueueReceive+0x3e>
 8002dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <xQueueReceive+0x42>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <xQueueReceive+0x44>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10a      	bne.n	8002dee <xQueueReceive+0x5e>
 8002dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	bf00      	nop
 8002dec:	e7fe      	b.n	8002dec <xQueueReceive+0x5c>
 8002dee:	f001 f833 	bl	8003e58 <xTaskGetSchedulerState>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d102      	bne.n	8002dfe <xQueueReceive+0x6e>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <xQueueReceive+0x72>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <xQueueReceive+0x74>
 8002e02:	2300      	movs	r3, #0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <xQueueReceive+0x8e>
 8002e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	bf00      	nop
 8002e1c:	e7fe      	b.n	8002e1c <xQueueReceive+0x8c>
 8002e1e:	f001 fcfd 	bl	800481c <vPortEnterCritical>
 8002e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d01f      	beq.n	8002e6e <xQueueReceive+0xde>
 8002e2e:	68b9      	ldr	r1, [r7, #8]
 8002e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e32:	f000 f8f7 	bl	8003024 <prvCopyDataFromQueue>
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	1e5a      	subs	r2, r3, #1
 8002e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3c:	639a      	str	r2, [r3, #56]	; 0x38
 8002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00f      	beq.n	8002e66 <xQueueReceive+0xd6>
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	3310      	adds	r3, #16
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fe42 	bl	8003ad4 <xTaskRemoveFromEventList>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <xQueueReceive+0xd6>
 8002e56:	4b3d      	ldr	r3, [pc, #244]	; (8002f4c <xQueueReceive+0x1bc>)
 8002e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f001 fd09 	bl	800487c <vPortExitCritical>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e069      	b.n	8002f42 <xQueueReceive+0x1b2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d103      	bne.n	8002e7c <xQueueReceive+0xec>
 8002e74:	f001 fd02 	bl	800487c <vPortExitCritical>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e062      	b.n	8002f42 <xQueueReceive+0x1b2>
 8002e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <xQueueReceive+0x100>
 8002e82:	f107 0310 	add.w	r3, r7, #16
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fe88 	bl	8003b9c <vTaskInternalSetTimeOutState>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e90:	f001 fcf4 	bl	800487c <vPortExitCritical>
 8002e94:	f000 fbfa 	bl	800368c <vTaskSuspendAll>
 8002e98:	f001 fcc0 	bl	800481c <vPortEnterCritical>
 8002e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ea2:	b25b      	sxtb	r3, r3
 8002ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea8:	d103      	bne.n	8002eb2 <xQueueReceive+0x122>
 8002eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eb8:	b25b      	sxtb	r3, r3
 8002eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebe:	d103      	bne.n	8002ec8 <xQueueReceive+0x138>
 8002ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ec8:	f001 fcd8 	bl	800487c <vPortExitCritical>
 8002ecc:	1d3a      	adds	r2, r7, #4
 8002ece:	f107 0310 	add.w	r3, r7, #16
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fe77 	bl	8003bc8 <xTaskCheckForTimeOut>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d123      	bne.n	8002f28 <xQueueReceive+0x198>
 8002ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ee2:	f000 f917 	bl	8003114 <prvIsQueueEmpty>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d017      	beq.n	8002f1c <xQueueReceive+0x18c>
 8002eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eee:	3324      	adds	r3, #36	; 0x24
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fd9d 	bl	8003a34 <vTaskPlaceOnEventList>
 8002efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002efc:	f000 f8b8 	bl	8003070 <prvUnlockQueue>
 8002f00:	f000 fbd2 	bl	80036a8 <xTaskResumeAll>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d189      	bne.n	8002e1e <xQueueReceive+0x8e>
 8002f0a:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <xQueueReceive+0x1bc>)
 8002f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	f3bf 8f4f 	dsb	sy
 8002f16:	f3bf 8f6f 	isb	sy
 8002f1a:	e780      	b.n	8002e1e <xQueueReceive+0x8e>
 8002f1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f1e:	f000 f8a7 	bl	8003070 <prvUnlockQueue>
 8002f22:	f000 fbc1 	bl	80036a8 <xTaskResumeAll>
 8002f26:	e77a      	b.n	8002e1e <xQueueReceive+0x8e>
 8002f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f2a:	f000 f8a1 	bl	8003070 <prvUnlockQueue>
 8002f2e:	f000 fbbb 	bl	80036a8 <xTaskResumeAll>
 8002f32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f34:	f000 f8ee 	bl	8003114 <prvIsQueueEmpty>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f43f af6f 	beq.w	8002e1e <xQueueReceive+0x8e>
 8002f40:	2300      	movs	r3, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	3730      	adds	r7, #48	; 0x30
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	e000ed04 	.word	0xe000ed04

08002f50 <prvCopyDataToQueue>:
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10d      	bne.n	8002f8a <prvCopyDataToQueue+0x3a>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d14d      	bne.n	8003012 <prvCopyDataToQueue+0xc2>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 ff8a 	bl	8003e94 <xTaskPriorityDisinherit>
 8002f80:	6178      	str	r0, [r7, #20]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	605a      	str	r2, [r3, #4]
 8002f88:	e043      	b.n	8003012 <prvCopyDataToQueue+0xc2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d119      	bne.n	8002fc4 <prvCopyDataToQueue+0x74>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6898      	ldr	r0, [r3, #8]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	461a      	mov	r2, r3
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	f001 ff3a 	bl	8004e14 <memcpy>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	441a      	add	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	609a      	str	r2, [r3, #8]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d32b      	bcc.n	8003012 <prvCopyDataToQueue+0xc2>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	609a      	str	r2, [r3, #8]
 8002fc2:	e026      	b.n	8003012 <prvCopyDataToQueue+0xc2>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	68d8      	ldr	r0, [r3, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	461a      	mov	r2, r3
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	f001 ff20 	bl	8004e14 <memcpy>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	425b      	negs	r3, r3
 8002fde:	441a      	add	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	60da      	str	r2, [r3, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d207      	bcs.n	8003000 <prvCopyDataToQueue+0xb0>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	425b      	negs	r3, r3
 8002ffa:	441a      	add	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	60da      	str	r2, [r3, #12]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d105      	bne.n	8003012 <prvCopyDataToQueue+0xc2>
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <prvCopyDataToQueue+0xc2>
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	3b01      	subs	r3, #1
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	639a      	str	r2, [r3, #56]	; 0x38
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <prvCopyDataFromQueue>:
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	d018      	beq.n	8003068 <prvCopyDataFromQueue+0x44>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	441a      	add	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	60da      	str	r2, [r3, #12]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	429a      	cmp	r2, r3
 800304e:	d303      	bcc.n	8003058 <prvCopyDataFromQueue+0x34>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	60da      	str	r2, [r3, #12]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68d9      	ldr	r1, [r3, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	461a      	mov	r2, r3
 8003062:	6838      	ldr	r0, [r7, #0]
 8003064:	f001 fed6 	bl	8004e14 <memcpy>
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <prvUnlockQueue>:
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	f001 fbd0 	bl	800481c <vPortEnterCritical>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003082:	73fb      	strb	r3, [r7, #15]
 8003084:	e011      	b.n	80030aa <prvUnlockQueue+0x3a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	2b00      	cmp	r3, #0
 800308c:	d012      	beq.n	80030b4 <prvUnlockQueue+0x44>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3324      	adds	r3, #36	; 0x24
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fd1e 	bl	8003ad4 <xTaskRemoveFromEventList>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <prvUnlockQueue+0x32>
 800309e:	f000 fdf5 	bl	8003c8c <vTaskMissedYield>
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	73fb      	strb	r3, [r7, #15]
 80030aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	dce9      	bgt.n	8003086 <prvUnlockQueue+0x16>
 80030b2:	e000      	b.n	80030b6 <prvUnlockQueue+0x46>
 80030b4:	bf00      	nop
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	22ff      	movs	r2, #255	; 0xff
 80030ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030be:	f001 fbdd 	bl	800487c <vPortExitCritical>
 80030c2:	f001 fbab 	bl	800481c <vPortEnterCritical>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030cc:	73bb      	strb	r3, [r7, #14]
 80030ce:	e011      	b.n	80030f4 <prvUnlockQueue+0x84>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d012      	beq.n	80030fe <prvUnlockQueue+0x8e>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3310      	adds	r3, #16
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fcf9 	bl	8003ad4 <xTaskRemoveFromEventList>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <prvUnlockQueue+0x7c>
 80030e8:	f000 fdd0 	bl	8003c8c <vTaskMissedYield>
 80030ec:	7bbb      	ldrb	r3, [r7, #14]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	73bb      	strb	r3, [r7, #14]
 80030f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	dce9      	bgt.n	80030d0 <prvUnlockQueue+0x60>
 80030fc:	e000      	b.n	8003100 <prvUnlockQueue+0x90>
 80030fe:	bf00      	nop
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	22ff      	movs	r2, #255	; 0xff
 8003104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003108:	f001 fbb8 	bl	800487c <vPortExitCritical>
 800310c:	bf00      	nop
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <prvIsQueueEmpty>:
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	f001 fb7e 	bl	800481c <vPortEnterCritical>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003124:	2b00      	cmp	r3, #0
 8003126:	d102      	bne.n	800312e <prvIsQueueEmpty+0x1a>
 8003128:	2301      	movs	r3, #1
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	e001      	b.n	8003132 <prvIsQueueEmpty+0x1e>
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	f001 fba3 	bl	800487c <vPortExitCritical>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <prvIsQueueFull>:
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	f001 fb68 	bl	800481c <vPortEnterCritical>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003154:	429a      	cmp	r2, r3
 8003156:	d102      	bne.n	800315e <prvIsQueueFull+0x1e>
 8003158:	2301      	movs	r3, #1
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	e001      	b.n	8003162 <prvIsQueueFull+0x22>
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	f001 fb8b 	bl	800487c <vPortExitCritical>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <vQueueAddToRegistry>:
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	e014      	b.n	80031aa <vQueueAddToRegistry+0x3a>
 8003180:	4a0e      	ldr	r2, [pc, #56]	; (80031bc <vQueueAddToRegistry+0x4c>)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10b      	bne.n	80031a4 <vQueueAddToRegistry+0x34>
 800318c:	490b      	ldr	r1, [pc, #44]	; (80031bc <vQueueAddToRegistry+0x4c>)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8003196:	4a09      	ldr	r2, [pc, #36]	; (80031bc <vQueueAddToRegistry+0x4c>)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	4413      	add	r3, r2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	e006      	b.n	80031b2 <vQueueAddToRegistry+0x42>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3301      	adds	r3, #1
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2b07      	cmp	r3, #7
 80031ae:	d9e7      	bls.n	8003180 <vQueueAddToRegistry+0x10>
 80031b0:	bf00      	nop
 80031b2:	bf00      	nop
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	20000788 	.word	0x20000788

080031c0 <vQueueWaitForMessageRestricted>:
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	f001 fb24 	bl	800481c <vPortEnterCritical>
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031da:	b25b      	sxtb	r3, r3
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d103      	bne.n	80031ea <vQueueWaitForMessageRestricted+0x2a>
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031f0:	b25b      	sxtb	r3, r3
 80031f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f6:	d103      	bne.n	8003200 <vQueueWaitForMessageRestricted+0x40>
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003200:	f001 fb3c 	bl	800487c <vPortExitCritical>
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	2b00      	cmp	r3, #0
 800320a:	d106      	bne.n	800321a <vQueueWaitForMessageRestricted+0x5a>
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	3324      	adds	r3, #36	; 0x24
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	68b9      	ldr	r1, [r7, #8]
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fc31 	bl	8003a7c <vTaskPlaceOnEventListRestricted>
 800321a:	6978      	ldr	r0, [r7, #20]
 800321c:	f7ff ff28 	bl	8003070 <prvUnlockQueue>
 8003220:	bf00      	nop
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <xTaskCreateStatic>:
 8003228:	b580      	push	{r7, lr}
 800322a:	b08e      	sub	sp, #56	; 0x38
 800322c:	af04      	add	r7, sp, #16
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	603b      	str	r3, [r7, #0]
 8003236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10a      	bne.n	8003252 <xTaskCreateStatic+0x2a>
 800323c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003240:	f383 8811 	msr	BASEPRI, r3
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	623b      	str	r3, [r7, #32]
 800324e:	bf00      	nop
 8003250:	e7fe      	b.n	8003250 <xTaskCreateStatic+0x28>
 8003252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10a      	bne.n	800326e <xTaskCreateStatic+0x46>
 8003258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	61fb      	str	r3, [r7, #28]
 800326a:	bf00      	nop
 800326c:	e7fe      	b.n	800326c <xTaskCreateStatic+0x44>
 800326e:	235c      	movs	r3, #92	; 0x5c
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2b5c      	cmp	r3, #92	; 0x5c
 8003276:	d00a      	beq.n	800328e <xTaskCreateStatic+0x66>
 8003278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	bf00      	nop
 800328c:	e7fe      	b.n	800328c <xTaskCreateStatic+0x64>
 800328e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01e      	beq.n	80032d2 <xTaskCreateStatic+0xaa>
 8003294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01b      	beq.n	80032d2 <xTaskCreateStatic+0xaa>
 800329a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80032ac:	2300      	movs	r3, #0
 80032ae:	9303      	str	r3, [sp, #12]
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	9302      	str	r3, [sp, #8]
 80032b4:	f107 0314 	add.w	r3, r7, #20
 80032b8:	9301      	str	r3, [sp, #4]
 80032ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	68b9      	ldr	r1, [r7, #8]
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f850 	bl	800336a <prvInitialiseNewTask>
 80032ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032cc:	f000 f8d4 	bl	8003478 <prvAddNewTaskToReadyList>
 80032d0:	e001      	b.n	80032d6 <xTaskCreateStatic+0xae>
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	4618      	mov	r0, r3
 80032da:	3728      	adds	r7, #40	; 0x28
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <xTaskCreate>:
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08c      	sub	sp, #48	; 0x30
 80032e4:	af04      	add	r7, sp, #16
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	603b      	str	r3, [r7, #0]
 80032ec:	4613      	mov	r3, r2
 80032ee:	80fb      	strh	r3, [r7, #6]
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f001 fb91 	bl	8004a1c <pvPortMalloc>
 80032fa:	6178      	str	r0, [r7, #20]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00e      	beq.n	8003320 <xTaskCreate+0x40>
 8003302:	205c      	movs	r0, #92	; 0x5c
 8003304:	f001 fb8a 	bl	8004a1c <pvPortMalloc>
 8003308:	61f8      	str	r0, [r7, #28]
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <xTaskCreate+0x38>
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	631a      	str	r2, [r3, #48]	; 0x30
 8003316:	e005      	b.n	8003324 <xTaskCreate+0x44>
 8003318:	6978      	ldr	r0, [r7, #20]
 800331a:	f001 fc43 	bl	8004ba4 <vPortFree>
 800331e:	e001      	b.n	8003324 <xTaskCreate+0x44>
 8003320:	2300      	movs	r3, #0
 8003322:	61fb      	str	r3, [r7, #28]
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d017      	beq.n	800335a <xTaskCreate+0x7a>
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8003332:	88fa      	ldrh	r2, [r7, #6]
 8003334:	2300      	movs	r3, #0
 8003336:	9303      	str	r3, [sp, #12]
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	9302      	str	r3, [sp, #8]
 800333c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333e:	9301      	str	r3, [sp, #4]
 8003340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68b9      	ldr	r1, [r7, #8]
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f80e 	bl	800336a <prvInitialiseNewTask>
 800334e:	69f8      	ldr	r0, [r7, #28]
 8003350:	f000 f892 	bl	8003478 <prvAddNewTaskToReadyList>
 8003354:	2301      	movs	r3, #1
 8003356:	61bb      	str	r3, [r7, #24]
 8003358:	e002      	b.n	8003360 <xTaskCreate+0x80>
 800335a:	f04f 33ff 	mov.w	r3, #4294967295
 800335e:	61bb      	str	r3, [r7, #24]
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	4618      	mov	r0, r3
 8003364:	3720      	adds	r7, #32
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <prvInitialiseNewTask>:
 800336a:	b580      	push	{r7, lr}
 800336c:	b088      	sub	sp, #32
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	461a      	mov	r2, r3
 8003382:	21a5      	movs	r1, #165	; 0xa5
 8003384:	f001 fd54 	bl	8004e30 <memset>
 8003388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003392:	3b01      	subs	r3, #1
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	f023 0307 	bic.w	r3, r3, #7
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <prvInitialiseNewTask+0x58>
 80033ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	bf00      	nop
 80033c0:	e7fe      	b.n	80033c0 <prvInitialiseNewTask+0x56>
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
 80033c6:	e012      	b.n	80033ee <prvInitialiseNewTask+0x84>
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	4413      	add	r3, r2
 80033ce:	7819      	ldrb	r1, [r3, #0]
 80033d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	4413      	add	r3, r2
 80033d6:	3334      	adds	r3, #52	; 0x34
 80033d8:	460a      	mov	r2, r1
 80033da:	701a      	strb	r2, [r3, #0]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	4413      	add	r3, r2
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d006      	beq.n	80033f6 <prvInitialiseNewTask+0x8c>
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	3301      	adds	r3, #1
 80033ec:	61fb      	str	r3, [r7, #28]
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	2b0f      	cmp	r3, #15
 80033f2:	d9e9      	bls.n	80033c8 <prvInitialiseNewTask+0x5e>
 80033f4:	e000      	b.n	80033f8 <prvInitialiseNewTask+0x8e>
 80033f6:	bf00      	nop
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003402:	2b37      	cmp	r3, #55	; 0x37
 8003404:	d901      	bls.n	800340a <prvInitialiseNewTask+0xa0>
 8003406:	2337      	movs	r3, #55	; 0x37
 8003408:	62bb      	str	r3, [r7, #40]	; 0x28
 800340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800340e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003414:	64da      	str	r2, [r3, #76]	; 0x4c
 8003416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003418:	2200      	movs	r2, #0
 800341a:	651a      	str	r2, [r3, #80]	; 0x50
 800341c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341e:	3304      	adds	r3, #4
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff f94e 	bl	80026c2 <vListInitialiseItem>
 8003426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003428:	3318      	adds	r3, #24
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff f949 	bl	80026c2 <vListInitialiseItem>
 8003430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003434:	611a      	str	r2, [r3, #16]
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343e:	619a      	str	r2, [r3, #24]
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003444:	625a      	str	r2, [r3, #36]	; 0x24
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	2200      	movs	r2, #0
 800344a:	655a      	str	r2, [r3, #84]	; 0x54
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	68f9      	ldr	r1, [r7, #12]
 8003458:	69b8      	ldr	r0, [r7, #24]
 800345a:	f001 f8ef 	bl	800463c <pxPortInitialiseStack>
 800345e:	4602      	mov	r2, r0
 8003460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <prvInitialiseNewTask+0x106>
 800346a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	bf00      	nop
 8003472:	3720      	adds	r7, #32
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <prvAddNewTaskToReadyList>:
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	f001 f9cc 	bl	800481c <vPortEnterCritical>
 8003484:	4b2d      	ldr	r3, [pc, #180]	; (800353c <prvAddNewTaskToReadyList+0xc4>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3301      	adds	r3, #1
 800348a:	4a2c      	ldr	r2, [pc, #176]	; (800353c <prvAddNewTaskToReadyList+0xc4>)
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	4b2c      	ldr	r3, [pc, #176]	; (8003540 <prvAddNewTaskToReadyList+0xc8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <prvAddNewTaskToReadyList+0x32>
 8003496:	4a2a      	ldr	r2, [pc, #168]	; (8003540 <prvAddNewTaskToReadyList+0xc8>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	4b27      	ldr	r3, [pc, #156]	; (800353c <prvAddNewTaskToReadyList+0xc4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d110      	bne.n	80034c6 <prvAddNewTaskToReadyList+0x4e>
 80034a4:	f000 fc16 	bl	8003cd4 <prvInitialiseTaskLists>
 80034a8:	e00d      	b.n	80034c6 <prvAddNewTaskToReadyList+0x4e>
 80034aa:	4b26      	ldr	r3, [pc, #152]	; (8003544 <prvAddNewTaskToReadyList+0xcc>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d109      	bne.n	80034c6 <prvAddNewTaskToReadyList+0x4e>
 80034b2:	4b23      	ldr	r3, [pc, #140]	; (8003540 <prvAddNewTaskToReadyList+0xc8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	429a      	cmp	r2, r3
 80034be:	d802      	bhi.n	80034c6 <prvAddNewTaskToReadyList+0x4e>
 80034c0:	4a1f      	ldr	r2, [pc, #124]	; (8003540 <prvAddNewTaskToReadyList+0xc8>)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	4b20      	ldr	r3, [pc, #128]	; (8003548 <prvAddNewTaskToReadyList+0xd0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	3301      	adds	r3, #1
 80034cc:	4a1e      	ldr	r2, [pc, #120]	; (8003548 <prvAddNewTaskToReadyList+0xd0>)
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <prvAddNewTaskToReadyList+0xd0>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	645a      	str	r2, [r3, #68]	; 0x44
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034dc:	4b1b      	ldr	r3, [pc, #108]	; (800354c <prvAddNewTaskToReadyList+0xd4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d903      	bls.n	80034ec <prvAddNewTaskToReadyList+0x74>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	4a18      	ldr	r2, [pc, #96]	; (800354c <prvAddNewTaskToReadyList+0xd4>)
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4a15      	ldr	r2, [pc, #84]	; (8003550 <prvAddNewTaskToReadyList+0xd8>)
 80034fa:	441a      	add	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3304      	adds	r3, #4
 8003500:	4619      	mov	r1, r3
 8003502:	4610      	mov	r0, r2
 8003504:	f7ff f8e9 	bl	80026da <vListInsertEnd>
 8003508:	f001 f9b8 	bl	800487c <vPortExitCritical>
 800350c:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <prvAddNewTaskToReadyList+0xcc>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00e      	beq.n	8003532 <prvAddNewTaskToReadyList+0xba>
 8003514:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <prvAddNewTaskToReadyList+0xc8>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	429a      	cmp	r2, r3
 8003520:	d207      	bcs.n	8003532 <prvAddNewTaskToReadyList+0xba>
 8003522:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <prvAddNewTaskToReadyList+0xdc>)
 8003524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000c9c 	.word	0x20000c9c
 8003540:	200007c8 	.word	0x200007c8
 8003544:	20000ca8 	.word	0x20000ca8
 8003548:	20000cb8 	.word	0x20000cb8
 800354c:	20000ca4 	.word	0x20000ca4
 8003550:	200007cc 	.word	0x200007cc
 8003554:	e000ed04 	.word	0xe000ed04

08003558 <vTaskDelay>:
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d017      	beq.n	800359a <vTaskDelay+0x42>
 800356a:	4b13      	ldr	r3, [pc, #76]	; (80035b8 <vTaskDelay+0x60>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <vTaskDelay+0x30>
 8003572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	bf00      	nop
 8003586:	e7fe      	b.n	8003586 <vTaskDelay+0x2e>
 8003588:	f000 f880 	bl	800368c <vTaskSuspendAll>
 800358c:	2100      	movs	r1, #0
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fcee 	bl	8003f70 <prvAddCurrentTaskToDelayedList>
 8003594:	f000 f888 	bl	80036a8 <xTaskResumeAll>
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d107      	bne.n	80035b0 <vTaskDelay+0x58>
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <vTaskDelay+0x64>)
 80035a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	bf00      	nop
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	20000cc4 	.word	0x20000cc4
 80035bc:	e000ed04 	.word	0xe000ed04

080035c0 <vTaskStartScheduler>:
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	; 0x28
 80035c4:	af04      	add	r7, sp, #16
 80035c6:	2300      	movs	r3, #0
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	2300      	movs	r3, #0
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	463a      	mov	r2, r7
 80035d0:	1d39      	adds	r1, r7, #4
 80035d2:	f107 0308 	add.w	r3, r7, #8
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff f822 	bl	8002620 <vApplicationGetIdleTaskMemory>
 80035dc:	6839      	ldr	r1, [r7, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	9202      	str	r2, [sp, #8]
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	2300      	movs	r3, #0
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	2300      	movs	r3, #0
 80035ec:	460a      	mov	r2, r1
 80035ee:	4921      	ldr	r1, [pc, #132]	; (8003674 <vTaskStartScheduler+0xb4>)
 80035f0:	4821      	ldr	r0, [pc, #132]	; (8003678 <vTaskStartScheduler+0xb8>)
 80035f2:	f7ff fe19 	bl	8003228 <xTaskCreateStatic>
 80035f6:	4603      	mov	r3, r0
 80035f8:	4a20      	ldr	r2, [pc, #128]	; (800367c <vTaskStartScheduler+0xbc>)
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	4b1f      	ldr	r3, [pc, #124]	; (800367c <vTaskStartScheduler+0xbc>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <vTaskStartScheduler+0x4a>
 8003604:	2301      	movs	r3, #1
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	e001      	b.n	800360e <vTaskStartScheduler+0x4e>
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d102      	bne.n	800361a <vTaskStartScheduler+0x5a>
 8003614:	f000 fd00 	bl	8004018 <xTimerCreateTimerTask>
 8003618:	6178      	str	r0, [r7, #20]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d116      	bne.n	800364e <vTaskStartScheduler+0x8e>
 8003620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	bf00      	nop
 8003634:	4b12      	ldr	r3, [pc, #72]	; (8003680 <vTaskStartScheduler+0xc0>)
 8003636:	f04f 32ff 	mov.w	r2, #4294967295
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	4b11      	ldr	r3, [pc, #68]	; (8003684 <vTaskStartScheduler+0xc4>)
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	4b11      	ldr	r3, [pc, #68]	; (8003688 <vTaskStartScheduler+0xc8>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	f001 f876 	bl	8004738 <xPortStartScheduler>
 800364c:	e00e      	b.n	800366c <vTaskStartScheduler+0xac>
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d10a      	bne.n	800366c <vTaskStartScheduler+0xac>
 8003656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365a:	f383 8811 	msr	BASEPRI, r3
 800365e:	f3bf 8f6f 	isb	sy
 8003662:	f3bf 8f4f 	dsb	sy
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	bf00      	nop
 800366a:	e7fe      	b.n	800366a <vTaskStartScheduler+0xaa>
 800366c:	bf00      	nop
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	08004ee0 	.word	0x08004ee0
 8003678:	08003ca5 	.word	0x08003ca5
 800367c:	20000cc0 	.word	0x20000cc0
 8003680:	20000cbc 	.word	0x20000cbc
 8003684:	20000ca8 	.word	0x20000ca8
 8003688:	20000ca0 	.word	0x20000ca0

0800368c <vTaskSuspendAll>:
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
 8003690:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <vTaskSuspendAll+0x18>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3301      	adds	r3, #1
 8003696:	4a03      	ldr	r2, [pc, #12]	; (80036a4 <vTaskSuspendAll+0x18>)
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	bf00      	nop
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	20000cc4 	.word	0x20000cc4

080036a8 <xTaskResumeAll>:
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	2300      	movs	r3, #0
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	4b42      	ldr	r3, [pc, #264]	; (80037c0 <xTaskResumeAll+0x118>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10a      	bne.n	80036d4 <xTaskResumeAll+0x2c>
 80036be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	bf00      	nop
 80036d2:	e7fe      	b.n	80036d2 <xTaskResumeAll+0x2a>
 80036d4:	f001 f8a2 	bl	800481c <vPortEnterCritical>
 80036d8:	4b39      	ldr	r3, [pc, #228]	; (80037c0 <xTaskResumeAll+0x118>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3b01      	subs	r3, #1
 80036de:	4a38      	ldr	r2, [pc, #224]	; (80037c0 <xTaskResumeAll+0x118>)
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	4b37      	ldr	r3, [pc, #220]	; (80037c0 <xTaskResumeAll+0x118>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d162      	bne.n	80037b0 <xTaskResumeAll+0x108>
 80036ea:	4b36      	ldr	r3, [pc, #216]	; (80037c4 <xTaskResumeAll+0x11c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d05e      	beq.n	80037b0 <xTaskResumeAll+0x108>
 80036f2:	e02f      	b.n	8003754 <xTaskResumeAll+0xac>
 80036f4:	4b34      	ldr	r3, [pc, #208]	; (80037c8 <xTaskResumeAll+0x120>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	3318      	adds	r3, #24
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff f845 	bl	8002790 <uxListRemove>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3304      	adds	r3, #4
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff f840 	bl	8002790 <uxListRemove>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003714:	4b2d      	ldr	r3, [pc, #180]	; (80037cc <xTaskResumeAll+0x124>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d903      	bls.n	8003724 <xTaskResumeAll+0x7c>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	4a2a      	ldr	r2, [pc, #168]	; (80037cc <xTaskResumeAll+0x124>)
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4a27      	ldr	r2, [pc, #156]	; (80037d0 <xTaskResumeAll+0x128>)
 8003732:	441a      	add	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3304      	adds	r3, #4
 8003738:	4619      	mov	r1, r3
 800373a:	4610      	mov	r0, r2
 800373c:	f7fe ffcd 	bl	80026da <vListInsertEnd>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003744:	4b23      	ldr	r3, [pc, #140]	; (80037d4 <xTaskResumeAll+0x12c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	429a      	cmp	r2, r3
 800374c:	d302      	bcc.n	8003754 <xTaskResumeAll+0xac>
 800374e:	4b22      	ldr	r3, [pc, #136]	; (80037d8 <xTaskResumeAll+0x130>)
 8003750:	2201      	movs	r2, #1
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	4b1c      	ldr	r3, [pc, #112]	; (80037c8 <xTaskResumeAll+0x120>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1cb      	bne.n	80036f4 <xTaskResumeAll+0x4c>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <xTaskResumeAll+0xbe>
 8003762:	f000 fb55 	bl	8003e10 <prvResetNextTaskUnblockTime>
 8003766:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <xTaskResumeAll+0x134>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	607b      	str	r3, [r7, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d010      	beq.n	8003794 <xTaskResumeAll+0xec>
 8003772:	f000 f845 	bl	8003800 <xTaskIncrementTick>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <xTaskResumeAll+0xda>
 800377c:	4b16      	ldr	r3, [pc, #88]	; (80037d8 <xTaskResumeAll+0x130>)
 800377e:	2201      	movs	r2, #1
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3b01      	subs	r3, #1
 8003786:	607b      	str	r3, [r7, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f1      	bne.n	8003772 <xTaskResumeAll+0xca>
 800378e:	4b13      	ldr	r3, [pc, #76]	; (80037dc <xTaskResumeAll+0x134>)
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <xTaskResumeAll+0x130>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d009      	beq.n	80037b0 <xTaskResumeAll+0x108>
 800379c:	2301      	movs	r3, #1
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <xTaskResumeAll+0x138>)
 80037a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f001 f864 	bl	800487c <vPortExitCritical>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000cc4 	.word	0x20000cc4
 80037c4:	20000c9c 	.word	0x20000c9c
 80037c8:	20000c5c 	.word	0x20000c5c
 80037cc:	20000ca4 	.word	0x20000ca4
 80037d0:	200007cc 	.word	0x200007cc
 80037d4:	200007c8 	.word	0x200007c8
 80037d8:	20000cb0 	.word	0x20000cb0
 80037dc:	20000cac 	.word	0x20000cac
 80037e0:	e000ed04 	.word	0xe000ed04

080037e4 <xTaskGetTickCount>:
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4b04      	ldr	r3, [pc, #16]	; (80037fc <xTaskGetTickCount+0x18>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	607b      	str	r3, [r7, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	20000ca0 	.word	0x20000ca0

08003800 <xTaskIncrementTick>:
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	4b51      	ldr	r3, [pc, #324]	; (8003950 <xTaskIncrementTick+0x150>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	f040 808e 	bne.w	8003930 <xTaskIncrementTick+0x130>
 8003814:	4b4f      	ldr	r3, [pc, #316]	; (8003954 <xTaskIncrementTick+0x154>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3301      	adds	r3, #1
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	4a4d      	ldr	r2, [pc, #308]	; (8003954 <xTaskIncrementTick+0x154>)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d120      	bne.n	800386a <xTaskIncrementTick+0x6a>
 8003828:	4b4b      	ldr	r3, [pc, #300]	; (8003958 <xTaskIncrementTick+0x158>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <xTaskIncrementTick+0x48>
 8003832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	603b      	str	r3, [r7, #0]
 8003844:	bf00      	nop
 8003846:	e7fe      	b.n	8003846 <xTaskIncrementTick+0x46>
 8003848:	4b43      	ldr	r3, [pc, #268]	; (8003958 <xTaskIncrementTick+0x158>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	4b43      	ldr	r3, [pc, #268]	; (800395c <xTaskIncrementTick+0x15c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a41      	ldr	r2, [pc, #260]	; (8003958 <xTaskIncrementTick+0x158>)
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	4a41      	ldr	r2, [pc, #260]	; (800395c <xTaskIncrementTick+0x15c>)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6013      	str	r3, [r2, #0]
 800385c:	4b40      	ldr	r3, [pc, #256]	; (8003960 <xTaskIncrementTick+0x160>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3301      	adds	r3, #1
 8003862:	4a3f      	ldr	r2, [pc, #252]	; (8003960 <xTaskIncrementTick+0x160>)
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	f000 fad3 	bl	8003e10 <prvResetNextTaskUnblockTime>
 800386a:	4b3e      	ldr	r3, [pc, #248]	; (8003964 <xTaskIncrementTick+0x164>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	429a      	cmp	r2, r3
 8003872:	d34e      	bcc.n	8003912 <xTaskIncrementTick+0x112>
 8003874:	4b38      	ldr	r3, [pc, #224]	; (8003958 <xTaskIncrementTick+0x158>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <xTaskIncrementTick+0x82>
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <xTaskIncrementTick+0x84>
 8003882:	2300      	movs	r3, #0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d004      	beq.n	8003892 <xTaskIncrementTick+0x92>
 8003888:	4b36      	ldr	r3, [pc, #216]	; (8003964 <xTaskIncrementTick+0x164>)
 800388a:	f04f 32ff 	mov.w	r2, #4294967295
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	e03f      	b.n	8003912 <xTaskIncrementTick+0x112>
 8003892:	4b31      	ldr	r3, [pc, #196]	; (8003958 <xTaskIncrementTick+0x158>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d203      	bcs.n	80038b2 <xTaskIncrementTick+0xb2>
 80038aa:	4a2e      	ldr	r2, [pc, #184]	; (8003964 <xTaskIncrementTick+0x164>)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	e02f      	b.n	8003912 <xTaskIncrementTick+0x112>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	3304      	adds	r3, #4
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fe ff6a 	bl	8002790 <uxListRemove>
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d004      	beq.n	80038ce <xTaskIncrementTick+0xce>
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	3318      	adds	r3, #24
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fe ff61 	bl	8002790 <uxListRemove>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d2:	4b25      	ldr	r3, [pc, #148]	; (8003968 <xTaskIncrementTick+0x168>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d903      	bls.n	80038e2 <xTaskIncrementTick+0xe2>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038de:	4a22      	ldr	r2, [pc, #136]	; (8003968 <xTaskIncrementTick+0x168>)
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4a1f      	ldr	r2, [pc, #124]	; (800396c <xTaskIncrementTick+0x16c>)
 80038f0:	441a      	add	r2, r3
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	3304      	adds	r3, #4
 80038f6:	4619      	mov	r1, r3
 80038f8:	4610      	mov	r0, r2
 80038fa:	f7fe feee 	bl	80026da <vListInsertEnd>
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003902:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <xTaskIncrementTick+0x170>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003908:	429a      	cmp	r2, r3
 800390a:	d3b3      	bcc.n	8003874 <xTaskIncrementTick+0x74>
 800390c:	2301      	movs	r3, #1
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	e7b0      	b.n	8003874 <xTaskIncrementTick+0x74>
 8003912:	4b17      	ldr	r3, [pc, #92]	; (8003970 <xTaskIncrementTick+0x170>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003918:	4914      	ldr	r1, [pc, #80]	; (800396c <xTaskIncrementTick+0x16c>)
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d907      	bls.n	800393a <xTaskIncrementTick+0x13a>
 800392a:	2301      	movs	r3, #1
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	e004      	b.n	800393a <xTaskIncrementTick+0x13a>
 8003930:	4b10      	ldr	r3, [pc, #64]	; (8003974 <xTaskIncrementTick+0x174>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3301      	adds	r3, #1
 8003936:	4a0f      	ldr	r2, [pc, #60]	; (8003974 <xTaskIncrementTick+0x174>)
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <xTaskIncrementTick+0x178>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <xTaskIncrementTick+0x146>
 8003942:	2301      	movs	r3, #1
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	20000cc4 	.word	0x20000cc4
 8003954:	20000ca0 	.word	0x20000ca0
 8003958:	20000c54 	.word	0x20000c54
 800395c:	20000c58 	.word	0x20000c58
 8003960:	20000cb4 	.word	0x20000cb4
 8003964:	20000cbc 	.word	0x20000cbc
 8003968:	20000ca4 	.word	0x20000ca4
 800396c:	200007cc 	.word	0x200007cc
 8003970:	200007c8 	.word	0x200007c8
 8003974:	20000cac 	.word	0x20000cac
 8003978:	20000cb0 	.word	0x20000cb0

0800397c <vTaskSwitchContext>:
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	4b27      	ldr	r3, [pc, #156]	; (8003a20 <vTaskSwitchContext+0xa4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <vTaskSwitchContext+0x16>
 800398a:	4b26      	ldr	r3, [pc, #152]	; (8003a24 <vTaskSwitchContext+0xa8>)
 800398c:	2201      	movs	r2, #1
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	e041      	b.n	8003a16 <vTaskSwitchContext+0x9a>
 8003992:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <vTaskSwitchContext+0xa8>)
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	4b23      	ldr	r3, [pc, #140]	; (8003a28 <vTaskSwitchContext+0xac>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	e010      	b.n	80039c2 <vTaskSwitchContext+0x46>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <vTaskSwitchContext+0x40>
 80039a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	607b      	str	r3, [r7, #4]
 80039b8:	bf00      	nop
 80039ba:	e7fe      	b.n	80039ba <vTaskSwitchContext+0x3e>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	3b01      	subs	r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	491a      	ldr	r1, [pc, #104]	; (8003a2c <vTaskSwitchContext+0xb0>)
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	440b      	add	r3, r1
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0e4      	beq.n	80039a0 <vTaskSwitchContext+0x24>
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4a12      	ldr	r2, [pc, #72]	; (8003a2c <vTaskSwitchContext+0xb0>)
 80039e2:	4413      	add	r3, r2
 80039e4:	60bb      	str	r3, [r7, #8]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	605a      	str	r2, [r3, #4]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	3308      	adds	r3, #8
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d104      	bne.n	8003a06 <vTaskSwitchContext+0x8a>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4a08      	ldr	r2, [pc, #32]	; (8003a30 <vTaskSwitchContext+0xb4>)
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	4a05      	ldr	r2, [pc, #20]	; (8003a28 <vTaskSwitchContext+0xac>)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	bf00      	nop
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr
 8003a20:	20000cc4 	.word	0x20000cc4
 8003a24:	20000cb0 	.word	0x20000cb0
 8003a28:	20000ca4 	.word	0x20000ca4
 8003a2c:	200007cc 	.word	0x200007cc
 8003a30:	200007c8 	.word	0x200007c8

08003a34 <vTaskPlaceOnEventList>:
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10a      	bne.n	8003a5a <vTaskPlaceOnEventList+0x26>
 8003a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	bf00      	nop
 8003a58:	e7fe      	b.n	8003a58 <vTaskPlaceOnEventList+0x24>
 8003a5a:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <vTaskPlaceOnEventList+0x44>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3318      	adds	r3, #24
 8003a60:	4619      	mov	r1, r3
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fe fe5c 	bl	8002720 <vListInsert>
 8003a68:	2101      	movs	r1, #1
 8003a6a:	6838      	ldr	r0, [r7, #0]
 8003a6c:	f000 fa80 	bl	8003f70 <prvAddCurrentTaskToDelayedList>
 8003a70:	bf00      	nop
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	200007c8 	.word	0x200007c8

08003a7c <vTaskPlaceOnEventListRestricted>:
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10a      	bne.n	8003aa4 <vTaskPlaceOnEventListRestricted+0x28>
 8003a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a92:	f383 8811 	msr	BASEPRI, r3
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	bf00      	nop
 8003aa2:	e7fe      	b.n	8003aa2 <vTaskPlaceOnEventListRestricted+0x26>
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3318      	adds	r3, #24
 8003aaa:	4619      	mov	r1, r3
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f7fe fe14 	bl	80026da <vListInsertEnd>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <vTaskPlaceOnEventListRestricted+0x42>
 8003ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	68b8      	ldr	r0, [r7, #8]
 8003ac2:	f000 fa55 	bl	8003f70 <prvAddCurrentTaskToDelayedList>
 8003ac6:	bf00      	nop
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	200007c8 	.word	0x200007c8

08003ad4 <xTaskRemoveFromEventList>:
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10a      	bne.n	8003b00 <xTaskRemoveFromEventList+0x2c>
 8003aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	bf00      	nop
 8003afe:	e7fe      	b.n	8003afe <xTaskRemoveFromEventList+0x2a>
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	3318      	adds	r3, #24
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fe fe43 	bl	8002790 <uxListRemove>
 8003b0a:	4b1e      	ldr	r3, [pc, #120]	; (8003b84 <xTaskRemoveFromEventList+0xb0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d11d      	bne.n	8003b4e <xTaskRemoveFromEventList+0x7a>
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	3304      	adds	r3, #4
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fe fe3a 	bl	8002790 <uxListRemove>
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b20:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <xTaskRemoveFromEventList+0xb4>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d903      	bls.n	8003b30 <xTaskRemoveFromEventList+0x5c>
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	4a16      	ldr	r2, [pc, #88]	; (8003b88 <xTaskRemoveFromEventList+0xb4>)
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4a13      	ldr	r2, [pc, #76]	; (8003b8c <xTaskRemoveFromEventList+0xb8>)
 8003b3e:	441a      	add	r2, r3
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	3304      	adds	r3, #4
 8003b44:	4619      	mov	r1, r3
 8003b46:	4610      	mov	r0, r2
 8003b48:	f7fe fdc7 	bl	80026da <vListInsertEnd>
 8003b4c:	e005      	b.n	8003b5a <xTaskRemoveFromEventList+0x86>
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	3318      	adds	r3, #24
 8003b52:	4619      	mov	r1, r3
 8003b54:	480e      	ldr	r0, [pc, #56]	; (8003b90 <xTaskRemoveFromEventList+0xbc>)
 8003b56:	f7fe fdc0 	bl	80026da <vListInsertEnd>
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5e:	4b0d      	ldr	r3, [pc, #52]	; (8003b94 <xTaskRemoveFromEventList+0xc0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d905      	bls.n	8003b74 <xTaskRemoveFromEventList+0xa0>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <xTaskRemoveFromEventList+0xc4>)
 8003b6e:	2201      	movs	r2, #1
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	e001      	b.n	8003b78 <xTaskRemoveFromEventList+0xa4>
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000cc4 	.word	0x20000cc4
 8003b88:	20000ca4 	.word	0x20000ca4
 8003b8c:	200007cc 	.word	0x200007cc
 8003b90:	20000c5c 	.word	0x20000c5c
 8003b94:	200007c8 	.word	0x200007c8
 8003b98:	20000cb0 	.word	0x20000cb0

08003b9c <vTaskInternalSetTimeOutState>:
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <vTaskInternalSetTimeOutState+0x24>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <vTaskInternalSetTimeOutState+0x28>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	605a      	str	r2, [r3, #4]
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20000cb4 	.word	0x20000cb4
 8003bc4:	20000ca0 	.word	0x20000ca0

08003bc8 <xTaskCheckForTimeOut>:
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <xTaskCheckForTimeOut+0x26>
 8003bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bdc:	f383 8811 	msr	BASEPRI, r3
 8003be0:	f3bf 8f6f 	isb	sy
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	bf00      	nop
 8003bec:	e7fe      	b.n	8003bec <xTaskCheckForTimeOut+0x24>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10a      	bne.n	8003c0a <xTaskCheckForTimeOut+0x42>
 8003bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	bf00      	nop
 8003c08:	e7fe      	b.n	8003c08 <xTaskCheckForTimeOut+0x40>
 8003c0a:	f000 fe07 	bl	800481c <vPortEnterCritical>
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <xTaskCheckForTimeOut+0xbc>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	61bb      	str	r3, [r7, #24]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c26:	d102      	bne.n	8003c2e <xTaskCheckForTimeOut+0x66>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61fb      	str	r3, [r7, #28]
 8003c2c:	e023      	b.n	8003c76 <xTaskCheckForTimeOut+0xae>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	4b15      	ldr	r3, [pc, #84]	; (8003c88 <xTaskCheckForTimeOut+0xc0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d007      	beq.n	8003c4a <xTaskCheckForTimeOut+0x82>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d302      	bcc.n	8003c4a <xTaskCheckForTimeOut+0x82>
 8003c44:	2301      	movs	r3, #1
 8003c46:	61fb      	str	r3, [r7, #28]
 8003c48:	e015      	b.n	8003c76 <xTaskCheckForTimeOut+0xae>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d20b      	bcs.n	8003c6c <xTaskCheckForTimeOut+0xa4>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	1ad2      	subs	r2, r2, r3
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff ff9b 	bl	8003b9c <vTaskInternalSetTimeOutState>
 8003c66:	2300      	movs	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]
 8003c6a:	e004      	b.n	8003c76 <xTaskCheckForTimeOut+0xae>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	2301      	movs	r3, #1
 8003c74:	61fb      	str	r3, [r7, #28]
 8003c76:	f000 fe01 	bl	800487c <vPortExitCritical>
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3720      	adds	r7, #32
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	20000ca0 	.word	0x20000ca0
 8003c88:	20000cb4 	.word	0x20000cb4

08003c8c <vTaskMissedYield>:
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <vTaskMissedYield+0x14>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	bf00      	nop
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	20000cb0 	.word	0x20000cb0

08003ca4 <prvIdleTask>:
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	f000 f852 	bl	8003d54 <prvCheckTasksWaitingTermination>
 8003cb0:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <prvIdleTask+0x28>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d9f9      	bls.n	8003cac <prvIdleTask+0x8>
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <prvIdleTask+0x2c>)
 8003cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	e7f0      	b.n	8003cac <prvIdleTask+0x8>
 8003cca:	bf00      	nop
 8003ccc:	200007cc 	.word	0x200007cc
 8003cd0:	e000ed04 	.word	0xe000ed04

08003cd4 <prvInitialiseTaskLists>:
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	2300      	movs	r3, #0
 8003cdc:	607b      	str	r3, [r7, #4]
 8003cde:	e00c      	b.n	8003cfa <prvInitialiseTaskLists+0x26>
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4a12      	ldr	r2, [pc, #72]	; (8003d34 <prvInitialiseTaskLists+0x60>)
 8003cec:	4413      	add	r3, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fe fcc8 	bl	8002684 <vListInitialise>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	607b      	str	r3, [r7, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b37      	cmp	r3, #55	; 0x37
 8003cfe:	d9ef      	bls.n	8003ce0 <prvInitialiseTaskLists+0xc>
 8003d00:	480d      	ldr	r0, [pc, #52]	; (8003d38 <prvInitialiseTaskLists+0x64>)
 8003d02:	f7fe fcbf 	bl	8002684 <vListInitialise>
 8003d06:	480d      	ldr	r0, [pc, #52]	; (8003d3c <prvInitialiseTaskLists+0x68>)
 8003d08:	f7fe fcbc 	bl	8002684 <vListInitialise>
 8003d0c:	480c      	ldr	r0, [pc, #48]	; (8003d40 <prvInitialiseTaskLists+0x6c>)
 8003d0e:	f7fe fcb9 	bl	8002684 <vListInitialise>
 8003d12:	480c      	ldr	r0, [pc, #48]	; (8003d44 <prvInitialiseTaskLists+0x70>)
 8003d14:	f7fe fcb6 	bl	8002684 <vListInitialise>
 8003d18:	480b      	ldr	r0, [pc, #44]	; (8003d48 <prvInitialiseTaskLists+0x74>)
 8003d1a:	f7fe fcb3 	bl	8002684 <vListInitialise>
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <prvInitialiseTaskLists+0x78>)
 8003d20:	4a05      	ldr	r2, [pc, #20]	; (8003d38 <prvInitialiseTaskLists+0x64>)
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <prvInitialiseTaskLists+0x7c>)
 8003d26:	4a05      	ldr	r2, [pc, #20]	; (8003d3c <prvInitialiseTaskLists+0x68>)
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	200007cc 	.word	0x200007cc
 8003d38:	20000c2c 	.word	0x20000c2c
 8003d3c:	20000c40 	.word	0x20000c40
 8003d40:	20000c5c 	.word	0x20000c5c
 8003d44:	20000c70 	.word	0x20000c70
 8003d48:	20000c88 	.word	0x20000c88
 8003d4c:	20000c54 	.word	0x20000c54
 8003d50:	20000c58 	.word	0x20000c58

08003d54 <prvCheckTasksWaitingTermination>:
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	e019      	b.n	8003d90 <prvCheckTasksWaitingTermination+0x3c>
 8003d5c:	f000 fd5e 	bl	800481c <vPortEnterCritical>
 8003d60:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <prvCheckTasksWaitingTermination+0x50>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	607b      	str	r3, [r7, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fe fd0f 	bl	8002790 <uxListRemove>
 8003d72:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <prvCheckTasksWaitingTermination+0x54>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	4a0b      	ldr	r2, [pc, #44]	; (8003da8 <prvCheckTasksWaitingTermination+0x54>)
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <prvCheckTasksWaitingTermination+0x58>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	4a0a      	ldr	r2, [pc, #40]	; (8003dac <prvCheckTasksWaitingTermination+0x58>)
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	f000 fd79 	bl	800487c <vPortExitCritical>
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f810 	bl	8003db0 <prvDeleteTCB>
 8003d90:	4b06      	ldr	r3, [pc, #24]	; (8003dac <prvCheckTasksWaitingTermination+0x58>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e1      	bne.n	8003d5c <prvCheckTasksWaitingTermination+0x8>
 8003d98:	bf00      	nop
 8003d9a:	bf00      	nop
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20000c70 	.word	0x20000c70
 8003da8:	20000c9c 	.word	0x20000c9c
 8003dac:	20000c84 	.word	0x20000c84

08003db0 <prvDeleteTCB>:
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d108      	bne.n	8003dd4 <prvDeleteTCB+0x24>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 feec 	bl	8004ba4 <vPortFree>
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fee9 	bl	8004ba4 <vPortFree>
 8003dd2:	e018      	b.n	8003e06 <prvDeleteTCB+0x56>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d103      	bne.n	8003de6 <prvDeleteTCB+0x36>
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fee0 	bl	8004ba4 <vPortFree>
 8003de4:	e00f      	b.n	8003e06 <prvDeleteTCB+0x56>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d00a      	beq.n	8003e06 <prvDeleteTCB+0x56>
 8003df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df4:	f383 8811 	msr	BASEPRI, r3
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	bf00      	nop
 8003e04:	e7fe      	b.n	8003e04 <prvDeleteTCB+0x54>
 8003e06:	bf00      	nop
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <prvResetNextTaskUnblockTime>:
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4b0e      	ldr	r3, [pc, #56]	; (8003e50 <prvResetNextTaskUnblockTime+0x40>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <prvResetNextTaskUnblockTime+0x14>
 8003e20:	2301      	movs	r3, #1
 8003e22:	e000      	b.n	8003e26 <prvResetNextTaskUnblockTime+0x16>
 8003e24:	2300      	movs	r3, #0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d004      	beq.n	8003e34 <prvResetNextTaskUnblockTime+0x24>
 8003e2a:	4b0a      	ldr	r3, [pc, #40]	; (8003e54 <prvResetNextTaskUnblockTime+0x44>)
 8003e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e008      	b.n	8003e46 <prvResetNextTaskUnblockTime+0x36>
 8003e34:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <prvResetNextTaskUnblockTime+0x40>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	607b      	str	r3, [r7, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4a04      	ldr	r2, [pc, #16]	; (8003e54 <prvResetNextTaskUnblockTime+0x44>)
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr
 8003e50:	20000c54 	.word	0x20000c54
 8003e54:	20000cbc 	.word	0x20000cbc

08003e58 <xTaskGetSchedulerState>:
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <xTaskGetSchedulerState+0x34>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d102      	bne.n	8003e6c <xTaskGetSchedulerState+0x14>
 8003e66:	2301      	movs	r3, #1
 8003e68:	607b      	str	r3, [r7, #4]
 8003e6a:	e008      	b.n	8003e7e <xTaskGetSchedulerState+0x26>
 8003e6c:	4b08      	ldr	r3, [pc, #32]	; (8003e90 <xTaskGetSchedulerState+0x38>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d102      	bne.n	8003e7a <xTaskGetSchedulerState+0x22>
 8003e74:	2302      	movs	r3, #2
 8003e76:	607b      	str	r3, [r7, #4]
 8003e78:	e001      	b.n	8003e7e <xTaskGetSchedulerState+0x26>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	607b      	str	r3, [r7, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bc80      	pop	{r7}
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20000ca8 	.word	0x20000ca8
 8003e90:	20000cc4 	.word	0x20000cc4

08003e94 <xTaskPriorityDisinherit>:
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d056      	beq.n	8003f58 <xTaskPriorityDisinherit+0xc4>
 8003eaa:	4b2e      	ldr	r3, [pc, #184]	; (8003f64 <xTaskPriorityDisinherit+0xd0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d00a      	beq.n	8003eca <xTaskPriorityDisinherit+0x36>
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <xTaskPriorityDisinherit+0x34>
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10a      	bne.n	8003ee8 <xTaskPriorityDisinherit+0x54>
 8003ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	bf00      	nop
 8003ee6:	e7fe      	b.n	8003ee6 <xTaskPriorityDisinherit+0x52>
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eec:	1e5a      	subs	r2, r3, #1
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	651a      	str	r2, [r3, #80]	; 0x50
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d02c      	beq.n	8003f58 <xTaskPriorityDisinherit+0xc4>
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d128      	bne.n	8003f58 <xTaskPriorityDisinherit+0xc4>
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	3304      	adds	r3, #4
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fe fc40 	bl	8002790 <uxListRemove>
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	619a      	str	r2, [r3, #24]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f28:	4b0f      	ldr	r3, [pc, #60]	; (8003f68 <xTaskPriorityDisinherit+0xd4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d903      	bls.n	8003f38 <xTaskPriorityDisinherit+0xa4>
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	4a0c      	ldr	r2, [pc, #48]	; (8003f68 <xTaskPriorityDisinherit+0xd4>)
 8003f36:	6013      	str	r3, [r2, #0]
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4a09      	ldr	r2, [pc, #36]	; (8003f6c <xTaskPriorityDisinherit+0xd8>)
 8003f46:	441a      	add	r2, r3
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	f7fe fbc3 	bl	80026da <vListInsertEnd>
 8003f54:	2301      	movs	r3, #1
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	200007c8 	.word	0x200007c8
 8003f68:	20000ca4 	.word	0x20000ca4
 8003f6c:	200007cc 	.word	0x200007cc

08003f70 <prvAddCurrentTaskToDelayedList>:
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
 8003f7a:	4b21      	ldr	r3, [pc, #132]	; (8004000 <prvAddCurrentTaskToDelayedList+0x90>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	4b20      	ldr	r3, [pc, #128]	; (8004004 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3304      	adds	r3, #4
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe fc02 	bl	8002790 <uxListRemove>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d10a      	bne.n	8003faa <prvAddCurrentTaskToDelayedList+0x3a>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d007      	beq.n	8003faa <prvAddCurrentTaskToDelayedList+0x3a>
 8003f9a:	4b1a      	ldr	r3, [pc, #104]	; (8004004 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4819      	ldr	r0, [pc, #100]	; (8004008 <prvAddCurrentTaskToDelayedList+0x98>)
 8003fa4:	f7fe fb99 	bl	80026da <vListInsertEnd>
 8003fa8:	e026      	b.n	8003ff8 <prvAddCurrentTaskToDelayedList+0x88>
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4413      	add	r3, r2
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	4b14      	ldr	r3, [pc, #80]	; (8004004 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	605a      	str	r2, [r3, #4]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d209      	bcs.n	8003fd6 <prvAddCurrentTaskToDelayedList+0x66>
 8003fc2:	4b12      	ldr	r3, [pc, #72]	; (800400c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3304      	adds	r3, #4
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4610      	mov	r0, r2
 8003fd0:	f7fe fba6 	bl	8002720 <vListInsert>
 8003fd4:	e010      	b.n	8003ff8 <prvAddCurrentTaskToDelayedList+0x88>
 8003fd6:	4b0e      	ldr	r3, [pc, #56]	; (8004010 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	f7fe fb9c 	bl	8002720 <vListInsert>
 8003fe8:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d202      	bcs.n	8003ff8 <prvAddCurrentTaskToDelayedList+0x88>
 8003ff2:	4a08      	ldr	r2, [pc, #32]	; (8004014 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	bf00      	nop
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	20000ca0 	.word	0x20000ca0
 8004004:	200007c8 	.word	0x200007c8
 8004008:	20000c88 	.word	0x20000c88
 800400c:	20000c58 	.word	0x20000c58
 8004010:	20000c54 	.word	0x20000c54
 8004014:	20000cbc 	.word	0x20000cbc

08004018 <xTimerCreateTimerTask>:
 8004018:	b580      	push	{r7, lr}
 800401a:	b08a      	sub	sp, #40	; 0x28
 800401c:	af04      	add	r7, sp, #16
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	f000 facb 	bl	80045bc <prvCheckForValidListAndQueue>
 8004026:	4b1c      	ldr	r3, [pc, #112]	; (8004098 <xTimerCreateTimerTask+0x80>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d021      	beq.n	8004072 <xTimerCreateTimerTask+0x5a>
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	2300      	movs	r3, #0
 8004034:	60bb      	str	r3, [r7, #8]
 8004036:	1d3a      	adds	r2, r7, #4
 8004038:	f107 0108 	add.w	r1, r7, #8
 800403c:	f107 030c 	add.w	r3, r7, #12
 8004040:	4618      	mov	r0, r3
 8004042:	f7fe fb05 	bl	8002650 <vApplicationGetTimerTaskMemory>
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	9202      	str	r2, [sp, #8]
 800404e:	9301      	str	r3, [sp, #4]
 8004050:	2302      	movs	r3, #2
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	2300      	movs	r3, #0
 8004056:	460a      	mov	r2, r1
 8004058:	4910      	ldr	r1, [pc, #64]	; (800409c <xTimerCreateTimerTask+0x84>)
 800405a:	4811      	ldr	r0, [pc, #68]	; (80040a0 <xTimerCreateTimerTask+0x88>)
 800405c:	f7ff f8e4 	bl	8003228 <xTaskCreateStatic>
 8004060:	4603      	mov	r3, r0
 8004062:	4a10      	ldr	r2, [pc, #64]	; (80040a4 <xTimerCreateTimerTask+0x8c>)
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <xTimerCreateTimerTask+0x8c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <xTimerCreateTimerTask+0x5a>
 800406e:	2301      	movs	r3, #1
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10a      	bne.n	800408e <xTimerCreateTimerTask+0x76>
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	bf00      	nop
 800408c:	e7fe      	b.n	800408c <xTimerCreateTimerTask+0x74>
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20000cf8 	.word	0x20000cf8
 800409c:	08004ee8 	.word	0x08004ee8
 80040a0:	080041c5 	.word	0x080041c5
 80040a4:	20000cfc 	.word	0x20000cfc

080040a8 <xTimerGenericCommand>:
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	; 0x28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	603b      	str	r3, [r7, #0]
 80040b6:	2300      	movs	r3, #0
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10a      	bne.n	80040d6 <xTimerGenericCommand+0x2e>
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	623b      	str	r3, [r7, #32]
 80040d2:	bf00      	nop
 80040d4:	e7fe      	b.n	80040d4 <xTimerGenericCommand+0x2c>
 80040d6:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <xTimerGenericCommand+0x98>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d02a      	beq.n	8004134 <xTimerGenericCommand+0x8c>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	613b      	str	r3, [r7, #16]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	61bb      	str	r3, [r7, #24]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b05      	cmp	r3, #5
 80040ee:	dc18      	bgt.n	8004122 <xTimerGenericCommand+0x7a>
 80040f0:	f7ff feb2 	bl	8003e58 <xTaskGetSchedulerState>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d109      	bne.n	800410e <xTimerGenericCommand+0x66>
 80040fa:	4b11      	ldr	r3, [pc, #68]	; (8004140 <xTimerGenericCommand+0x98>)
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	f107 0110 	add.w	r1, r7, #16
 8004102:	2300      	movs	r3, #0
 8004104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004106:	f7fe fcad 	bl	8002a64 <xQueueGenericSend>
 800410a:	6278      	str	r0, [r7, #36]	; 0x24
 800410c:	e012      	b.n	8004134 <xTimerGenericCommand+0x8c>
 800410e:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <xTimerGenericCommand+0x98>)
 8004110:	6818      	ldr	r0, [r3, #0]
 8004112:	f107 0110 	add.w	r1, r7, #16
 8004116:	2300      	movs	r3, #0
 8004118:	2200      	movs	r2, #0
 800411a:	f7fe fca3 	bl	8002a64 <xQueueGenericSend>
 800411e:	6278      	str	r0, [r7, #36]	; 0x24
 8004120:	e008      	b.n	8004134 <xTimerGenericCommand+0x8c>
 8004122:	4b07      	ldr	r3, [pc, #28]	; (8004140 <xTimerGenericCommand+0x98>)
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	f107 0110 	add.w	r1, r7, #16
 800412a:	2300      	movs	r3, #0
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	f7fe fd97 	bl	8002c60 <xQueueGenericSendFromISR>
 8004132:	6278      	str	r0, [r7, #36]	; 0x24
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	4618      	mov	r0, r3
 8004138:	3728      	adds	r7, #40	; 0x28
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20000cf8 	.word	0x20000cf8

08004144 <prvProcessExpiredTimer>:
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af02      	add	r7, sp, #8
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
 800414e:	4b1c      	ldr	r3, [pc, #112]	; (80041c0 <prvProcessExpiredTimer+0x7c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	3304      	adds	r3, #4
 800415c:	4618      	mov	r0, r3
 800415e:	f7fe fb17 	bl	8002790 <uxListRemove>
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d122      	bne.n	80041b0 <prvProcessExpiredTimer+0x6c>
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	18d1      	adds	r1, r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	6978      	ldr	r0, [r7, #20]
 8004178:	f000 f8c8 	bl	800430c <prvInsertTimerInActiveList>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d016      	beq.n	80041b0 <prvProcessExpiredTimer+0x6c>
 8004182:	2300      	movs	r3, #0
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	2300      	movs	r3, #0
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	2100      	movs	r1, #0
 800418c:	6978      	ldr	r0, [r7, #20]
 800418e:	f7ff ff8b 	bl	80040a8 <xTimerGenericCommand>
 8004192:	6138      	str	r0, [r7, #16]
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10a      	bne.n	80041b0 <prvProcessExpiredTimer+0x6c>
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	bf00      	nop
 80041ae:	e7fe      	b.n	80041ae <prvProcessExpiredTimer+0x6a>
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	6978      	ldr	r0, [r7, #20]
 80041b6:	4798      	blx	r3
 80041b8:	bf00      	nop
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	20000cf0 	.word	0x20000cf0

080041c4 <prvTimerTask>:
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	f107 0308 	add.w	r3, r7, #8
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 f857 	bl	8004284 <prvGetNextExpireTime>
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4619      	mov	r1, r3
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f803 	bl	80041e8 <prvProcessTimerOrBlockTask>
 80041e2:	f000 f8d5 	bl	8004390 <prvProcessReceivedCommands>
 80041e6:	e7f1      	b.n	80041cc <prvTimerTask+0x8>

080041e8 <prvProcessTimerOrBlockTask>:
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
 80041f2:	f7ff fa4b 	bl	800368c <vTaskSuspendAll>
 80041f6:	f107 0308 	add.w	r3, r7, #8
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 f866 	bl	80042cc <prvSampleTimeNow>
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d130      	bne.n	800426a <prvProcessTimerOrBlockTask+0x82>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10a      	bne.n	8004224 <prvProcessTimerOrBlockTask+0x3c>
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	429a      	cmp	r2, r3
 8004214:	d806      	bhi.n	8004224 <prvProcessTimerOrBlockTask+0x3c>
 8004216:	f7ff fa47 	bl	80036a8 <xTaskResumeAll>
 800421a:	68f9      	ldr	r1, [r7, #12]
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7ff ff91 	bl	8004144 <prvProcessExpiredTimer>
 8004222:	e024      	b.n	800426e <prvProcessTimerOrBlockTask+0x86>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d008      	beq.n	800423c <prvProcessTimerOrBlockTask+0x54>
 800422a:	4b13      	ldr	r3, [pc, #76]	; (8004278 <prvProcessTimerOrBlockTask+0x90>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	bf0c      	ite	eq
 8004234:	2301      	moveq	r3, #1
 8004236:	2300      	movne	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	4b0f      	ldr	r3, [pc, #60]	; (800427c <prvProcessTimerOrBlockTask+0x94>)
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	4619      	mov	r1, r3
 800424a:	f7fe ffb9 	bl	80031c0 <vQueueWaitForMessageRestricted>
 800424e:	f7ff fa2b 	bl	80036a8 <xTaskResumeAll>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10a      	bne.n	800426e <prvProcessTimerOrBlockTask+0x86>
 8004258:	4b09      	ldr	r3, [pc, #36]	; (8004280 <prvProcessTimerOrBlockTask+0x98>)
 800425a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	e001      	b.n	800426e <prvProcessTimerOrBlockTask+0x86>
 800426a:	f7ff fa1d 	bl	80036a8 <xTaskResumeAll>
 800426e:	bf00      	nop
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20000cf4 	.word	0x20000cf4
 800427c:	20000cf8 	.word	0x20000cf8
 8004280:	e000ed04 	.word	0xe000ed04

08004284 <prvGetNextExpireTime>:
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	4b0e      	ldr	r3, [pc, #56]	; (80042c8 <prvGetNextExpireTime+0x44>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	bf0c      	ite	eq
 8004296:	2301      	moveq	r3, #1
 8004298:	2300      	movne	r3, #0
 800429a:	b2db      	uxtb	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d105      	bne.n	80042b6 <prvGetNextExpireTime+0x32>
 80042aa:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <prvGetNextExpireTime+0x44>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	e001      	b.n	80042ba <prvGetNextExpireTime+0x36>
 80042b6:	2300      	movs	r3, #0
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	20000cf0 	.word	0x20000cf0

080042cc <prvSampleTimeNow>:
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	f7ff fa86 	bl	80037e4 <xTaskGetTickCount>
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <prvSampleTimeNow+0x3c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d205      	bcs.n	80042f0 <prvSampleTimeNow+0x24>
 80042e4:	f000 f908 	bl	80044f8 <prvSwitchTimerLists>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	e002      	b.n	80042f6 <prvSampleTimeNow+0x2a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	4a04      	ldr	r2, [pc, #16]	; (8004308 <prvSampleTimeNow+0x3c>)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20000d00 	.word	0x20000d00

0800430c <prvInsertTimerInActiveList>:
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
 8004318:	603b      	str	r3, [r7, #0]
 800431a:	2300      	movs	r3, #0
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	605a      	str	r2, [r3, #4]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	611a      	str	r2, [r3, #16]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	429a      	cmp	r2, r3
 8004330:	d812      	bhi.n	8004358 <prvInsertTimerInActiveList+0x4c>
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	1ad2      	subs	r2, r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	429a      	cmp	r2, r3
 800433e:	d302      	bcc.n	8004346 <prvInsertTimerInActiveList+0x3a>
 8004340:	2301      	movs	r3, #1
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	e01b      	b.n	800437e <prvInsertTimerInActiveList+0x72>
 8004346:	4b10      	ldr	r3, [pc, #64]	; (8004388 <prvInsertTimerInActiveList+0x7c>)
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3304      	adds	r3, #4
 800434e:	4619      	mov	r1, r3
 8004350:	4610      	mov	r0, r2
 8004352:	f7fe f9e5 	bl	8002720 <vListInsert>
 8004356:	e012      	b.n	800437e <prvInsertTimerInActiveList+0x72>
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d206      	bcs.n	800436e <prvInsertTimerInActiveList+0x62>
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d302      	bcc.n	800436e <prvInsertTimerInActiveList+0x62>
 8004368:	2301      	movs	r3, #1
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	e007      	b.n	800437e <prvInsertTimerInActiveList+0x72>
 800436e:	4b07      	ldr	r3, [pc, #28]	; (800438c <prvInsertTimerInActiveList+0x80>)
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3304      	adds	r3, #4
 8004376:	4619      	mov	r1, r3
 8004378:	4610      	mov	r0, r2
 800437a:	f7fe f9d1 	bl	8002720 <vListInsert>
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20000cf4 	.word	0x20000cf4
 800438c:	20000cf0 	.word	0x20000cf0

08004390 <prvProcessReceivedCommands>:
 8004390:	b580      	push	{r7, lr}
 8004392:	b08e      	sub	sp, #56	; 0x38
 8004394:	af02      	add	r7, sp, #8
 8004396:	e09d      	b.n	80044d4 <prvProcessReceivedCommands+0x144>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	da18      	bge.n	80043d0 <prvProcessReceivedCommands+0x40>
 800439e:	1d3b      	adds	r3, r7, #4
 80043a0:	3304      	adds	r3, #4
 80043a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <prvProcessReceivedCommands+0x30>
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	bf00      	nop
 80043be:	e7fe      	b.n	80043be <prvProcessReceivedCommands+0x2e>
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043c6:	6850      	ldr	r0, [r2, #4]
 80043c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043ca:	6892      	ldr	r2, [r2, #8]
 80043cc:	4611      	mov	r1, r2
 80043ce:	4798      	blx	r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	db7d      	blt.n	80044d2 <prvProcessReceivedCommands+0x142>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80043da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d004      	beq.n	80043ec <prvProcessReceivedCommands+0x5c>
 80043e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e4:	3304      	adds	r3, #4
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe f9d2 	bl	8002790 <uxListRemove>
 80043ec:	463b      	mov	r3, r7
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff ff6c 	bl	80042cc <prvSampleTimeNow>
 80043f4:	6278      	str	r0, [r7, #36]	; 0x24
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b09      	cmp	r3, #9
 80043fa:	d86b      	bhi.n	80044d4 <prvProcessReceivedCommands+0x144>
 80043fc:	a201      	add	r2, pc, #4	; (adr r2, 8004404 <prvProcessReceivedCommands+0x74>)
 80043fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004402:	bf00      	nop
 8004404:	0800442d 	.word	0x0800442d
 8004408:	0800442d 	.word	0x0800442d
 800440c:	0800442d 	.word	0x0800442d
 8004410:	080044d5 	.word	0x080044d5
 8004414:	08004489 	.word	0x08004489
 8004418:	080044c1 	.word	0x080044c1
 800441c:	0800442d 	.word	0x0800442d
 8004420:	0800442d 	.word	0x0800442d
 8004424:	080044d5 	.word	0x080044d5
 8004428:	08004489 	.word	0x08004489
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	18d1      	adds	r1, r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800443a:	f7ff ff67 	bl	800430c <prvInsertTimerInActiveList>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d047      	beq.n	80044d4 <prvProcessReceivedCommands+0x144>
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800444a:	4798      	blx	r3
 800444c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d13f      	bne.n	80044d4 <prvProcessReceivedCommands+0x144>
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	441a      	add	r2, r3
 800445c:	2300      	movs	r3, #0
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	2300      	movs	r3, #0
 8004462:	2100      	movs	r1, #0
 8004464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004466:	f7ff fe1f 	bl	80040a8 <xTimerGenericCommand>
 800446a:	6238      	str	r0, [r7, #32]
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d130      	bne.n	80044d4 <prvProcessReceivedCommands+0x144>
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	61bb      	str	r3, [r7, #24]
 8004484:	bf00      	nop
 8004486:	e7fe      	b.n	8004486 <prvProcessReceivedCommands+0xf6>
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	619a      	str	r2, [r3, #24]
 800448e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10a      	bne.n	80044ac <prvProcessReceivedCommands+0x11c>
 8004496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	bf00      	nop
 80044aa:	e7fe      	b.n	80044aa <prvProcessReceivedCommands+0x11a>
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	699a      	ldr	r2, [r3, #24]
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	18d1      	adds	r1, r2, r3
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ba:	f7ff ff27 	bl	800430c <prvInsertTimerInActiveList>
 80044be:	e009      	b.n	80044d4 <prvProcessReceivedCommands+0x144>
 80044c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d104      	bne.n	80044d4 <prvProcessReceivedCommands+0x144>
 80044ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044cc:	f000 fb6a 	bl	8004ba4 <vPortFree>
 80044d0:	e000      	b.n	80044d4 <prvProcessReceivedCommands+0x144>
 80044d2:	bf00      	nop
 80044d4:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <prvProcessReceivedCommands+0x164>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	1d39      	adds	r1, r7, #4
 80044da:	2200      	movs	r2, #0
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fe fc57 	bl	8002d90 <xQueueReceive>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f47f af57 	bne.w	8004398 <prvProcessReceivedCommands+0x8>
 80044ea:	bf00      	nop
 80044ec:	bf00      	nop
 80044ee:	3730      	adds	r7, #48	; 0x30
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	20000cf8 	.word	0x20000cf8

080044f8 <prvSwitchTimerLists>:
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	e045      	b.n	800458c <prvSwitchTimerLists+0x94>
 8004500:	4b2c      	ldr	r3, [pc, #176]	; (80045b4 <prvSwitchTimerLists+0xbc>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	4b2a      	ldr	r3, [pc, #168]	; (80045b4 <prvSwitchTimerLists+0xbc>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3304      	adds	r3, #4
 8004518:	4618      	mov	r0, r3
 800451a:	f7fe f939 	bl	8002790 <uxListRemove>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	4798      	blx	r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d12e      	bne.n	800458c <prvSwitchTimerLists+0x94>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4413      	add	r3, r2
 8004536:	60bb      	str	r3, [r7, #8]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	429a      	cmp	r2, r3
 800453e:	d90e      	bls.n	800455e <prvSwitchTimerLists+0x66>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	605a      	str	r2, [r3, #4]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	611a      	str	r2, [r3, #16]
 800454c:	4b19      	ldr	r3, [pc, #100]	; (80045b4 <prvSwitchTimerLists+0xbc>)
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3304      	adds	r3, #4
 8004554:	4619      	mov	r1, r3
 8004556:	4610      	mov	r0, r2
 8004558:	f7fe f8e2 	bl	8002720 <vListInsert>
 800455c:	e016      	b.n	800458c <prvSwitchTimerLists+0x94>
 800455e:	2300      	movs	r3, #0
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	2300      	movs	r3, #0
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	2100      	movs	r1, #0
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f7ff fd9d 	bl	80040a8 <xTimerGenericCommand>
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10a      	bne.n	800458c <prvSwitchTimerLists+0x94>
 8004576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	bf00      	nop
 800458a:	e7fe      	b.n	800458a <prvSwitchTimerLists+0x92>
 800458c:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <prvSwitchTimerLists+0xbc>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1b4      	bne.n	8004500 <prvSwitchTimerLists+0x8>
 8004596:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <prvSwitchTimerLists+0xbc>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <prvSwitchTimerLists+0xc0>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a04      	ldr	r2, [pc, #16]	; (80045b4 <prvSwitchTimerLists+0xbc>)
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	4a04      	ldr	r2, [pc, #16]	; (80045b8 <prvSwitchTimerLists+0xc0>)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	bf00      	nop
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000cf0 	.word	0x20000cf0
 80045b8:	20000cf4 	.word	0x20000cf4

080045bc <prvCheckForValidListAndQueue>:
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	f000 f92b 	bl	800481c <vPortEnterCritical>
 80045c6:	4b15      	ldr	r3, [pc, #84]	; (800461c <prvCheckForValidListAndQueue+0x60>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d120      	bne.n	8004610 <prvCheckForValidListAndQueue+0x54>
 80045ce:	4814      	ldr	r0, [pc, #80]	; (8004620 <prvCheckForValidListAndQueue+0x64>)
 80045d0:	f7fe f858 	bl	8002684 <vListInitialise>
 80045d4:	4813      	ldr	r0, [pc, #76]	; (8004624 <prvCheckForValidListAndQueue+0x68>)
 80045d6:	f7fe f855 	bl	8002684 <vListInitialise>
 80045da:	4b13      	ldr	r3, [pc, #76]	; (8004628 <prvCheckForValidListAndQueue+0x6c>)
 80045dc:	4a10      	ldr	r2, [pc, #64]	; (8004620 <prvCheckForValidListAndQueue+0x64>)
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	4b12      	ldr	r3, [pc, #72]	; (800462c <prvCheckForValidListAndQueue+0x70>)
 80045e2:	4a10      	ldr	r2, [pc, #64]	; (8004624 <prvCheckForValidListAndQueue+0x68>)
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	2300      	movs	r3, #0
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	4b11      	ldr	r3, [pc, #68]	; (8004630 <prvCheckForValidListAndQueue+0x74>)
 80045ec:	4a11      	ldr	r2, [pc, #68]	; (8004634 <prvCheckForValidListAndQueue+0x78>)
 80045ee:	2110      	movs	r1, #16
 80045f0:	200a      	movs	r0, #10
 80045f2:	f7fe f95f 	bl	80028b4 <xQueueGenericCreateStatic>
 80045f6:	4603      	mov	r3, r0
 80045f8:	4a08      	ldr	r2, [pc, #32]	; (800461c <prvCheckForValidListAndQueue+0x60>)
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	4b07      	ldr	r3, [pc, #28]	; (800461c <prvCheckForValidListAndQueue+0x60>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <prvCheckForValidListAndQueue+0x54>
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <prvCheckForValidListAndQueue+0x60>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	490b      	ldr	r1, [pc, #44]	; (8004638 <prvCheckForValidListAndQueue+0x7c>)
 800460a:	4618      	mov	r0, r3
 800460c:	f7fe fdb0 	bl	8003170 <vQueueAddToRegistry>
 8004610:	f000 f934 	bl	800487c <vPortExitCritical>
 8004614:	bf00      	nop
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000cf8 	.word	0x20000cf8
 8004620:	20000cc8 	.word	0x20000cc8
 8004624:	20000cdc 	.word	0x20000cdc
 8004628:	20000cf0 	.word	0x20000cf0
 800462c:	20000cf4 	.word	0x20000cf4
 8004630:	20000da4 	.word	0x20000da4
 8004634:	20000d04 	.word	0x20000d04
 8004638:	08004ef0 	.word	0x08004ef0

0800463c <pxPortInitialiseStack>:
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	3b04      	subs	r3, #4
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	3b04      	subs	r3, #4
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f023 0201 	bic.w	r2, r3, #1
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3b04      	subs	r3, #4
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	4a08      	ldr	r2, [pc, #32]	; (8004690 <pxPortInitialiseStack+0x54>)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	3b14      	subs	r3, #20
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	3b20      	subs	r3, #32
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr
 8004690:	08004695 	.word	0x08004695

08004694 <prvTaskExitError>:
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	2300      	movs	r3, #0
 800469c:	607b      	str	r3, [r7, #4]
 800469e:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <prvTaskExitError+0x54>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a6:	d00a      	beq.n	80046be <prvTaskExitError+0x2a>
 80046a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ac:	f383 8811 	msr	BASEPRI, r3
 80046b0:	f3bf 8f6f 	isb	sy
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	bf00      	nop
 80046bc:	e7fe      	b.n	80046bc <prvTaskExitError+0x28>
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	60bb      	str	r3, [r7, #8]
 80046d0:	bf00      	nop
 80046d2:	bf00      	nop
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0fc      	beq.n	80046d4 <prvTaskExitError+0x40>
 80046da:	bf00      	nop
 80046dc:	bf00      	nop
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	2000000c 	.word	0x2000000c
 80046ec:	00000000 	.word	0x00000000

080046f0 <SVC_Handler>:
 80046f0:	4b07      	ldr	r3, [pc, #28]	; (8004710 <pxCurrentTCBConst2>)
 80046f2:	6819      	ldr	r1, [r3, #0]
 80046f4:	6808      	ldr	r0, [r1, #0]
 80046f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80046fa:	f380 8809 	msr	PSP, r0
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f04f 0000 	mov.w	r0, #0
 8004706:	f380 8811 	msr	BASEPRI, r0
 800470a:	f04e 0e0d 	orr.w	lr, lr, #13
 800470e:	4770      	bx	lr

08004710 <pxCurrentTCBConst2>:
 8004710:	200007c8 	.word	0x200007c8
 8004714:	bf00      	nop
 8004716:	bf00      	nop

08004718 <prvPortStartFirstTask>:
 8004718:	4806      	ldr	r0, [pc, #24]	; (8004734 <prvPortStartFirstTask+0x1c>)
 800471a:	6800      	ldr	r0, [r0, #0]
 800471c:	6800      	ldr	r0, [r0, #0]
 800471e:	f380 8808 	msr	MSP, r0
 8004722:	b662      	cpsie	i
 8004724:	b661      	cpsie	f
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	df00      	svc	0
 8004730:	bf00      	nop
 8004732:	bf00      	nop
 8004734:	e000ed08 	.word	0xe000ed08

08004738 <xPortStartScheduler>:
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	4b32      	ldr	r3, [pc, #200]	; (8004808 <xPortStartScheduler+0xd0>)
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	607b      	str	r3, [r7, #4]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	22ff      	movs	r2, #255	; 0xff
 800474e:	701a      	strb	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	70fb      	strb	r3, [r7, #3]
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004760:	b2da      	uxtb	r2, r3
 8004762:	4b2a      	ldr	r3, [pc, #168]	; (800480c <xPortStartScheduler+0xd4>)
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	4b2a      	ldr	r3, [pc, #168]	; (8004810 <xPortStartScheduler+0xd8>)
 8004768:	2207      	movs	r2, #7
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	e009      	b.n	8004782 <xPortStartScheduler+0x4a>
 800476e:	4b28      	ldr	r3, [pc, #160]	; (8004810 <xPortStartScheduler+0xd8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3b01      	subs	r3, #1
 8004774:	4a26      	ldr	r2, [pc, #152]	; (8004810 <xPortStartScheduler+0xd8>)
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	b2db      	uxtb	r3, r3
 8004780:	70fb      	strb	r3, [r7, #3]
 8004782:	78fb      	ldrb	r3, [r7, #3]
 8004784:	b2db      	uxtb	r3, r3
 8004786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478a:	2b80      	cmp	r3, #128	; 0x80
 800478c:	d0ef      	beq.n	800476e <xPortStartScheduler+0x36>
 800478e:	4b20      	ldr	r3, [pc, #128]	; (8004810 <xPortStartScheduler+0xd8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f1c3 0307 	rsb	r3, r3, #7
 8004796:	2b04      	cmp	r3, #4
 8004798:	d00a      	beq.n	80047b0 <xPortStartScheduler+0x78>
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	60bb      	str	r3, [r7, #8]
 80047ac:	bf00      	nop
 80047ae:	e7fe      	b.n	80047ae <xPortStartScheduler+0x76>
 80047b0:	4b17      	ldr	r3, [pc, #92]	; (8004810 <xPortStartScheduler+0xd8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	4a16      	ldr	r2, [pc, #88]	; (8004810 <xPortStartScheduler+0xd8>)
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	4b15      	ldr	r3, [pc, #84]	; (8004810 <xPortStartScheduler+0xd8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047c2:	4a13      	ldr	r2, [pc, #76]	; (8004810 <xPortStartScheduler+0xd8>)
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	701a      	strb	r2, [r3, #0]
 80047ce:	4b11      	ldr	r3, [pc, #68]	; (8004814 <xPortStartScheduler+0xdc>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a10      	ldr	r2, [pc, #64]	; (8004814 <xPortStartScheduler+0xdc>)
 80047d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	4b0e      	ldr	r3, [pc, #56]	; (8004814 <xPortStartScheduler+0xdc>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a0d      	ldr	r2, [pc, #52]	; (8004814 <xPortStartScheduler+0xdc>)
 80047e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	f000 f8b9 	bl	800495c <vPortSetupTimerInterrupt>
 80047ea:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <xPortStartScheduler+0xe0>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	f7ff ff92 	bl	8004718 <prvPortStartFirstTask>
 80047f4:	f7ff f8c2 	bl	800397c <vTaskSwitchContext>
 80047f8:	f7ff ff4c 	bl	8004694 <prvTaskExitError>
 80047fc:	2300      	movs	r3, #0
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	e000e400 	.word	0xe000e400
 800480c:	20000df4 	.word	0x20000df4
 8004810:	20000df8 	.word	0x20000df8
 8004814:	e000ed20 	.word	0xe000ed20
 8004818:	2000000c 	.word	0x2000000c

0800481c <vPortEnterCritical>:
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	607b      	str	r3, [r7, #4]
 8004834:	bf00      	nop
 8004836:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <vPortEnterCritical+0x58>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3301      	adds	r3, #1
 800483c:	4a0d      	ldr	r2, [pc, #52]	; (8004874 <vPortEnterCritical+0x58>)
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <vPortEnterCritical+0x58>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d10f      	bne.n	8004868 <vPortEnterCritical+0x4c>
 8004848:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <vPortEnterCritical+0x5c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <vPortEnterCritical+0x4c>
 8004852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	bf00      	nop
 8004866:	e7fe      	b.n	8004866 <vPortEnterCritical+0x4a>
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	bc80      	pop	{r7}
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	2000000c 	.word	0x2000000c
 8004878:	e000ed04 	.word	0xe000ed04

0800487c <vPortExitCritical>:
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	4b11      	ldr	r3, [pc, #68]	; (80048c8 <vPortExitCritical+0x4c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10a      	bne.n	80048a0 <vPortExitCritical+0x24>
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	607b      	str	r3, [r7, #4]
 800489c:	bf00      	nop
 800489e:	e7fe      	b.n	800489e <vPortExitCritical+0x22>
 80048a0:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <vPortExitCritical+0x4c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	4a08      	ldr	r2, [pc, #32]	; (80048c8 <vPortExitCritical+0x4c>)
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	4b07      	ldr	r3, [pc, #28]	; (80048c8 <vPortExitCritical+0x4c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d105      	bne.n	80048be <vPortExitCritical+0x42>
 80048b2:	2300      	movs	r3, #0
 80048b4:	603b      	str	r3, [r7, #0]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	bf00      	nop
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr
 80048c8:	2000000c 	.word	0x2000000c
 80048cc:	00000000 	.word	0x00000000

080048d0 <PendSV_Handler>:
 80048d0:	f3ef 8009 	mrs	r0, PSP
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	4b0d      	ldr	r3, [pc, #52]	; (8004910 <pxCurrentTCBConst>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048e0:	6010      	str	r0, [r2, #0]
 80048e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80048e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048ea:	f380 8811 	msr	BASEPRI, r0
 80048ee:	f7ff f845 	bl	800397c <vTaskSwitchContext>
 80048f2:	f04f 0000 	mov.w	r0, #0
 80048f6:	f380 8811 	msr	BASEPRI, r0
 80048fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80048fe:	6819      	ldr	r1, [r3, #0]
 8004900:	6808      	ldr	r0, [r1, #0]
 8004902:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004906:	f380 8809 	msr	PSP, r0
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	4770      	bx	lr

08004910 <pxCurrentTCBConst>:
 8004910:	200007c8 	.word	0x200007c8
 8004914:	bf00      	nop
 8004916:	bf00      	nop

08004918 <SysTick_Handler>:
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	607b      	str	r3, [r7, #4]
 8004930:	bf00      	nop
 8004932:	f7fe ff65 	bl	8003800 <xTaskIncrementTick>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <SysTick_Handler+0x2c>
 800493c:	4b06      	ldr	r3, [pc, #24]	; (8004958 <SysTick_Handler+0x40>)
 800493e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	2300      	movs	r3, #0
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	bf00      	nop
 8004950:	bf00      	nop
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <vPortSetupTimerInterrupt>:
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
 8004960:	4b0a      	ldr	r3, [pc, #40]	; (800498c <vPortSetupTimerInterrupt+0x30>)
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <vPortSetupTimerInterrupt+0x34>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	4b09      	ldr	r3, [pc, #36]	; (8004994 <vPortSetupTimerInterrupt+0x38>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a09      	ldr	r2, [pc, #36]	; (8004998 <vPortSetupTimerInterrupt+0x3c>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	099b      	lsrs	r3, r3, #6
 8004978:	4a08      	ldr	r2, [pc, #32]	; (800499c <vPortSetupTimerInterrupt+0x40>)
 800497a:	3b01      	subs	r3, #1
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	4b03      	ldr	r3, [pc, #12]	; (800498c <vPortSetupTimerInterrupt+0x30>)
 8004980:	2207      	movs	r2, #7
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr
 800498c:	e000e010 	.word	0xe000e010
 8004990:	e000e018 	.word	0xe000e018
 8004994:	20000000 	.word	0x20000000
 8004998:	10624dd3 	.word	0x10624dd3
 800499c:	e000e014 	.word	0xe000e014

080049a0 <vPortValidateInterruptPriority>:
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	f3ef 8305 	mrs	r3, IPSR
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b0f      	cmp	r3, #15
 80049b0:	d914      	bls.n	80049dc <vPortValidateInterruptPriority+0x3c>
 80049b2:	4a16      	ldr	r2, [pc, #88]	; (8004a0c <vPortValidateInterruptPriority+0x6c>)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4413      	add	r3, r2
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	72fb      	strb	r3, [r7, #11]
 80049bc:	4b14      	ldr	r3, [pc, #80]	; (8004a10 <vPortValidateInterruptPriority+0x70>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	7afa      	ldrb	r2, [r7, #11]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d20a      	bcs.n	80049dc <vPortValidateInterruptPriority+0x3c>
 80049c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	607b      	str	r3, [r7, #4]
 80049d8:	bf00      	nop
 80049da:	e7fe      	b.n	80049da <vPortValidateInterruptPriority+0x3a>
 80049dc:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <vPortValidateInterruptPriority+0x74>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049e4:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <vPortValidateInterruptPriority+0x78>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d90a      	bls.n	8004a02 <vPortValidateInterruptPriority+0x62>
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	603b      	str	r3, [r7, #0]
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <vPortValidateInterruptPriority+0x60>
 8004a02:	bf00      	nop
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr
 8004a0c:	e000e3f0 	.word	0xe000e3f0
 8004a10:	20000df4 	.word	0x20000df4
 8004a14:	e000ed0c 	.word	0xe000ed0c
 8004a18:	20000df8 	.word	0x20000df8

08004a1c <pvPortMalloc>:
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08a      	sub	sp, #40	; 0x28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	2300      	movs	r3, #0
 8004a26:	61fb      	str	r3, [r7, #28]
 8004a28:	f7fe fe30 	bl	800368c <vTaskSuspendAll>
 8004a2c:	4b58      	ldr	r3, [pc, #352]	; (8004b90 <pvPortMalloc+0x174>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <pvPortMalloc+0x1c>
 8004a34:	f000 f910 	bl	8004c58 <prvHeapInit>
 8004a38:	4b56      	ldr	r3, [pc, #344]	; (8004b94 <pvPortMalloc+0x178>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f040 808e 	bne.w	8004b62 <pvPortMalloc+0x146>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01d      	beq.n	8004a88 <pvPortMalloc+0x6c>
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4413      	add	r3, r2
 8004a52:	607b      	str	r3, [r7, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d014      	beq.n	8004a88 <pvPortMalloc+0x6c>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f023 0307 	bic.w	r3, r3, #7
 8004a64:	3308      	adds	r3, #8
 8004a66:	607b      	str	r3, [r7, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <pvPortMalloc+0x6c>
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	bf00      	nop
 8004a86:	e7fe      	b.n	8004a86 <pvPortMalloc+0x6a>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d069      	beq.n	8004b62 <pvPortMalloc+0x146>
 8004a8e:	4b42      	ldr	r3, [pc, #264]	; (8004b98 <pvPortMalloc+0x17c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d864      	bhi.n	8004b62 <pvPortMalloc+0x146>
 8004a98:	4b40      	ldr	r3, [pc, #256]	; (8004b9c <pvPortMalloc+0x180>)
 8004a9a:	623b      	str	r3, [r7, #32]
 8004a9c:	4b3f      	ldr	r3, [pc, #252]	; (8004b9c <pvPortMalloc+0x180>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa2:	e004      	b.n	8004aae <pvPortMalloc+0x92>
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	623b      	str	r3, [r7, #32]
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d903      	bls.n	8004ac0 <pvPortMalloc+0xa4>
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f1      	bne.n	8004aa4 <pvPortMalloc+0x88>
 8004ac0:	4b33      	ldr	r3, [pc, #204]	; (8004b90 <pvPortMalloc+0x174>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d04b      	beq.n	8004b62 <pvPortMalloc+0x146>
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2208      	movs	r2, #8
 8004ad0:	4413      	add	r3, r2
 8004ad2:	61fb      	str	r3, [r7, #28]
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	1ad2      	subs	r2, r2, r3
 8004ae4:	2308      	movs	r3, #8
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d91f      	bls.n	8004b2c <pvPortMalloc+0x110>
 8004aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4413      	add	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <pvPortMalloc+0xf8>
 8004afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	bf00      	nop
 8004b12:	e7fe      	b.n	8004b12 <pvPortMalloc+0xf6>
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	1ad2      	subs	r2, r2, r3
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	605a      	str	r2, [r3, #4]
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	605a      	str	r2, [r3, #4]
 8004b26:	69b8      	ldr	r0, [r7, #24]
 8004b28:	f000 f8f8 	bl	8004d1c <prvInsertBlockIntoFreeList>
 8004b2c:	4b1a      	ldr	r3, [pc, #104]	; (8004b98 <pvPortMalloc+0x17c>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <pvPortMalloc+0x17c>)
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	4b17      	ldr	r3, [pc, #92]	; (8004b98 <pvPortMalloc+0x17c>)
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4b18      	ldr	r3, [pc, #96]	; (8004ba0 <pvPortMalloc+0x184>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d203      	bcs.n	8004b4e <pvPortMalloc+0x132>
 8004b46:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <pvPortMalloc+0x17c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a15      	ldr	r2, [pc, #84]	; (8004ba0 <pvPortMalloc+0x184>)
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <pvPortMalloc+0x178>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	431a      	orrs	r2, r3
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	605a      	str	r2, [r3, #4]
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	f7fe fda1 	bl	80036a8 <xTaskResumeAll>
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <pvPortMalloc+0x16a>
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	bf00      	nop
 8004b84:	e7fe      	b.n	8004b84 <pvPortMalloc+0x168>
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3728      	adds	r7, #40	; 0x28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20001e04 	.word	0x20001e04
 8004b94:	20001e10 	.word	0x20001e10
 8004b98:	20001e08 	.word	0x20001e08
 8004b9c:	20001dfc 	.word	0x20001dfc
 8004ba0:	20001e0c 	.word	0x20001e0c

08004ba4 <vPortFree>:
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d048      	beq.n	8004c48 <vPortFree+0xa4>
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	425b      	negs	r3, r3
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	4b21      	ldr	r3, [pc, #132]	; (8004c50 <vPortFree+0xac>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10a      	bne.n	8004be8 <vPortFree+0x44>
 8004bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	bf00      	nop
 8004be6:	e7fe      	b.n	8004be6 <vPortFree+0x42>
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00a      	beq.n	8004c06 <vPortFree+0x62>
 8004bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	bf00      	nop
 8004c04:	e7fe      	b.n	8004c04 <vPortFree+0x60>
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	4b11      	ldr	r3, [pc, #68]	; (8004c50 <vPortFree+0xac>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d019      	beq.n	8004c48 <vPortFree+0xa4>
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d115      	bne.n	8004c48 <vPortFree+0xa4>
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	4b0b      	ldr	r3, [pc, #44]	; (8004c50 <vPortFree+0xac>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	43db      	mvns	r3, r3
 8004c26:	401a      	ands	r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	605a      	str	r2, [r3, #4]
 8004c2c:	f7fe fd2e 	bl	800368c <vTaskSuspendAll>
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	4b07      	ldr	r3, [pc, #28]	; (8004c54 <vPortFree+0xb0>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4413      	add	r3, r2
 8004c3a:	4a06      	ldr	r2, [pc, #24]	; (8004c54 <vPortFree+0xb0>)
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	6938      	ldr	r0, [r7, #16]
 8004c40:	f000 f86c 	bl	8004d1c <prvInsertBlockIntoFreeList>
 8004c44:	f7fe fd30 	bl	80036a8 <xTaskResumeAll>
 8004c48:	bf00      	nop
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	20001e10 	.word	0x20001e10
 8004c54:	20001e08 	.word	0x20001e08

08004c58 <prvHeapInit>:
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c62:	60bb      	str	r3, [r7, #8]
 8004c64:	4b27      	ldr	r3, [pc, #156]	; (8004d04 <prvHeapInit+0xac>)
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00c      	beq.n	8004c8c <prvHeapInit+0x34>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3307      	adds	r3, #7
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f023 0307 	bic.w	r3, r3, #7
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	4a1f      	ldr	r2, [pc, #124]	; (8004d04 <prvHeapInit+0xac>)
 8004c88:	4413      	add	r3, r2
 8004c8a:	60bb      	str	r3, [r7, #8]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	607b      	str	r3, [r7, #4]
 8004c90:	4a1d      	ldr	r2, [pc, #116]	; (8004d08 <prvHeapInit+0xb0>)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	4b1c      	ldr	r3, [pc, #112]	; (8004d08 <prvHeapInit+0xb0>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	605a      	str	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	2208      	movs	r2, #8
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0307 	bic.w	r3, r3, #7
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4a15      	ldr	r2, [pc, #84]	; (8004d0c <prvHeapInit+0xb4>)
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	4b14      	ldr	r3, [pc, #80]	; (8004d0c <prvHeapInit+0xb4>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	605a      	str	r2, [r3, #4]
 8004cc2:	4b12      	ldr	r3, [pc, #72]	; (8004d0c <prvHeapInit+0xb4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	603b      	str	r3, [r7, #0]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	1ad2      	subs	r2, r2, r3
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	605a      	str	r2, [r3, #4]
 8004cd8:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <prvHeapInit+0xb4>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	4a0a      	ldr	r2, [pc, #40]	; (8004d10 <prvHeapInit+0xb8>)
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	4a09      	ldr	r2, [pc, #36]	; (8004d14 <prvHeapInit+0xbc>)
 8004cee:	6013      	str	r3, [r2, #0]
 8004cf0:	4b09      	ldr	r3, [pc, #36]	; (8004d18 <prvHeapInit+0xc0>)
 8004cf2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	bf00      	nop
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	20000dfc 	.word	0x20000dfc
 8004d08:	20001dfc 	.word	0x20001dfc
 8004d0c:	20001e04 	.word	0x20001e04
 8004d10:	20001e0c 	.word	0x20001e0c
 8004d14:	20001e08 	.word	0x20001e08
 8004d18:	20001e10 	.word	0x20001e10

08004d1c <prvInsertBlockIntoFreeList>:
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	4b27      	ldr	r3, [pc, #156]	; (8004dc4 <prvInsertBlockIntoFreeList+0xa8>)
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	e002      	b.n	8004d30 <prvInsertBlockIntoFreeList+0x14>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d8f7      	bhi.n	8004d2a <prvInsertBlockIntoFreeList+0xe>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	4413      	add	r3, r2
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d108      	bne.n	8004d5e <prvInsertBlockIntoFreeList+0x42>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	441a      	add	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	605a      	str	r2, [r3, #4]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	607b      	str	r3, [r7, #4]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	60bb      	str	r3, [r7, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	441a      	add	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d118      	bne.n	8004da4 <prvInsertBlockIntoFreeList+0x88>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	4b14      	ldr	r3, [pc, #80]	; (8004dc8 <prvInsertBlockIntoFreeList+0xac>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d00d      	beq.n	8004d9a <prvInsertBlockIntoFreeList+0x7e>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	441a      	add	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	605a      	str	r2, [r3, #4]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	e008      	b.n	8004dac <prvInsertBlockIntoFreeList+0x90>
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <prvInsertBlockIntoFreeList+0xac>)
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	e003      	b.n	8004dac <prvInsertBlockIntoFreeList+0x90>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d002      	beq.n	8004dba <prvInsertBlockIntoFreeList+0x9e>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	bf00      	nop
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr
 8004dc4:	20001dfc 	.word	0x20001dfc
 8004dc8:	20001e04 	.word	0x20001e04

08004dcc <__libc_init_array>:
 8004dcc:	b570      	push	{r4, r5, r6, lr}
 8004dce:	2600      	movs	r6, #0
 8004dd0:	4d0c      	ldr	r5, [pc, #48]	; (8004e04 <__libc_init_array+0x38>)
 8004dd2:	4c0d      	ldr	r4, [pc, #52]	; (8004e08 <__libc_init_array+0x3c>)
 8004dd4:	1b64      	subs	r4, r4, r5
 8004dd6:	10a4      	asrs	r4, r4, #2
 8004dd8:	42a6      	cmp	r6, r4
 8004dda:	d109      	bne.n	8004df0 <__libc_init_array+0x24>
 8004ddc:	f000 f830 	bl	8004e40 <_init>
 8004de0:	2600      	movs	r6, #0
 8004de2:	4d0a      	ldr	r5, [pc, #40]	; (8004e0c <__libc_init_array+0x40>)
 8004de4:	4c0a      	ldr	r4, [pc, #40]	; (8004e10 <__libc_init_array+0x44>)
 8004de6:	1b64      	subs	r4, r4, r5
 8004de8:	10a4      	asrs	r4, r4, #2
 8004dea:	42a6      	cmp	r6, r4
 8004dec:	d105      	bne.n	8004dfa <__libc_init_array+0x2e>
 8004dee:	bd70      	pop	{r4, r5, r6, pc}
 8004df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df4:	4798      	blx	r3
 8004df6:	3601      	adds	r6, #1
 8004df8:	e7ee      	b.n	8004dd8 <__libc_init_array+0xc>
 8004dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dfe:	4798      	blx	r3
 8004e00:	3601      	adds	r6, #1
 8004e02:	e7f2      	b.n	8004dea <__libc_init_array+0x1e>
 8004e04:	08005028 	.word	0x08005028
 8004e08:	08005028 	.word	0x08005028
 8004e0c:	08005028 	.word	0x08005028
 8004e10:	0800502c 	.word	0x0800502c

08004e14 <memcpy>:
 8004e14:	440a      	add	r2, r1
 8004e16:	4291      	cmp	r1, r2
 8004e18:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e1c:	d100      	bne.n	8004e20 <memcpy+0xc>
 8004e1e:	4770      	bx	lr
 8004e20:	b510      	push	{r4, lr}
 8004e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e26:	4291      	cmp	r1, r2
 8004e28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e2c:	d1f9      	bne.n	8004e22 <memcpy+0xe>
 8004e2e:	bd10      	pop	{r4, pc}

08004e30 <memset>:
 8004e30:	4603      	mov	r3, r0
 8004e32:	4402      	add	r2, r0
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d100      	bne.n	8004e3a <memset+0xa>
 8004e38:	4770      	bx	lr
 8004e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e3e:	e7f9      	b.n	8004e34 <memset+0x4>

08004e40 <_init>:
 8004e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e42:	bf00      	nop
 8004e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e46:	bc08      	pop	{r3}
 8004e48:	469e      	mov	lr, r3
 8004e4a:	4770      	bx	lr

08004e4c <_fini>:
 8004e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4e:	bf00      	nop
 8004e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e52:	bc08      	pop	{r3}
 8004e54:	469e      	mov	lr, r3
 8004e56:	4770      	bx	lr
