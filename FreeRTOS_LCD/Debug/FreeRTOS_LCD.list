
FreeRTOS_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d8c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08005e9c  08005e9c  00015e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060bc  080060bc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080060bc  080060bc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060bc  080060bc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060bc  080060bc  000160bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060c0  080060c0  000160c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080060c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e1c  20000074  08006138  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e90  08006138  00021e90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001446c  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000314a  00000000  00000000  00034509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00037658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  000388d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d9b  00000000  00000000  000399e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014294  00000000  00000000  0003d77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000971ac  00000000  00000000  00051a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8bbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000504c  00000000  00000000  000e8c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005e84 	.word	0x08005e84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005e84 	.word	0x08005e84

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000160:	b5b0      	push	{r4, r5, r7, lr}
 8000162:	b08a      	sub	sp, #40	; 0x28
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
 800016c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800016e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000172:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000176:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800017a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 800017c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800017e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000180:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000182:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 800018c:	68bb      	ldr	r3, [r7, #8]
 800018e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000190:	f107 0310 	add.w	r3, r7, #16
 8000194:	4618      	mov	r0, r3
 8000196:	f000 f80e 	bl	80001b6 <Lcd_init>

	return lcd;
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	461d      	mov	r5, r3
 800019e:	f107 0410 	add.w	r4, r7, #16
 80001a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80001aa:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80001ae:	68f8      	ldr	r0, [r7, #12]
 80001b0:	3728      	adds	r7, #40	; 0x28
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bdb0      	pop	{r4, r5, r7, pc}

080001b6 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80001b6:	b580      	push	{r7, lr}
 80001b8:	b082      	sub	sp, #8
 80001ba:	af00      	add	r7, sp, #0
 80001bc:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	7d9b      	ldrb	r3, [r3, #22]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d10c      	bne.n	80001e0 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80001c6:	2133      	movs	r1, #51	; 0x33
 80001c8:	6878      	ldr	r0, [r7, #4]
 80001ca:	f000 f87b 	bl	80002c4 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80001ce:	2132      	movs	r1, #50	; 0x32
 80001d0:	6878      	ldr	r0, [r7, #4]
 80001d2:	f000 f877 	bl	80002c4 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80001d6:	2128      	movs	r1, #40	; 0x28
 80001d8:	6878      	ldr	r0, [r7, #4]
 80001da:	f000 f873 	bl	80002c4 <lcd_write_command>
 80001de:	e003      	b.n	80001e8 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80001e0:	2138      	movs	r1, #56	; 0x38
 80001e2:	6878      	ldr	r0, [r7, #4]
 80001e4:	f000 f86e 	bl	80002c4 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80001e8:	2101      	movs	r1, #1
 80001ea:	6878      	ldr	r0, [r7, #4]
 80001ec:	f000 f86a 	bl	80002c4 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80001f0:	210c      	movs	r1, #12
 80001f2:	6878      	ldr	r0, [r7, #4]
 80001f4:	f000 f866 	bl	80002c4 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80001f8:	2106      	movs	r1, #6
 80001fa:	6878      	ldr	r0, [r7, #4]
 80001fc:	f000 f862 	bl	80002c4 <lcd_write_command>
}
 8000200:	bf00      	nop
 8000202:	3708      	adds	r7, #8
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}

08000208 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b086      	sub	sp, #24
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
 8000210:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000212:	f107 030c 	add.w	r3, r7, #12
 8000216:	683a      	ldr	r2, [r7, #0]
 8000218:	4906      	ldr	r1, [pc, #24]	; (8000234 <Lcd_int+0x2c>)
 800021a:	4618      	mov	r0, r3
 800021c:	f005 f9c6 	bl	80055ac <siprintf>

	Lcd_string(lcd, buffer);
 8000220:	f107 030c 	add.w	r3, r7, #12
 8000224:	4619      	mov	r1, r3
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	f000 f806 	bl	8000238 <Lcd_string>
}
 800022c:	bf00      	nop
 800022e:	3718      	adds	r7, #24
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	08005e9c 	.word	0x08005e9c

08000238 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000238:	b590      	push	{r4, r7, lr}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
 8000240:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000242:	2300      	movs	r3, #0
 8000244:	73fb      	strb	r3, [r7, #15]
 8000246:	e00a      	b.n	800025e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000248:	7bfb      	ldrb	r3, [r7, #15]
 800024a:	683a      	ldr	r2, [r7, #0]
 800024c:	4413      	add	r3, r2
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	4619      	mov	r1, r3
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f000 f864 	bl	8000320 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000258:	7bfb      	ldrb	r3, [r7, #15]
 800025a:	3301      	adds	r3, #1
 800025c:	73fb      	strb	r3, [r7, #15]
 800025e:	7bfc      	ldrb	r4, [r7, #15]
 8000260:	6838      	ldr	r0, [r7, #0]
 8000262:	f7ff ff75 	bl	8000150 <strlen>
 8000266:	4603      	mov	r3, r0
 8000268:	429c      	cmp	r4, r3
 800026a:	d3ed      	bcc.n	8000248 <Lcd_string+0x10>
	}
}
 800026c:	bf00      	nop
 800026e:	bf00      	nop
 8000270:	3714      	adds	r7, #20
 8000272:	46bd      	mov	sp, r7
 8000274:	bd90      	pop	{r4, r7, pc}
	...

08000278 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	460b      	mov	r3, r1
 8000282:	70fb      	strb	r3, [r7, #3]
 8000284:	4613      	mov	r3, r2
 8000286:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000288:	78fb      	ldrb	r3, [r7, #3]
 800028a:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <Lcd_cursor+0x30>)
 800028c:	5cd2      	ldrb	r2, [r2, r3]
 800028e:	78bb      	ldrb	r3, [r7, #2]
 8000290:	4413      	add	r3, r2
 8000292:	b2db      	uxtb	r3, r3
 8000294:	3b80      	subs	r3, #128	; 0x80
 8000296:	b2db      	uxtb	r3, r3
 8000298:	4619      	mov	r1, r3
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	f000 f812 	bl	80002c4 <lcd_write_command>
	#endif
}
 80002a0:	bf00      	nop
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	08005f58 	.word	0x08005f58

080002ac <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 80002b4:	2101      	movs	r1, #1
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f000 f804 	bl	80002c4 <lcd_write_command>
}
 80002bc:	bf00      	nop
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	6898      	ldr	r0, [r3, #8]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	899b      	ldrh	r3, [r3, #12]
 80002d8:	2200      	movs	r2, #0
 80002da:	4619      	mov	r1, r3
 80002dc:	f001 fb6a 	bl	80019b4 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	7d9b      	ldrb	r3, [r3, #22]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d111      	bne.n	800030c <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80002e8:	78fb      	ldrb	r3, [r7, #3]
 80002ea:	091b      	lsrs	r3, r3, #4
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	2204      	movs	r2, #4
 80002f0:	4619      	mov	r1, r3
 80002f2:	6878      	ldr	r0, [r7, #4]
 80002f4:	f000 f842 	bl	800037c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80002f8:	78fb      	ldrb	r3, [r7, #3]
 80002fa:	f003 030f 	and.w	r3, r3, #15
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	2204      	movs	r2, #4
 8000302:	4619      	mov	r1, r3
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f000 f839 	bl	800037c <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800030a:	e005      	b.n	8000318 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 800030c:	78fb      	ldrb	r3, [r7, #3]
 800030e:	2208      	movs	r2, #8
 8000310:	4619      	mov	r1, r3
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f000 f832 	bl	800037c <lcd_write>
}
 8000318:	bf00      	nop
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	460b      	mov	r3, r1
 800032a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	6898      	ldr	r0, [r3, #8]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	899b      	ldrh	r3, [r3, #12]
 8000334:	2201      	movs	r2, #1
 8000336:	4619      	mov	r1, r3
 8000338:	f001 fb3c 	bl	80019b4 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	7d9b      	ldrb	r3, [r3, #22]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d111      	bne.n	8000368 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000344:	78fb      	ldrb	r3, [r7, #3]
 8000346:	091b      	lsrs	r3, r3, #4
 8000348:	b2db      	uxtb	r3, r3
 800034a:	2204      	movs	r2, #4
 800034c:	4619      	mov	r1, r3
 800034e:	6878      	ldr	r0, [r7, #4]
 8000350:	f000 f814 	bl	800037c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000354:	78fb      	ldrb	r3, [r7, #3]
 8000356:	f003 030f 	and.w	r3, r3, #15
 800035a:	b2db      	uxtb	r3, r3
 800035c:	2204      	movs	r2, #4
 800035e:	4619      	mov	r1, r3
 8000360:	6878      	ldr	r0, [r7, #4]
 8000362:	f000 f80b 	bl	800037c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000366:	e005      	b.n	8000374 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000368:	78fb      	ldrb	r3, [r7, #3]
 800036a:	2208      	movs	r2, #8
 800036c:	4619      	mov	r1, r3
 800036e:	6878      	ldr	r0, [r7, #4]
 8000370:	f000 f804 	bl	800037c <lcd_write>
}
 8000374:	bf00      	nop
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	460b      	mov	r3, r1
 8000386:	70fb      	strb	r3, [r7, #3]
 8000388:	4613      	mov	r3, r2
 800038a:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 800038c:	2300      	movs	r3, #0
 800038e:	73fb      	strb	r3, [r7, #15]
 8000390:	e019      	b.n	80003c6 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	7bfb      	ldrb	r3, [r7, #15]
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	4413      	add	r3, r2
 800039c:	6818      	ldr	r0, [r3, #0]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	685a      	ldr	r2, [r3, #4]
 80003a2:	7bfb      	ldrb	r3, [r7, #15]
 80003a4:	005b      	lsls	r3, r3, #1
 80003a6:	4413      	add	r3, r2
 80003a8:	8819      	ldrh	r1, [r3, #0]
 80003aa:	78fa      	ldrb	r2, [r7, #3]
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	fa42 f303 	asr.w	r3, r2, r3
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	f003 0301 	and.w	r3, r3, #1
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	461a      	mov	r2, r3
 80003bc:	f001 fafa 	bl	80019b4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80003c0:	7bfb      	ldrb	r3, [r7, #15]
 80003c2:	3301      	adds	r3, #1
 80003c4:	73fb      	strb	r3, [r7, #15]
 80003c6:	7bfa      	ldrb	r2, [r7, #15]
 80003c8:	78bb      	ldrb	r3, [r7, #2]
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d3e1      	bcc.n	8000392 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	6918      	ldr	r0, [r3, #16]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	8a9b      	ldrh	r3, [r3, #20]
 80003d6:	2201      	movs	r2, #1
 80003d8:	4619      	mov	r1, r3
 80003da:	f001 faeb 	bl	80019b4 <HAL_GPIO_WritePin>
	DELAY(1);
 80003de:	2001      	movs	r0, #1
 80003e0:	f000 fc34 	bl	8000c4c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	6918      	ldr	r0, [r3, #16]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	8a9b      	ldrh	r3, [r3, #20]
 80003ec:	2200      	movs	r2, #0
 80003ee:	4619      	mov	r1, r3
 80003f0:	f001 fae0 	bl	80019b4 <HAL_GPIO_WritePin>
}
 80003f4:	bf00      	nop
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003fc:	b590      	push	{r4, r7, lr}
 80003fe:	b091      	sub	sp, #68	; 0x44
 8000400:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000402:	f000 fbf1 	bl	8000be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000406:	f000 f8a7 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040a:	f000 f93f 	bl	800068c <MX_GPIO_Init>
  MX_ADC1_Init();
 800040e:	f000 f8ff 	bl	8000610 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000412:	4836      	ldr	r0, [pc, #216]	; (80004ec <main+0xf0>)
 8000414:	f000 fd16 	bl	8000e44 <HAL_ADC_Start>


  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
    Lcd_PortType ports[] = { GPIOB, GPIOB, GPIOB, GPIOB };
 8000418:	4b35      	ldr	r3, [pc, #212]	; (80004f0 <main+0xf4>)
 800041a:	f107 0420 	add.w	r4, r7, #32
 800041e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000420:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
    Lcd_PinType pins[] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_10, GPIO_PIN_11};
 8000424:	4a33      	ldr	r2, [pc, #204]	; (80004f4 <main+0xf8>)
 8000426:	f107 0318 	add.w	r3, r7, #24
 800042a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800042e:	e883 0003 	stmia.w	r3, {r0, r1}
    Lcd_HandleTypeDef lcd;
    // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
    lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_3, LCD_4_BIT_MODE);
 8000432:	4638      	mov	r0, r7
 8000434:	f107 0218 	add.w	r2, r7, #24
 8000438:	f107 0120 	add.w	r1, r7, #32
 800043c:	2300      	movs	r3, #0
 800043e:	9303      	str	r3, [sp, #12]
 8000440:	2308      	movs	r3, #8
 8000442:	9302      	str	r3, [sp, #8]
 8000444:	4b2c      	ldr	r3, [pc, #176]	; (80004f8 <main+0xfc>)
 8000446:	9301      	str	r3, [sp, #4]
 8000448:	2302      	movs	r3, #2
 800044a:	9300      	str	r3, [sp, #0]
 800044c:	4b2a      	ldr	r3, [pc, #168]	; (80004f8 <main+0xfc>)
 800044e:	f7ff fe87 	bl	8000160 <Lcd_create>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000452:	f002 fad1 	bl	80029f8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of BrakeQ */
  BrakeQHandle = osMessageQueueNew (16, sizeof(uint16_t), &BrakeQ_attributes);
 8000456:	4a29      	ldr	r2, [pc, #164]	; (80004fc <main+0x100>)
 8000458:	2102      	movs	r1, #2
 800045a:	2010      	movs	r0, #16
 800045c:	f002 fc0a 	bl	8002c74 <osMessageQueueNew>
 8000460:	4603      	mov	r3, r0
 8000462:	4a27      	ldr	r2, [pc, #156]	; (8000500 <main+0x104>)
 8000464:	6013      	str	r3, [r2, #0]

  /* creation of ThrottleQ */
  ThrottleQHandle = osMessageQueueNew (16, sizeof(uint16_t), &ThrottleQ_attributes);
 8000466:	4a27      	ldr	r2, [pc, #156]	; (8000504 <main+0x108>)
 8000468:	2102      	movs	r1, #2
 800046a:	2010      	movs	r0, #16
 800046c:	f002 fc02 	bl	8002c74 <osMessageQueueNew>
 8000470:	4603      	mov	r3, r0
 8000472:	4a25      	ldr	r2, [pc, #148]	; (8000508 <main+0x10c>)
 8000474:	6013      	str	r3, [r2, #0]

  /* creation of GearQ */
  GearQHandle = osMessageQueueNew (16, sizeof(char), &GearQ_attributes);
 8000476:	4a25      	ldr	r2, [pc, #148]	; (800050c <main+0x110>)
 8000478:	2101      	movs	r1, #1
 800047a:	2010      	movs	r0, #16
 800047c:	f002 fbfa 	bl	8002c74 <osMessageQueueNew>
 8000480:	4603      	mov	r3, r0
 8000482:	4a23      	ldr	r2, [pc, #140]	; (8000510 <main+0x114>)
 8000484:	6013      	str	r3, [r2, #0]

  /* creation of SpeedQ */
  SpeedQHandle = osMessageQueueNew (16, sizeof(uint16_t), &SpeedQ_attributes);
 8000486:	4a23      	ldr	r2, [pc, #140]	; (8000514 <main+0x118>)
 8000488:	2102      	movs	r1, #2
 800048a:	2010      	movs	r0, #16
 800048c:	f002 fbf2 	bl	8002c74 <osMessageQueueNew>
 8000490:	4603      	mov	r3, r0
 8000492:	4a21      	ldr	r2, [pc, #132]	; (8000518 <main+0x11c>)
 8000494:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Brake */
  BrakeHandle = osThreadNew(BrakeInput, NULL, &Brake_attributes);
 8000496:	4a21      	ldr	r2, [pc, #132]	; (800051c <main+0x120>)
 8000498:	2100      	movs	r1, #0
 800049a:	4821      	ldr	r0, [pc, #132]	; (8000520 <main+0x124>)
 800049c:	f002 fb12 	bl	8002ac4 <osThreadNew>
 80004a0:	4603      	mov	r3, r0
 80004a2:	4a20      	ldr	r2, [pc, #128]	; (8000524 <main+0x128>)
 80004a4:	6013      	str	r3, [r2, #0]

  /* creation of Throttle */
  ThrottleHandle = osThreadNew(ThrottleInput, NULL, &Throttle_attributes);
 80004a6:	4a20      	ldr	r2, [pc, #128]	; (8000528 <main+0x12c>)
 80004a8:	2100      	movs	r1, #0
 80004aa:	4820      	ldr	r0, [pc, #128]	; (800052c <main+0x130>)
 80004ac:	f002 fb0a 	bl	8002ac4 <osThreadNew>
 80004b0:	4603      	mov	r3, r0
 80004b2:	4a1f      	ldr	r2, [pc, #124]	; (8000530 <main+0x134>)
 80004b4:	6013      	str	r3, [r2, #0]

  /* creation of Gear */
  GearHandle = osThreadNew(GearSelection, NULL, &Gear_attributes);
 80004b6:	4a1f      	ldr	r2, [pc, #124]	; (8000534 <main+0x138>)
 80004b8:	2100      	movs	r1, #0
 80004ba:	481f      	ldr	r0, [pc, #124]	; (8000538 <main+0x13c>)
 80004bc:	f002 fb02 	bl	8002ac4 <osThreadNew>
 80004c0:	4603      	mov	r3, r0
 80004c2:	4a1e      	ldr	r2, [pc, #120]	; (800053c <main+0x140>)
 80004c4:	6013      	str	r3, [r2, #0]

  /* creation of Data */
  DataHandle = osThreadNew(DataInput, NULL, &Data_attributes);
 80004c6:	4a1e      	ldr	r2, [pc, #120]	; (8000540 <main+0x144>)
 80004c8:	2100      	movs	r1, #0
 80004ca:	481e      	ldr	r0, [pc, #120]	; (8000544 <main+0x148>)
 80004cc:	f002 fafa 	bl	8002ac4 <osThreadNew>
 80004d0:	4603      	mov	r3, r0
 80004d2:	4a1d      	ldr	r2, [pc, #116]	; (8000548 <main+0x14c>)
 80004d4:	6013      	str	r3, [r2, #0]

  /* creation of Display */
  DisplayHandle = osThreadNew(DisplayInput, NULL, &Display_attributes);
 80004d6:	4a1d      	ldr	r2, [pc, #116]	; (800054c <main+0x150>)
 80004d8:	2100      	movs	r1, #0
 80004da:	481d      	ldr	r0, [pc, #116]	; (8000550 <main+0x154>)
 80004dc:	f002 faf2 	bl	8002ac4 <osThreadNew>
 80004e0:	4603      	mov	r3, r0
 80004e2:	4a1c      	ldr	r2, [pc, #112]	; (8000554 <main+0x158>)
 80004e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004e6:	f002 fab9 	bl	8002a5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <main+0xee>
 80004ec:	20000090 	.word	0x20000090
 80004f0:	08005ef0 	.word	0x08005ef0
 80004f4:	08005f00 	.word	0x08005f00
 80004f8:	40010800 	.word	0x40010800
 80004fc:	08006010 	.word	0x08006010
 8000500:	200000d4 	.word	0x200000d4
 8000504:	08006028 	.word	0x08006028
 8000508:	200000d8 	.word	0x200000d8
 800050c:	08006040 	.word	0x08006040
 8000510:	200000dc 	.word	0x200000dc
 8000514:	08006058 	.word	0x08006058
 8000518:	200000e0 	.word	0x200000e0
 800051c:	08005f5c 	.word	0x08005f5c
 8000520:	0800074d 	.word	0x0800074d
 8000524:	200000c0 	.word	0x200000c0
 8000528:	08005f80 	.word	0x08005f80
 800052c:	0800081d 	.word	0x0800081d
 8000530:	200000c4 	.word	0x200000c4
 8000534:	08005fa4 	.word	0x08005fa4
 8000538:	080008ad 	.word	0x080008ad
 800053c:	200000c8 	.word	0x200000c8
 8000540:	08005fc8 	.word	0x08005fc8
 8000544:	080008bd 	.word	0x080008bd
 8000548:	200000cc 	.word	0x200000cc
 800054c:	08005fec 	.word	0x08005fec
 8000550:	080008cd 	.word	0x080008cd
 8000554:	200000d0 	.word	0x200000d0

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000562:	2228      	movs	r2, #40	; 0x28
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f005 f818 	bl	800559c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000588:	2301      	movs	r3, #1
 800058a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000590:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000596:	2301      	movs	r3, #1
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005a4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fa18 	bl	80019e4 <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ba:	f000 f99e 	bl	80008fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2302      	movs	r3, #2
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	2102      	movs	r1, #2
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 fc84 	bl	8001ee8 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005e6:	f000 f988 	bl	80008fa <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005ea:	2302      	movs	r3, #2
 80005ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80005ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005f2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fe3e 	bl	8002278 <HAL_RCCEx_PeriphCLKConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000602:	f000 f97a 	bl	80008fa <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	; 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_ADC1_Init+0x74>)
 8000622:	4a19      	ldr	r2, [pc, #100]	; (8000688 <MX_ADC1_Init+0x78>)
 8000624:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_ADC1_Init+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_ADC1_Init+0x74>)
 800062e:	2201      	movs	r2, #1
 8000630:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_ADC1_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_ADC1_Init+0x74>)
 800063a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800063e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_ADC1_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_ADC1_Init+0x74>)
 8000648:	2201      	movs	r2, #1
 800064a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_ADC1_Init+0x74>)
 800064e:	f000 fb21 	bl	8000c94 <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000658:	f000 f94f 	bl	80008fa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800065c:	2302      	movs	r3, #2
 800065e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000660:	2301      	movs	r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	4619      	mov	r1, r3
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_ADC1_Init+0x74>)
 800066e:	f000 fda9 	bl	80011c4 <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000678:	f000 f93f 	bl	80008fa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000090 	.word	0x20000090
 8000688:	40012400 	.word	0x40012400

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 0310 	add.w	r3, r7, #16
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a0:	4b27      	ldr	r3, [pc, #156]	; (8000740 <MX_GPIO_Init+0xb4>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a26      	ldr	r2, [pc, #152]	; (8000740 <MX_GPIO_Init+0xb4>)
 80006a6:	f043 0320 	orr.w	r3, r3, #32
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b24      	ldr	r3, [pc, #144]	; (8000740 <MX_GPIO_Init+0xb4>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0320 	and.w	r3, r3, #32
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b8:	4b21      	ldr	r3, [pc, #132]	; (8000740 <MX_GPIO_Init+0xb4>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a20      	ldr	r2, [pc, #128]	; (8000740 <MX_GPIO_Init+0xb4>)
 80006be:	f043 0304 	orr.w	r3, r3, #4
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <MX_GPIO_Init+0xb4>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0304 	and.w	r3, r3, #4
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <MX_GPIO_Init+0xb4>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a1a      	ldr	r2, [pc, #104]	; (8000740 <MX_GPIO_Init+0xb4>)
 80006d6:	f043 0308 	orr.w	r3, r3, #8
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b18      	ldr	r3, [pc, #96]	; (8000740 <MX_GPIO_Init+0xb4>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0308 	and.w	r3, r3, #8
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	210a      	movs	r1, #10
 80006ec:	4815      	ldr	r0, [pc, #84]	; (8000744 <MX_GPIO_Init+0xb8>)
 80006ee:	f001 f961 	bl	80019b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f640 4103 	movw	r1, #3075	; 0xc03
 80006f8:	4813      	ldr	r0, [pc, #76]	; (8000748 <MX_GPIO_Init+0xbc>)
 80006fa:	f001 f95b 	bl	80019b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80006fe:	230a      	movs	r3, #10
 8000700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	2301      	movs	r3, #1
 8000704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2302      	movs	r3, #2
 800070c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070e:	f107 0310 	add.w	r3, r7, #16
 8000712:	4619      	mov	r1, r3
 8000714:	480b      	ldr	r0, [pc, #44]	; (8000744 <MX_GPIO_Init+0xb8>)
 8000716:	f000 ffc9 	bl	80016ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 800071a:	f640 4303 	movw	r3, #3075	; 0xc03
 800071e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2302      	movs	r3, #2
 800072a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	4619      	mov	r1, r3
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_GPIO_Init+0xbc>)
 8000734:	f000 ffba 	bl	80016ac <HAL_GPIO_Init>

}
 8000738:	bf00      	nop
 800073a:	3720      	adds	r7, #32
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40021000 	.word	0x40021000
 8000744:	40010800 	.word	0x40010800
 8000748:	40010c00 	.word	0x40010c00

0800074c <BrakeInput>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BrakeInput */
void BrakeInput(void *argument)
{
 800074c:	b5b0      	push	{r4, r5, r7, lr}
 800074e:	b098      	sub	sp, #96	; 0x60
 8000750:	af04      	add	r7, sp, #16
 8000752:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
	// Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
	    Lcd_PortType ports[] = { GPIOB, GPIOB, GPIOB, GPIOB };
 8000754:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <BrakeInput+0xb8>)
 8000756:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800075a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800075c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
	    Lcd_PinType pins[] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_10, GPIO_PIN_11};
 8000760:	4a29      	ldr	r2, [pc, #164]	; (8000808 <BrakeInput+0xbc>)
 8000762:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000766:	e892 0003 	ldmia.w	r2, {r0, r1}
 800076a:	e883 0003 	stmia.w	r3, {r0, r1}
	    Lcd_HandleTypeDef lcd;
	    // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
	    lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_3, LCD_4_BIT_MODE);
 800076e:	4638      	mov	r0, r7
 8000770:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000774:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000778:	2300      	movs	r3, #0
 800077a:	9303      	str	r3, [sp, #12]
 800077c:	2308      	movs	r3, #8
 800077e:	9302      	str	r3, [sp, #8]
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <BrakeInput+0xc0>)
 8000782:	9301      	str	r3, [sp, #4]
 8000784:	2302      	movs	r3, #2
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	4b20      	ldr	r3, [pc, #128]	; (800080c <BrakeInput+0xc0>)
 800078a:	f7ff fce9 	bl	8000160 <Lcd_create>
 800078e:	f107 0420 	add.w	r4, r7, #32
 8000792:	463d      	mov	r5, r7
 8000794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000798:	e895 0003 	ldmia.w	r5, {r0, r1}
 800079c:	e884 0003 	stmia.w	r4, {r0, r1}
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_PollForConversion(&hadc1,1000);
 80007a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007a4:	481a      	ldr	r0, [pc, #104]	; (8000810 <BrakeInput+0xc4>)
 80007a6:	f000 fbfb 	bl	8000fa0 <HAL_ADC_PollForConversion>
	  readValue = HAL_ADC_GetValue(&hadc1);
 80007aa:	4819      	ldr	r0, [pc, #100]	; (8000810 <BrakeInput+0xc4>)
 80007ac:	f000 fcfe 	bl	80011ac <HAL_ADC_GetValue>
 80007b0:	4603      	mov	r3, r0
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <BrakeInput+0xc8>)
 80007b6:	801a      	strh	r2, [r3, #0]
	  Lcd_cursor(&lcd, 0,0);
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	2200      	movs	r2, #0
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fd59 	bl	8000278 <Lcd_cursor>
	  Lcd_string(&lcd, "Testing 3 LCD");
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	4913      	ldr	r1, [pc, #76]	; (8000818 <BrakeInput+0xcc>)
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fd33 	bl	8000238 <Lcd_string>
	  Lcd_cursor(&lcd, 1,0);
 80007d2:	f107 0320 	add.w	r3, r7, #32
 80007d6:	2200      	movs	r2, #0
 80007d8:	2101      	movs	r1, #1
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fd4c 	bl	8000278 <Lcd_cursor>
	  Lcd_int(&lcd, readValue);
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <BrakeInput+0xc8>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fd0b 	bl	8000208 <Lcd_int>
	  Lcd_clear(&lcd);
 80007f2:	f107 0320 	add.w	r3, r7, #32
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fd58 	bl	80002ac <Lcd_clear>
	  osDelay(1);
 80007fc:	2001      	movs	r0, #1
 80007fe:	f002 fa0b 	bl	8002c18 <osDelay>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 8000802:	e7cd      	b.n	80007a0 <BrakeInput+0x54>
 8000804:	08005ef0 	.word	0x08005ef0
 8000808:	08005f00 	.word	0x08005f00
 800080c:	40010800 	.word	0x40010800
 8000810:	20000090 	.word	0x20000090
 8000814:	200000e4 	.word	0x200000e4
 8000818:	08005f08 	.word	0x08005f08

0800081c <ThrottleInput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ThrottleInput */
void ThrottleInput(void *argument)
{
 800081c:	b5b0      	push	{r4, r5, r7, lr}
 800081e:	b098      	sub	sp, #96	; 0x60
 8000820:	af04      	add	r7, sp, #16
 8000822:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN ThrottleInput */
	// Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
	Lcd_PortType ports[] = { GPIOB, GPIOB, GPIOB, GPIOB };
 8000824:	4b1d      	ldr	r3, [pc, #116]	; (800089c <ThrottleInput+0x80>)
 8000826:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800082a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800082c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
	Lcd_PinType pins[] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_10, GPIO_PIN_11};
 8000830:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <ThrottleInput+0x84>)
 8000832:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000836:	e892 0003 	ldmia.w	r2, {r0, r1}
 800083a:	e883 0003 	stmia.w	r3, {r0, r1}
	Lcd_HandleTypeDef lcd;
	// Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
	lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_3, LCD_4_BIT_MODE);
 800083e:	4638      	mov	r0, r7
 8000840:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000844:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000848:	2300      	movs	r3, #0
 800084a:	9303      	str	r3, [sp, #12]
 800084c:	2308      	movs	r3, #8
 800084e:	9302      	str	r3, [sp, #8]
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <ThrottleInput+0x88>)
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	2302      	movs	r3, #2
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <ThrottleInput+0x88>)
 800085a:	f7ff fc81 	bl	8000160 <Lcd_create>
 800085e:	f107 0420 	add.w	r4, r7, #32
 8000862:	463d      	mov	r5, r7
 8000864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000868:	e895 0003 	ldmia.w	r5, {r0, r1}
 800086c:	e884 0003 	stmia.w	r4, {r0, r1}
  /* Infinite loop */
  for(;;)
  {
	  Lcd_cursor(&lcd, 1,8);
 8000870:	f107 0320 	add.w	r3, r7, #32
 8000874:	2208      	movs	r2, #8
 8000876:	2101      	movs	r1, #1
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fcfd 	bl	8000278 <Lcd_cursor>
	  Lcd_string(&lcd, "Task 2");
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	4909      	ldr	r1, [pc, #36]	; (80008a8 <ThrottleInput+0x8c>)
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fcd7 	bl	8000238 <Lcd_string>
	  Lcd_clear(&lcd);
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fd0c 	bl	80002ac <Lcd_clear>
	  osDelay(1);
 8000894:	2001      	movs	r0, #1
 8000896:	f002 f9bf 	bl	8002c18 <osDelay>
	  Lcd_cursor(&lcd, 1,8);
 800089a:	e7e9      	b.n	8000870 <ThrottleInput+0x54>
 800089c:	08005ef0 	.word	0x08005ef0
 80008a0:	08005f00 	.word	0x08005f00
 80008a4:	40010800 	.word	0x40010800
 80008a8:	08005f18 	.word	0x08005f18

080008ac <GearSelection>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GearSelection */
void GearSelection(void *argument)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GearSelection */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008b4:	2001      	movs	r0, #1
 80008b6:	f002 f9af 	bl	8002c18 <osDelay>
 80008ba:	e7fb      	b.n	80008b4 <GearSelection+0x8>

080008bc <DataInput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DataInput */
void DataInput(void *argument)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DataInput */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f002 f9a7 	bl	8002c18 <osDelay>
 80008ca:	e7fb      	b.n	80008c4 <DataInput+0x8>

080008cc <DisplayInput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DisplayInput */
void DisplayInput(void *argument)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DisplayInput */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008d4:	2001      	movs	r0, #1
 80008d6:	f002 f99f 	bl	8002c18 <osDelay>
 80008da:	e7fb      	b.n	80008d4 <DisplayInput+0x8>

080008dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008ec:	d101      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ee:	f000 f991 	bl	8000c14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fe:	b672      	cpsid	i
}
 8000900:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000902:	e7fe      	b.n	8000902 <Error_Handler+0x8>

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <HAL_MspInit+0x68>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	4a17      	ldr	r2, [pc, #92]	; (800096c <HAL_MspInit+0x68>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6193      	str	r3, [r2, #24]
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <HAL_MspInit+0x68>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_MspInit+0x68>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	4a11      	ldr	r2, [pc, #68]	; (800096c <HAL_MspInit+0x68>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	61d3      	str	r3, [r2, #28]
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_MspInit+0x68>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	210f      	movs	r1, #15
 800093e:	f06f 0001 	mvn.w	r0, #1
 8000942:	f000 fe88 	bl	8001656 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_MspInit+0x6c>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	4a04      	ldr	r2, [pc, #16]	; (8000970 <HAL_MspInit+0x6c>)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000
 8000970:	40010000 	.word	0x40010000

08000974 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <HAL_ADC_MspInit+0x6c>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d121      	bne.n	80009d8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <HAL_ADC_MspInit+0x70>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <HAL_ADC_MspInit+0x70>)
 800099a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <HAL_ADC_MspInit+0x70>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <HAL_ADC_MspInit+0x70>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a0c      	ldr	r2, [pc, #48]	; (80009e4 <HAL_ADC_MspInit+0x70>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_ADC_MspInit+0x70>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0304 	and.w	r3, r3, #4
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009c4:	2304      	movs	r3, #4
 80009c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c8:	2303      	movs	r3, #3
 80009ca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	4619      	mov	r1, r3
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <HAL_ADC_MspInit+0x74>)
 80009d4:	f000 fe6a 	bl	80016ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009d8:	bf00      	nop
 80009da:	3720      	adds	r7, #32
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40012400 	.word	0x40012400
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40010800 	.word	0x40010800

080009ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08e      	sub	sp, #56	; 0x38
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009fc:	2300      	movs	r3, #0
 80009fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000a02:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <HAL_InitTick+0xe8>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	4a33      	ldr	r2, [pc, #204]	; (8000ad4 <HAL_InitTick+0xe8>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	61d3      	str	r3, [r2, #28]
 8000a0e:	4b31      	ldr	r3, [pc, #196]	; (8000ad4 <HAL_InitTick+0xe8>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a1a:	f107 0210 	add.w	r2, r7, #16
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4611      	mov	r1, r2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 fbd9 	bl	80021dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a2a:	6a3b      	ldr	r3, [r7, #32]
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d103      	bne.n	8000a3c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a34:	f001 fbaa 	bl	800218c <HAL_RCC_GetPCLK1Freq>
 8000a38:	6378      	str	r0, [r7, #52]	; 0x34
 8000a3a:	e004      	b.n	8000a46 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a3c:	f001 fba6 	bl	800218c <HAL_RCC_GetPCLK1Freq>
 8000a40:	4603      	mov	r3, r0
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a48:	4a23      	ldr	r2, [pc, #140]	; (8000ad8 <HAL_InitTick+0xec>)
 8000a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4e:	0c9b      	lsrs	r3, r3, #18
 8000a50:	3b01      	subs	r3, #1
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000a54:	4b21      	ldr	r3, [pc, #132]	; (8000adc <HAL_InitTick+0xf0>)
 8000a56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <HAL_InitTick+0xf0>)
 8000a5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a62:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000a64:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <HAL_InitTick+0xf0>)
 8000a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a68:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <HAL_InitTick+0xf0>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <HAL_InitTick+0xf0>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <HAL_InitTick+0xf0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000a7c:	4817      	ldr	r0, [pc, #92]	; (8000adc <HAL_InitTick+0xf0>)
 8000a7e:	f001 fd71 	bl	8002564 <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d11b      	bne.n	8000ac8 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000a90:	4812      	ldr	r0, [pc, #72]	; (8000adc <HAL_InitTick+0xf0>)
 8000a92:	f001 fdbf 	bl	8002614 <HAL_TIM_Base_Start_IT>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d111      	bne.n	8000ac8 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000aa4:	201c      	movs	r0, #28
 8000aa6:	f000 fdf2 	bl	800168e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d808      	bhi.n	8000ac2 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	201c      	movs	r0, #28
 8000ab6:	f000 fdce 	bl	8001656 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aba:	4a09      	ldr	r2, [pc, #36]	; (8000ae0 <HAL_InitTick+0xf4>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	e002      	b.n	8000ac8 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ac8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3738      	adds	r7, #56	; 0x38
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	431bde83 	.word	0x431bde83
 8000adc:	200000e8 	.word	0x200000e8
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <NMI_Handler+0x4>

08000aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <MemManage_Handler+0x4>

08000af6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
	...

08000b10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <TIM2_IRQHandler+0x10>)
 8000b16:	f001 fdcf 	bl	80026b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200000e8 	.word	0x200000e8

08000b24 <_sbrk>:
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <_sbrk+0x5c>)
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <_sbrk+0x60>)
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d102      	bne.n	8000b46 <_sbrk+0x22>
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <_sbrk+0x64>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <_sbrk+0x68>)
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d207      	bcs.n	8000b64 <_sbrk+0x40>
 8000b54:	f004 fcea 	bl	800552c <__errno>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b62:	e009      	b.n	8000b78 <_sbrk+0x54>
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <_sbrk+0x64>)
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20005000 	.word	0x20005000
 8000b84:	00000400 	.word	0x00000400
 8000b88:	20000130 	.word	0x20000130
 8000b8c:	20001e90 	.word	0x20001e90

08000b90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <Reset_Handler>:
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <LoopFillZerobss+0x12>)
 8000b9e:	490d      	ldr	r1, [pc, #52]	; (8000bd4 <LoopFillZerobss+0x16>)
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <LoopFillZerobss+0x1a>)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:
 8000ba6:	58d4      	ldr	r4, [r2, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:
 8000bac:	18c4      	adds	r4, r0, r3
 8000bae:	428c      	cmp	r4, r1
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <LoopFillZerobss+0x1e>)
 8000bb4:	4c0a      	ldr	r4, [pc, #40]	; (8000be0 <LoopFillZerobss+0x22>)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:
 8000bbe:	42a2      	cmp	r2, r4
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>
 8000bc2:	f7ff ffe5 	bl	8000b90 <SystemInit>
 8000bc6:	f004 fcb7 	bl	8005538 <__libc_init_array>
 8000bca:	f7ff fc17 	bl	80003fc <main>
 8000bce:	4770      	bx	lr
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000074 	.word	0x20000074
 8000bd8:	080060c4 	.word	0x080060c4
 8000bdc:	20000074 	.word	0x20000074
 8000be0:	20001e90 	.word	0x20001e90

08000be4 <ADC1_2_IRQHandler>:
 8000be4:	e7fe      	b.n	8000be4 <ADC1_2_IRQHandler>
	...

08000be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_Init+0x28>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HAL_Init+0x28>)
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 fd21 	bl	8001640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfe:	200f      	movs	r0, #15
 8000c00:	f7ff fef4 	bl	80009ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c04:	f7ff fe7e 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40022000 	.word	0x40022000

08000c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_IncTick+0x1c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_IncTick+0x20>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	4a03      	ldr	r2, [pc, #12]	; (8000c34 <HAL_IncTick+0x20>)
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000134 	.word	0x20000134

08000c38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b02      	ldr	r3, [pc, #8]	; (8000c48 <HAL_GetTick+0x10>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	20000134 	.word	0x20000134

08000c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c54:	f7ff fff0 	bl	8000c38 <HAL_GetTick>
 8000c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c64:	d005      	beq.n	8000c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_Delay+0x44>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c72:	bf00      	nop
 8000c74:	f7ff ffe0 	bl	8000c38 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d8f7      	bhi.n	8000c74 <HAL_Delay+0x28>
  {
  }
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008

08000c94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e0be      	b.n	8000e34 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d109      	bne.n	8000cd8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff fe4e 	bl	8000974 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f000 fbc5 	bl	8001468 <ADC_ConversionStop_Disable>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce6:	f003 0310 	and.w	r3, r3, #16
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f040 8099 	bne.w	8000e22 <HAL_ADC_Init+0x18e>
 8000cf0:	7dfb      	ldrb	r3, [r7, #23]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8095 	bne.w	8000e22 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d00:	f023 0302 	bic.w	r3, r3, #2
 8000d04:	f043 0202 	orr.w	r2, r3, #2
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d14:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	7b1b      	ldrb	r3, [r3, #12]
 8000d1a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d1c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d2c:	d003      	beq.n	8000d36 <HAL_ADC_Init+0xa2>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d102      	bne.n	8000d3c <HAL_ADC_Init+0xa8>
 8000d36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d3a:	e000      	b.n	8000d3e <HAL_ADC_Init+0xaa>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	7d1b      	ldrb	r3, [r3, #20]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d119      	bne.n	8000d80 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	7b1b      	ldrb	r3, [r3, #12]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d109      	bne.n	8000d68 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	035a      	lsls	r2, r3, #13
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	e00b      	b.n	8000d80 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6c:	f043 0220 	orr.w	r2, r3, #32
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d78:	f043 0201 	orr.w	r2, r3, #1
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	430a      	orrs	r2, r1
 8000d92:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <HAL_ADC_Init+0x1a8>)
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	6812      	ldr	r2, [r2, #0]
 8000da2:	68b9      	ldr	r1, [r7, #8]
 8000da4:	430b      	orrs	r3, r1
 8000da6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000db0:	d003      	beq.n	8000dba <HAL_ADC_Init+0x126>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d104      	bne.n	8000dc4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	051b      	lsls	r3, r3, #20
 8000dc2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <HAL_ADC_Init+0x1ac>)
 8000de0:	4013      	ands	r3, r2
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d10b      	bne.n	8000e00 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df2:	f023 0303 	bic.w	r3, r3, #3
 8000df6:	f043 0201 	orr.w	r2, r3, #1
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dfe:	e018      	b.n	8000e32 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e04:	f023 0312 	bic.w	r3, r3, #18
 8000e08:	f043 0210 	orr.w	r2, r3, #16
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e14:	f043 0201 	orr.w	r2, r3, #1
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e20:	e007      	b.n	8000e32 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e26:	f043 0210 	orr.w	r2, r3, #16
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	ffe1f7fd 	.word	0xffe1f7fd
 8000e40:	ff1f0efe 	.word	0xff1f0efe

08000e44 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d101      	bne.n	8000e5e <HAL_ADC_Start+0x1a>
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	e098      	b.n	8000f90 <HAL_ADC_Start+0x14c>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2201      	movs	r2, #1
 8000e62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f000 faa4 	bl	80013b4 <ADC_Enable>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f040 8087 	bne.w	8000f86 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e80:	f023 0301 	bic.w	r3, r3, #1
 8000e84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a41      	ldr	r2, [pc, #260]	; (8000f98 <HAL_ADC_Start+0x154>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d105      	bne.n	8000ea2 <HAL_ADC_Start+0x5e>
 8000e96:	4b41      	ldr	r3, [pc, #260]	; (8000f9c <HAL_ADC_Start+0x158>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d115      	bne.n	8000ece <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d026      	beq.n	8000f0a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ec4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ecc:	e01d      	b.n	8000f0a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a2f      	ldr	r2, [pc, #188]	; (8000f9c <HAL_ADC_Start+0x158>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d004      	beq.n	8000eee <HAL_ADC_Start+0xaa>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a2b      	ldr	r2, [pc, #172]	; (8000f98 <HAL_ADC_Start+0x154>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d10d      	bne.n	8000f0a <HAL_ADC_Start+0xc6>
 8000eee:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <HAL_ADC_Start+0x158>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d007      	beq.n	8000f0a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d006      	beq.n	8000f24 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1a:	f023 0206 	bic.w	r2, r3, #6
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f22:	e002      	b.n	8000f2a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f06f 0202 	mvn.w	r2, #2
 8000f3a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f46:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f4a:	d113      	bne.n	8000f74 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f50:	4a11      	ldr	r2, [pc, #68]	; (8000f98 <HAL_ADC_Start+0x154>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d105      	bne.n	8000f62 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_ADC_Start+0x158>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d108      	bne.n	8000f74 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	e00c      	b.n	8000f8e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	e003      	b.n	8000f8e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40012800 	.word	0x40012800
 8000f9c:	40012400 	.word	0x40012400

08000fa0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000fb6:	f7ff fe3f 	bl	8000c38 <HAL_GetTick>
 8000fba:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00b      	beq.n	8000fe2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fce:	f043 0220 	orr.w	r2, r3, #32
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e0d3      	b.n	800118a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d131      	bne.n	8001054 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d12a      	bne.n	8001054 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000ffe:	e021      	b.n	8001044 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001006:	d01d      	beq.n	8001044 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d007      	beq.n	800101e <HAL_ADC_PollForConversion+0x7e>
 800100e:	f7ff fe13 	bl	8000c38 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	429a      	cmp	r2, r3
 800101c:	d212      	bcs.n	8001044 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d10b      	bne.n	8001044 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001030:	f043 0204 	orr.w	r2, r3, #4
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e0a2      	b.n	800118a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0d6      	beq.n	8001000 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001052:	e070      	b.n	8001136 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001054:	4b4f      	ldr	r3, [pc, #316]	; (8001194 <HAL_ADC_PollForConversion+0x1f4>)
 8001056:	681c      	ldr	r4, [r3, #0]
 8001058:	2002      	movs	r0, #2
 800105a:	f001 f9c3 	bl	80023e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800105e:	4603      	mov	r3, r0
 8001060:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6919      	ldr	r1, [r3, #16]
 800106a:	4b4b      	ldr	r3, [pc, #300]	; (8001198 <HAL_ADC_PollForConversion+0x1f8>)
 800106c:	400b      	ands	r3, r1
 800106e:	2b00      	cmp	r3, #0
 8001070:	d118      	bne.n	80010a4 <HAL_ADC_PollForConversion+0x104>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68d9      	ldr	r1, [r3, #12]
 8001078:	4b48      	ldr	r3, [pc, #288]	; (800119c <HAL_ADC_PollForConversion+0x1fc>)
 800107a:	400b      	ands	r3, r1
 800107c:	2b00      	cmp	r3, #0
 800107e:	d111      	bne.n	80010a4 <HAL_ADC_PollForConversion+0x104>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6919      	ldr	r1, [r3, #16]
 8001086:	4b46      	ldr	r3, [pc, #280]	; (80011a0 <HAL_ADC_PollForConversion+0x200>)
 8001088:	400b      	ands	r3, r1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d108      	bne.n	80010a0 <HAL_ADC_PollForConversion+0x100>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68d9      	ldr	r1, [r3, #12]
 8001094:	4b43      	ldr	r3, [pc, #268]	; (80011a4 <HAL_ADC_PollForConversion+0x204>)
 8001096:	400b      	ands	r3, r1
 8001098:	2b00      	cmp	r3, #0
 800109a:	d101      	bne.n	80010a0 <HAL_ADC_PollForConversion+0x100>
 800109c:	2314      	movs	r3, #20
 800109e:	e020      	b.n	80010e2 <HAL_ADC_PollForConversion+0x142>
 80010a0:	2329      	movs	r3, #41	; 0x29
 80010a2:	e01e      	b.n	80010e2 <HAL_ADC_PollForConversion+0x142>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6919      	ldr	r1, [r3, #16]
 80010aa:	4b3d      	ldr	r3, [pc, #244]	; (80011a0 <HAL_ADC_PollForConversion+0x200>)
 80010ac:	400b      	ands	r3, r1
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d106      	bne.n	80010c0 <HAL_ADC_PollForConversion+0x120>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68d9      	ldr	r1, [r3, #12]
 80010b8:	4b3a      	ldr	r3, [pc, #232]	; (80011a4 <HAL_ADC_PollForConversion+0x204>)
 80010ba:	400b      	ands	r3, r1
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00d      	beq.n	80010dc <HAL_ADC_PollForConversion+0x13c>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6919      	ldr	r1, [r3, #16]
 80010c6:	4b38      	ldr	r3, [pc, #224]	; (80011a8 <HAL_ADC_PollForConversion+0x208>)
 80010c8:	400b      	ands	r3, r1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d108      	bne.n	80010e0 <HAL_ADC_PollForConversion+0x140>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68d9      	ldr	r1, [r3, #12]
 80010d4:	4b34      	ldr	r3, [pc, #208]	; (80011a8 <HAL_ADC_PollForConversion+0x208>)
 80010d6:	400b      	ands	r3, r1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <HAL_ADC_PollForConversion+0x140>
 80010dc:	2354      	movs	r3, #84	; 0x54
 80010de:	e000      	b.n	80010e2 <HAL_ADC_PollForConversion+0x142>
 80010e0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80010e2:	fb02 f303 	mul.w	r3, r2, r3
 80010e6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80010e8:	e021      	b.n	800112e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f0:	d01a      	beq.n	8001128 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d007      	beq.n	8001108 <HAL_ADC_PollForConversion+0x168>
 80010f8:	f7ff fd9e 	bl	8000c38 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d20f      	bcs.n	8001128 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	429a      	cmp	r2, r3
 800110e:	d90b      	bls.n	8001128 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001114:	f043 0204 	orr.w	r2, r3, #4
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e030      	b.n	800118a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	3301      	adds	r3, #1
 800112c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	429a      	cmp	r2, r3
 8001134:	d8d9      	bhi.n	80010ea <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f06f 0212 	mvn.w	r2, #18
 800113e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001156:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800115a:	d115      	bne.n	8001188 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001160:	2b00      	cmp	r3, #0
 8001162:	d111      	bne.n	8001188 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001168:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d105      	bne.n	8001188 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001180:	f043 0201 	orr.w	r2, r3, #1
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	371c      	adds	r7, #28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	bf00      	nop
 8001194:	20000000 	.word	0x20000000
 8001198:	24924924 	.word	0x24924924
 800119c:	00924924 	.word	0x00924924
 80011a0:	12492492 	.word	0x12492492
 80011a4:	00492492 	.word	0x00492492
 80011a8:	00249249 	.word	0x00249249

080011ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d101      	bne.n	80011e4 <HAL_ADC_ConfigChannel+0x20>
 80011e0:	2302      	movs	r3, #2
 80011e2:	e0dc      	b.n	800139e <HAL_ADC_ConfigChannel+0x1da>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b06      	cmp	r3, #6
 80011f2:	d81c      	bhi.n	800122e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	3b05      	subs	r3, #5
 8001206:	221f      	movs	r2, #31
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	4019      	ands	r1, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	3b05      	subs	r3, #5
 8001220:	fa00 f203 	lsl.w	r2, r0, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	430a      	orrs	r2, r1
 800122a:	635a      	str	r2, [r3, #52]	; 0x34
 800122c:	e03c      	b.n	80012a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b0c      	cmp	r3, #12
 8001234:	d81c      	bhi.n	8001270 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	3b23      	subs	r3, #35	; 0x23
 8001248:	221f      	movs	r2, #31
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	4019      	ands	r1, r3
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	3b23      	subs	r3, #35	; 0x23
 8001262:	fa00 f203 	lsl.w	r2, r0, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	631a      	str	r2, [r3, #48]	; 0x30
 800126e:	e01b      	b.n	80012a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	3b41      	subs	r3, #65	; 0x41
 8001282:	221f      	movs	r2, #31
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	4019      	ands	r1, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	3b41      	subs	r3, #65	; 0x41
 800129c:	fa00 f203 	lsl.w	r2, r0, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b09      	cmp	r3, #9
 80012ae:	d91c      	bls.n	80012ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68d9      	ldr	r1, [r3, #12]
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	3b1e      	subs	r3, #30
 80012c2:	2207      	movs	r2, #7
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	4019      	ands	r1, r3
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	6898      	ldr	r0, [r3, #8]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4613      	mov	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4413      	add	r3, r2
 80012da:	3b1e      	subs	r3, #30
 80012dc:	fa00 f203 	lsl.w	r2, r0, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	e019      	b.n	800131e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6919      	ldr	r1, [r3, #16]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4613      	mov	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4413      	add	r3, r2
 80012fa:	2207      	movs	r2, #7
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	4019      	ands	r1, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	6898      	ldr	r0, [r3, #8]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4613      	mov	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4413      	add	r3, r2
 8001312:	fa00 f203 	lsl.w	r2, r0, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b10      	cmp	r3, #16
 8001324:	d003      	beq.n	800132e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800132a:	2b11      	cmp	r3, #17
 800132c:	d132      	bne.n	8001394 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a1d      	ldr	r2, [pc, #116]	; (80013a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d125      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d126      	bne.n	8001394 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001354:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b10      	cmp	r3, #16
 800135c:	d11a      	bne.n	8001394 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <HAL_ADC_ConfigChannel+0x1e8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a13      	ldr	r2, [pc, #76]	; (80013b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001364:	fba2 2303 	umull	r2, r3, r2, r3
 8001368:	0c9a      	lsrs	r2, r3, #18
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001374:	e002      	b.n	800137c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	3b01      	subs	r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f9      	bne.n	8001376 <HAL_ADC_ConfigChannel+0x1b2>
 8001382:	e007      	b.n	8001394 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001388:	f043 0220 	orr.w	r2, r3, #32
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800139c:	7bfb      	ldrb	r3, [r7, #15]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	40012400 	.word	0x40012400
 80013ac:	20000000 	.word	0x20000000
 80013b0:	431bde83 	.word	0x431bde83

080013b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d040      	beq.n	8001454 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f042 0201 	orr.w	r2, r2, #1
 80013e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013e2:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <ADC_Enable+0xac>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a1f      	ldr	r2, [pc, #124]	; (8001464 <ADC_Enable+0xb0>)
 80013e8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ec:	0c9b      	lsrs	r3, r3, #18
 80013ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013f0:	e002      	b.n	80013f8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f9      	bne.n	80013f2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013fe:	f7ff fc1b 	bl	8000c38 <HAL_GetTick>
 8001402:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001404:	e01f      	b.n	8001446 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001406:	f7ff fc17 	bl	8000c38 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d918      	bls.n	8001446 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d011      	beq.n	8001446 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001426:	f043 0210 	orr.w	r2, r3, #16
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001432:	f043 0201 	orr.w	r2, r3, #1
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e007      	b.n	8001456 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b01      	cmp	r3, #1
 8001452:	d1d8      	bne.n	8001406 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000000 	.word	0x20000000
 8001464:	431bde83 	.word	0x431bde83

08001468 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b01      	cmp	r3, #1
 8001480:	d12e      	bne.n	80014e0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0201 	bic.w	r2, r2, #1
 8001490:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001492:	f7ff fbd1 	bl	8000c38 <HAL_GetTick>
 8001496:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001498:	e01b      	b.n	80014d2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800149a:	f7ff fbcd 	bl	8000c38 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d914      	bls.n	80014d2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d10d      	bne.n	80014d2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ba:	f043 0210 	orr.w	r2, r3, #16
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c6:	f043 0201 	orr.w	r2, r3, #1
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e007      	b.n	80014e2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d0dc      	beq.n	800149a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001508:	4013      	ands	r3, r2
 800150a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001514:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151e:	4a04      	ldr	r2, [pc, #16]	; (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	60d3      	str	r3, [r2, #12]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <__NVIC_GetPriorityGrouping+0x18>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	f003 0307 	and.w	r3, r3, #7
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	db0b      	blt.n	800157a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	f003 021f 	and.w	r2, r3, #31
 8001568:	4906      	ldr	r1, [pc, #24]	; (8001584 <__NVIC_EnableIRQ+0x34>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	2001      	movs	r0, #1
 8001572:	fa00 f202 	lsl.w	r2, r0, r2
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	e000e100 	.word	0xe000e100

08001588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db0a      	blt.n	80015b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	490c      	ldr	r1, [pc, #48]	; (80015d4 <__NVIC_SetPriority+0x4c>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	0112      	lsls	r2, r2, #4
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	440b      	add	r3, r1
 80015ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b0:	e00a      	b.n	80015c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4908      	ldr	r1, [pc, #32]	; (80015d8 <__NVIC_SetPriority+0x50>)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	3b04      	subs	r3, #4
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	440b      	add	r3, r1
 80015c6:	761a      	strb	r2, [r3, #24]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000e100 	.word	0xe000e100
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	; 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f1c3 0307 	rsb	r3, r3, #7
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	bf28      	it	cs
 80015fa:	2304      	movcs	r3, #4
 80015fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3304      	adds	r3, #4
 8001602:	2b06      	cmp	r3, #6
 8001604:	d902      	bls.n	800160c <NVIC_EncodePriority+0x30>
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3b03      	subs	r3, #3
 800160a:	e000      	b.n	800160e <NVIC_EncodePriority+0x32>
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	f04f 32ff 	mov.w	r2, #4294967295
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	43d9      	mvns	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	4313      	orrs	r3, r2
         );
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	; 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff4f 	bl	80014ec <__NVIC_SetPriorityGrouping>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001668:	f7ff ff64 	bl	8001534 <__NVIC_GetPriorityGrouping>
 800166c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	6978      	ldr	r0, [r7, #20]
 8001674:	f7ff ffb2 	bl	80015dc <NVIC_EncodePriority>
 8001678:	4602      	mov	r2, r0
 800167a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff81 	bl	8001588 <__NVIC_SetPriority>
}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff57 	bl	8001550 <__NVIC_EnableIRQ>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b08b      	sub	sp, #44	; 0x2c
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016b6:	2300      	movs	r3, #0
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ba:	2300      	movs	r3, #0
 80016bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016be:	e169      	b.n	8001994 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016c0:	2201      	movs	r2, #1
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	69fa      	ldr	r2, [r7, #28]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	429a      	cmp	r2, r3
 80016da:	f040 8158 	bne.w	800198e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	4a9a      	ldr	r2, [pc, #616]	; (800194c <HAL_GPIO_Init+0x2a0>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d05e      	beq.n	80017a6 <HAL_GPIO_Init+0xfa>
 80016e8:	4a98      	ldr	r2, [pc, #608]	; (800194c <HAL_GPIO_Init+0x2a0>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d875      	bhi.n	80017da <HAL_GPIO_Init+0x12e>
 80016ee:	4a98      	ldr	r2, [pc, #608]	; (8001950 <HAL_GPIO_Init+0x2a4>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d058      	beq.n	80017a6 <HAL_GPIO_Init+0xfa>
 80016f4:	4a96      	ldr	r2, [pc, #600]	; (8001950 <HAL_GPIO_Init+0x2a4>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d86f      	bhi.n	80017da <HAL_GPIO_Init+0x12e>
 80016fa:	4a96      	ldr	r2, [pc, #600]	; (8001954 <HAL_GPIO_Init+0x2a8>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d052      	beq.n	80017a6 <HAL_GPIO_Init+0xfa>
 8001700:	4a94      	ldr	r2, [pc, #592]	; (8001954 <HAL_GPIO_Init+0x2a8>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d869      	bhi.n	80017da <HAL_GPIO_Init+0x12e>
 8001706:	4a94      	ldr	r2, [pc, #592]	; (8001958 <HAL_GPIO_Init+0x2ac>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d04c      	beq.n	80017a6 <HAL_GPIO_Init+0xfa>
 800170c:	4a92      	ldr	r2, [pc, #584]	; (8001958 <HAL_GPIO_Init+0x2ac>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d863      	bhi.n	80017da <HAL_GPIO_Init+0x12e>
 8001712:	4a92      	ldr	r2, [pc, #584]	; (800195c <HAL_GPIO_Init+0x2b0>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d046      	beq.n	80017a6 <HAL_GPIO_Init+0xfa>
 8001718:	4a90      	ldr	r2, [pc, #576]	; (800195c <HAL_GPIO_Init+0x2b0>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d85d      	bhi.n	80017da <HAL_GPIO_Init+0x12e>
 800171e:	2b12      	cmp	r3, #18
 8001720:	d82a      	bhi.n	8001778 <HAL_GPIO_Init+0xcc>
 8001722:	2b12      	cmp	r3, #18
 8001724:	d859      	bhi.n	80017da <HAL_GPIO_Init+0x12e>
 8001726:	a201      	add	r2, pc, #4	; (adr r2, 800172c <HAL_GPIO_Init+0x80>)
 8001728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172c:	080017a7 	.word	0x080017a7
 8001730:	08001781 	.word	0x08001781
 8001734:	08001793 	.word	0x08001793
 8001738:	080017d5 	.word	0x080017d5
 800173c:	080017db 	.word	0x080017db
 8001740:	080017db 	.word	0x080017db
 8001744:	080017db 	.word	0x080017db
 8001748:	080017db 	.word	0x080017db
 800174c:	080017db 	.word	0x080017db
 8001750:	080017db 	.word	0x080017db
 8001754:	080017db 	.word	0x080017db
 8001758:	080017db 	.word	0x080017db
 800175c:	080017db 	.word	0x080017db
 8001760:	080017db 	.word	0x080017db
 8001764:	080017db 	.word	0x080017db
 8001768:	080017db 	.word	0x080017db
 800176c:	080017db 	.word	0x080017db
 8001770:	08001789 	.word	0x08001789
 8001774:	0800179d 	.word	0x0800179d
 8001778:	4a79      	ldr	r2, [pc, #484]	; (8001960 <HAL_GPIO_Init+0x2b4>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d013      	beq.n	80017a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800177e:	e02c      	b.n	80017da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	623b      	str	r3, [r7, #32]
          break;
 8001786:	e029      	b.n	80017dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	3304      	adds	r3, #4
 800178e:	623b      	str	r3, [r7, #32]
          break;
 8001790:	e024      	b.n	80017dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	3308      	adds	r3, #8
 8001798:	623b      	str	r3, [r7, #32]
          break;
 800179a:	e01f      	b.n	80017dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	330c      	adds	r3, #12
 80017a2:	623b      	str	r3, [r7, #32]
          break;
 80017a4:	e01a      	b.n	80017dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d102      	bne.n	80017b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ae:	2304      	movs	r3, #4
 80017b0:	623b      	str	r3, [r7, #32]
          break;
 80017b2:	e013      	b.n	80017dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d105      	bne.n	80017c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017bc:	2308      	movs	r3, #8
 80017be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	611a      	str	r2, [r3, #16]
          break;
 80017c6:	e009      	b.n	80017dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c8:	2308      	movs	r3, #8
 80017ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	615a      	str	r2, [r3, #20]
          break;
 80017d2:	e003      	b.n	80017dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
          break;
 80017d8:	e000      	b.n	80017dc <HAL_GPIO_Init+0x130>
          break;
 80017da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2bff      	cmp	r3, #255	; 0xff
 80017e0:	d801      	bhi.n	80017e6 <HAL_GPIO_Init+0x13a>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	e001      	b.n	80017ea <HAL_GPIO_Init+0x13e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3304      	adds	r3, #4
 80017ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2bff      	cmp	r3, #255	; 0xff
 80017f0:	d802      	bhi.n	80017f8 <HAL_GPIO_Init+0x14c>
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	e002      	b.n	80017fe <HAL_GPIO_Init+0x152>
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	3b08      	subs	r3, #8
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	210f      	movs	r1, #15
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	fa01 f303 	lsl.w	r3, r1, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	401a      	ands	r2, r3
 8001810:	6a39      	ldr	r1, [r7, #32]
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	fa01 f303 	lsl.w	r3, r1, r3
 8001818:	431a      	orrs	r2, r3
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 80b1 	beq.w	800198e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800182c:	4b4d      	ldr	r3, [pc, #308]	; (8001964 <HAL_GPIO_Init+0x2b8>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4a4c      	ldr	r2, [pc, #304]	; (8001964 <HAL_GPIO_Init+0x2b8>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6193      	str	r3, [r2, #24]
 8001838:	4b4a      	ldr	r3, [pc, #296]	; (8001964 <HAL_GPIO_Init+0x2b8>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001844:	4a48      	ldr	r2, [pc, #288]	; (8001968 <HAL_GPIO_Init+0x2bc>)
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	089b      	lsrs	r3, r3, #2
 800184a:	3302      	adds	r3, #2
 800184c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001850:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	220f      	movs	r2, #15
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	4013      	ands	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a40      	ldr	r2, [pc, #256]	; (800196c <HAL_GPIO_Init+0x2c0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d013      	beq.n	8001898 <HAL_GPIO_Init+0x1ec>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a3f      	ldr	r2, [pc, #252]	; (8001970 <HAL_GPIO_Init+0x2c4>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d00d      	beq.n	8001894 <HAL_GPIO_Init+0x1e8>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a3e      	ldr	r2, [pc, #248]	; (8001974 <HAL_GPIO_Init+0x2c8>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d007      	beq.n	8001890 <HAL_GPIO_Init+0x1e4>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a3d      	ldr	r2, [pc, #244]	; (8001978 <HAL_GPIO_Init+0x2cc>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d101      	bne.n	800188c <HAL_GPIO_Init+0x1e0>
 8001888:	2303      	movs	r3, #3
 800188a:	e006      	b.n	800189a <HAL_GPIO_Init+0x1ee>
 800188c:	2304      	movs	r3, #4
 800188e:	e004      	b.n	800189a <HAL_GPIO_Init+0x1ee>
 8001890:	2302      	movs	r3, #2
 8001892:	e002      	b.n	800189a <HAL_GPIO_Init+0x1ee>
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <HAL_GPIO_Init+0x1ee>
 8001898:	2300      	movs	r3, #0
 800189a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800189c:	f002 0203 	and.w	r2, r2, #3
 80018a0:	0092      	lsls	r2, r2, #2
 80018a2:	4093      	lsls	r3, r2
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018aa:	492f      	ldr	r1, [pc, #188]	; (8001968 <HAL_GPIO_Init+0x2bc>)
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	3302      	adds	r3, #2
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d006      	beq.n	80018d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018c4:	4b2d      	ldr	r3, [pc, #180]	; (800197c <HAL_GPIO_Init+0x2d0>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	492c      	ldr	r1, [pc, #176]	; (800197c <HAL_GPIO_Init+0x2d0>)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
 80018d0:	e006      	b.n	80018e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018d2:	4b2a      	ldr	r3, [pc, #168]	; (800197c <HAL_GPIO_Init+0x2d0>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	43db      	mvns	r3, r3
 80018da:	4928      	ldr	r1, [pc, #160]	; (800197c <HAL_GPIO_Init+0x2d0>)
 80018dc:	4013      	ands	r3, r2
 80018de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018ec:	4b23      	ldr	r3, [pc, #140]	; (800197c <HAL_GPIO_Init+0x2d0>)
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	4922      	ldr	r1, [pc, #136]	; (800197c <HAL_GPIO_Init+0x2d0>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018fa:	4b20      	ldr	r3, [pc, #128]	; (800197c <HAL_GPIO_Init+0x2d0>)
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	43db      	mvns	r3, r3
 8001902:	491e      	ldr	r1, [pc, #120]	; (800197c <HAL_GPIO_Init+0x2d0>)
 8001904:	4013      	ands	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d006      	beq.n	8001922 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <HAL_GPIO_Init+0x2d0>)
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	4918      	ldr	r1, [pc, #96]	; (800197c <HAL_GPIO_Init+0x2d0>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	608b      	str	r3, [r1, #8]
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <HAL_GPIO_Init+0x2d0>)
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	43db      	mvns	r3, r3
 800192a:	4914      	ldr	r1, [pc, #80]	; (800197c <HAL_GPIO_Init+0x2d0>)
 800192c:	4013      	ands	r3, r2
 800192e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d021      	beq.n	8001980 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_GPIO_Init+0x2d0>)
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	490e      	ldr	r1, [pc, #56]	; (800197c <HAL_GPIO_Init+0x2d0>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	60cb      	str	r3, [r1, #12]
 8001948:	e021      	b.n	800198e <HAL_GPIO_Init+0x2e2>
 800194a:	bf00      	nop
 800194c:	10320000 	.word	0x10320000
 8001950:	10310000 	.word	0x10310000
 8001954:	10220000 	.word	0x10220000
 8001958:	10210000 	.word	0x10210000
 800195c:	10120000 	.word	0x10120000
 8001960:	10110000 	.word	0x10110000
 8001964:	40021000 	.word	0x40021000
 8001968:	40010000 	.word	0x40010000
 800196c:	40010800 	.word	0x40010800
 8001970:	40010c00 	.word	0x40010c00
 8001974:	40011000 	.word	0x40011000
 8001978:	40011400 	.word	0x40011400
 800197c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_GPIO_Init+0x304>)
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	43db      	mvns	r3, r3
 8001988:	4909      	ldr	r1, [pc, #36]	; (80019b0 <HAL_GPIO_Init+0x304>)
 800198a:	4013      	ands	r3, r2
 800198c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	3301      	adds	r3, #1
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	fa22 f303 	lsr.w	r3, r2, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f47f ae8e 	bne.w	80016c0 <HAL_GPIO_Init+0x14>
  }
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	372c      	adds	r7, #44	; 0x2c
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	40010400 	.word	0x40010400

080019b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	807b      	strh	r3, [r7, #2]
 80019c0:	4613      	mov	r3, r2
 80019c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019c4:	787b      	ldrb	r3, [r7, #1]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ca:	887a      	ldrh	r2, [r7, #2]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019d0:	e003      	b.n	80019da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019d2:	887b      	ldrh	r3, [r7, #2]
 80019d4:	041a      	lsls	r2, r3, #16
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	611a      	str	r2, [r3, #16]
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e272      	b.n	8001edc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 8087 	beq.w	8001b12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a04:	4b92      	ldr	r3, [pc, #584]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 030c 	and.w	r3, r3, #12
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d00c      	beq.n	8001a2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a10:	4b8f      	ldr	r3, [pc, #572]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 030c 	and.w	r3, r3, #12
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d112      	bne.n	8001a42 <HAL_RCC_OscConfig+0x5e>
 8001a1c:	4b8c      	ldr	r3, [pc, #560]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a28:	d10b      	bne.n	8001a42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2a:	4b89      	ldr	r3, [pc, #548]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d06c      	beq.n	8001b10 <HAL_RCC_OscConfig+0x12c>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d168      	bne.n	8001b10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e24c      	b.n	8001edc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4a:	d106      	bne.n	8001a5a <HAL_RCC_OscConfig+0x76>
 8001a4c:	4b80      	ldr	r3, [pc, #512]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a7f      	ldr	r2, [pc, #508]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	e02e      	b.n	8001ab8 <HAL_RCC_OscConfig+0xd4>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10c      	bne.n	8001a7c <HAL_RCC_OscConfig+0x98>
 8001a62:	4b7b      	ldr	r3, [pc, #492]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a7a      	ldr	r2, [pc, #488]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	4b78      	ldr	r3, [pc, #480]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a77      	ldr	r2, [pc, #476]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	e01d      	b.n	8001ab8 <HAL_RCC_OscConfig+0xd4>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a84:	d10c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0xbc>
 8001a86:	4b72      	ldr	r3, [pc, #456]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a71      	ldr	r2, [pc, #452]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4b6f      	ldr	r3, [pc, #444]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a6e      	ldr	r2, [pc, #440]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e00b      	b.n	8001ab8 <HAL_RCC_OscConfig+0xd4>
 8001aa0:	4b6b      	ldr	r3, [pc, #428]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a6a      	ldr	r2, [pc, #424]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b68      	ldr	r3, [pc, #416]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a67      	ldr	r2, [pc, #412]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d013      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff f8ba 	bl	8000c38 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac8:	f7ff f8b6 	bl	8000c38 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b64      	cmp	r3, #100	; 0x64
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e200      	b.n	8001edc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ada:	4b5d      	ldr	r3, [pc, #372]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0xe4>
 8001ae6:	e014      	b.n	8001b12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff f8a6 	bl	8000c38 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff f8a2 	bl	8000c38 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	; 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e1ec      	b.n	8001edc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b02:	4b53      	ldr	r3, [pc, #332]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x10c>
 8001b0e:	e000      	b.n	8001b12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d063      	beq.n	8001be6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b1e:	4b4c      	ldr	r3, [pc, #304]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00b      	beq.n	8001b42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b2a:	4b49      	ldr	r3, [pc, #292]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d11c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x18c>
 8001b36:	4b46      	ldr	r3, [pc, #280]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d116      	bne.n	8001b70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b42:	4b43      	ldr	r3, [pc, #268]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <HAL_RCC_OscConfig+0x176>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e1c0      	b.n	8001edc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5a:	4b3d      	ldr	r3, [pc, #244]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4939      	ldr	r1, [pc, #228]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6e:	e03a      	b.n	8001be6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d020      	beq.n	8001bba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b78:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <HAL_RCC_OscConfig+0x270>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7ff f85b 	bl	8000c38 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b86:	f7ff f857 	bl	8000c38 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e1a1      	b.n	8001edc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b98:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba4:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4927      	ldr	r1, [pc, #156]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]
 8001bb8:	e015      	b.n	8001be6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bba:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <HAL_RCC_OscConfig+0x270>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f83a 	bl	8000c38 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc8:	f7ff f836 	bl	8000c38 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e180      	b.n	8001edc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bda:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d03a      	beq.n	8001c68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d019      	beq.n	8001c2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_RCC_OscConfig+0x274>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c00:	f7ff f81a 	bl	8000c38 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c08:	f7ff f816 	bl	8000c38 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e160      	b.n	8001edc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f000 fb08 	bl	800223c <RCC_Delay>
 8001c2c:	e01c      	b.n	8001c68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <HAL_RCC_OscConfig+0x274>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c34:	f7ff f800 	bl	8000c38 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3a:	e00f      	b.n	8001c5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3c:	f7fe fffc 	bl	8000c38 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d908      	bls.n	8001c5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e146      	b.n	8001edc <HAL_RCC_OscConfig+0x4f8>
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
 8001c54:	42420000 	.word	0x42420000
 8001c58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5c:	4b92      	ldr	r3, [pc, #584]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1e9      	bne.n	8001c3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80a6 	beq.w	8001dc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c76:	2300      	movs	r3, #0
 8001c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c7a:	4b8b      	ldr	r3, [pc, #556]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10d      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	4b88      	ldr	r3, [pc, #544]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	4a87      	ldr	r2, [pc, #540]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c90:	61d3      	str	r3, [r2, #28]
 8001c92:	4b85      	ldr	r3, [pc, #532]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca2:	4b82      	ldr	r3, [pc, #520]	; (8001eac <HAL_RCC_OscConfig+0x4c8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d118      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cae:	4b7f      	ldr	r3, [pc, #508]	; (8001eac <HAL_RCC_OscConfig+0x4c8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a7e      	ldr	r2, [pc, #504]	; (8001eac <HAL_RCC_OscConfig+0x4c8>)
 8001cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cba:	f7fe ffbd 	bl	8000c38 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc2:	f7fe ffb9 	bl	8000c38 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b64      	cmp	r3, #100	; 0x64
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e103      	b.n	8001edc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd4:	4b75      	ldr	r3, [pc, #468]	; (8001eac <HAL_RCC_OscConfig+0x4c8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x312>
 8001ce8:	4b6f      	ldr	r3, [pc, #444]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4a6e      	ldr	r2, [pc, #440]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6213      	str	r3, [r2, #32]
 8001cf4:	e02d      	b.n	8001d52 <HAL_RCC_OscConfig+0x36e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x334>
 8001cfe:	4b6a      	ldr	r3, [pc, #424]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	4a69      	ldr	r2, [pc, #420]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	f023 0301 	bic.w	r3, r3, #1
 8001d08:	6213      	str	r3, [r2, #32]
 8001d0a:	4b67      	ldr	r3, [pc, #412]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	4a66      	ldr	r2, [pc, #408]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	f023 0304 	bic.w	r3, r3, #4
 8001d14:	6213      	str	r3, [r2, #32]
 8001d16:	e01c      	b.n	8001d52 <HAL_RCC_OscConfig+0x36e>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	2b05      	cmp	r3, #5
 8001d1e:	d10c      	bne.n	8001d3a <HAL_RCC_OscConfig+0x356>
 8001d20:	4b61      	ldr	r3, [pc, #388]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	4a60      	ldr	r2, [pc, #384]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001d26:	f043 0304 	orr.w	r3, r3, #4
 8001d2a:	6213      	str	r3, [r2, #32]
 8001d2c:	4b5e      	ldr	r3, [pc, #376]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4a5d      	ldr	r2, [pc, #372]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6213      	str	r3, [r2, #32]
 8001d38:	e00b      	b.n	8001d52 <HAL_RCC_OscConfig+0x36e>
 8001d3a:	4b5b      	ldr	r3, [pc, #364]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	4a5a      	ldr	r2, [pc, #360]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	6213      	str	r3, [r2, #32]
 8001d46:	4b58      	ldr	r3, [pc, #352]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	4a57      	ldr	r2, [pc, #348]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	f023 0304 	bic.w	r3, r3, #4
 8001d50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d015      	beq.n	8001d86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5a:	f7fe ff6d 	bl	8000c38 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d60:	e00a      	b.n	8001d78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d62:	f7fe ff69 	bl	8000c38 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e0b1      	b.n	8001edc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d78:	4b4b      	ldr	r3, [pc, #300]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ee      	beq.n	8001d62 <HAL_RCC_OscConfig+0x37e>
 8001d84:	e014      	b.n	8001db0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d86:	f7fe ff57 	bl	8000c38 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d8c:	e00a      	b.n	8001da4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8e:	f7fe ff53 	bl	8000c38 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e09b      	b.n	8001edc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da4:	4b40      	ldr	r3, [pc, #256]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1ee      	bne.n	8001d8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001db0:	7dfb      	ldrb	r3, [r7, #23]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d105      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db6:	4b3c      	ldr	r3, [pc, #240]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	4a3b      	ldr	r2, [pc, #236]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 8087 	beq.w	8001eda <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dcc:	4b36      	ldr	r3, [pc, #216]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 030c 	and.w	r3, r3, #12
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d061      	beq.n	8001e9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d146      	bne.n	8001e6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de0:	4b33      	ldr	r3, [pc, #204]	; (8001eb0 <HAL_RCC_OscConfig+0x4cc>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de6:	f7fe ff27 	bl	8000c38 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dee:	f7fe ff23 	bl	8000c38 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e06d      	b.n	8001edc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e00:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f0      	bne.n	8001dee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e14:	d108      	bne.n	8001e28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e16:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	4921      	ldr	r1, [pc, #132]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e28:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a19      	ldr	r1, [r3, #32]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	491b      	ldr	r1, [pc, #108]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e40:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <HAL_RCC_OscConfig+0x4cc>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e46:	f7fe fef7 	bl	8000c38 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4e:	f7fe fef3 	bl	8000c38 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e03d      	b.n	8001edc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0x46a>
 8001e6c:	e035      	b.n	8001eda <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <HAL_RCC_OscConfig+0x4cc>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7fe fee0 	bl	8000c38 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7fe fedc 	bl	8000c38 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e026      	b.n	8001edc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x498>
 8001e9a:	e01e      	b.n	8001eda <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d107      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e019      	b.n	8001edc <HAL_RCC_OscConfig+0x4f8>
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40007000 	.word	0x40007000
 8001eb0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_RCC_OscConfig+0x500>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d106      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d001      	beq.n	8001eda <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000

08001ee8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0d0      	b.n	800209e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001efc:	4b6a      	ldr	r3, [pc, #424]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d910      	bls.n	8001f2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b67      	ldr	r3, [pc, #412]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 0207 	bic.w	r2, r3, #7
 8001f12:	4965      	ldr	r1, [pc, #404]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1a:	4b63      	ldr	r3, [pc, #396]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0b8      	b.n	800209e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d020      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f44:	4b59      	ldr	r3, [pc, #356]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4a58      	ldr	r2, [pc, #352]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f5c:	4b53      	ldr	r3, [pc, #332]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4a52      	ldr	r2, [pc, #328]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f68:	4b50      	ldr	r3, [pc, #320]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	494d      	ldr	r1, [pc, #308]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d040      	beq.n	8002008 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8e:	4b47      	ldr	r3, [pc, #284]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d115      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e07f      	b.n	800209e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa6:	4b41      	ldr	r3, [pc, #260]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d109      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e073      	b.n	800209e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb6:	4b3d      	ldr	r3, [pc, #244]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e06b      	b.n	800209e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc6:	4b39      	ldr	r3, [pc, #228]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f023 0203 	bic.w	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	4936      	ldr	r1, [pc, #216]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fd8:	f7fe fe2e 	bl	8000c38 <HAL_GetTick>
 8001fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	e00a      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe0:	f7fe fe2a 	bl	8000c38 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e053      	b.n	800209e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff6:	4b2d      	ldr	r3, [pc, #180]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 020c 	and.w	r2, r3, #12
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	429a      	cmp	r2, r3
 8002006:	d1eb      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002008:	4b27      	ldr	r3, [pc, #156]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d210      	bcs.n	8002038 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 0207 	bic.w	r2, r3, #7
 800201e:	4922      	ldr	r1, [pc, #136]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e032      	b.n	800209e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d008      	beq.n	8002056 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002044:	4b19      	ldr	r3, [pc, #100]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4916      	ldr	r1, [pc, #88]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d009      	beq.n	8002076 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002062:	4b12      	ldr	r3, [pc, #72]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	490e      	ldr	r1, [pc, #56]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	4313      	orrs	r3, r2
 8002074:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002076:	f000 f821 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 800207a:	4602      	mov	r2, r0
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	490a      	ldr	r1, [pc, #40]	; (80020b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002088:	5ccb      	ldrb	r3, [r1, r3]
 800208a:	fa22 f303 	lsr.w	r3, r2, r3
 800208e:	4a09      	ldr	r2, [pc, #36]	; (80020b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fca8 	bl	80009ec <HAL_InitTick>

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40022000 	.word	0x40022000
 80020ac:	40021000 	.word	0x40021000
 80020b0:	08006070 	.word	0x08006070
 80020b4:	20000000 	.word	0x20000000
 80020b8:	20000004 	.word	0x20000004

080020bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020bc:	b490      	push	{r4, r7}
 80020be:	b08a      	sub	sp, #40	; 0x28
 80020c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020c2:	4b29      	ldr	r3, [pc, #164]	; (8002168 <HAL_RCC_GetSysClockFreq+0xac>)
 80020c4:	1d3c      	adds	r4, r7, #4
 80020c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020cc:	f240 2301 	movw	r3, #513	; 0x201
 80020d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020e6:	4b21      	ldr	r3, [pc, #132]	; (800216c <HAL_RCC_GetSysClockFreq+0xb0>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d002      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0x40>
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d003      	beq.n	8002102 <HAL_RCC_GetSysClockFreq+0x46>
 80020fa:	e02b      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020fc:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020fe:	623b      	str	r3, [r7, #32]
      break;
 8002100:	e02b      	b.n	800215a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	0c9b      	lsrs	r3, r3, #18
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	3328      	adds	r3, #40	; 0x28
 800210c:	443b      	add	r3, r7
 800210e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002112:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d012      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800211e:	4b13      	ldr	r3, [pc, #76]	; (800216c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	0c5b      	lsrs	r3, r3, #17
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	3328      	adds	r3, #40	; 0x28
 800212a:	443b      	add	r3, r7
 800212c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002130:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002136:	fb03 f202 	mul.w	r2, r3, r2
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
 8002142:	e004      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	4a0b      	ldr	r2, [pc, #44]	; (8002174 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002148:	fb02 f303 	mul.w	r3, r2, r3
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	623b      	str	r3, [r7, #32]
      break;
 8002152:	e002      	b.n	800215a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002156:	623b      	str	r3, [r7, #32]
      break;
 8002158:	bf00      	nop
    }
  }
  return sysclockfreq;
 800215a:	6a3b      	ldr	r3, [r7, #32]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3728      	adds	r7, #40	; 0x28
 8002160:	46bd      	mov	sp, r7
 8002162:	bc90      	pop	{r4, r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	08005f20 	.word	0x08005f20
 800216c:	40021000 	.word	0x40021000
 8002170:	007a1200 	.word	0x007a1200
 8002174:	003d0900 	.word	0x003d0900

08002178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800217c:	4b02      	ldr	r3, [pc, #8]	; (8002188 <HAL_RCC_GetHCLKFreq+0x10>)
 800217e:	681b      	ldr	r3, [r3, #0]
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	20000000 	.word	0x20000000

0800218c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002190:	f7ff fff2 	bl	8002178 <HAL_RCC_GetHCLKFreq>
 8002194:	4602      	mov	r2, r0
 8002196:	4b05      	ldr	r3, [pc, #20]	; (80021ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	0a1b      	lsrs	r3, r3, #8
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	4903      	ldr	r1, [pc, #12]	; (80021b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021a2:	5ccb      	ldrb	r3, [r1, r3]
 80021a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000
 80021b0:	08006080 	.word	0x08006080

080021b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021b8:	f7ff ffde 	bl	8002178 <HAL_RCC_GetHCLKFreq>
 80021bc:	4602      	mov	r2, r0
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	0adb      	lsrs	r3, r3, #11
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	4903      	ldr	r1, [pc, #12]	; (80021d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ca:	5ccb      	ldrb	r3, [r1, r3]
 80021cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	08006080 	.word	0x08006080

080021dc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	220f      	movs	r2, #15
 80021ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <HAL_RCC_GetClockConfig+0x58>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0203 	and.w	r2, r3, #3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021f8:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <HAL_RCC_GetClockConfig+0x58>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_RCC_GetClockConfig+0x58>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <HAL_RCC_GetClockConfig+0x58>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	08db      	lsrs	r3, r3, #3
 8002216:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_RCC_GetClockConfig+0x5c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0207 	and.w	r2, r3, #7
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	40021000 	.word	0x40021000
 8002238:	40022000 	.word	0x40022000

0800223c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002244:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <RCC_Delay+0x34>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <RCC_Delay+0x38>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	0a5b      	lsrs	r3, r3, #9
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002258:	bf00      	nop
  }
  while (Delay --);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1e5a      	subs	r2, r3, #1
 800225e:	60fa      	str	r2, [r7, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f9      	bne.n	8002258 <RCC_Delay+0x1c>
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	20000000 	.word	0x20000000
 8002274:	10624dd3 	.word	0x10624dd3

08002278 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d07d      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002294:	2300      	movs	r3, #0
 8002296:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002298:	4b4f      	ldr	r3, [pc, #316]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10d      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a4:	4b4c      	ldr	r3, [pc, #304]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	4a4b      	ldr	r2, [pc, #300]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ae:	61d3      	str	r3, [r2, #28]
 80022b0:	4b49      	ldr	r3, [pc, #292]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022bc:	2301      	movs	r3, #1
 80022be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c0:	4b46      	ldr	r3, [pc, #280]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d118      	bne.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022cc:	4b43      	ldr	r3, [pc, #268]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a42      	ldr	r2, [pc, #264]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d8:	f7fe fcae 	bl	8000c38 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022de:	e008      	b.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e0:	f7fe fcaa 	bl	8000c38 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	; 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e06d      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f2:	4b3a      	ldr	r3, [pc, #232]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022fe:	4b36      	ldr	r3, [pc, #216]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002306:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d02e      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	429a      	cmp	r2, r3
 800231a:	d027      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800231c:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002324:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002326:	4b2e      	ldr	r3, [pc, #184]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002328:	2201      	movs	r2, #1
 800232a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800232c:	4b2c      	ldr	r3, [pc, #176]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002332:	4a29      	ldr	r2, [pc, #164]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d014      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002342:	f7fe fc79 	bl	8000c38 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002348:	e00a      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234a:	f7fe fc75 	bl	8000c38 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f241 3288 	movw	r2, #5000	; 0x1388
 8002358:	4293      	cmp	r3, r2
 800235a:	d901      	bls.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e036      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002360:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0ee      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4917      	ldr	r1, [pc, #92]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237a:	4313      	orrs	r3, r2
 800237c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800237e:	7dfb      	ldrb	r3, [r7, #23]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d105      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002384:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800238e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800239c:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	490b      	ldr	r1, [pc, #44]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d008      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023ba:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	4904      	ldr	r1, [pc, #16]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40007000 	.word	0x40007000
 80023e0:	42420440 	.word	0x42420440

080023e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b08d      	sub	sp, #52	; 0x34
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023ec:	4b58      	ldr	r3, [pc, #352]	; (8002550 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80023ee:	f107 040c 	add.w	r4, r7, #12
 80023f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023f8:	f240 2301 	movw	r3, #513	; 0x201
 80023fc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
 8002402:	2300      	movs	r3, #0
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002406:	2300      	movs	r3, #0
 8002408:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	2300      	movs	r3, #0
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b10      	cmp	r3, #16
 8002416:	d00a      	beq.n	800242e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b10      	cmp	r3, #16
 800241c:	f200 808e 	bhi.w	800253c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d049      	beq.n	80024ba <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d079      	beq.n	8002520 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800242c:	e086      	b.n	800253c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800242e:	4b49      	ldr	r3, [pc, #292]	; (8002554 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002434:	4b47      	ldr	r3, [pc, #284]	; (8002554 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d07f      	beq.n	8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	0c9b      	lsrs	r3, r3, #18
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	3330      	adds	r3, #48	; 0x30
 800244a:	443b      	add	r3, r7
 800244c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002450:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d017      	beq.n	800248c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800245c:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	0c5b      	lsrs	r3, r3, #17
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	3330      	adds	r3, #48	; 0x30
 8002468:	443b      	add	r3, r7
 800246a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00d      	beq.n	8002496 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800247a:	4a37      	ldr	r2, [pc, #220]	; (8002558 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	fb02 f303 	mul.w	r3, r2, r3
 8002488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800248a:	e004      	b.n	8002496 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	4a33      	ldr	r2, [pc, #204]	; (800255c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002490:	fb02 f303 	mul.w	r3, r2, r3
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002496:	4b2f      	ldr	r3, [pc, #188]	; (8002554 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024a2:	d102      	bne.n	80024aa <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80024a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80024a8:	e04a      	b.n	8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80024aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4a2c      	ldr	r2, [pc, #176]	; (8002560 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80024b0:	fba2 2303 	umull	r2, r3, r2, r3
 80024b4:	085b      	lsrs	r3, r3, #1
 80024b6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80024b8:	e042      	b.n	8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80024ba:	4b26      	ldr	r3, [pc, #152]	; (8002554 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ca:	d108      	bne.n	80024de <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80024d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
 80024dc:	e01f      	b.n	800251e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024e8:	d109      	bne.n	80024fe <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80024ea:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80024f6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80024fc:	e00f      	b.n	800251e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002504:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002508:	d11c      	bne.n	8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d016      	beq.n	8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002516:	f24f 4324 	movw	r3, #62500	; 0xf424
 800251a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800251c:	e012      	b.n	8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800251e:	e011      	b.n	8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002520:	f7ff fe48 	bl	80021b4 <HAL_RCC_GetPCLK2Freq>
 8002524:	4602      	mov	r2, r0
 8002526:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	0b9b      	lsrs	r3, r3, #14
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	3301      	adds	r3, #1
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	fbb2 f3f3 	udiv	r3, r2, r3
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800253a:	e004      	b.n	8002546 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800253c:	bf00      	nop
 800253e:	e002      	b.n	8002546 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002540:	bf00      	nop
 8002542:	e000      	b.n	8002546 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002544:	bf00      	nop
    }
  }
  return (frequency);
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002548:	4618      	mov	r0, r3
 800254a:	3734      	adds	r7, #52	; 0x34
 800254c:	46bd      	mov	sp, r7
 800254e:	bd90      	pop	{r4, r7, pc}
 8002550:	08005f30 	.word	0x08005f30
 8002554:	40021000 	.word	0x40021000
 8002558:	007a1200 	.word	0x007a1200
 800255c:	003d0900 	.word	0x003d0900
 8002560:	aaaaaaab 	.word	0xaaaaaaab

08002564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e041      	b.n	80025fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f839 	bl	8002602 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3304      	adds	r3, #4
 80025a0:	4619      	mov	r1, r3
 80025a2:	4610      	mov	r0, r2
 80025a4:	f000 f9b4 	bl	8002910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d001      	beq.n	800262c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e03a      	b.n	80026a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2202      	movs	r2, #2
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a18      	ldr	r2, [pc, #96]	; (80026ac <HAL_TIM_Base_Start_IT+0x98>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00e      	beq.n	800266c <HAL_TIM_Base_Start_IT+0x58>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002656:	d009      	beq.n	800266c <HAL_TIM_Base_Start_IT+0x58>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a14      	ldr	r2, [pc, #80]	; (80026b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d004      	beq.n	800266c <HAL_TIM_Base_Start_IT+0x58>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a13      	ldr	r2, [pc, #76]	; (80026b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d111      	bne.n	8002690 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b06      	cmp	r3, #6
 800267c:	d010      	beq.n	80026a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0201 	orr.w	r2, r2, #1
 800268c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800268e:	e007      	b.n	80026a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	40012c00 	.word	0x40012c00
 80026b0:	40000400 	.word	0x40000400
 80026b4:	40000800 	.word	0x40000800

080026b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d122      	bne.n	8002714 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d11b      	bne.n	8002714 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0202 	mvn.w	r2, #2
 80026e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f8ed 	bl	80028da <HAL_TIM_IC_CaptureCallback>
 8002700:	e005      	b.n	800270e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f8e0 	bl	80028c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f8ef 	bl	80028ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	2b04      	cmp	r3, #4
 8002720:	d122      	bne.n	8002768 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b04      	cmp	r3, #4
 800272e:	d11b      	bne.n	8002768 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0204 	mvn.w	r2, #4
 8002738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2202      	movs	r2, #2
 800273e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f8c3 	bl	80028da <HAL_TIM_IC_CaptureCallback>
 8002754:	e005      	b.n	8002762 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f8b6 	bl	80028c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 f8c5 	bl	80028ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b08      	cmp	r3, #8
 8002774:	d122      	bne.n	80027bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b08      	cmp	r3, #8
 8002782:	d11b      	bne.n	80027bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0208 	mvn.w	r2, #8
 800278c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2204      	movs	r2, #4
 8002792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f899 	bl	80028da <HAL_TIM_IC_CaptureCallback>
 80027a8:	e005      	b.n	80027b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f88c 	bl	80028c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f89b 	bl	80028ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0310 	and.w	r3, r3, #16
 80027c6:	2b10      	cmp	r3, #16
 80027c8:	d122      	bne.n	8002810 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	2b10      	cmp	r3, #16
 80027d6:	d11b      	bne.n	8002810 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0210 	mvn.w	r2, #16
 80027e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2208      	movs	r2, #8
 80027e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f86f 	bl	80028da <HAL_TIM_IC_CaptureCallback>
 80027fc:	e005      	b.n	800280a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f862 	bl	80028c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f871 	bl	80028ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d10e      	bne.n	800283c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b01      	cmp	r3, #1
 800282a:	d107      	bne.n	800283c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0201 	mvn.w	r2, #1
 8002834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7fe f850 	bl	80008dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002846:	2b80      	cmp	r3, #128	; 0x80
 8002848:	d10e      	bne.n	8002868 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002854:	2b80      	cmp	r3, #128	; 0x80
 8002856:	d107      	bne.n	8002868 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f8bf 	bl	80029e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	2b40      	cmp	r3, #64	; 0x40
 8002874:	d10e      	bne.n	8002894 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002880:	2b40      	cmp	r3, #64	; 0x40
 8002882:	d107      	bne.n	8002894 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800288c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f835 	bl	80028fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	2b20      	cmp	r3, #32
 80028a0:	d10e      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0320 	and.w	r3, r3, #32
 80028ac:	2b20      	cmp	r3, #32
 80028ae:	d107      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0220 	mvn.w	r2, #32
 80028b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f88a 	bl	80029d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr

080028da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a29      	ldr	r2, [pc, #164]	; (80029c8 <TIM_Base_SetConfig+0xb8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d00b      	beq.n	8002940 <TIM_Base_SetConfig+0x30>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292e:	d007      	beq.n	8002940 <TIM_Base_SetConfig+0x30>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a26      	ldr	r2, [pc, #152]	; (80029cc <TIM_Base_SetConfig+0xbc>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d003      	beq.n	8002940 <TIM_Base_SetConfig+0x30>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a25      	ldr	r2, [pc, #148]	; (80029d0 <TIM_Base_SetConfig+0xc0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d108      	bne.n	8002952 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a1c      	ldr	r2, [pc, #112]	; (80029c8 <TIM_Base_SetConfig+0xb8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00b      	beq.n	8002972 <TIM_Base_SetConfig+0x62>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002960:	d007      	beq.n	8002972 <TIM_Base_SetConfig+0x62>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a19      	ldr	r2, [pc, #100]	; (80029cc <TIM_Base_SetConfig+0xbc>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d003      	beq.n	8002972 <TIM_Base_SetConfig+0x62>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a18      	ldr	r2, [pc, #96]	; (80029d0 <TIM_Base_SetConfig+0xc0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d108      	bne.n	8002984 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	4313      	orrs	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a07      	ldr	r2, [pc, #28]	; (80029c8 <TIM_Base_SetConfig+0xb8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d103      	bne.n	80029b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	615a      	str	r2, [r3, #20]
}
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	40000400 	.word	0x40000400
 80029d0:	40000800 	.word	0x40000800

080029d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <osKernelInitialize>:
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	f3ef 8305 	mrs	r3, IPSR
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10f      	bne.n	8002a2a <osKernelInitialize+0x32>
 8002a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a0e:	607b      	str	r3, [r7, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d109      	bne.n	8002a2a <osKernelInitialize+0x32>
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <osKernelInitialize+0x60>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d109      	bne.n	8002a32 <osKernelInitialize+0x3a>
 8002a1e:	f3ef 8311 	mrs	r3, BASEPRI
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <osKernelInitialize+0x3a>
 8002a2a:	f06f 0305 	mvn.w	r3, #5
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	e00c      	b.n	8002a4c <osKernelInitialize+0x54>
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <osKernelInitialize+0x60>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d105      	bne.n	8002a46 <osKernelInitialize+0x4e>
 8002a3a:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <osKernelInitialize+0x60>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	e002      	b.n	8002a4c <osKernelInitialize+0x54>
 8002a46:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr
 8002a58:	20000138 	.word	0x20000138

08002a5c <osKernelStart>:
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	f3ef 8305 	mrs	r3, IPSR
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10f      	bne.n	8002a8e <osKernelStart+0x32>
 8002a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d109      	bne.n	8002a8e <osKernelStart+0x32>
 8002a7a:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <osKernelStart+0x64>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d109      	bne.n	8002a96 <osKernelStart+0x3a>
 8002a82:	f3ef 8311 	mrs	r3, BASEPRI
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <osKernelStart+0x3a>
 8002a8e:	f06f 0305 	mvn.w	r3, #5
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	e00e      	b.n	8002ab4 <osKernelStart+0x58>
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <osKernelStart+0x64>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d107      	bne.n	8002aae <osKernelStart+0x52>
 8002a9e:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <osKernelStart+0x64>)
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	f001 f93c 	bl	8003d20 <vTaskStartScheduler>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	e002      	b.n	8002ab4 <osKernelStart+0x58>
 8002aae:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000138 	.word	0x20000138

08002ac4 <osThreadNew>:
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b092      	sub	sp, #72	; 0x48
 8002ac8:	af04      	add	r7, sp, #16
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	f3ef 8305 	mrs	r3, IPSR
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f040 8094 	bne.w	8002c0a <osThreadNew+0x146>
 8002ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ae6:	623b      	str	r3, [r7, #32]
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 808d 	bne.w	8002c0a <osThreadNew+0x146>
 8002af0:	4b48      	ldr	r3, [pc, #288]	; (8002c14 <osThreadNew+0x150>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d106      	bne.n	8002b06 <osThreadNew+0x42>
 8002af8:	f3ef 8311 	mrs	r3, BASEPRI
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f040 8082 	bne.w	8002c0a <osThreadNew+0x146>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d07e      	beq.n	8002c0a <osThreadNew+0x146>
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b10:	2318      	movs	r3, #24
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b14:	2300      	movs	r3, #0
 8002b16:	76fb      	strb	r3, [r7, #27]
 8002b18:	f107 031b 	add.w	r3, r7, #27
 8002b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d045      	beq.n	8002bb6 <osThreadNew+0xf2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <osThreadNew+0x74>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	637b      	str	r3, [r7, #52]	; 0x34
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <osThreadNew+0x82>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <osThreadNew+0x9a>
 8002b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4e:	2b38      	cmp	r3, #56	; 0x38
 8002b50:	d805      	bhi.n	8002b5e <osThreadNew+0x9a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <osThreadNew+0x9e>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e054      	b.n	8002c0c <osThreadNew+0x148>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <osThreadNew+0xae>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	089b      	lsrs	r3, r3, #2
 8002b70:	633b      	str	r3, [r7, #48]	; 0x30
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00e      	beq.n	8002b98 <osThreadNew+0xd4>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b5b      	cmp	r3, #91	; 0x5b
 8002b80:	d90a      	bls.n	8002b98 <osThreadNew+0xd4>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d006      	beq.n	8002b98 <osThreadNew+0xd4>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <osThreadNew+0xd4>
 8002b92:	2301      	movs	r3, #1
 8002b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b96:	e010      	b.n	8002bba <osThreadNew+0xf6>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10c      	bne.n	8002bba <osThreadNew+0xf6>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d108      	bne.n	8002bba <osThreadNew+0xf6>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d104      	bne.n	8002bba <osThreadNew+0xf6>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb4:	e001      	b.n	8002bba <osThreadNew+0xf6>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d110      	bne.n	8002be2 <osThreadNew+0x11e>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6892      	ldr	r2, [r2, #8]
 8002bc8:	9202      	str	r2, [sp, #8]
 8002bca:	9301      	str	r3, [sp, #4]
 8002bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 fed6 	bl	8003988 <xTaskCreateStatic>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	e013      	b.n	8002c0a <osThreadNew+0x146>
 8002be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d110      	bne.n	8002c0a <osThreadNew+0x146>
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 ff20 	bl	8003a40 <xTaskCreate>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d001      	beq.n	8002c0a <osThreadNew+0x146>
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3738      	adds	r7, #56	; 0x38
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20000138 	.word	0x20000138

08002c18 <osDelay>:
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	f3ef 8305 	mrs	r3, IPSR
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10f      	bne.n	8002c4c <osDelay+0x34>
 8002c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d109      	bne.n	8002c4c <osDelay+0x34>
 8002c38:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <osDelay+0x58>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d109      	bne.n	8002c54 <osDelay+0x3c>
 8002c40:	f3ef 8311 	mrs	r3, BASEPRI
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <osDelay+0x3c>
 8002c4c:	f06f 0305 	mvn.w	r3, #5
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	e007      	b.n	8002c64 <osDelay+0x4c>
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <osDelay+0x4c>
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f001 f82a 	bl	8003cb8 <vTaskDelay>
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000138 	.word	0x20000138

08002c74 <osMessageQueueNew>:
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08c      	sub	sp, #48	; 0x30
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	2300      	movs	r3, #0
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
 8002c84:	f3ef 8305 	mrs	r3, IPSR
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d16f      	bne.n	8002d70 <osMessageQueueNew+0xfc>
 8002c90:	f3ef 8310 	mrs	r3, PRIMASK
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d169      	bne.n	8002d70 <osMessageQueueNew+0xfc>
 8002c9c:	4b37      	ldr	r3, [pc, #220]	; (8002d7c <osMessageQueueNew+0x108>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d105      	bne.n	8002cb0 <osMessageQueueNew+0x3c>
 8002ca4:	f3ef 8311 	mrs	r3, BASEPRI
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d15f      	bne.n	8002d70 <osMessageQueueNew+0xfc>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d05c      	beq.n	8002d70 <osMessageQueueNew+0xfc>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d059      	beq.n	8002d70 <osMessageQueueNew+0xfc>
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc0:	623b      	str	r3, [r7, #32]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d029      	beq.n	8002d1c <osMessageQueueNew+0xa8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d012      	beq.n	8002cf6 <osMessageQueueNew+0x82>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b4f      	cmp	r3, #79	; 0x4f
 8002cd6:	d90e      	bls.n	8002cf6 <osMessageQueueNew+0x82>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00a      	beq.n	8002cf6 <osMessageQueueNew+0x82>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	695a      	ldr	r2, [r3, #20]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	68b9      	ldr	r1, [r7, #8]
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d302      	bcc.n	8002cf6 <osMessageQueueNew+0x82>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	623b      	str	r3, [r7, #32]
 8002cf4:	e014      	b.n	8002d20 <osMessageQueueNew+0xac>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d110      	bne.n	8002d20 <osMessageQueueNew+0xac>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10c      	bne.n	8002d20 <osMessageQueueNew+0xac>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d108      	bne.n	8002d20 <osMessageQueueNew+0xac>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d104      	bne.n	8002d20 <osMessageQueueNew+0xac>
 8002d16:	2300      	movs	r3, #0
 8002d18:	623b      	str	r3, [r7, #32]
 8002d1a:	e001      	b.n	8002d20 <osMessageQueueNew+0xac>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	623b      	str	r3, [r7, #32]
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d10b      	bne.n	8002d3e <osMessageQueueNew+0xca>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2100      	movs	r1, #0
 8002d30:	9100      	str	r1, [sp, #0]
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f96d 	bl	8003014 <xQueueGenericCreateStatic>
 8002d3a:	6278      	str	r0, [r7, #36]	; 0x24
 8002d3c:	e008      	b.n	8002d50 <osMessageQueueNew+0xdc>
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d105      	bne.n	8002d50 <osMessageQueueNew+0xdc>
 8002d44:	2200      	movs	r2, #0
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 f9da 	bl	8003102 <xQueueGenericCreate>
 8002d4e:	6278      	str	r0, [r7, #36]	; 0x24
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00c      	beq.n	8002d70 <osMessageQueueNew+0xfc>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <osMessageQueueNew+0xf0>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	e001      	b.n	8002d68 <osMessageQueueNew+0xf4>
 8002d64:	2300      	movs	r3, #0
 8002d66:	61fb      	str	r3, [r7, #28]
 8002d68:	69f9      	ldr	r1, [r7, #28]
 8002d6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d6c:	f000 fdb0 	bl	80038d0 <vQueueAddToRegistry>
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	4618      	mov	r0, r3
 8002d74:	3728      	adds	r7, #40	; 0x28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000138 	.word	0x20000138

08002d80 <vApplicationGetIdleTaskMemory>:
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4a06      	ldr	r2, [pc, #24]	; (8002da8 <vApplicationGetIdleTaskMemory+0x28>)
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	4a05      	ldr	r2, [pc, #20]	; (8002dac <vApplicationGetIdleTaskMemory+0x2c>)
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2280      	movs	r2, #128	; 0x80
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr
 8002da8:	2000013c 	.word	0x2000013c
 8002dac:	20000198 	.word	0x20000198

08002db0 <vApplicationGetTimerTaskMemory>:
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4a07      	ldr	r2, [pc, #28]	; (8002ddc <vApplicationGetTimerTaskMemory+0x2c>)
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4a06      	ldr	r2, [pc, #24]	; (8002de0 <vApplicationGetTimerTaskMemory+0x30>)
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	bf00      	nop
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	20000398 	.word	0x20000398
 8002de0:	200003f4 	.word	0x200003f4

08002de4 <vListInitialise>:
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f103 0208 	add.w	r2, r3, #8
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dfc:	609a      	str	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f103 0208 	add.w	r2, r3, #8
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	60da      	str	r2, [r3, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f103 0208 	add.w	r2, r3, #8
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	611a      	str	r2, [r3, #16]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <vListInitialiseItem>:
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	611a      	str	r2, [r3, #16]
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <vListInsertEnd>:
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	6039      	str	r1, [r7, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	609a      	str	r2, [r3, #8]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	611a      	str	r2, [r3, #16]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	bf00      	nop
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <vListInsert>:
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e96:	d103      	bne.n	8002ea0 <vListInsert+0x20>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	e00c      	b.n	8002eba <vListInsert+0x3a>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3308      	adds	r3, #8
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	e002      	b.n	8002eae <vListInsert+0x2e>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d2f6      	bcs.n	8002ea8 <vListInsert+0x28>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	609a      	str	r2, [r3, #8]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	611a      	str	r2, [r3, #16]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <uxListRemove>:
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6892      	ldr	r2, [r2, #8]
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6852      	ldr	r2, [r2, #4]
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d103      	bne.n	8002f24 <uxListRemove+0x34>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	611a      	str	r2, [r3, #16]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	1e5a      	subs	r2, r3, #1
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr
	...

08002f44 <xQueueGenericReset>:
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10a      	bne.n	8002f6e <xQueueGenericReset+0x2a>
 8002f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5c:	f383 8811 	msr	BASEPRI, r3
 8002f60:	f3bf 8f6f 	isb	sy
 8002f64:	f3bf 8f4f 	dsb	sy
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	bf00      	nop
 8002f6c:	e7fe      	b.n	8002f6c <xQueueGenericReset+0x28>
 8002f6e:	f002 f805 	bl	8004f7c <vPortEnterCritical>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	68f9      	ldr	r1, [r7, #12]
 8002f7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	441a      	add	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	605a      	str	r2, [r3, #4]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	639a      	str	r2, [r3, #56]	; 0x38
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	609a      	str	r2, [r3, #8]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	68f9      	ldr	r1, [r7, #12]
 8002fa2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	441a      	add	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	60da      	str	r2, [r3, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	22ff      	movs	r2, #255	; 0xff
 8002fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	22ff      	movs	r2, #255	; 0xff
 8002fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d114      	bne.n	8002fee <xQueueGenericReset+0xaa>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d01a      	beq.n	8003002 <xQueueGenericReset+0xbe>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	3310      	adds	r3, #16
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f001 f92f 	bl	8004234 <xTaskRemoveFromEventList>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d012      	beq.n	8003002 <xQueueGenericReset+0xbe>
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <xQueueGenericReset+0xcc>)
 8002fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	e009      	b.n	8003002 <xQueueGenericReset+0xbe>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	3310      	adds	r3, #16
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fef6 	bl	8002de4 <vListInitialise>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	3324      	adds	r3, #36	; 0x24
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fef1 	bl	8002de4 <vListInitialise>
 8003002:	f001 ffeb 	bl	8004fdc <vPortExitCritical>
 8003006:	2301      	movs	r3, #1
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	e000ed04 	.word	0xe000ed04

08003014 <xQueueGenericCreateStatic>:
 8003014:	b580      	push	{r7, lr}
 8003016:	b08e      	sub	sp, #56	; 0x38
 8003018:	af02      	add	r7, sp, #8
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	603b      	str	r3, [r7, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10a      	bne.n	800303e <xQueueGenericCreateStatic+0x2a>
 8003028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302c:	f383 8811 	msr	BASEPRI, r3
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28
 800303a:	bf00      	nop
 800303c:	e7fe      	b.n	800303c <xQueueGenericCreateStatic+0x28>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10a      	bne.n	800305a <xQueueGenericCreateStatic+0x46>
 8003044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
 8003056:	bf00      	nop
 8003058:	e7fe      	b.n	8003058 <xQueueGenericCreateStatic+0x44>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <xQueueGenericCreateStatic+0x52>
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <xQueueGenericCreateStatic+0x56>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <xQueueGenericCreateStatic+0x58>
 800306a:	2300      	movs	r3, #0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10a      	bne.n	8003086 <xQueueGenericCreateStatic+0x72>
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	623b      	str	r3, [r7, #32]
 8003082:	bf00      	nop
 8003084:	e7fe      	b.n	8003084 <xQueueGenericCreateStatic+0x70>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d102      	bne.n	8003092 <xQueueGenericCreateStatic+0x7e>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <xQueueGenericCreateStatic+0x82>
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <xQueueGenericCreateStatic+0x84>
 8003096:	2300      	movs	r3, #0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10a      	bne.n	80030b2 <xQueueGenericCreateStatic+0x9e>
 800309c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a0:	f383 8811 	msr	BASEPRI, r3
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	bf00      	nop
 80030b0:	e7fe      	b.n	80030b0 <xQueueGenericCreateStatic+0x9c>
 80030b2:	2350      	movs	r3, #80	; 0x50
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b50      	cmp	r3, #80	; 0x50
 80030ba:	d00a      	beq.n	80030d2 <xQueueGenericCreateStatic+0xbe>
 80030bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	61bb      	str	r3, [r7, #24]
 80030ce:	bf00      	nop
 80030d0:	e7fe      	b.n	80030d0 <xQueueGenericCreateStatic+0xbc>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00d      	beq.n	80030f8 <xQueueGenericCreateStatic+0xe4>
 80030dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030e4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80030e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68b9      	ldr	r1, [r7, #8]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 f843 	bl	800317e <prvInitialiseNewQueue>
 80030f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fa:	4618      	mov	r0, r3
 80030fc:	3730      	adds	r7, #48	; 0x30
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <xQueueGenericCreate>:
 8003102:	b580      	push	{r7, lr}
 8003104:	b08a      	sub	sp, #40	; 0x28
 8003106:	af02      	add	r7, sp, #8
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	4613      	mov	r3, r2
 800310e:	71fb      	strb	r3, [r7, #7]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10a      	bne.n	800312c <xQueueGenericCreate+0x2a>
 8003116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	bf00      	nop
 800312a:	e7fe      	b.n	800312a <xQueueGenericCreate+0x28>
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d102      	bne.n	8003138 <xQueueGenericCreate+0x36>
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	e004      	b.n	8003142 <xQueueGenericCreate+0x40>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	fb02 f303 	mul.w	r3, r2, r3
 8003140:	61fb      	str	r3, [r7, #28]
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3350      	adds	r3, #80	; 0x50
 8003146:	4618      	mov	r0, r3
 8003148:	f002 f818 	bl	800517c <pvPortMalloc>
 800314c:	61b8      	str	r0, [r7, #24]
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00f      	beq.n	8003174 <xQueueGenericCreate+0x72>
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	3350      	adds	r3, #80	; 0x50
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003162:	79fa      	ldrb	r2, [r7, #7]
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	4613      	mov	r3, r2
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f805 	bl	800317e <prvInitialiseNewQueue>
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	4618      	mov	r0, r3
 8003178:	3720      	adds	r7, #32
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <prvInitialiseNewQueue>:
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	70fb      	strb	r3, [r7, #3]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d103      	bne.n	800319a <prvInitialiseNewQueue+0x1c>
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	e002      	b.n	80031a0 <prvInitialiseNewQueue+0x22>
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40
 80031ac:	2101      	movs	r1, #1
 80031ae:	69b8      	ldr	r0, [r7, #24]
 80031b0:	f7ff fec8 	bl	8002f44 <xQueueGenericReset>
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <xQueueGenericSend>:
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08e      	sub	sp, #56	; 0x38
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	2300      	movs	r3, #0
 80031d4:	637b      	str	r3, [r7, #52]	; 0x34
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	633b      	str	r3, [r7, #48]	; 0x30
 80031da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10a      	bne.n	80031f6 <xQueueGenericSend+0x32>
 80031e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e4:	f383 8811 	msr	BASEPRI, r3
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031f2:	bf00      	nop
 80031f4:	e7fe      	b.n	80031f4 <xQueueGenericSend+0x30>
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d103      	bne.n	8003204 <xQueueGenericSend+0x40>
 80031fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <xQueueGenericSend+0x44>
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <xQueueGenericSend+0x46>
 8003208:	2300      	movs	r3, #0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10a      	bne.n	8003224 <xQueueGenericSend+0x60>
 800320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
 8003220:	bf00      	nop
 8003222:	e7fe      	b.n	8003222 <xQueueGenericSend+0x5e>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d103      	bne.n	8003232 <xQueueGenericSend+0x6e>
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <xQueueGenericSend+0x72>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <xQueueGenericSend+0x74>
 8003236:	2300      	movs	r3, #0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10a      	bne.n	8003252 <xQueueGenericSend+0x8e>
 800323c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003240:	f383 8811 	msr	BASEPRI, r3
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	623b      	str	r3, [r7, #32]
 800324e:	bf00      	nop
 8003250:	e7fe      	b.n	8003250 <xQueueGenericSend+0x8c>
 8003252:	f001 f9b1 	bl	80045b8 <xTaskGetSchedulerState>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d102      	bne.n	8003262 <xQueueGenericSend+0x9e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <xQueueGenericSend+0xa2>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <xQueueGenericSend+0xa4>
 8003266:	2300      	movs	r3, #0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <xQueueGenericSend+0xbe>
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	61fb      	str	r3, [r7, #28]
 800327e:	bf00      	nop
 8003280:	e7fe      	b.n	8003280 <xQueueGenericSend+0xbc>
 8003282:	f001 fe7b 	bl	8004f7c <vPortEnterCritical>
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328e:	429a      	cmp	r2, r3
 8003290:	d302      	bcc.n	8003298 <xQueueGenericSend+0xd4>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d129      	bne.n	80032ec <xQueueGenericSend+0x128>
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800329e:	f000 fa07 	bl	80036b0 <prvCopyDataToQueue>
 80032a2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80032a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d010      	beq.n	80032ce <xQueueGenericSend+0x10a>
 80032ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ae:	3324      	adds	r3, #36	; 0x24
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 ffbf 	bl	8004234 <xTaskRemoveFromEventList>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <xQueueGenericSend+0x120>
 80032bc:	4b3f      	ldr	r3, [pc, #252]	; (80033bc <xQueueGenericSend+0x1f8>)
 80032be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	e00a      	b.n	80032e4 <xQueueGenericSend+0x120>
 80032ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d007      	beq.n	80032e4 <xQueueGenericSend+0x120>
 80032d4:	4b39      	ldr	r3, [pc, #228]	; (80033bc <xQueueGenericSend+0x1f8>)
 80032d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f001 fe7a 	bl	8004fdc <vPortExitCritical>
 80032e8:	2301      	movs	r3, #1
 80032ea:	e063      	b.n	80033b4 <xQueueGenericSend+0x1f0>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d103      	bne.n	80032fa <xQueueGenericSend+0x136>
 80032f2:	f001 fe73 	bl	8004fdc <vPortExitCritical>
 80032f6:	2300      	movs	r3, #0
 80032f8:	e05c      	b.n	80033b4 <xQueueGenericSend+0x1f0>
 80032fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d106      	bne.n	800330e <xQueueGenericSend+0x14a>
 8003300:	f107 0314 	add.w	r3, r7, #20
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fff9 	bl	80042fc <vTaskInternalSetTimeOutState>
 800330a:	2301      	movs	r3, #1
 800330c:	637b      	str	r3, [r7, #52]	; 0x34
 800330e:	f001 fe65 	bl	8004fdc <vPortExitCritical>
 8003312:	f000 fd6b 	bl	8003dec <vTaskSuspendAll>
 8003316:	f001 fe31 	bl	8004f7c <vPortEnterCritical>
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003320:	b25b      	sxtb	r3, r3
 8003322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003326:	d103      	bne.n	8003330 <xQueueGenericSend+0x16c>
 8003328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003332:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003336:	b25b      	sxtb	r3, r3
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d103      	bne.n	8003346 <xQueueGenericSend+0x182>
 800333e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003346:	f001 fe49 	bl	8004fdc <vPortExitCritical>
 800334a:	1d3a      	adds	r2, r7, #4
 800334c:	f107 0314 	add.w	r3, r7, #20
 8003350:	4611      	mov	r1, r2
 8003352:	4618      	mov	r0, r3
 8003354:	f000 ffe8 	bl	8004328 <xTaskCheckForTimeOut>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d124      	bne.n	80033a8 <xQueueGenericSend+0x1e4>
 800335e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003360:	f000 fa9e 	bl	80038a0 <prvIsQueueFull>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d018      	beq.n	800339c <xQueueGenericSend+0x1d8>
 800336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336c:	3310      	adds	r3, #16
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f000 ff0e 	bl	8004194 <vTaskPlaceOnEventList>
 8003378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800337a:	f000 fa29 	bl	80037d0 <prvUnlockQueue>
 800337e:	f000 fd43 	bl	8003e08 <xTaskResumeAll>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	f47f af7c 	bne.w	8003282 <xQueueGenericSend+0xbe>
 800338a:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <xQueueGenericSend+0x1f8>)
 800338c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	e772      	b.n	8003282 <xQueueGenericSend+0xbe>
 800339c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800339e:	f000 fa17 	bl	80037d0 <prvUnlockQueue>
 80033a2:	f000 fd31 	bl	8003e08 <xTaskResumeAll>
 80033a6:	e76c      	b.n	8003282 <xQueueGenericSend+0xbe>
 80033a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033aa:	f000 fa11 	bl	80037d0 <prvUnlockQueue>
 80033ae:	f000 fd2b 	bl	8003e08 <xTaskResumeAll>
 80033b2:	2300      	movs	r3, #0
 80033b4:	4618      	mov	r0, r3
 80033b6:	3738      	adds	r7, #56	; 0x38
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	e000ed04 	.word	0xe000ed04

080033c0 <xQueueGenericSendFromISR>:
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08e      	sub	sp, #56	; 0x38
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	603b      	str	r3, [r7, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	633b      	str	r3, [r7, #48]	; 0x30
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10a      	bne.n	80033ee <xQueueGenericSendFromISR+0x2e>
 80033d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ea:	bf00      	nop
 80033ec:	e7fe      	b.n	80033ec <xQueueGenericSendFromISR+0x2c>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d103      	bne.n	80033fc <xQueueGenericSendFromISR+0x3c>
 80033f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <xQueueGenericSendFromISR+0x40>
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <xQueueGenericSendFromISR+0x42>
 8003400:	2300      	movs	r3, #0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10a      	bne.n	800341c <xQueueGenericSendFromISR+0x5c>
 8003406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340a:	f383 8811 	msr	BASEPRI, r3
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	623b      	str	r3, [r7, #32]
 8003418:	bf00      	nop
 800341a:	e7fe      	b.n	800341a <xQueueGenericSendFromISR+0x5a>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d103      	bne.n	800342a <xQueueGenericSendFromISR+0x6a>
 8003422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <xQueueGenericSendFromISR+0x6e>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <xQueueGenericSendFromISR+0x70>
 800342e:	2300      	movs	r3, #0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10a      	bne.n	800344a <xQueueGenericSendFromISR+0x8a>
 8003434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003438:	f383 8811 	msr	BASEPRI, r3
 800343c:	f3bf 8f6f 	isb	sy
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	bf00      	nop
 8003448:	e7fe      	b.n	8003448 <xQueueGenericSendFromISR+0x88>
 800344a:	f001 fe59 	bl	8005100 <vPortValidateInterruptPriority>
 800344e:	f3ef 8211 	mrs	r2, BASEPRI
 8003452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003456:	f383 8811 	msr	BASEPRI, r3
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	61ba      	str	r2, [r7, #24]
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003472:	429a      	cmp	r2, r3
 8003474:	d302      	bcc.n	800347c <xQueueGenericSendFromISR+0xbc>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d12c      	bne.n	80034d6 <xQueueGenericSendFromISR+0x116>
 800347c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800348c:	f000 f910 	bl	80036b0 <prvCopyDataToQueue>
 8003490:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003498:	d112      	bne.n	80034c0 <xQueueGenericSendFromISR+0x100>
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d016      	beq.n	80034d0 <xQueueGenericSendFromISR+0x110>
 80034a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a4:	3324      	adds	r3, #36	; 0x24
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fec4 	bl	8004234 <xTaskRemoveFromEventList>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00e      	beq.n	80034d0 <xQueueGenericSendFromISR+0x110>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00b      	beq.n	80034d0 <xQueueGenericSendFromISR+0x110>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	e007      	b.n	80034d0 <xQueueGenericSendFromISR+0x110>
 80034c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80034c4:	3301      	adds	r3, #1
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	b25a      	sxtb	r2, r3
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034d0:	2301      	movs	r3, #1
 80034d2:	637b      	str	r3, [r7, #52]	; 0x34
 80034d4:	e001      	b.n	80034da <xQueueGenericSendFromISR+0x11a>
 80034d6:	2300      	movs	r3, #0
 80034d8:	637b      	str	r3, [r7, #52]	; 0x34
 80034da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f383 8811 	msr	BASEPRI, r3
 80034e4:	bf00      	nop
 80034e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e8:	4618      	mov	r0, r3
 80034ea:	3738      	adds	r7, #56	; 0x38
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <xQueueReceive>:
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08c      	sub	sp, #48	; 0x30
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	2300      	movs	r3, #0
 80034fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	62bb      	str	r3, [r7, #40]	; 0x28
 8003504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10a      	bne.n	8003520 <xQueueReceive+0x30>
 800350a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350e:	f383 8811 	msr	BASEPRI, r3
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	623b      	str	r3, [r7, #32]
 800351c:	bf00      	nop
 800351e:	e7fe      	b.n	800351e <xQueueReceive+0x2e>
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d103      	bne.n	800352e <xQueueReceive+0x3e>
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <xQueueReceive+0x42>
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <xQueueReceive+0x44>
 8003532:	2300      	movs	r3, #0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10a      	bne.n	800354e <xQueueReceive+0x5e>
 8003538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	61fb      	str	r3, [r7, #28]
 800354a:	bf00      	nop
 800354c:	e7fe      	b.n	800354c <xQueueReceive+0x5c>
 800354e:	f001 f833 	bl	80045b8 <xTaskGetSchedulerState>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d102      	bne.n	800355e <xQueueReceive+0x6e>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <xQueueReceive+0x72>
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <xQueueReceive+0x74>
 8003562:	2300      	movs	r3, #0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10a      	bne.n	800357e <xQueueReceive+0x8e>
 8003568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356c:	f383 8811 	msr	BASEPRI, r3
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	61bb      	str	r3, [r7, #24]
 800357a:	bf00      	nop
 800357c:	e7fe      	b.n	800357c <xQueueReceive+0x8c>
 800357e:	f001 fcfd 	bl	8004f7c <vPortEnterCritical>
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	2b00      	cmp	r3, #0
 800358c:	d01f      	beq.n	80035ce <xQueueReceive+0xde>
 800358e:	68b9      	ldr	r1, [r7, #8]
 8003590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003592:	f000 f8f7 	bl	8003784 <prvCopyDataFromQueue>
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	1e5a      	subs	r2, r3, #1
 800359a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359c:	639a      	str	r2, [r3, #56]	; 0x38
 800359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00f      	beq.n	80035c6 <xQueueReceive+0xd6>
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	3310      	adds	r3, #16
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fe42 	bl	8004234 <xTaskRemoveFromEventList>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d007      	beq.n	80035c6 <xQueueReceive+0xd6>
 80035b6:	4b3d      	ldr	r3, [pc, #244]	; (80036ac <xQueueReceive+0x1bc>)
 80035b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	f3bf 8f6f 	isb	sy
 80035c6:	f001 fd09 	bl	8004fdc <vPortExitCritical>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e069      	b.n	80036a2 <xQueueReceive+0x1b2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d103      	bne.n	80035dc <xQueueReceive+0xec>
 80035d4:	f001 fd02 	bl	8004fdc <vPortExitCritical>
 80035d8:	2300      	movs	r3, #0
 80035da:	e062      	b.n	80036a2 <xQueueReceive+0x1b2>
 80035dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <xQueueReceive+0x100>
 80035e2:	f107 0310 	add.w	r3, r7, #16
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fe88 	bl	80042fc <vTaskInternalSetTimeOutState>
 80035ec:	2301      	movs	r3, #1
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035f0:	f001 fcf4 	bl	8004fdc <vPortExitCritical>
 80035f4:	f000 fbfa 	bl	8003dec <vTaskSuspendAll>
 80035f8:	f001 fcc0 	bl	8004f7c <vPortEnterCritical>
 80035fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003602:	b25b      	sxtb	r3, r3
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003608:	d103      	bne.n	8003612 <xQueueReceive+0x122>
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003618:	b25b      	sxtb	r3, r3
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361e:	d103      	bne.n	8003628 <xQueueReceive+0x138>
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003628:	f001 fcd8 	bl	8004fdc <vPortExitCritical>
 800362c:	1d3a      	adds	r2, r7, #4
 800362e:	f107 0310 	add.w	r3, r7, #16
 8003632:	4611      	mov	r1, r2
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fe77 	bl	8004328 <xTaskCheckForTimeOut>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d123      	bne.n	8003688 <xQueueReceive+0x198>
 8003640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003642:	f000 f917 	bl	8003874 <prvIsQueueEmpty>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d017      	beq.n	800367c <xQueueReceive+0x18c>
 800364c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364e:	3324      	adds	r3, #36	; 0x24
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	4611      	mov	r1, r2
 8003654:	4618      	mov	r0, r3
 8003656:	f000 fd9d 	bl	8004194 <vTaskPlaceOnEventList>
 800365a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800365c:	f000 f8b8 	bl	80037d0 <prvUnlockQueue>
 8003660:	f000 fbd2 	bl	8003e08 <xTaskResumeAll>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d189      	bne.n	800357e <xQueueReceive+0x8e>
 800366a:	4b10      	ldr	r3, [pc, #64]	; (80036ac <xQueueReceive+0x1bc>)
 800366c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	f3bf 8f4f 	dsb	sy
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	e780      	b.n	800357e <xQueueReceive+0x8e>
 800367c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800367e:	f000 f8a7 	bl	80037d0 <prvUnlockQueue>
 8003682:	f000 fbc1 	bl	8003e08 <xTaskResumeAll>
 8003686:	e77a      	b.n	800357e <xQueueReceive+0x8e>
 8003688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800368a:	f000 f8a1 	bl	80037d0 <prvUnlockQueue>
 800368e:	f000 fbbb 	bl	8003e08 <xTaskResumeAll>
 8003692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003694:	f000 f8ee 	bl	8003874 <prvIsQueueEmpty>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	f43f af6f 	beq.w	800357e <xQueueReceive+0x8e>
 80036a0:	2300      	movs	r3, #0
 80036a2:	4618      	mov	r0, r3
 80036a4:	3730      	adds	r7, #48	; 0x30
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	e000ed04 	.word	0xe000ed04

080036b0 <prvCopyDataToQueue>:
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	613b      	str	r3, [r7, #16]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10d      	bne.n	80036ea <prvCopyDataToQueue+0x3a>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d14d      	bne.n	8003772 <prvCopyDataToQueue+0xc2>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 ff8a 	bl	80045f4 <xTaskPriorityDisinherit>
 80036e0:	6178      	str	r0, [r7, #20]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	605a      	str	r2, [r3, #4]
 80036e8:	e043      	b.n	8003772 <prvCopyDataToQueue+0xc2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d119      	bne.n	8003724 <prvCopyDataToQueue+0x74>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6898      	ldr	r0, [r3, #8]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	461a      	mov	r2, r3
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	f001 ff40 	bl	8005580 <memcpy>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	441a      	add	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	609a      	str	r2, [r3, #8]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	429a      	cmp	r2, r3
 8003718:	d32b      	bcc.n	8003772 <prvCopyDataToQueue+0xc2>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	609a      	str	r2, [r3, #8]
 8003722:	e026      	b.n	8003772 <prvCopyDataToQueue+0xc2>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	68d8      	ldr	r0, [r3, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	461a      	mov	r2, r3
 800372e:	68b9      	ldr	r1, [r7, #8]
 8003730:	f001 ff26 	bl	8005580 <memcpy>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	425b      	negs	r3, r3
 800373e:	441a      	add	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	60da      	str	r2, [r3, #12]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d207      	bcs.n	8003760 <prvCopyDataToQueue+0xb0>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	425b      	negs	r3, r3
 800375a:	441a      	add	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	60da      	str	r2, [r3, #12]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d105      	bne.n	8003772 <prvCopyDataToQueue+0xc2>
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <prvCopyDataToQueue+0xc2>
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	3b01      	subs	r3, #1
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	639a      	str	r2, [r3, #56]	; 0x38
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <prvCopyDataFromQueue>:
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d018      	beq.n	80037c8 <prvCopyDataFromQueue+0x44>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	441a      	add	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	60da      	str	r2, [r3, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d303      	bcc.n	80037b8 <prvCopyDataFromQueue+0x34>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	60da      	str	r2, [r3, #12]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68d9      	ldr	r1, [r3, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	461a      	mov	r2, r3
 80037c2:	6838      	ldr	r0, [r7, #0]
 80037c4:	f001 fedc 	bl	8005580 <memcpy>
 80037c8:	bf00      	nop
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <prvUnlockQueue>:
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	f001 fbd0 	bl	8004f7c <vPortEnterCritical>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037e2:	73fb      	strb	r3, [r7, #15]
 80037e4:	e011      	b.n	800380a <prvUnlockQueue+0x3a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d012      	beq.n	8003814 <prvUnlockQueue+0x44>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3324      	adds	r3, #36	; 0x24
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 fd1e 	bl	8004234 <xTaskRemoveFromEventList>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <prvUnlockQueue+0x32>
 80037fe:	f000 fdf5 	bl	80043ec <vTaskMissedYield>
 8003802:	7bfb      	ldrb	r3, [r7, #15]
 8003804:	3b01      	subs	r3, #1
 8003806:	b2db      	uxtb	r3, r3
 8003808:	73fb      	strb	r3, [r7, #15]
 800380a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800380e:	2b00      	cmp	r3, #0
 8003810:	dce9      	bgt.n	80037e6 <prvUnlockQueue+0x16>
 8003812:	e000      	b.n	8003816 <prvUnlockQueue+0x46>
 8003814:	bf00      	nop
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	22ff      	movs	r2, #255	; 0xff
 800381a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800381e:	f001 fbdd 	bl	8004fdc <vPortExitCritical>
 8003822:	f001 fbab 	bl	8004f7c <vPortEnterCritical>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800382c:	73bb      	strb	r3, [r7, #14]
 800382e:	e011      	b.n	8003854 <prvUnlockQueue+0x84>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d012      	beq.n	800385e <prvUnlockQueue+0x8e>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3310      	adds	r3, #16
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fcf9 	bl	8004234 <xTaskRemoveFromEventList>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <prvUnlockQueue+0x7c>
 8003848:	f000 fdd0 	bl	80043ec <vTaskMissedYield>
 800384c:	7bbb      	ldrb	r3, [r7, #14]
 800384e:	3b01      	subs	r3, #1
 8003850:	b2db      	uxtb	r3, r3
 8003852:	73bb      	strb	r3, [r7, #14]
 8003854:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003858:	2b00      	cmp	r3, #0
 800385a:	dce9      	bgt.n	8003830 <prvUnlockQueue+0x60>
 800385c:	e000      	b.n	8003860 <prvUnlockQueue+0x90>
 800385e:	bf00      	nop
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	22ff      	movs	r2, #255	; 0xff
 8003864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003868:	f001 fbb8 	bl	8004fdc <vPortExitCritical>
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <prvIsQueueEmpty>:
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	f001 fb7e 	bl	8004f7c <vPortEnterCritical>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003884:	2b00      	cmp	r3, #0
 8003886:	d102      	bne.n	800388e <prvIsQueueEmpty+0x1a>
 8003888:	2301      	movs	r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	e001      	b.n	8003892 <prvIsQueueEmpty+0x1e>
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	f001 fba3 	bl	8004fdc <vPortExitCritical>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <prvIsQueueFull>:
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	f001 fb68 	bl	8004f7c <vPortEnterCritical>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d102      	bne.n	80038be <prvIsQueueFull+0x1e>
 80038b8:	2301      	movs	r3, #1
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	e001      	b.n	80038c2 <prvIsQueueFull+0x22>
 80038be:	2300      	movs	r3, #0
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	f001 fb8b 	bl	8004fdc <vPortExitCritical>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <vQueueAddToRegistry>:
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	e014      	b.n	800390a <vQueueAddToRegistry+0x3a>
 80038e0:	4a0e      	ldr	r2, [pc, #56]	; (800391c <vQueueAddToRegistry+0x4c>)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10b      	bne.n	8003904 <vQueueAddToRegistry+0x34>
 80038ec:	490b      	ldr	r1, [pc, #44]	; (800391c <vQueueAddToRegistry+0x4c>)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80038f6:	4a09      	ldr	r2, [pc, #36]	; (800391c <vQueueAddToRegistry+0x4c>)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4413      	add	r3, r2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	e006      	b.n	8003912 <vQueueAddToRegistry+0x42>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	3301      	adds	r3, #1
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b07      	cmp	r3, #7
 800390e:	d9e7      	bls.n	80038e0 <vQueueAddToRegistry+0x10>
 8003910:	bf00      	nop
 8003912:	bf00      	nop
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr
 800391c:	200007f4 	.word	0x200007f4

08003920 <vQueueWaitForMessageRestricted>:
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	f001 fb24 	bl	8004f7c <vPortEnterCritical>
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800393a:	b25b      	sxtb	r3, r3
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003940:	d103      	bne.n	800394a <vQueueWaitForMessageRestricted+0x2a>
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003950:	b25b      	sxtb	r3, r3
 8003952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003956:	d103      	bne.n	8003960 <vQueueWaitForMessageRestricted+0x40>
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003960:	f001 fb3c 	bl	8004fdc <vPortExitCritical>
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003968:	2b00      	cmp	r3, #0
 800396a:	d106      	bne.n	800397a <vQueueWaitForMessageRestricted+0x5a>
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	3324      	adds	r3, #36	; 0x24
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fc31 	bl	80041dc <vTaskPlaceOnEventListRestricted>
 800397a:	6978      	ldr	r0, [r7, #20]
 800397c:	f7ff ff28 	bl	80037d0 <prvUnlockQueue>
 8003980:	bf00      	nop
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <xTaskCreateStatic>:
 8003988:	b580      	push	{r7, lr}
 800398a:	b08e      	sub	sp, #56	; 0x38
 800398c:	af04      	add	r7, sp, #16
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
 8003996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10a      	bne.n	80039b2 <xTaskCreateStatic+0x2a>
 800399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	623b      	str	r3, [r7, #32]
 80039ae:	bf00      	nop
 80039b0:	e7fe      	b.n	80039b0 <xTaskCreateStatic+0x28>
 80039b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10a      	bne.n	80039ce <xTaskCreateStatic+0x46>
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	bf00      	nop
 80039cc:	e7fe      	b.n	80039cc <xTaskCreateStatic+0x44>
 80039ce:	235c      	movs	r3, #92	; 0x5c
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	2b5c      	cmp	r3, #92	; 0x5c
 80039d6:	d00a      	beq.n	80039ee <xTaskCreateStatic+0x66>
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	61bb      	str	r3, [r7, #24]
 80039ea:	bf00      	nop
 80039ec:	e7fe      	b.n	80039ec <xTaskCreateStatic+0x64>
 80039ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d01e      	beq.n	8003a32 <xTaskCreateStatic+0xaa>
 80039f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d01b      	beq.n	8003a32 <xTaskCreateStatic+0xaa>
 80039fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	9303      	str	r3, [sp, #12]
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	9302      	str	r3, [sp, #8]
 8003a14:	f107 0314 	add.w	r3, r7, #20
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	68b9      	ldr	r1, [r7, #8]
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f850 	bl	8003aca <prvInitialiseNewTask>
 8003a2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a2c:	f000 f8d4 	bl	8003bd8 <prvAddNewTaskToReadyList>
 8003a30:	e001      	b.n	8003a36 <xTaskCreateStatic+0xae>
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3728      	adds	r7, #40	; 0x28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <xTaskCreate>:
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08c      	sub	sp, #48	; 0x30
 8003a44:	af04      	add	r7, sp, #16
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	80fb      	strh	r3, [r7, #6]
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f001 fb91 	bl	800517c <pvPortMalloc>
 8003a5a:	6178      	str	r0, [r7, #20]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00e      	beq.n	8003a80 <xTaskCreate+0x40>
 8003a62:	205c      	movs	r0, #92	; 0x5c
 8003a64:	f001 fb8a 	bl	800517c <pvPortMalloc>
 8003a68:	61f8      	str	r0, [r7, #28]
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <xTaskCreate+0x38>
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30
 8003a76:	e005      	b.n	8003a84 <xTaskCreate+0x44>
 8003a78:	6978      	ldr	r0, [r7, #20]
 8003a7a:	f001 fc43 	bl	8005304 <vPortFree>
 8003a7e:	e001      	b.n	8003a84 <xTaskCreate+0x44>
 8003a80:	2300      	movs	r3, #0
 8003a82:	61fb      	str	r3, [r7, #28]
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d017      	beq.n	8003aba <xTaskCreate+0x7a>
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8003a92:	88fa      	ldrh	r2, [r7, #6]
 8003a94:	2300      	movs	r3, #0
 8003a96:	9303      	str	r3, [sp, #12]
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	9302      	str	r3, [sp, #8]
 8003a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9e:	9301      	str	r3, [sp, #4]
 8003aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	68b9      	ldr	r1, [r7, #8]
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f80e 	bl	8003aca <prvInitialiseNewTask>
 8003aae:	69f8      	ldr	r0, [r7, #28]
 8003ab0:	f000 f892 	bl	8003bd8 <prvAddNewTaskToReadyList>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	61bb      	str	r3, [r7, #24]
 8003ab8:	e002      	b.n	8003ac0 <xTaskCreate+0x80>
 8003aba:	f04f 33ff 	mov.w	r3, #4294967295
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3720      	adds	r7, #32
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <prvInitialiseNewTask>:
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b088      	sub	sp, #32
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	21a5      	movs	r1, #165	; 0xa5
 8003ae4:	f001 fd5a 	bl	800559c <memset>
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003af2:	3b01      	subs	r3, #1
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	f023 0307 	bic.w	r3, r3, #7
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <prvInitialiseNewTask+0x58>
 8003b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b10:	f383 8811 	msr	BASEPRI, r3
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	bf00      	nop
 8003b20:	e7fe      	b.n	8003b20 <prvInitialiseNewTask+0x56>
 8003b22:	2300      	movs	r3, #0
 8003b24:	61fb      	str	r3, [r7, #28]
 8003b26:	e012      	b.n	8003b4e <prvInitialiseNewTask+0x84>
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	7819      	ldrb	r1, [r3, #0]
 8003b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	4413      	add	r3, r2
 8003b36:	3334      	adds	r3, #52	; 0x34
 8003b38:	460a      	mov	r2, r1
 8003b3a:	701a      	strb	r2, [r3, #0]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	4413      	add	r3, r2
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d006      	beq.n	8003b56 <prvInitialiseNewTask+0x8c>
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	61fb      	str	r3, [r7, #28]
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	2b0f      	cmp	r3, #15
 8003b52:	d9e9      	bls.n	8003b28 <prvInitialiseNewTask+0x5e>
 8003b54:	e000      	b.n	8003b58 <prvInitialiseNewTask+0x8e>
 8003b56:	bf00      	nop
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	2b37      	cmp	r3, #55	; 0x37
 8003b64:	d901      	bls.n	8003b6a <prvInitialiseNewTask+0xa0>
 8003b66:	2337      	movs	r3, #55	; 0x37
 8003b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b74:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	2200      	movs	r2, #0
 8003b7a:	651a      	str	r2, [r3, #80]	; 0x50
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	3304      	adds	r3, #4
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff f94e 	bl	8002e22 <vListInitialiseItem>
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	3318      	adds	r3, #24
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff f949 	bl	8002e22 <vListInitialiseItem>
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b94:	611a      	str	r2, [r3, #16]
 8003b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	619a      	str	r2, [r3, #24]
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	2200      	movs	r2, #0
 8003baa:	655a      	str	r2, [r3, #84]	; 0x54
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	68f9      	ldr	r1, [r7, #12]
 8003bb8:	69b8      	ldr	r0, [r7, #24]
 8003bba:	f001 f8ef 	bl	8004d9c <pxPortInitialiseStack>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <prvInitialiseNewTask+0x106>
 8003bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	bf00      	nop
 8003bd2:	3720      	adds	r7, #32
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <prvAddNewTaskToReadyList>:
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	f001 f9cc 	bl	8004f7c <vPortEnterCritical>
 8003be4:	4b2d      	ldr	r3, [pc, #180]	; (8003c9c <prvAddNewTaskToReadyList+0xc4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3301      	adds	r3, #1
 8003bea:	4a2c      	ldr	r2, [pc, #176]	; (8003c9c <prvAddNewTaskToReadyList+0xc4>)
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	4b2c      	ldr	r3, [pc, #176]	; (8003ca0 <prvAddNewTaskToReadyList+0xc8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d109      	bne.n	8003c0a <prvAddNewTaskToReadyList+0x32>
 8003bf6:	4a2a      	ldr	r2, [pc, #168]	; (8003ca0 <prvAddNewTaskToReadyList+0xc8>)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	4b27      	ldr	r3, [pc, #156]	; (8003c9c <prvAddNewTaskToReadyList+0xc4>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d110      	bne.n	8003c26 <prvAddNewTaskToReadyList+0x4e>
 8003c04:	f000 fc16 	bl	8004434 <prvInitialiseTaskLists>
 8003c08:	e00d      	b.n	8003c26 <prvAddNewTaskToReadyList+0x4e>
 8003c0a:	4b26      	ldr	r3, [pc, #152]	; (8003ca4 <prvAddNewTaskToReadyList+0xcc>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <prvAddNewTaskToReadyList+0x4e>
 8003c12:	4b23      	ldr	r3, [pc, #140]	; (8003ca0 <prvAddNewTaskToReadyList+0xc8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d802      	bhi.n	8003c26 <prvAddNewTaskToReadyList+0x4e>
 8003c20:	4a1f      	ldr	r2, [pc, #124]	; (8003ca0 <prvAddNewTaskToReadyList+0xc8>)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b20      	ldr	r3, [pc, #128]	; (8003ca8 <prvAddNewTaskToReadyList+0xd0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	4a1e      	ldr	r2, [pc, #120]	; (8003ca8 <prvAddNewTaskToReadyList+0xd0>)
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	4b1d      	ldr	r3, [pc, #116]	; (8003ca8 <prvAddNewTaskToReadyList+0xd0>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	645a      	str	r2, [r3, #68]	; 0x44
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3c:	4b1b      	ldr	r3, [pc, #108]	; (8003cac <prvAddNewTaskToReadyList+0xd4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d903      	bls.n	8003c4c <prvAddNewTaskToReadyList+0x74>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	4a18      	ldr	r2, [pc, #96]	; (8003cac <prvAddNewTaskToReadyList+0xd4>)
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4a15      	ldr	r2, [pc, #84]	; (8003cb0 <prvAddNewTaskToReadyList+0xd8>)
 8003c5a:	441a      	add	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4619      	mov	r1, r3
 8003c62:	4610      	mov	r0, r2
 8003c64:	f7ff f8e9 	bl	8002e3a <vListInsertEnd>
 8003c68:	f001 f9b8 	bl	8004fdc <vPortExitCritical>
 8003c6c:	4b0d      	ldr	r3, [pc, #52]	; (8003ca4 <prvAddNewTaskToReadyList+0xcc>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00e      	beq.n	8003c92 <prvAddNewTaskToReadyList+0xba>
 8003c74:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <prvAddNewTaskToReadyList+0xc8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d207      	bcs.n	8003c92 <prvAddNewTaskToReadyList+0xba>
 8003c82:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <prvAddNewTaskToReadyList+0xdc>)
 8003c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	bf00      	nop
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000d08 	.word	0x20000d08
 8003ca0:	20000834 	.word	0x20000834
 8003ca4:	20000d14 	.word	0x20000d14
 8003ca8:	20000d24 	.word	0x20000d24
 8003cac:	20000d10 	.word	0x20000d10
 8003cb0:	20000838 	.word	0x20000838
 8003cb4:	e000ed04 	.word	0xe000ed04

08003cb8 <vTaskDelay>:
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d017      	beq.n	8003cfa <vTaskDelay+0x42>
 8003cca:	4b13      	ldr	r3, [pc, #76]	; (8003d18 <vTaskDelay+0x60>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <vTaskDelay+0x30>
 8003cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	60bb      	str	r3, [r7, #8]
 8003ce4:	bf00      	nop
 8003ce6:	e7fe      	b.n	8003ce6 <vTaskDelay+0x2e>
 8003ce8:	f000 f880 	bl	8003dec <vTaskSuspendAll>
 8003cec:	2100      	movs	r1, #0
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fcee 	bl	80046d0 <prvAddCurrentTaskToDelayedList>
 8003cf4:	f000 f888 	bl	8003e08 <xTaskResumeAll>
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d107      	bne.n	8003d10 <vTaskDelay+0x58>
 8003d00:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <vTaskDelay+0x64>)
 8003d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	f3bf 8f6f 	isb	sy
 8003d10:	bf00      	nop
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	20000d30 	.word	0x20000d30
 8003d1c:	e000ed04 	.word	0xe000ed04

08003d20 <vTaskStartScheduler>:
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08a      	sub	sp, #40	; 0x28
 8003d24:	af04      	add	r7, sp, #16
 8003d26:	2300      	movs	r3, #0
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	607b      	str	r3, [r7, #4]
 8003d2e:	463a      	mov	r2, r7
 8003d30:	1d39      	adds	r1, r7, #4
 8003d32:	f107 0308 	add.w	r3, r7, #8
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff f822 	bl	8002d80 <vApplicationGetIdleTaskMemory>
 8003d3c:	6839      	ldr	r1, [r7, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	9202      	str	r2, [sp, #8]
 8003d44:	9301      	str	r3, [sp, #4]
 8003d46:	2300      	movs	r3, #0
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	460a      	mov	r2, r1
 8003d4e:	4921      	ldr	r1, [pc, #132]	; (8003dd4 <vTaskStartScheduler+0xb4>)
 8003d50:	4821      	ldr	r0, [pc, #132]	; (8003dd8 <vTaskStartScheduler+0xb8>)
 8003d52:	f7ff fe19 	bl	8003988 <xTaskCreateStatic>
 8003d56:	4603      	mov	r3, r0
 8003d58:	4a20      	ldr	r2, [pc, #128]	; (8003ddc <vTaskStartScheduler+0xbc>)
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	4b1f      	ldr	r3, [pc, #124]	; (8003ddc <vTaskStartScheduler+0xbc>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <vTaskStartScheduler+0x4a>
 8003d64:	2301      	movs	r3, #1
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	e001      	b.n	8003d6e <vTaskStartScheduler+0x4e>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d102      	bne.n	8003d7a <vTaskStartScheduler+0x5a>
 8003d74:	f000 fd00 	bl	8004778 <xTimerCreateTimerTask>
 8003d78:	6178      	str	r0, [r7, #20]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d116      	bne.n	8003dae <vTaskStartScheduler+0x8e>
 8003d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	bf00      	nop
 8003d94:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <vTaskStartScheduler+0xc0>)
 8003d96:	f04f 32ff 	mov.w	r2, #4294967295
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <vTaskStartScheduler+0xc4>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <vTaskStartScheduler+0xc8>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	f001 f876 	bl	8004e98 <xPortStartScheduler>
 8003dac:	e00e      	b.n	8003dcc <vTaskStartScheduler+0xac>
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d10a      	bne.n	8003dcc <vTaskStartScheduler+0xac>
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	bf00      	nop
 8003dca:	e7fe      	b.n	8003dca <vTaskStartScheduler+0xaa>
 8003dcc:	bf00      	nop
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	08005f40 	.word	0x08005f40
 8003dd8:	08004405 	.word	0x08004405
 8003ddc:	20000d2c 	.word	0x20000d2c
 8003de0:	20000d28 	.word	0x20000d28
 8003de4:	20000d14 	.word	0x20000d14
 8003de8:	20000d0c 	.word	0x20000d0c

08003dec <vTaskSuspendAll>:
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <vTaskSuspendAll+0x18>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3301      	adds	r3, #1
 8003df6:	4a03      	ldr	r2, [pc, #12]	; (8003e04 <vTaskSuspendAll+0x18>)
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	bf00      	nop
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	20000d30 	.word	0x20000d30

08003e08 <xTaskResumeAll>:
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	2300      	movs	r3, #0
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	4b42      	ldr	r3, [pc, #264]	; (8003f20 <xTaskResumeAll+0x118>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10a      	bne.n	8003e34 <xTaskResumeAll+0x2c>
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	603b      	str	r3, [r7, #0]
 8003e30:	bf00      	nop
 8003e32:	e7fe      	b.n	8003e32 <xTaskResumeAll+0x2a>
 8003e34:	f001 f8a2 	bl	8004f7c <vPortEnterCritical>
 8003e38:	4b39      	ldr	r3, [pc, #228]	; (8003f20 <xTaskResumeAll+0x118>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	4a38      	ldr	r2, [pc, #224]	; (8003f20 <xTaskResumeAll+0x118>)
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	4b37      	ldr	r3, [pc, #220]	; (8003f20 <xTaskResumeAll+0x118>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d162      	bne.n	8003f10 <xTaskResumeAll+0x108>
 8003e4a:	4b36      	ldr	r3, [pc, #216]	; (8003f24 <xTaskResumeAll+0x11c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d05e      	beq.n	8003f10 <xTaskResumeAll+0x108>
 8003e52:	e02f      	b.n	8003eb4 <xTaskResumeAll+0xac>
 8003e54:	4b34      	ldr	r3, [pc, #208]	; (8003f28 <xTaskResumeAll+0x120>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	3318      	adds	r3, #24
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff f845 	bl	8002ef0 <uxListRemove>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff f840 	bl	8002ef0 <uxListRemove>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e74:	4b2d      	ldr	r3, [pc, #180]	; (8003f2c <xTaskResumeAll+0x124>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d903      	bls.n	8003e84 <xTaskResumeAll+0x7c>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	4a2a      	ldr	r2, [pc, #168]	; (8003f2c <xTaskResumeAll+0x124>)
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4a27      	ldr	r2, [pc, #156]	; (8003f30 <xTaskResumeAll+0x128>)
 8003e92:	441a      	add	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	3304      	adds	r3, #4
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	f7fe ffcd 	bl	8002e3a <vListInsertEnd>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea4:	4b23      	ldr	r3, [pc, #140]	; (8003f34 <xTaskResumeAll+0x12c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d302      	bcc.n	8003eb4 <xTaskResumeAll+0xac>
 8003eae:	4b22      	ldr	r3, [pc, #136]	; (8003f38 <xTaskResumeAll+0x130>)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	4b1c      	ldr	r3, [pc, #112]	; (8003f28 <xTaskResumeAll+0x120>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1cb      	bne.n	8003e54 <xTaskResumeAll+0x4c>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <xTaskResumeAll+0xbe>
 8003ec2:	f000 fb55 	bl	8004570 <prvResetNextTaskUnblockTime>
 8003ec6:	4b1d      	ldr	r3, [pc, #116]	; (8003f3c <xTaskResumeAll+0x134>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	607b      	str	r3, [r7, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d010      	beq.n	8003ef4 <xTaskResumeAll+0xec>
 8003ed2:	f000 f845 	bl	8003f60 <xTaskIncrementTick>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <xTaskResumeAll+0xda>
 8003edc:	4b16      	ldr	r3, [pc, #88]	; (8003f38 <xTaskResumeAll+0x130>)
 8003ede:	2201      	movs	r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	607b      	str	r3, [r7, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f1      	bne.n	8003ed2 <xTaskResumeAll+0xca>
 8003eee:	4b13      	ldr	r3, [pc, #76]	; (8003f3c <xTaskResumeAll+0x134>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	4b10      	ldr	r3, [pc, #64]	; (8003f38 <xTaskResumeAll+0x130>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d009      	beq.n	8003f10 <xTaskResumeAll+0x108>
 8003efc:	2301      	movs	r3, #1
 8003efe:	60bb      	str	r3, [r7, #8]
 8003f00:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <xTaskResumeAll+0x138>)
 8003f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f001 f864 	bl	8004fdc <vPortExitCritical>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20000d30 	.word	0x20000d30
 8003f24:	20000d08 	.word	0x20000d08
 8003f28:	20000cc8 	.word	0x20000cc8
 8003f2c:	20000d10 	.word	0x20000d10
 8003f30:	20000838 	.word	0x20000838
 8003f34:	20000834 	.word	0x20000834
 8003f38:	20000d1c 	.word	0x20000d1c
 8003f3c:	20000d18 	.word	0x20000d18
 8003f40:	e000ed04 	.word	0xe000ed04

08003f44 <xTaskGetTickCount>:
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <xTaskGetTickCount+0x18>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	607b      	str	r3, [r7, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4618      	mov	r0, r3
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr
 8003f5c:	20000d0c 	.word	0x20000d0c

08003f60 <xTaskIncrementTick>:
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	4b51      	ldr	r3, [pc, #324]	; (80040b0 <xTaskIncrementTick+0x150>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f040 808e 	bne.w	8004090 <xTaskIncrementTick+0x130>
 8003f74:	4b4f      	ldr	r3, [pc, #316]	; (80040b4 <xTaskIncrementTick+0x154>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	4a4d      	ldr	r2, [pc, #308]	; (80040b4 <xTaskIncrementTick+0x154>)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d120      	bne.n	8003fca <xTaskIncrementTick+0x6a>
 8003f88:	4b4b      	ldr	r3, [pc, #300]	; (80040b8 <xTaskIncrementTick+0x158>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <xTaskIncrementTick+0x48>
 8003f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	603b      	str	r3, [r7, #0]
 8003fa4:	bf00      	nop
 8003fa6:	e7fe      	b.n	8003fa6 <xTaskIncrementTick+0x46>
 8003fa8:	4b43      	ldr	r3, [pc, #268]	; (80040b8 <xTaskIncrementTick+0x158>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	4b43      	ldr	r3, [pc, #268]	; (80040bc <xTaskIncrementTick+0x15c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a41      	ldr	r2, [pc, #260]	; (80040b8 <xTaskIncrementTick+0x158>)
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	4a41      	ldr	r2, [pc, #260]	; (80040bc <xTaskIncrementTick+0x15c>)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	4b40      	ldr	r3, [pc, #256]	; (80040c0 <xTaskIncrementTick+0x160>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	4a3f      	ldr	r2, [pc, #252]	; (80040c0 <xTaskIncrementTick+0x160>)
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	f000 fad3 	bl	8004570 <prvResetNextTaskUnblockTime>
 8003fca:	4b3e      	ldr	r3, [pc, #248]	; (80040c4 <xTaskIncrementTick+0x164>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d34e      	bcc.n	8004072 <xTaskIncrementTick+0x112>
 8003fd4:	4b38      	ldr	r3, [pc, #224]	; (80040b8 <xTaskIncrementTick+0x158>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <xTaskIncrementTick+0x82>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <xTaskIncrementTick+0x84>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d004      	beq.n	8003ff2 <xTaskIncrementTick+0x92>
 8003fe8:	4b36      	ldr	r3, [pc, #216]	; (80040c4 <xTaskIncrementTick+0x164>)
 8003fea:	f04f 32ff 	mov.w	r2, #4294967295
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	e03f      	b.n	8004072 <xTaskIncrementTick+0x112>
 8003ff2:	4b31      	ldr	r3, [pc, #196]	; (80040b8 <xTaskIncrementTick+0x158>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	607b      	str	r3, [r7, #4]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	429a      	cmp	r2, r3
 8004008:	d203      	bcs.n	8004012 <xTaskIncrementTick+0xb2>
 800400a:	4a2e      	ldr	r2, [pc, #184]	; (80040c4 <xTaskIncrementTick+0x164>)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	e02f      	b.n	8004072 <xTaskIncrementTick+0x112>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	3304      	adds	r3, #4
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe ff6a 	bl	8002ef0 <uxListRemove>
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	2b00      	cmp	r3, #0
 8004022:	d004      	beq.n	800402e <xTaskIncrementTick+0xce>
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	3318      	adds	r3, #24
 8004028:	4618      	mov	r0, r3
 800402a:	f7fe ff61 	bl	8002ef0 <uxListRemove>
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004032:	4b25      	ldr	r3, [pc, #148]	; (80040c8 <xTaskIncrementTick+0x168>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d903      	bls.n	8004042 <xTaskIncrementTick+0xe2>
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	4a22      	ldr	r2, [pc, #136]	; (80040c8 <xTaskIncrementTick+0x168>)
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4a1f      	ldr	r2, [pc, #124]	; (80040cc <xTaskIncrementTick+0x16c>)
 8004050:	441a      	add	r2, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	3304      	adds	r3, #4
 8004056:	4619      	mov	r1, r3
 8004058:	4610      	mov	r0, r2
 800405a:	f7fe feee 	bl	8002e3a <vListInsertEnd>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004062:	4b1b      	ldr	r3, [pc, #108]	; (80040d0 <xTaskIncrementTick+0x170>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	429a      	cmp	r2, r3
 800406a:	d3b3      	bcc.n	8003fd4 <xTaskIncrementTick+0x74>
 800406c:	2301      	movs	r3, #1
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	e7b0      	b.n	8003fd4 <xTaskIncrementTick+0x74>
 8004072:	4b17      	ldr	r3, [pc, #92]	; (80040d0 <xTaskIncrementTick+0x170>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004078:	4914      	ldr	r1, [pc, #80]	; (80040cc <xTaskIncrementTick+0x16c>)
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d907      	bls.n	800409a <xTaskIncrementTick+0x13a>
 800408a:	2301      	movs	r3, #1
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	e004      	b.n	800409a <xTaskIncrementTick+0x13a>
 8004090:	4b10      	ldr	r3, [pc, #64]	; (80040d4 <xTaskIncrementTick+0x174>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3301      	adds	r3, #1
 8004096:	4a0f      	ldr	r2, [pc, #60]	; (80040d4 <xTaskIncrementTick+0x174>)
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <xTaskIncrementTick+0x178>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <xTaskIncrementTick+0x146>
 80040a2:	2301      	movs	r3, #1
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	20000d30 	.word	0x20000d30
 80040b4:	20000d0c 	.word	0x20000d0c
 80040b8:	20000cc0 	.word	0x20000cc0
 80040bc:	20000cc4 	.word	0x20000cc4
 80040c0:	20000d20 	.word	0x20000d20
 80040c4:	20000d28 	.word	0x20000d28
 80040c8:	20000d10 	.word	0x20000d10
 80040cc:	20000838 	.word	0x20000838
 80040d0:	20000834 	.word	0x20000834
 80040d4:	20000d18 	.word	0x20000d18
 80040d8:	20000d1c 	.word	0x20000d1c

080040dc <vTaskSwitchContext>:
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4b27      	ldr	r3, [pc, #156]	; (8004180 <vTaskSwitchContext+0xa4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <vTaskSwitchContext+0x16>
 80040ea:	4b26      	ldr	r3, [pc, #152]	; (8004184 <vTaskSwitchContext+0xa8>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	e041      	b.n	8004176 <vTaskSwitchContext+0x9a>
 80040f2:	4b24      	ldr	r3, [pc, #144]	; (8004184 <vTaskSwitchContext+0xa8>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	4b23      	ldr	r3, [pc, #140]	; (8004188 <vTaskSwitchContext+0xac>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	e010      	b.n	8004122 <vTaskSwitchContext+0x46>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <vTaskSwitchContext+0x40>
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	607b      	str	r3, [r7, #4]
 8004118:	bf00      	nop
 800411a:	e7fe      	b.n	800411a <vTaskSwitchContext+0x3e>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	3b01      	subs	r3, #1
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	491a      	ldr	r1, [pc, #104]	; (800418c <vTaskSwitchContext+0xb0>)
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0e4      	beq.n	8004100 <vTaskSwitchContext+0x24>
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4a12      	ldr	r2, [pc, #72]	; (800418c <vTaskSwitchContext+0xb0>)
 8004142:	4413      	add	r3, r2
 8004144:	60bb      	str	r3, [r7, #8]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	605a      	str	r2, [r3, #4]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	3308      	adds	r3, #8
 8004158:	429a      	cmp	r2, r3
 800415a:	d104      	bne.n	8004166 <vTaskSwitchContext+0x8a>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4a08      	ldr	r2, [pc, #32]	; (8004190 <vTaskSwitchContext+0xb4>)
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	4a05      	ldr	r2, [pc, #20]	; (8004188 <vTaskSwitchContext+0xac>)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	bf00      	nop
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr
 8004180:	20000d30 	.word	0x20000d30
 8004184:	20000d1c 	.word	0x20000d1c
 8004188:	20000d10 	.word	0x20000d10
 800418c:	20000838 	.word	0x20000838
 8004190:	20000834 	.word	0x20000834

08004194 <vTaskPlaceOnEventList>:
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <vTaskPlaceOnEventList+0x26>
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <vTaskPlaceOnEventList+0x24>
 80041ba:	4b07      	ldr	r3, [pc, #28]	; (80041d8 <vTaskPlaceOnEventList+0x44>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3318      	adds	r3, #24
 80041c0:	4619      	mov	r1, r3
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fe fe5c 	bl	8002e80 <vListInsert>
 80041c8:	2101      	movs	r1, #1
 80041ca:	6838      	ldr	r0, [r7, #0]
 80041cc:	f000 fa80 	bl	80046d0 <prvAddCurrentTaskToDelayedList>
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20000834 	.word	0x20000834

080041dc <vTaskPlaceOnEventListRestricted>:
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10a      	bne.n	8004204 <vTaskPlaceOnEventListRestricted+0x28>
 80041ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	bf00      	nop
 8004202:	e7fe      	b.n	8004202 <vTaskPlaceOnEventListRestricted+0x26>
 8004204:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <vTaskPlaceOnEventListRestricted+0x54>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3318      	adds	r3, #24
 800420a:	4619      	mov	r1, r3
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f7fe fe14 	bl	8002e3a <vListInsertEnd>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <vTaskPlaceOnEventListRestricted+0x42>
 8004218:	f04f 33ff 	mov.w	r3, #4294967295
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	68b8      	ldr	r0, [r7, #8]
 8004222:	f000 fa55 	bl	80046d0 <prvAddCurrentTaskToDelayedList>
 8004226:	bf00      	nop
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000834 	.word	0x20000834

08004234 <xTaskRemoveFromEventList>:
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10a      	bne.n	8004260 <xTaskRemoveFromEventList+0x2c>
 800424a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	bf00      	nop
 800425e:	e7fe      	b.n	800425e <xTaskRemoveFromEventList+0x2a>
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	3318      	adds	r3, #24
 8004264:	4618      	mov	r0, r3
 8004266:	f7fe fe43 	bl	8002ef0 <uxListRemove>
 800426a:	4b1e      	ldr	r3, [pc, #120]	; (80042e4 <xTaskRemoveFromEventList+0xb0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d11d      	bne.n	80042ae <xTaskRemoveFromEventList+0x7a>
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	3304      	adds	r3, #4
 8004276:	4618      	mov	r0, r3
 8004278:	f7fe fe3a 	bl	8002ef0 <uxListRemove>
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004280:	4b19      	ldr	r3, [pc, #100]	; (80042e8 <xTaskRemoveFromEventList+0xb4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d903      	bls.n	8004290 <xTaskRemoveFromEventList+0x5c>
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	4a16      	ldr	r2, [pc, #88]	; (80042e8 <xTaskRemoveFromEventList+0xb4>)
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004294:	4613      	mov	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4a13      	ldr	r2, [pc, #76]	; (80042ec <xTaskRemoveFromEventList+0xb8>)
 800429e:	441a      	add	r2, r3
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	3304      	adds	r3, #4
 80042a4:	4619      	mov	r1, r3
 80042a6:	4610      	mov	r0, r2
 80042a8:	f7fe fdc7 	bl	8002e3a <vListInsertEnd>
 80042ac:	e005      	b.n	80042ba <xTaskRemoveFromEventList+0x86>
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	3318      	adds	r3, #24
 80042b2:	4619      	mov	r1, r3
 80042b4:	480e      	ldr	r0, [pc, #56]	; (80042f0 <xTaskRemoveFromEventList+0xbc>)
 80042b6:	f7fe fdc0 	bl	8002e3a <vListInsertEnd>
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042be:	4b0d      	ldr	r3, [pc, #52]	; (80042f4 <xTaskRemoveFromEventList+0xc0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d905      	bls.n	80042d4 <xTaskRemoveFromEventList+0xa0>
 80042c8:	2301      	movs	r3, #1
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <xTaskRemoveFromEventList+0xc4>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	e001      	b.n	80042d8 <xTaskRemoveFromEventList+0xa4>
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000d30 	.word	0x20000d30
 80042e8:	20000d10 	.word	0x20000d10
 80042ec:	20000838 	.word	0x20000838
 80042f0:	20000cc8 	.word	0x20000cc8
 80042f4:	20000834 	.word	0x20000834
 80042f8:	20000d1c 	.word	0x20000d1c

080042fc <vTaskInternalSetTimeOutState>:
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <vTaskInternalSetTimeOutState+0x24>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	4b05      	ldr	r3, [pc, #20]	; (8004324 <vTaskInternalSetTimeOutState+0x28>)
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	605a      	str	r2, [r3, #4]
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	bc80      	pop	{r7}
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000d20 	.word	0x20000d20
 8004324:	20000d0c 	.word	0x20000d0c

08004328 <xTaskCheckForTimeOut>:
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <xTaskCheckForTimeOut+0x26>
 8004338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	bf00      	nop
 800434c:	e7fe      	b.n	800434c <xTaskCheckForTimeOut+0x24>
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10a      	bne.n	800436a <xTaskCheckForTimeOut+0x42>
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	bf00      	nop
 8004368:	e7fe      	b.n	8004368 <xTaskCheckForTimeOut+0x40>
 800436a:	f000 fe07 	bl	8004f7c <vPortEnterCritical>
 800436e:	4b1d      	ldr	r3, [pc, #116]	; (80043e4 <xTaskCheckForTimeOut+0xbc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	61bb      	str	r3, [r7, #24]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004386:	d102      	bne.n	800438e <xTaskCheckForTimeOut+0x66>
 8004388:	2300      	movs	r3, #0
 800438a:	61fb      	str	r3, [r7, #28]
 800438c:	e023      	b.n	80043d6 <xTaskCheckForTimeOut+0xae>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	4b15      	ldr	r3, [pc, #84]	; (80043e8 <xTaskCheckForTimeOut+0xc0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d007      	beq.n	80043aa <xTaskCheckForTimeOut+0x82>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d302      	bcc.n	80043aa <xTaskCheckForTimeOut+0x82>
 80043a4:	2301      	movs	r3, #1
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	e015      	b.n	80043d6 <xTaskCheckForTimeOut+0xae>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d20b      	bcs.n	80043cc <xTaskCheckForTimeOut+0xa4>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	1ad2      	subs	r2, r2, r3
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff ff9b 	bl	80042fc <vTaskInternalSetTimeOutState>
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
 80043ca:	e004      	b.n	80043d6 <xTaskCheckForTimeOut+0xae>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	2301      	movs	r3, #1
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	f000 fe01 	bl	8004fdc <vPortExitCritical>
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	4618      	mov	r0, r3
 80043de:	3720      	adds	r7, #32
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	20000d0c 	.word	0x20000d0c
 80043e8:	20000d20 	.word	0x20000d20

080043ec <vTaskMissedYield>:
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	4b03      	ldr	r3, [pc, #12]	; (8004400 <vTaskMissedYield+0x14>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	bf00      	nop
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000d1c 	.word	0x20000d1c

08004404 <prvIdleTask>:
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	f000 f852 	bl	80044b4 <prvCheckTasksWaitingTermination>
 8004410:	4b06      	ldr	r3, [pc, #24]	; (800442c <prvIdleTask+0x28>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d9f9      	bls.n	800440c <prvIdleTask+0x8>
 8004418:	4b05      	ldr	r3, [pc, #20]	; (8004430 <prvIdleTask+0x2c>)
 800441a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	e7f0      	b.n	800440c <prvIdleTask+0x8>
 800442a:	bf00      	nop
 800442c:	20000838 	.word	0x20000838
 8004430:	e000ed04 	.word	0xe000ed04

08004434 <prvInitialiseTaskLists>:
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	2300      	movs	r3, #0
 800443c:	607b      	str	r3, [r7, #4]
 800443e:	e00c      	b.n	800445a <prvInitialiseTaskLists+0x26>
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4a12      	ldr	r2, [pc, #72]	; (8004494 <prvInitialiseTaskLists+0x60>)
 800444c:	4413      	add	r3, r2
 800444e:	4618      	mov	r0, r3
 8004450:	f7fe fcc8 	bl	8002de4 <vListInitialise>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3301      	adds	r3, #1
 8004458:	607b      	str	r3, [r7, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b37      	cmp	r3, #55	; 0x37
 800445e:	d9ef      	bls.n	8004440 <prvInitialiseTaskLists+0xc>
 8004460:	480d      	ldr	r0, [pc, #52]	; (8004498 <prvInitialiseTaskLists+0x64>)
 8004462:	f7fe fcbf 	bl	8002de4 <vListInitialise>
 8004466:	480d      	ldr	r0, [pc, #52]	; (800449c <prvInitialiseTaskLists+0x68>)
 8004468:	f7fe fcbc 	bl	8002de4 <vListInitialise>
 800446c:	480c      	ldr	r0, [pc, #48]	; (80044a0 <prvInitialiseTaskLists+0x6c>)
 800446e:	f7fe fcb9 	bl	8002de4 <vListInitialise>
 8004472:	480c      	ldr	r0, [pc, #48]	; (80044a4 <prvInitialiseTaskLists+0x70>)
 8004474:	f7fe fcb6 	bl	8002de4 <vListInitialise>
 8004478:	480b      	ldr	r0, [pc, #44]	; (80044a8 <prvInitialiseTaskLists+0x74>)
 800447a:	f7fe fcb3 	bl	8002de4 <vListInitialise>
 800447e:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <prvInitialiseTaskLists+0x78>)
 8004480:	4a05      	ldr	r2, [pc, #20]	; (8004498 <prvInitialiseTaskLists+0x64>)
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	4b0a      	ldr	r3, [pc, #40]	; (80044b0 <prvInitialiseTaskLists+0x7c>)
 8004486:	4a05      	ldr	r2, [pc, #20]	; (800449c <prvInitialiseTaskLists+0x68>)
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000838 	.word	0x20000838
 8004498:	20000c98 	.word	0x20000c98
 800449c:	20000cac 	.word	0x20000cac
 80044a0:	20000cc8 	.word	0x20000cc8
 80044a4:	20000cdc 	.word	0x20000cdc
 80044a8:	20000cf4 	.word	0x20000cf4
 80044ac:	20000cc0 	.word	0x20000cc0
 80044b0:	20000cc4 	.word	0x20000cc4

080044b4 <prvCheckTasksWaitingTermination>:
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	e019      	b.n	80044f0 <prvCheckTasksWaitingTermination+0x3c>
 80044bc:	f000 fd5e 	bl	8004f7c <vPortEnterCritical>
 80044c0:	4b10      	ldr	r3, [pc, #64]	; (8004504 <prvCheckTasksWaitingTermination+0x50>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	607b      	str	r3, [r7, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3304      	adds	r3, #4
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fe fd0f 	bl	8002ef0 <uxListRemove>
 80044d2:	4b0d      	ldr	r3, [pc, #52]	; (8004508 <prvCheckTasksWaitingTermination+0x54>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	4a0b      	ldr	r2, [pc, #44]	; (8004508 <prvCheckTasksWaitingTermination+0x54>)
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	4b0b      	ldr	r3, [pc, #44]	; (800450c <prvCheckTasksWaitingTermination+0x58>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	4a0a      	ldr	r2, [pc, #40]	; (800450c <prvCheckTasksWaitingTermination+0x58>)
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	f000 fd79 	bl	8004fdc <vPortExitCritical>
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f810 	bl	8004510 <prvDeleteTCB>
 80044f0:	4b06      	ldr	r3, [pc, #24]	; (800450c <prvCheckTasksWaitingTermination+0x58>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1e1      	bne.n	80044bc <prvCheckTasksWaitingTermination+0x8>
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000cdc 	.word	0x20000cdc
 8004508:	20000d08 	.word	0x20000d08
 800450c:	20000cf0 	.word	0x20000cf0

08004510 <prvDeleteTCB>:
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800451e:	2b00      	cmp	r3, #0
 8004520:	d108      	bne.n	8004534 <prvDeleteTCB+0x24>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	4618      	mov	r0, r3
 8004528:	f000 feec 	bl	8005304 <vPortFree>
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fee9 	bl	8005304 <vPortFree>
 8004532:	e018      	b.n	8004566 <prvDeleteTCB+0x56>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800453a:	2b01      	cmp	r3, #1
 800453c:	d103      	bne.n	8004546 <prvDeleteTCB+0x36>
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fee0 	bl	8005304 <vPortFree>
 8004544:	e00f      	b.n	8004566 <prvDeleteTCB+0x56>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800454c:	2b02      	cmp	r3, #2
 800454e:	d00a      	beq.n	8004566 <prvDeleteTCB+0x56>
 8004550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	bf00      	nop
 8004564:	e7fe      	b.n	8004564 <prvDeleteTCB+0x54>
 8004566:	bf00      	nop
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <prvResetNextTaskUnblockTime>:
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <prvResetNextTaskUnblockTime+0x40>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <prvResetNextTaskUnblockTime+0x14>
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <prvResetNextTaskUnblockTime+0x16>
 8004584:	2300      	movs	r3, #0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d004      	beq.n	8004594 <prvResetNextTaskUnblockTime+0x24>
 800458a:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <prvResetNextTaskUnblockTime+0x44>)
 800458c:	f04f 32ff 	mov.w	r2, #4294967295
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	e008      	b.n	80045a6 <prvResetNextTaskUnblockTime+0x36>
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <prvResetNextTaskUnblockTime+0x40>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	607b      	str	r3, [r7, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4a04      	ldr	r2, [pc, #16]	; (80045b4 <prvResetNextTaskUnblockTime+0x44>)
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr
 80045b0:	20000cc0 	.word	0x20000cc0
 80045b4:	20000d28 	.word	0x20000d28

080045b8 <xTaskGetSchedulerState>:
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <xTaskGetSchedulerState+0x34>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d102      	bne.n	80045cc <xTaskGetSchedulerState+0x14>
 80045c6:	2301      	movs	r3, #1
 80045c8:	607b      	str	r3, [r7, #4]
 80045ca:	e008      	b.n	80045de <xTaskGetSchedulerState+0x26>
 80045cc:	4b08      	ldr	r3, [pc, #32]	; (80045f0 <xTaskGetSchedulerState+0x38>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d102      	bne.n	80045da <xTaskGetSchedulerState+0x22>
 80045d4:	2302      	movs	r3, #2
 80045d6:	607b      	str	r3, [r7, #4]
 80045d8:	e001      	b.n	80045de <xTaskGetSchedulerState+0x26>
 80045da:	2300      	movs	r3, #0
 80045dc:	607b      	str	r3, [r7, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	20000d14 	.word	0x20000d14
 80045f0:	20000d30 	.word	0x20000d30

080045f4 <xTaskPriorityDisinherit>:
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	613b      	str	r3, [r7, #16]
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d056      	beq.n	80046b8 <xTaskPriorityDisinherit+0xc4>
 800460a:	4b2e      	ldr	r3, [pc, #184]	; (80046c4 <xTaskPriorityDisinherit+0xd0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	429a      	cmp	r2, r3
 8004612:	d00a      	beq.n	800462a <xTaskPriorityDisinherit+0x36>
 8004614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	bf00      	nop
 8004628:	e7fe      	b.n	8004628 <xTaskPriorityDisinherit+0x34>
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <xTaskPriorityDisinherit+0x54>
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	60bb      	str	r3, [r7, #8]
 8004644:	bf00      	nop
 8004646:	e7fe      	b.n	8004646 <xTaskPriorityDisinherit+0x52>
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800464c:	1e5a      	subs	r2, r3, #1
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	651a      	str	r2, [r3, #80]	; 0x50
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465a:	429a      	cmp	r2, r3
 800465c:	d02c      	beq.n	80046b8 <xTaskPriorityDisinherit+0xc4>
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004662:	2b00      	cmp	r3, #0
 8004664:	d128      	bne.n	80046b8 <xTaskPriorityDisinherit+0xc4>
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	3304      	adds	r3, #4
 800466a:	4618      	mov	r0, r3
 800466c:	f7fe fc40 	bl	8002ef0 <uxListRemove>
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	62da      	str	r2, [r3, #44]	; 0x2c
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	619a      	str	r2, [r3, #24]
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004688:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <xTaskPriorityDisinherit+0xd4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d903      	bls.n	8004698 <xTaskPriorityDisinherit+0xa4>
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	4a0c      	ldr	r2, [pc, #48]	; (80046c8 <xTaskPriorityDisinherit+0xd4>)
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4a09      	ldr	r2, [pc, #36]	; (80046cc <xTaskPriorityDisinherit+0xd8>)
 80046a6:	441a      	add	r2, r3
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	3304      	adds	r3, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	4610      	mov	r0, r2
 80046b0:	f7fe fbc3 	bl	8002e3a <vListInsertEnd>
 80046b4:	2301      	movs	r3, #1
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20000834 	.word	0x20000834
 80046c8:	20000d10 	.word	0x20000d10
 80046cc:	20000838 	.word	0x20000838

080046d0 <prvAddCurrentTaskToDelayedList>:
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
 80046da:	4b21      	ldr	r3, [pc, #132]	; (8004760 <prvAddCurrentTaskToDelayedList+0x90>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	4b20      	ldr	r3, [pc, #128]	; (8004764 <prvAddCurrentTaskToDelayedList+0x94>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3304      	adds	r3, #4
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fe fc02 	bl	8002ef0 <uxListRemove>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d10a      	bne.n	800470a <prvAddCurrentTaskToDelayedList+0x3a>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d007      	beq.n	800470a <prvAddCurrentTaskToDelayedList+0x3a>
 80046fa:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <prvAddCurrentTaskToDelayedList+0x94>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3304      	adds	r3, #4
 8004700:	4619      	mov	r1, r3
 8004702:	4819      	ldr	r0, [pc, #100]	; (8004768 <prvAddCurrentTaskToDelayedList+0x98>)
 8004704:	f7fe fb99 	bl	8002e3a <vListInsertEnd>
 8004708:	e026      	b.n	8004758 <prvAddCurrentTaskToDelayedList+0x88>
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4413      	add	r3, r2
 8004710:	60bb      	str	r3, [r7, #8]
 8004712:	4b14      	ldr	r3, [pc, #80]	; (8004764 <prvAddCurrentTaskToDelayedList+0x94>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	605a      	str	r2, [r3, #4]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	429a      	cmp	r2, r3
 8004720:	d209      	bcs.n	8004736 <prvAddCurrentTaskToDelayedList+0x66>
 8004722:	4b12      	ldr	r3, [pc, #72]	; (800476c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <prvAddCurrentTaskToDelayedList+0x94>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3304      	adds	r3, #4
 800472c:	4619      	mov	r1, r3
 800472e:	4610      	mov	r0, r2
 8004730:	f7fe fba6 	bl	8002e80 <vListInsert>
 8004734:	e010      	b.n	8004758 <prvAddCurrentTaskToDelayedList+0x88>
 8004736:	4b0e      	ldr	r3, [pc, #56]	; (8004770 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	4b0a      	ldr	r3, [pc, #40]	; (8004764 <prvAddCurrentTaskToDelayedList+0x94>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3304      	adds	r3, #4
 8004740:	4619      	mov	r1, r3
 8004742:	4610      	mov	r0, r2
 8004744:	f7fe fb9c 	bl	8002e80 <vListInsert>
 8004748:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <prvAddCurrentTaskToDelayedList+0xa4>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	429a      	cmp	r2, r3
 8004750:	d202      	bcs.n	8004758 <prvAddCurrentTaskToDelayedList+0x88>
 8004752:	4a08      	ldr	r2, [pc, #32]	; (8004774 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	bf00      	nop
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	20000d0c 	.word	0x20000d0c
 8004764:	20000834 	.word	0x20000834
 8004768:	20000cf4 	.word	0x20000cf4
 800476c:	20000cc4 	.word	0x20000cc4
 8004770:	20000cc0 	.word	0x20000cc0
 8004774:	20000d28 	.word	0x20000d28

08004778 <xTimerCreateTimerTask>:
 8004778:	b580      	push	{r7, lr}
 800477a:	b08a      	sub	sp, #40	; 0x28
 800477c:	af04      	add	r7, sp, #16
 800477e:	2300      	movs	r3, #0
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	f000 facb 	bl	8004d1c <prvCheckForValidListAndQueue>
 8004786:	4b1c      	ldr	r3, [pc, #112]	; (80047f8 <xTimerCreateTimerTask+0x80>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d021      	beq.n	80047d2 <xTimerCreateTimerTask+0x5a>
 800478e:	2300      	movs	r3, #0
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	2300      	movs	r3, #0
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	1d3a      	adds	r2, r7, #4
 8004798:	f107 0108 	add.w	r1, r7, #8
 800479c:	f107 030c 	add.w	r3, r7, #12
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fe fb05 	bl	8002db0 <vApplicationGetTimerTaskMemory>
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	9202      	str	r2, [sp, #8]
 80047ae:	9301      	str	r3, [sp, #4]
 80047b0:	2302      	movs	r3, #2
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	2300      	movs	r3, #0
 80047b6:	460a      	mov	r2, r1
 80047b8:	4910      	ldr	r1, [pc, #64]	; (80047fc <xTimerCreateTimerTask+0x84>)
 80047ba:	4811      	ldr	r0, [pc, #68]	; (8004800 <xTimerCreateTimerTask+0x88>)
 80047bc:	f7ff f8e4 	bl	8003988 <xTaskCreateStatic>
 80047c0:	4603      	mov	r3, r0
 80047c2:	4a10      	ldr	r2, [pc, #64]	; (8004804 <xTimerCreateTimerTask+0x8c>)
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <xTimerCreateTimerTask+0x8c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <xTimerCreateTimerTask+0x5a>
 80047ce:	2301      	movs	r3, #1
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10a      	bne.n	80047ee <xTimerCreateTimerTask+0x76>
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	bf00      	nop
 80047ec:	e7fe      	b.n	80047ec <xTimerCreateTimerTask+0x74>
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20000d64 	.word	0x20000d64
 80047fc:	08005f48 	.word	0x08005f48
 8004800:	08004925 	.word	0x08004925
 8004804:	20000d68 	.word	0x20000d68

08004808 <xTimerGenericCommand>:
 8004808:	b580      	push	{r7, lr}
 800480a:	b08a      	sub	sp, #40	; 0x28
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	603b      	str	r3, [r7, #0]
 8004816:	2300      	movs	r3, #0
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10a      	bne.n	8004836 <xTimerGenericCommand+0x2e>
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	623b      	str	r3, [r7, #32]
 8004832:	bf00      	nop
 8004834:	e7fe      	b.n	8004834 <xTimerGenericCommand+0x2c>
 8004836:	4b1a      	ldr	r3, [pc, #104]	; (80048a0 <xTimerGenericCommand+0x98>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d02a      	beq.n	8004894 <xTimerGenericCommand+0x8c>
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	61bb      	str	r3, [r7, #24]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b05      	cmp	r3, #5
 800484e:	dc18      	bgt.n	8004882 <xTimerGenericCommand+0x7a>
 8004850:	f7ff feb2 	bl	80045b8 <xTaskGetSchedulerState>
 8004854:	4603      	mov	r3, r0
 8004856:	2b02      	cmp	r3, #2
 8004858:	d109      	bne.n	800486e <xTimerGenericCommand+0x66>
 800485a:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <xTimerGenericCommand+0x98>)
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	f107 0110 	add.w	r1, r7, #16
 8004862:	2300      	movs	r3, #0
 8004864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004866:	f7fe fcad 	bl	80031c4 <xQueueGenericSend>
 800486a:	6278      	str	r0, [r7, #36]	; 0x24
 800486c:	e012      	b.n	8004894 <xTimerGenericCommand+0x8c>
 800486e:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <xTimerGenericCommand+0x98>)
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	f107 0110 	add.w	r1, r7, #16
 8004876:	2300      	movs	r3, #0
 8004878:	2200      	movs	r2, #0
 800487a:	f7fe fca3 	bl	80031c4 <xQueueGenericSend>
 800487e:	6278      	str	r0, [r7, #36]	; 0x24
 8004880:	e008      	b.n	8004894 <xTimerGenericCommand+0x8c>
 8004882:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <xTimerGenericCommand+0x98>)
 8004884:	6818      	ldr	r0, [r3, #0]
 8004886:	f107 0110 	add.w	r1, r7, #16
 800488a:	2300      	movs	r3, #0
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	f7fe fd97 	bl	80033c0 <xQueueGenericSendFromISR>
 8004892:	6278      	str	r0, [r7, #36]	; 0x24
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	4618      	mov	r0, r3
 8004898:	3728      	adds	r7, #40	; 0x28
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20000d64 	.word	0x20000d64

080048a4 <prvProcessExpiredTimer>:
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
 80048ae:	4b1c      	ldr	r3, [pc, #112]	; (8004920 <prvProcessExpiredTimer+0x7c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	3304      	adds	r3, #4
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fe fb17 	bl	8002ef0 <uxListRemove>
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d122      	bne.n	8004910 <prvProcessExpiredTimer+0x6c>
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	699a      	ldr	r2, [r3, #24]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	18d1      	adds	r1, r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	6978      	ldr	r0, [r7, #20]
 80048d8:	f000 f8c8 	bl	8004a6c <prvInsertTimerInActiveList>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d016      	beq.n	8004910 <prvProcessExpiredTimer+0x6c>
 80048e2:	2300      	movs	r3, #0
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	2300      	movs	r3, #0
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	2100      	movs	r1, #0
 80048ec:	6978      	ldr	r0, [r7, #20]
 80048ee:	f7ff ff8b 	bl	8004808 <xTimerGenericCommand>
 80048f2:	6138      	str	r0, [r7, #16]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10a      	bne.n	8004910 <prvProcessExpiredTimer+0x6c>
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	bf00      	nop
 800490e:	e7fe      	b.n	800490e <prvProcessExpiredTimer+0x6a>
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	6978      	ldr	r0, [r7, #20]
 8004916:	4798      	blx	r3
 8004918:	bf00      	nop
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20000d5c 	.word	0x20000d5c

08004924 <prvTimerTask>:
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	f107 0308 	add.w	r3, r7, #8
 8004930:	4618      	mov	r0, r3
 8004932:	f000 f857 	bl	80049e4 <prvGetNextExpireTime>
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	4619      	mov	r1, r3
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 f803 	bl	8004948 <prvProcessTimerOrBlockTask>
 8004942:	f000 f8d5 	bl	8004af0 <prvProcessReceivedCommands>
 8004946:	e7f1      	b.n	800492c <prvTimerTask+0x8>

08004948 <prvProcessTimerOrBlockTask>:
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
 8004952:	f7ff fa4b 	bl	8003dec <vTaskSuspendAll>
 8004956:	f107 0308 	add.w	r3, r7, #8
 800495a:	4618      	mov	r0, r3
 800495c:	f000 f866 	bl	8004a2c <prvSampleTimeNow>
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d130      	bne.n	80049ca <prvProcessTimerOrBlockTask+0x82>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <prvProcessTimerOrBlockTask+0x3c>
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	429a      	cmp	r2, r3
 8004974:	d806      	bhi.n	8004984 <prvProcessTimerOrBlockTask+0x3c>
 8004976:	f7ff fa47 	bl	8003e08 <xTaskResumeAll>
 800497a:	68f9      	ldr	r1, [r7, #12]
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff ff91 	bl	80048a4 <prvProcessExpiredTimer>
 8004982:	e024      	b.n	80049ce <prvProcessTimerOrBlockTask+0x86>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d008      	beq.n	800499c <prvProcessTimerOrBlockTask+0x54>
 800498a:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <prvProcessTimerOrBlockTask+0x90>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	bf0c      	ite	eq
 8004994:	2301      	moveq	r3, #1
 8004996:	2300      	movne	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	4b0f      	ldr	r3, [pc, #60]	; (80049dc <prvProcessTimerOrBlockTask+0x94>)
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	4619      	mov	r1, r3
 80049aa:	f7fe ffb9 	bl	8003920 <vQueueWaitForMessageRestricted>
 80049ae:	f7ff fa2b 	bl	8003e08 <xTaskResumeAll>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10a      	bne.n	80049ce <prvProcessTimerOrBlockTask+0x86>
 80049b8:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <prvProcessTimerOrBlockTask+0x98>)
 80049ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	e001      	b.n	80049ce <prvProcessTimerOrBlockTask+0x86>
 80049ca:	f7ff fa1d 	bl	8003e08 <xTaskResumeAll>
 80049ce:	bf00      	nop
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000d60 	.word	0x20000d60
 80049dc:	20000d64 	.word	0x20000d64
 80049e0:	e000ed04 	.word	0xe000ed04

080049e4 <prvGetNextExpireTime>:
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	4b0e      	ldr	r3, [pc, #56]	; (8004a28 <prvGetNextExpireTime+0x44>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	bf0c      	ite	eq
 80049f6:	2301      	moveq	r3, #1
 80049f8:	2300      	movne	r3, #0
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	461a      	mov	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d105      	bne.n	8004a16 <prvGetNextExpireTime+0x32>
 8004a0a:	4b07      	ldr	r3, [pc, #28]	; (8004a28 <prvGetNextExpireTime+0x44>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	e001      	b.n	8004a1a <prvGetNextExpireTime+0x36>
 8004a16:	2300      	movs	r3, #0
 8004a18:	60fb      	str	r3, [r7, #12]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bc80      	pop	{r7}
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	20000d5c 	.word	0x20000d5c

08004a2c <prvSampleTimeNow>:
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	f7ff fa86 	bl	8003f44 <xTaskGetTickCount>
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <prvSampleTimeNow+0x3c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d205      	bcs.n	8004a50 <prvSampleTimeNow+0x24>
 8004a44:	f000 f908 	bl	8004c58 <prvSwitchTimerLists>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	e002      	b.n	8004a56 <prvSampleTimeNow+0x2a>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	4a04      	ldr	r2, [pc, #16]	; (8004a68 <prvSampleTimeNow+0x3c>)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000d6c 	.word	0x20000d6c

08004a6c <prvInsertTimerInActiveList>:
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	605a      	str	r2, [r3, #4]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	611a      	str	r2, [r3, #16]
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d812      	bhi.n	8004ab8 <prvInsertTimerInActiveList+0x4c>
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	1ad2      	subs	r2, r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d302      	bcc.n	8004aa6 <prvInsertTimerInActiveList+0x3a>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	e01b      	b.n	8004ade <prvInsertTimerInActiveList+0x72>
 8004aa6:	4b10      	ldr	r3, [pc, #64]	; (8004ae8 <prvInsertTimerInActiveList+0x7c>)
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3304      	adds	r3, #4
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f7fe f9e5 	bl	8002e80 <vListInsert>
 8004ab6:	e012      	b.n	8004ade <prvInsertTimerInActiveList+0x72>
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d206      	bcs.n	8004ace <prvInsertTimerInActiveList+0x62>
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d302      	bcc.n	8004ace <prvInsertTimerInActiveList+0x62>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	e007      	b.n	8004ade <prvInsertTimerInActiveList+0x72>
 8004ace:	4b07      	ldr	r3, [pc, #28]	; (8004aec <prvInsertTimerInActiveList+0x80>)
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4610      	mov	r0, r2
 8004ada:	f7fe f9d1 	bl	8002e80 <vListInsert>
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20000d60 	.word	0x20000d60
 8004aec:	20000d5c 	.word	0x20000d5c

08004af0 <prvProcessReceivedCommands>:
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08e      	sub	sp, #56	; 0x38
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	e09d      	b.n	8004c34 <prvProcessReceivedCommands+0x144>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	da18      	bge.n	8004b30 <prvProcessReceivedCommands+0x40>
 8004afe:	1d3b      	adds	r3, r7, #4
 8004b00:	3304      	adds	r3, #4
 8004b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <prvProcessReceivedCommands+0x30>
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	61fb      	str	r3, [r7, #28]
 8004b1c:	bf00      	nop
 8004b1e:	e7fe      	b.n	8004b1e <prvProcessReceivedCommands+0x2e>
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b26:	6850      	ldr	r0, [r2, #4]
 8004b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b2a:	6892      	ldr	r2, [r2, #8]
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4798      	blx	r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	db7d      	blt.n	8004c32 <prvProcessReceivedCommands+0x142>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d004      	beq.n	8004b4c <prvProcessReceivedCommands+0x5c>
 8004b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b44:	3304      	adds	r3, #4
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe f9d2 	bl	8002ef0 <uxListRemove>
 8004b4c:	463b      	mov	r3, r7
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff ff6c 	bl	8004a2c <prvSampleTimeNow>
 8004b54:	6278      	str	r0, [r7, #36]	; 0x24
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b09      	cmp	r3, #9
 8004b5a:	d86b      	bhi.n	8004c34 <prvProcessReceivedCommands+0x144>
 8004b5c:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <prvProcessReceivedCommands+0x74>)
 8004b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b62:	bf00      	nop
 8004b64:	08004b8d 	.word	0x08004b8d
 8004b68:	08004b8d 	.word	0x08004b8d
 8004b6c:	08004b8d 	.word	0x08004b8d
 8004b70:	08004c35 	.word	0x08004c35
 8004b74:	08004be9 	.word	0x08004be9
 8004b78:	08004c21 	.word	0x08004c21
 8004b7c:	08004b8d 	.word	0x08004b8d
 8004b80:	08004b8d 	.word	0x08004b8d
 8004b84:	08004c35 	.word	0x08004c35
 8004b88:	08004be9 	.word	0x08004be9
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	18d1      	adds	r1, r2, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b9a:	f7ff ff67 	bl	8004a6c <prvInsertTimerInActiveList>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d047      	beq.n	8004c34 <prvProcessReceivedCommands+0x144>
 8004ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004baa:	4798      	blx	r3
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d13f      	bne.n	8004c34 <prvProcessReceivedCommands+0x144>
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	441a      	add	r2, r3
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bc6:	f7ff fe1f 	bl	8004808 <xTimerGenericCommand>
 8004bca:	6238      	str	r0, [r7, #32]
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d130      	bne.n	8004c34 <prvProcessReceivedCommands+0x144>
 8004bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	61bb      	str	r3, [r7, #24]
 8004be4:	bf00      	nop
 8004be6:	e7fe      	b.n	8004be6 <prvProcessReceivedCommands+0xf6>
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	619a      	str	r2, [r3, #24]
 8004bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <prvProcessReceivedCommands+0x11c>
 8004bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	bf00      	nop
 8004c0a:	e7fe      	b.n	8004c0a <prvProcessReceivedCommands+0x11a>
 8004c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0e:	699a      	ldr	r2, [r3, #24]
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	18d1      	adds	r1, r2, r3
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c1a:	f7ff ff27 	bl	8004a6c <prvInsertTimerInActiveList>
 8004c1e:	e009      	b.n	8004c34 <prvProcessReceivedCommands+0x144>
 8004c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d104      	bne.n	8004c34 <prvProcessReceivedCommands+0x144>
 8004c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c2c:	f000 fb6a 	bl	8005304 <vPortFree>
 8004c30:	e000      	b.n	8004c34 <prvProcessReceivedCommands+0x144>
 8004c32:	bf00      	nop
 8004c34:	4b07      	ldr	r3, [pc, #28]	; (8004c54 <prvProcessReceivedCommands+0x164>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	1d39      	adds	r1, r7, #4
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fe fc57 	bl	80034f0 <xQueueReceive>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f47f af57 	bne.w	8004af8 <prvProcessReceivedCommands+0x8>
 8004c4a:	bf00      	nop
 8004c4c:	bf00      	nop
 8004c4e:	3730      	adds	r7, #48	; 0x30
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	20000d64 	.word	0x20000d64

08004c58 <prvSwitchTimerLists>:
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	e045      	b.n	8004cec <prvSwitchTimerLists+0x94>
 8004c60:	4b2c      	ldr	r3, [pc, #176]	; (8004d14 <prvSwitchTimerLists+0xbc>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	4b2a      	ldr	r3, [pc, #168]	; (8004d14 <prvSwitchTimerLists+0xbc>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3304      	adds	r3, #4
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7fe f939 	bl	8002ef0 <uxListRemove>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	4798      	blx	r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d12e      	bne.n	8004cec <prvSwitchTimerLists+0x94>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4413      	add	r3, r2
 8004c96:	60bb      	str	r3, [r7, #8]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d90e      	bls.n	8004cbe <prvSwitchTimerLists+0x66>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	605a      	str	r2, [r3, #4]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	611a      	str	r2, [r3, #16]
 8004cac:	4b19      	ldr	r3, [pc, #100]	; (8004d14 <prvSwitchTimerLists+0xbc>)
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	f7fe f8e2 	bl	8002e80 <vListInsert>
 8004cbc:	e016      	b.n	8004cec <prvSwitchTimerLists+0x94>
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f7ff fd9d 	bl	8004808 <xTimerGenericCommand>
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10a      	bne.n	8004cec <prvSwitchTimerLists+0x94>
 8004cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	603b      	str	r3, [r7, #0]
 8004ce8:	bf00      	nop
 8004cea:	e7fe      	b.n	8004cea <prvSwitchTimerLists+0x92>
 8004cec:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <prvSwitchTimerLists+0xbc>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1b4      	bne.n	8004c60 <prvSwitchTimerLists+0x8>
 8004cf6:	4b07      	ldr	r3, [pc, #28]	; (8004d14 <prvSwitchTimerLists+0xbc>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <prvSwitchTimerLists+0xc0>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a04      	ldr	r2, [pc, #16]	; (8004d14 <prvSwitchTimerLists+0xbc>)
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	4a04      	ldr	r2, [pc, #16]	; (8004d18 <prvSwitchTimerLists+0xc0>)
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	bf00      	nop
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	20000d5c 	.word	0x20000d5c
 8004d18:	20000d60 	.word	0x20000d60

08004d1c <prvCheckForValidListAndQueue>:
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	f000 f92b 	bl	8004f7c <vPortEnterCritical>
 8004d26:	4b15      	ldr	r3, [pc, #84]	; (8004d7c <prvCheckForValidListAndQueue+0x60>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d120      	bne.n	8004d70 <prvCheckForValidListAndQueue+0x54>
 8004d2e:	4814      	ldr	r0, [pc, #80]	; (8004d80 <prvCheckForValidListAndQueue+0x64>)
 8004d30:	f7fe f858 	bl	8002de4 <vListInitialise>
 8004d34:	4813      	ldr	r0, [pc, #76]	; (8004d84 <prvCheckForValidListAndQueue+0x68>)
 8004d36:	f7fe f855 	bl	8002de4 <vListInitialise>
 8004d3a:	4b13      	ldr	r3, [pc, #76]	; (8004d88 <prvCheckForValidListAndQueue+0x6c>)
 8004d3c:	4a10      	ldr	r2, [pc, #64]	; (8004d80 <prvCheckForValidListAndQueue+0x64>)
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <prvCheckForValidListAndQueue+0x70>)
 8004d42:	4a10      	ldr	r2, [pc, #64]	; (8004d84 <prvCheckForValidListAndQueue+0x68>)
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	2300      	movs	r3, #0
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	4b11      	ldr	r3, [pc, #68]	; (8004d90 <prvCheckForValidListAndQueue+0x74>)
 8004d4c:	4a11      	ldr	r2, [pc, #68]	; (8004d94 <prvCheckForValidListAndQueue+0x78>)
 8004d4e:	2110      	movs	r1, #16
 8004d50:	200a      	movs	r0, #10
 8004d52:	f7fe f95f 	bl	8003014 <xQueueGenericCreateStatic>
 8004d56:	4603      	mov	r3, r0
 8004d58:	4a08      	ldr	r2, [pc, #32]	; (8004d7c <prvCheckForValidListAndQueue+0x60>)
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	4b07      	ldr	r3, [pc, #28]	; (8004d7c <prvCheckForValidListAndQueue+0x60>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <prvCheckForValidListAndQueue+0x54>
 8004d64:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <prvCheckForValidListAndQueue+0x60>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	490b      	ldr	r1, [pc, #44]	; (8004d98 <prvCheckForValidListAndQueue+0x7c>)
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fe fdb0 	bl	80038d0 <vQueueAddToRegistry>
 8004d70:	f000 f934 	bl	8004fdc <vPortExitCritical>
 8004d74:	bf00      	nop
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000d64 	.word	0x20000d64
 8004d80:	20000d34 	.word	0x20000d34
 8004d84:	20000d48 	.word	0x20000d48
 8004d88:	20000d5c 	.word	0x20000d5c
 8004d8c:	20000d60 	.word	0x20000d60
 8004d90:	20000e10 	.word	0x20000e10
 8004d94:	20000d70 	.word	0x20000d70
 8004d98:	08005f50 	.word	0x08005f50

08004d9c <pxPortInitialiseStack>:
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	3b04      	subs	r3, #4
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	3b04      	subs	r3, #4
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f023 0201 	bic.w	r2, r3, #1
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	3b04      	subs	r3, #4
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	4a08      	ldr	r2, [pc, #32]	; (8004df0 <pxPortInitialiseStack+0x54>)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	3b14      	subs	r3, #20
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	3b20      	subs	r3, #32
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr
 8004df0:	08004df5 	.word	0x08004df5

08004df4 <prvTaskExitError>:
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	607b      	str	r3, [r7, #4]
 8004dfe:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <prvTaskExitError+0x54>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e06:	d00a      	beq.n	8004e1e <prvTaskExitError+0x2a>
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	bf00      	nop
 8004e1c:	e7fe      	b.n	8004e1c <prvTaskExitError+0x28>
 8004e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e22:	f383 8811 	msr	BASEPRI, r3
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	60bb      	str	r3, [r7, #8]
 8004e30:	bf00      	nop
 8004e32:	bf00      	nop
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0fc      	beq.n	8004e34 <prvTaskExitError+0x40>
 8004e3a:	bf00      	nop
 8004e3c:	bf00      	nop
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bc80      	pop	{r7}
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	2000000c 	.word	0x2000000c
 8004e4c:	00000000 	.word	0x00000000

08004e50 <SVC_Handler>:
 8004e50:	4b07      	ldr	r3, [pc, #28]	; (8004e70 <pxCurrentTCBConst2>)
 8004e52:	6819      	ldr	r1, [r3, #0]
 8004e54:	6808      	ldr	r0, [r1, #0]
 8004e56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e5a:	f380 8809 	msr	PSP, r0
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	f04f 0000 	mov.w	r0, #0
 8004e66:	f380 8811 	msr	BASEPRI, r0
 8004e6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004e6e:	4770      	bx	lr

08004e70 <pxCurrentTCBConst2>:
 8004e70:	20000834 	.word	0x20000834
 8004e74:	bf00      	nop
 8004e76:	bf00      	nop

08004e78 <prvPortStartFirstTask>:
 8004e78:	4806      	ldr	r0, [pc, #24]	; (8004e94 <prvPortStartFirstTask+0x1c>)
 8004e7a:	6800      	ldr	r0, [r0, #0]
 8004e7c:	6800      	ldr	r0, [r0, #0]
 8004e7e:	f380 8808 	msr	MSP, r0
 8004e82:	b662      	cpsie	i
 8004e84:	b661      	cpsie	f
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	df00      	svc	0
 8004e90:	bf00      	nop
 8004e92:	bf00      	nop
 8004e94:	e000ed08 	.word	0xe000ed08

08004e98 <xPortStartScheduler>:
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4b32      	ldr	r3, [pc, #200]	; (8004f68 <xPortStartScheduler+0xd0>)
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	607b      	str	r3, [r7, #4]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	22ff      	movs	r2, #255	; 0xff
 8004eae:	701a      	strb	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	70fb      	strb	r3, [r7, #3]
 8004eb8:	78fb      	ldrb	r3, [r7, #3]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	4b2a      	ldr	r3, [pc, #168]	; (8004f6c <xPortStartScheduler+0xd4>)
 8004ec4:	701a      	strb	r2, [r3, #0]
 8004ec6:	4b2a      	ldr	r3, [pc, #168]	; (8004f70 <xPortStartScheduler+0xd8>)
 8004ec8:	2207      	movs	r2, #7
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	e009      	b.n	8004ee2 <xPortStartScheduler+0x4a>
 8004ece:	4b28      	ldr	r3, [pc, #160]	; (8004f70 <xPortStartScheduler+0xd8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	4a26      	ldr	r2, [pc, #152]	; (8004f70 <xPortStartScheduler+0xd8>)
 8004ed6:	6013      	str	r3, [r2, #0]
 8004ed8:	78fb      	ldrb	r3, [r7, #3]
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	70fb      	strb	r3, [r7, #3]
 8004ee2:	78fb      	ldrb	r3, [r7, #3]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eea:	2b80      	cmp	r3, #128	; 0x80
 8004eec:	d0ef      	beq.n	8004ece <xPortStartScheduler+0x36>
 8004eee:	4b20      	ldr	r3, [pc, #128]	; (8004f70 <xPortStartScheduler+0xd8>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f1c3 0307 	rsb	r3, r3, #7
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d00a      	beq.n	8004f10 <xPortStartScheduler+0x78>
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	60bb      	str	r3, [r7, #8]
 8004f0c:	bf00      	nop
 8004f0e:	e7fe      	b.n	8004f0e <xPortStartScheduler+0x76>
 8004f10:	4b17      	ldr	r3, [pc, #92]	; (8004f70 <xPortStartScheduler+0xd8>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	021b      	lsls	r3, r3, #8
 8004f16:	4a16      	ldr	r2, [pc, #88]	; (8004f70 <xPortStartScheduler+0xd8>)
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	4b15      	ldr	r3, [pc, #84]	; (8004f70 <xPortStartScheduler+0xd8>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f22:	4a13      	ldr	r2, [pc, #76]	; (8004f70 <xPortStartScheduler+0xd8>)
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	4b11      	ldr	r3, [pc, #68]	; (8004f74 <xPortStartScheduler+0xdc>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a10      	ldr	r2, [pc, #64]	; (8004f74 <xPortStartScheduler+0xdc>)
 8004f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	4b0e      	ldr	r3, [pc, #56]	; (8004f74 <xPortStartScheduler+0xdc>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a0d      	ldr	r2, [pc, #52]	; (8004f74 <xPortStartScheduler+0xdc>)
 8004f40:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	f000 f8b9 	bl	80050bc <vPortSetupTimerInterrupt>
 8004f4a:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <xPortStartScheduler+0xe0>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	f7ff ff92 	bl	8004e78 <prvPortStartFirstTask>
 8004f54:	f7ff f8c2 	bl	80040dc <vTaskSwitchContext>
 8004f58:	f7ff ff4c 	bl	8004df4 <prvTaskExitError>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	e000e400 	.word	0xe000e400
 8004f6c:	20000e60 	.word	0x20000e60
 8004f70:	20000e64 	.word	0x20000e64
 8004f74:	e000ed20 	.word	0xe000ed20
 8004f78:	2000000c 	.word	0x2000000c

08004f7c <vPortEnterCritical>:
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	607b      	str	r3, [r7, #4]
 8004f94:	bf00      	nop
 8004f96:	4b0f      	ldr	r3, [pc, #60]	; (8004fd4 <vPortEnterCritical+0x58>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	4a0d      	ldr	r2, [pc, #52]	; (8004fd4 <vPortEnterCritical+0x58>)
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <vPortEnterCritical+0x58>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d10f      	bne.n	8004fc8 <vPortEnterCritical+0x4c>
 8004fa8:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <vPortEnterCritical+0x5c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <vPortEnterCritical+0x4c>
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <vPortEnterCritical+0x4a>
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bc80      	pop	{r7}
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	2000000c 	.word	0x2000000c
 8004fd8:	e000ed04 	.word	0xe000ed04

08004fdc <vPortExitCritical>:
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	4b11      	ldr	r3, [pc, #68]	; (8005028 <vPortExitCritical+0x4c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10a      	bne.n	8005000 <vPortExitCritical+0x24>
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	607b      	str	r3, [r7, #4]
 8004ffc:	bf00      	nop
 8004ffe:	e7fe      	b.n	8004ffe <vPortExitCritical+0x22>
 8005000:	4b09      	ldr	r3, [pc, #36]	; (8005028 <vPortExitCritical+0x4c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3b01      	subs	r3, #1
 8005006:	4a08      	ldr	r2, [pc, #32]	; (8005028 <vPortExitCritical+0x4c>)
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	4b07      	ldr	r3, [pc, #28]	; (8005028 <vPortExitCritical+0x4c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d105      	bne.n	800501e <vPortExitCritical+0x42>
 8005012:	2300      	movs	r3, #0
 8005014:	603b      	str	r3, [r7, #0]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	bf00      	nop
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	bc80      	pop	{r7}
 8005026:	4770      	bx	lr
 8005028:	2000000c 	.word	0x2000000c
 800502c:	00000000 	.word	0x00000000

08005030 <PendSV_Handler>:
 8005030:	f3ef 8009 	mrs	r0, PSP
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	4b0d      	ldr	r3, [pc, #52]	; (8005070 <pxCurrentTCBConst>)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005040:	6010      	str	r0, [r2, #0]
 8005042:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005046:	f04f 0050 	mov.w	r0, #80	; 0x50
 800504a:	f380 8811 	msr	BASEPRI, r0
 800504e:	f7ff f845 	bl	80040dc <vTaskSwitchContext>
 8005052:	f04f 0000 	mov.w	r0, #0
 8005056:	f380 8811 	msr	BASEPRI, r0
 800505a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800505e:	6819      	ldr	r1, [r3, #0]
 8005060:	6808      	ldr	r0, [r1, #0]
 8005062:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005066:	f380 8809 	msr	PSP, r0
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	4770      	bx	lr

08005070 <pxCurrentTCBConst>:
 8005070:	20000834 	.word	0x20000834
 8005074:	bf00      	nop
 8005076:	bf00      	nop

08005078 <SysTick_Handler>:
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	607b      	str	r3, [r7, #4]
 8005090:	bf00      	nop
 8005092:	f7fe ff65 	bl	8003f60 <xTaskIncrementTick>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <SysTick_Handler+0x2c>
 800509c:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <SysTick_Handler+0x40>)
 800509e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	2300      	movs	r3, #0
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	bf00      	nop
 80050b0:	bf00      	nop
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	e000ed04 	.word	0xe000ed04

080050bc <vPortSetupTimerInterrupt>:
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
 80050c0:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <vPortSetupTimerInterrupt+0x30>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <vPortSetupTimerInterrupt+0x34>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	4b09      	ldr	r3, [pc, #36]	; (80050f4 <vPortSetupTimerInterrupt+0x38>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a09      	ldr	r2, [pc, #36]	; (80050f8 <vPortSetupTimerInterrupt+0x3c>)
 80050d2:	fba2 2303 	umull	r2, r3, r2, r3
 80050d6:	099b      	lsrs	r3, r3, #6
 80050d8:	4a08      	ldr	r2, [pc, #32]	; (80050fc <vPortSetupTimerInterrupt+0x40>)
 80050da:	3b01      	subs	r3, #1
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	4b03      	ldr	r3, [pc, #12]	; (80050ec <vPortSetupTimerInterrupt+0x30>)
 80050e0:	2207      	movs	r2, #7
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	bf00      	nop
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr
 80050ec:	e000e010 	.word	0xe000e010
 80050f0:	e000e018 	.word	0xe000e018
 80050f4:	20000000 	.word	0x20000000
 80050f8:	10624dd3 	.word	0x10624dd3
 80050fc:	e000e014 	.word	0xe000e014

08005100 <vPortValidateInterruptPriority>:
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	f3ef 8305 	mrs	r3, IPSR
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b0f      	cmp	r3, #15
 8005110:	d914      	bls.n	800513c <vPortValidateInterruptPriority+0x3c>
 8005112:	4a16      	ldr	r2, [pc, #88]	; (800516c <vPortValidateInterruptPriority+0x6c>)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	72fb      	strb	r3, [r7, #11]
 800511c:	4b14      	ldr	r3, [pc, #80]	; (8005170 <vPortValidateInterruptPriority+0x70>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	7afa      	ldrb	r2, [r7, #11]
 8005122:	429a      	cmp	r2, r3
 8005124:	d20a      	bcs.n	800513c <vPortValidateInterruptPriority+0x3c>
 8005126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	607b      	str	r3, [r7, #4]
 8005138:	bf00      	nop
 800513a:	e7fe      	b.n	800513a <vPortValidateInterruptPriority+0x3a>
 800513c:	4b0d      	ldr	r3, [pc, #52]	; (8005174 <vPortValidateInterruptPriority+0x74>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005144:	4b0c      	ldr	r3, [pc, #48]	; (8005178 <vPortValidateInterruptPriority+0x78>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d90a      	bls.n	8005162 <vPortValidateInterruptPriority+0x62>
 800514c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	603b      	str	r3, [r7, #0]
 800515e:	bf00      	nop
 8005160:	e7fe      	b.n	8005160 <vPortValidateInterruptPriority+0x60>
 8005162:	bf00      	nop
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr
 800516c:	e000e3f0 	.word	0xe000e3f0
 8005170:	20000e60 	.word	0x20000e60
 8005174:	e000ed0c 	.word	0xe000ed0c
 8005178:	20000e64 	.word	0x20000e64

0800517c <pvPortMalloc>:
 800517c:	b580      	push	{r7, lr}
 800517e:	b08a      	sub	sp, #40	; 0x28
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	2300      	movs	r3, #0
 8005186:	61fb      	str	r3, [r7, #28]
 8005188:	f7fe fe30 	bl	8003dec <vTaskSuspendAll>
 800518c:	4b58      	ldr	r3, [pc, #352]	; (80052f0 <pvPortMalloc+0x174>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <pvPortMalloc+0x1c>
 8005194:	f000 f910 	bl	80053b8 <prvHeapInit>
 8005198:	4b56      	ldr	r3, [pc, #344]	; (80052f4 <pvPortMalloc+0x178>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4013      	ands	r3, r2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f040 808e 	bne.w	80052c2 <pvPortMalloc+0x146>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01d      	beq.n	80051e8 <pvPortMalloc+0x6c>
 80051ac:	2208      	movs	r2, #8
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4413      	add	r3, r2
 80051b2:	607b      	str	r3, [r7, #4]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d014      	beq.n	80051e8 <pvPortMalloc+0x6c>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f023 0307 	bic.w	r3, r3, #7
 80051c4:	3308      	adds	r3, #8
 80051c6:	607b      	str	r3, [r7, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <pvPortMalloc+0x6c>
 80051d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	bf00      	nop
 80051e6:	e7fe      	b.n	80051e6 <pvPortMalloc+0x6a>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d069      	beq.n	80052c2 <pvPortMalloc+0x146>
 80051ee:	4b42      	ldr	r3, [pc, #264]	; (80052f8 <pvPortMalloc+0x17c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d864      	bhi.n	80052c2 <pvPortMalloc+0x146>
 80051f8:	4b40      	ldr	r3, [pc, #256]	; (80052fc <pvPortMalloc+0x180>)
 80051fa:	623b      	str	r3, [r7, #32]
 80051fc:	4b3f      	ldr	r3, [pc, #252]	; (80052fc <pvPortMalloc+0x180>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
 8005202:	e004      	b.n	800520e <pvPortMalloc+0x92>
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	623b      	str	r3, [r7, #32]
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	429a      	cmp	r2, r3
 8005216:	d903      	bls.n	8005220 <pvPortMalloc+0xa4>
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1f1      	bne.n	8005204 <pvPortMalloc+0x88>
 8005220:	4b33      	ldr	r3, [pc, #204]	; (80052f0 <pvPortMalloc+0x174>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005226:	429a      	cmp	r2, r3
 8005228:	d04b      	beq.n	80052c2 <pvPortMalloc+0x146>
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2208      	movs	r2, #8
 8005230:	4413      	add	r3, r2
 8005232:	61fb      	str	r3, [r7, #28]
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	1ad2      	subs	r2, r2, r3
 8005244:	2308      	movs	r3, #8
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	429a      	cmp	r2, r3
 800524a:	d91f      	bls.n	800528c <pvPortMalloc+0x110>
 800524c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4413      	add	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <pvPortMalloc+0xf8>
 800525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	613b      	str	r3, [r7, #16]
 8005270:	bf00      	nop
 8005272:	e7fe      	b.n	8005272 <pvPortMalloc+0xf6>
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	1ad2      	subs	r2, r2, r3
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	605a      	str	r2, [r3, #4]
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	605a      	str	r2, [r3, #4]
 8005286:	69b8      	ldr	r0, [r7, #24]
 8005288:	f000 f8f8 	bl	800547c <prvInsertBlockIntoFreeList>
 800528c:	4b1a      	ldr	r3, [pc, #104]	; (80052f8 <pvPortMalloc+0x17c>)
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	4a18      	ldr	r2, [pc, #96]	; (80052f8 <pvPortMalloc+0x17c>)
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	4b17      	ldr	r3, [pc, #92]	; (80052f8 <pvPortMalloc+0x17c>)
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	4b18      	ldr	r3, [pc, #96]	; (8005300 <pvPortMalloc+0x184>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d203      	bcs.n	80052ae <pvPortMalloc+0x132>
 80052a6:	4b14      	ldr	r3, [pc, #80]	; (80052f8 <pvPortMalloc+0x17c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a15      	ldr	r2, [pc, #84]	; (8005300 <pvPortMalloc+0x184>)
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <pvPortMalloc+0x178>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	431a      	orrs	r2, r3
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	605a      	str	r2, [r3, #4]
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	2200      	movs	r2, #0
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	f7fe fda1 	bl	8003e08 <xTaskResumeAll>
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	f003 0307 	and.w	r3, r3, #7
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <pvPortMalloc+0x16a>
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	bf00      	nop
 80052e4:	e7fe      	b.n	80052e4 <pvPortMalloc+0x168>
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	4618      	mov	r0, r3
 80052ea:	3728      	adds	r7, #40	; 0x28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	20001e70 	.word	0x20001e70
 80052f4:	20001e7c 	.word	0x20001e7c
 80052f8:	20001e74 	.word	0x20001e74
 80052fc:	20001e68 	.word	0x20001e68
 8005300:	20001e78 	.word	0x20001e78

08005304 <vPortFree>:
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d048      	beq.n	80053a8 <vPortFree+0xa4>
 8005316:	2308      	movs	r3, #8
 8005318:	425b      	negs	r3, r3
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	4413      	add	r3, r2
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	613b      	str	r3, [r7, #16]
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	4b21      	ldr	r3, [pc, #132]	; (80053b0 <vPortFree+0xac>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4013      	ands	r3, r2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10a      	bne.n	8005348 <vPortFree+0x44>
 8005332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005336:	f383 8811 	msr	BASEPRI, r3
 800533a:	f3bf 8f6f 	isb	sy
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	bf00      	nop
 8005346:	e7fe      	b.n	8005346 <vPortFree+0x42>
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <vPortFree+0x62>
 8005350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	60bb      	str	r3, [r7, #8]
 8005362:	bf00      	nop
 8005364:	e7fe      	b.n	8005364 <vPortFree+0x60>
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	4b11      	ldr	r3, [pc, #68]	; (80053b0 <vPortFree+0xac>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4013      	ands	r3, r2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d019      	beq.n	80053a8 <vPortFree+0xa4>
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d115      	bne.n	80053a8 <vPortFree+0xa4>
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	4b0b      	ldr	r3, [pc, #44]	; (80053b0 <vPortFree+0xac>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	43db      	mvns	r3, r3
 8005386:	401a      	ands	r2, r3
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	605a      	str	r2, [r3, #4]
 800538c:	f7fe fd2e 	bl	8003dec <vTaskSuspendAll>
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	4b07      	ldr	r3, [pc, #28]	; (80053b4 <vPortFree+0xb0>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4413      	add	r3, r2
 800539a:	4a06      	ldr	r2, [pc, #24]	; (80053b4 <vPortFree+0xb0>)
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	6938      	ldr	r0, [r7, #16]
 80053a0:	f000 f86c 	bl	800547c <prvInsertBlockIntoFreeList>
 80053a4:	f7fe fd30 	bl	8003e08 <xTaskResumeAll>
 80053a8:	bf00      	nop
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	20001e7c 	.word	0x20001e7c
 80053b4:	20001e74 	.word	0x20001e74

080053b8 <prvHeapInit>:
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053c2:	60bb      	str	r3, [r7, #8]
 80053c4:	4b27      	ldr	r3, [pc, #156]	; (8005464 <prvHeapInit+0xac>)
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00c      	beq.n	80053ec <prvHeapInit+0x34>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	3307      	adds	r3, #7
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0307 	bic.w	r3, r3, #7
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	4a1f      	ldr	r2, [pc, #124]	; (8005464 <prvHeapInit+0xac>)
 80053e8:	4413      	add	r3, r2
 80053ea:	60bb      	str	r3, [r7, #8]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	607b      	str	r3, [r7, #4]
 80053f0:	4a1d      	ldr	r2, [pc, #116]	; (8005468 <prvHeapInit+0xb0>)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	4b1c      	ldr	r3, [pc, #112]	; (8005468 <prvHeapInit+0xb0>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	605a      	str	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	4413      	add	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	2208      	movs	r2, #8
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	1a9b      	subs	r3, r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0307 	bic.w	r3, r3, #7
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4a15      	ldr	r2, [pc, #84]	; (800546c <prvHeapInit+0xb4>)
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	4b14      	ldr	r3, [pc, #80]	; (800546c <prvHeapInit+0xb4>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2200      	movs	r2, #0
 8005420:	605a      	str	r2, [r3, #4]
 8005422:	4b12      	ldr	r3, [pc, #72]	; (800546c <prvHeapInit+0xb4>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	603b      	str	r3, [r7, #0]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	1ad2      	subs	r2, r2, r3
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	605a      	str	r2, [r3, #4]
 8005438:	4b0c      	ldr	r3, [pc, #48]	; (800546c <prvHeapInit+0xb4>)
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	4a0a      	ldr	r2, [pc, #40]	; (8005470 <prvHeapInit+0xb8>)
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	4a09      	ldr	r2, [pc, #36]	; (8005474 <prvHeapInit+0xbc>)
 800544e:	6013      	str	r3, [r2, #0]
 8005450:	4b09      	ldr	r3, [pc, #36]	; (8005478 <prvHeapInit+0xc0>)
 8005452:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	bf00      	nop
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	20000e68 	.word	0x20000e68
 8005468:	20001e68 	.word	0x20001e68
 800546c:	20001e70 	.word	0x20001e70
 8005470:	20001e78 	.word	0x20001e78
 8005474:	20001e74 	.word	0x20001e74
 8005478:	20001e7c 	.word	0x20001e7c

0800547c <prvInsertBlockIntoFreeList>:
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	4b27      	ldr	r3, [pc, #156]	; (8005524 <prvInsertBlockIntoFreeList+0xa8>)
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	e002      	b.n	8005490 <prvInsertBlockIntoFreeList+0x14>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	429a      	cmp	r2, r3
 8005498:	d8f7      	bhi.n	800548a <prvInsertBlockIntoFreeList+0xe>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	60bb      	str	r3, [r7, #8]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	4413      	add	r3, r2
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d108      	bne.n	80054be <prvInsertBlockIntoFreeList+0x42>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	441a      	add	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	605a      	str	r2, [r3, #4]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	607b      	str	r3, [r7, #4]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60bb      	str	r3, [r7, #8]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	441a      	add	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d118      	bne.n	8005504 <prvInsertBlockIntoFreeList+0x88>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	4b14      	ldr	r3, [pc, #80]	; (8005528 <prvInsertBlockIntoFreeList+0xac>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d00d      	beq.n	80054fa <prvInsertBlockIntoFreeList+0x7e>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	441a      	add	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	605a      	str	r2, [r3, #4]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	e008      	b.n	800550c <prvInsertBlockIntoFreeList+0x90>
 80054fa:	4b0b      	ldr	r3, [pc, #44]	; (8005528 <prvInsertBlockIntoFreeList+0xac>)
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	e003      	b.n	800550c <prvInsertBlockIntoFreeList+0x90>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	429a      	cmp	r2, r3
 8005512:	d002      	beq.n	800551a <prvInsertBlockIntoFreeList+0x9e>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	bf00      	nop
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr
 8005524:	20001e68 	.word	0x20001e68
 8005528:	20001e70 	.word	0x20001e70

0800552c <__errno>:
 800552c:	4b01      	ldr	r3, [pc, #4]	; (8005534 <__errno+0x8>)
 800552e:	6818      	ldr	r0, [r3, #0]
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	20000010 	.word	0x20000010

08005538 <__libc_init_array>:
 8005538:	b570      	push	{r4, r5, r6, lr}
 800553a:	2600      	movs	r6, #0
 800553c:	4d0c      	ldr	r5, [pc, #48]	; (8005570 <__libc_init_array+0x38>)
 800553e:	4c0d      	ldr	r4, [pc, #52]	; (8005574 <__libc_init_array+0x3c>)
 8005540:	1b64      	subs	r4, r4, r5
 8005542:	10a4      	asrs	r4, r4, #2
 8005544:	42a6      	cmp	r6, r4
 8005546:	d109      	bne.n	800555c <__libc_init_array+0x24>
 8005548:	f000 fc9c 	bl	8005e84 <_init>
 800554c:	2600      	movs	r6, #0
 800554e:	4d0a      	ldr	r5, [pc, #40]	; (8005578 <__libc_init_array+0x40>)
 8005550:	4c0a      	ldr	r4, [pc, #40]	; (800557c <__libc_init_array+0x44>)
 8005552:	1b64      	subs	r4, r4, r5
 8005554:	10a4      	asrs	r4, r4, #2
 8005556:	42a6      	cmp	r6, r4
 8005558:	d105      	bne.n	8005566 <__libc_init_array+0x2e>
 800555a:	bd70      	pop	{r4, r5, r6, pc}
 800555c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005560:	4798      	blx	r3
 8005562:	3601      	adds	r6, #1
 8005564:	e7ee      	b.n	8005544 <__libc_init_array+0xc>
 8005566:	f855 3b04 	ldr.w	r3, [r5], #4
 800556a:	4798      	blx	r3
 800556c:	3601      	adds	r6, #1
 800556e:	e7f2      	b.n	8005556 <__libc_init_array+0x1e>
 8005570:	080060bc 	.word	0x080060bc
 8005574:	080060bc 	.word	0x080060bc
 8005578:	080060bc 	.word	0x080060bc
 800557c:	080060c0 	.word	0x080060c0

08005580 <memcpy>:
 8005580:	440a      	add	r2, r1
 8005582:	4291      	cmp	r1, r2
 8005584:	f100 33ff 	add.w	r3, r0, #4294967295
 8005588:	d100      	bne.n	800558c <memcpy+0xc>
 800558a:	4770      	bx	lr
 800558c:	b510      	push	{r4, lr}
 800558e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005592:	4291      	cmp	r1, r2
 8005594:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005598:	d1f9      	bne.n	800558e <memcpy+0xe>
 800559a:	bd10      	pop	{r4, pc}

0800559c <memset>:
 800559c:	4603      	mov	r3, r0
 800559e:	4402      	add	r2, r0
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d100      	bne.n	80055a6 <memset+0xa>
 80055a4:	4770      	bx	lr
 80055a6:	f803 1b01 	strb.w	r1, [r3], #1
 80055aa:	e7f9      	b.n	80055a0 <memset+0x4>

080055ac <siprintf>:
 80055ac:	b40e      	push	{r1, r2, r3}
 80055ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055b2:	b500      	push	{lr}
 80055b4:	b09c      	sub	sp, #112	; 0x70
 80055b6:	ab1d      	add	r3, sp, #116	; 0x74
 80055b8:	9002      	str	r0, [sp, #8]
 80055ba:	9006      	str	r0, [sp, #24]
 80055bc:	9107      	str	r1, [sp, #28]
 80055be:	9104      	str	r1, [sp, #16]
 80055c0:	4808      	ldr	r0, [pc, #32]	; (80055e4 <siprintf+0x38>)
 80055c2:	4909      	ldr	r1, [pc, #36]	; (80055e8 <siprintf+0x3c>)
 80055c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80055c8:	9105      	str	r1, [sp, #20]
 80055ca:	6800      	ldr	r0, [r0, #0]
 80055cc:	a902      	add	r1, sp, #8
 80055ce:	9301      	str	r3, [sp, #4]
 80055d0:	f000 f868 	bl	80056a4 <_svfiprintf_r>
 80055d4:	2200      	movs	r2, #0
 80055d6:	9b02      	ldr	r3, [sp, #8]
 80055d8:	701a      	strb	r2, [r3, #0]
 80055da:	b01c      	add	sp, #112	; 0x70
 80055dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80055e0:	b003      	add	sp, #12
 80055e2:	4770      	bx	lr
 80055e4:	20000010 	.word	0x20000010
 80055e8:	ffff0208 	.word	0xffff0208

080055ec <__ssputs_r>:
 80055ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f0:	688e      	ldr	r6, [r1, #8]
 80055f2:	4682      	mov	sl, r0
 80055f4:	429e      	cmp	r6, r3
 80055f6:	460c      	mov	r4, r1
 80055f8:	4690      	mov	r8, r2
 80055fa:	461f      	mov	r7, r3
 80055fc:	d838      	bhi.n	8005670 <__ssputs_r+0x84>
 80055fe:	898a      	ldrh	r2, [r1, #12]
 8005600:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005604:	d032      	beq.n	800566c <__ssputs_r+0x80>
 8005606:	6825      	ldr	r5, [r4, #0]
 8005608:	6909      	ldr	r1, [r1, #16]
 800560a:	3301      	adds	r3, #1
 800560c:	eba5 0901 	sub.w	r9, r5, r1
 8005610:	6965      	ldr	r5, [r4, #20]
 8005612:	444b      	add	r3, r9
 8005614:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005618:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800561c:	106d      	asrs	r5, r5, #1
 800561e:	429d      	cmp	r5, r3
 8005620:	bf38      	it	cc
 8005622:	461d      	movcc	r5, r3
 8005624:	0553      	lsls	r3, r2, #21
 8005626:	d531      	bpl.n	800568c <__ssputs_r+0xa0>
 8005628:	4629      	mov	r1, r5
 800562a:	f000 fb61 	bl	8005cf0 <_malloc_r>
 800562e:	4606      	mov	r6, r0
 8005630:	b950      	cbnz	r0, 8005648 <__ssputs_r+0x5c>
 8005632:	230c      	movs	r3, #12
 8005634:	f04f 30ff 	mov.w	r0, #4294967295
 8005638:	f8ca 3000 	str.w	r3, [sl]
 800563c:	89a3      	ldrh	r3, [r4, #12]
 800563e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005642:	81a3      	strh	r3, [r4, #12]
 8005644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005648:	464a      	mov	r2, r9
 800564a:	6921      	ldr	r1, [r4, #16]
 800564c:	f7ff ff98 	bl	8005580 <memcpy>
 8005650:	89a3      	ldrh	r3, [r4, #12]
 8005652:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800565a:	81a3      	strh	r3, [r4, #12]
 800565c:	6126      	str	r6, [r4, #16]
 800565e:	444e      	add	r6, r9
 8005660:	6026      	str	r6, [r4, #0]
 8005662:	463e      	mov	r6, r7
 8005664:	6165      	str	r5, [r4, #20]
 8005666:	eba5 0509 	sub.w	r5, r5, r9
 800566a:	60a5      	str	r5, [r4, #8]
 800566c:	42be      	cmp	r6, r7
 800566e:	d900      	bls.n	8005672 <__ssputs_r+0x86>
 8005670:	463e      	mov	r6, r7
 8005672:	4632      	mov	r2, r6
 8005674:	4641      	mov	r1, r8
 8005676:	6820      	ldr	r0, [r4, #0]
 8005678:	f000 fab8 	bl	8005bec <memmove>
 800567c:	68a3      	ldr	r3, [r4, #8]
 800567e:	2000      	movs	r0, #0
 8005680:	1b9b      	subs	r3, r3, r6
 8005682:	60a3      	str	r3, [r4, #8]
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	4433      	add	r3, r6
 8005688:	6023      	str	r3, [r4, #0]
 800568a:	e7db      	b.n	8005644 <__ssputs_r+0x58>
 800568c:	462a      	mov	r2, r5
 800568e:	f000 fba3 	bl	8005dd8 <_realloc_r>
 8005692:	4606      	mov	r6, r0
 8005694:	2800      	cmp	r0, #0
 8005696:	d1e1      	bne.n	800565c <__ssputs_r+0x70>
 8005698:	4650      	mov	r0, sl
 800569a:	6921      	ldr	r1, [r4, #16]
 800569c:	f000 fac0 	bl	8005c20 <_free_r>
 80056a0:	e7c7      	b.n	8005632 <__ssputs_r+0x46>
	...

080056a4 <_svfiprintf_r>:
 80056a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a8:	4698      	mov	r8, r3
 80056aa:	898b      	ldrh	r3, [r1, #12]
 80056ac:	4607      	mov	r7, r0
 80056ae:	061b      	lsls	r3, r3, #24
 80056b0:	460d      	mov	r5, r1
 80056b2:	4614      	mov	r4, r2
 80056b4:	b09d      	sub	sp, #116	; 0x74
 80056b6:	d50e      	bpl.n	80056d6 <_svfiprintf_r+0x32>
 80056b8:	690b      	ldr	r3, [r1, #16]
 80056ba:	b963      	cbnz	r3, 80056d6 <_svfiprintf_r+0x32>
 80056bc:	2140      	movs	r1, #64	; 0x40
 80056be:	f000 fb17 	bl	8005cf0 <_malloc_r>
 80056c2:	6028      	str	r0, [r5, #0]
 80056c4:	6128      	str	r0, [r5, #16]
 80056c6:	b920      	cbnz	r0, 80056d2 <_svfiprintf_r+0x2e>
 80056c8:	230c      	movs	r3, #12
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	f04f 30ff 	mov.w	r0, #4294967295
 80056d0:	e0d1      	b.n	8005876 <_svfiprintf_r+0x1d2>
 80056d2:	2340      	movs	r3, #64	; 0x40
 80056d4:	616b      	str	r3, [r5, #20]
 80056d6:	2300      	movs	r3, #0
 80056d8:	9309      	str	r3, [sp, #36]	; 0x24
 80056da:	2320      	movs	r3, #32
 80056dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056e0:	2330      	movs	r3, #48	; 0x30
 80056e2:	f04f 0901 	mov.w	r9, #1
 80056e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80056ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005890 <_svfiprintf_r+0x1ec>
 80056ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056f2:	4623      	mov	r3, r4
 80056f4:	469a      	mov	sl, r3
 80056f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056fa:	b10a      	cbz	r2, 8005700 <_svfiprintf_r+0x5c>
 80056fc:	2a25      	cmp	r2, #37	; 0x25
 80056fe:	d1f9      	bne.n	80056f4 <_svfiprintf_r+0x50>
 8005700:	ebba 0b04 	subs.w	fp, sl, r4
 8005704:	d00b      	beq.n	800571e <_svfiprintf_r+0x7a>
 8005706:	465b      	mov	r3, fp
 8005708:	4622      	mov	r2, r4
 800570a:	4629      	mov	r1, r5
 800570c:	4638      	mov	r0, r7
 800570e:	f7ff ff6d 	bl	80055ec <__ssputs_r>
 8005712:	3001      	adds	r0, #1
 8005714:	f000 80aa 	beq.w	800586c <_svfiprintf_r+0x1c8>
 8005718:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800571a:	445a      	add	r2, fp
 800571c:	9209      	str	r2, [sp, #36]	; 0x24
 800571e:	f89a 3000 	ldrb.w	r3, [sl]
 8005722:	2b00      	cmp	r3, #0
 8005724:	f000 80a2 	beq.w	800586c <_svfiprintf_r+0x1c8>
 8005728:	2300      	movs	r3, #0
 800572a:	f04f 32ff 	mov.w	r2, #4294967295
 800572e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005732:	f10a 0a01 	add.w	sl, sl, #1
 8005736:	9304      	str	r3, [sp, #16]
 8005738:	9307      	str	r3, [sp, #28]
 800573a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800573e:	931a      	str	r3, [sp, #104]	; 0x68
 8005740:	4654      	mov	r4, sl
 8005742:	2205      	movs	r2, #5
 8005744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005748:	4851      	ldr	r0, [pc, #324]	; (8005890 <_svfiprintf_r+0x1ec>)
 800574a:	f000 fa41 	bl	8005bd0 <memchr>
 800574e:	9a04      	ldr	r2, [sp, #16]
 8005750:	b9d8      	cbnz	r0, 800578a <_svfiprintf_r+0xe6>
 8005752:	06d0      	lsls	r0, r2, #27
 8005754:	bf44      	itt	mi
 8005756:	2320      	movmi	r3, #32
 8005758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800575c:	0711      	lsls	r1, r2, #28
 800575e:	bf44      	itt	mi
 8005760:	232b      	movmi	r3, #43	; 0x2b
 8005762:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005766:	f89a 3000 	ldrb.w	r3, [sl]
 800576a:	2b2a      	cmp	r3, #42	; 0x2a
 800576c:	d015      	beq.n	800579a <_svfiprintf_r+0xf6>
 800576e:	4654      	mov	r4, sl
 8005770:	2000      	movs	r0, #0
 8005772:	f04f 0c0a 	mov.w	ip, #10
 8005776:	9a07      	ldr	r2, [sp, #28]
 8005778:	4621      	mov	r1, r4
 800577a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800577e:	3b30      	subs	r3, #48	; 0x30
 8005780:	2b09      	cmp	r3, #9
 8005782:	d94e      	bls.n	8005822 <_svfiprintf_r+0x17e>
 8005784:	b1b0      	cbz	r0, 80057b4 <_svfiprintf_r+0x110>
 8005786:	9207      	str	r2, [sp, #28]
 8005788:	e014      	b.n	80057b4 <_svfiprintf_r+0x110>
 800578a:	eba0 0308 	sub.w	r3, r0, r8
 800578e:	fa09 f303 	lsl.w	r3, r9, r3
 8005792:	4313      	orrs	r3, r2
 8005794:	46a2      	mov	sl, r4
 8005796:	9304      	str	r3, [sp, #16]
 8005798:	e7d2      	b.n	8005740 <_svfiprintf_r+0x9c>
 800579a:	9b03      	ldr	r3, [sp, #12]
 800579c:	1d19      	adds	r1, r3, #4
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	9103      	str	r1, [sp, #12]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	bfbb      	ittet	lt
 80057a6:	425b      	neglt	r3, r3
 80057a8:	f042 0202 	orrlt.w	r2, r2, #2
 80057ac:	9307      	strge	r3, [sp, #28]
 80057ae:	9307      	strlt	r3, [sp, #28]
 80057b0:	bfb8      	it	lt
 80057b2:	9204      	strlt	r2, [sp, #16]
 80057b4:	7823      	ldrb	r3, [r4, #0]
 80057b6:	2b2e      	cmp	r3, #46	; 0x2e
 80057b8:	d10c      	bne.n	80057d4 <_svfiprintf_r+0x130>
 80057ba:	7863      	ldrb	r3, [r4, #1]
 80057bc:	2b2a      	cmp	r3, #42	; 0x2a
 80057be:	d135      	bne.n	800582c <_svfiprintf_r+0x188>
 80057c0:	9b03      	ldr	r3, [sp, #12]
 80057c2:	3402      	adds	r4, #2
 80057c4:	1d1a      	adds	r2, r3, #4
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	9203      	str	r2, [sp, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	bfb8      	it	lt
 80057ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80057d2:	9305      	str	r3, [sp, #20]
 80057d4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005894 <_svfiprintf_r+0x1f0>
 80057d8:	2203      	movs	r2, #3
 80057da:	4650      	mov	r0, sl
 80057dc:	7821      	ldrb	r1, [r4, #0]
 80057de:	f000 f9f7 	bl	8005bd0 <memchr>
 80057e2:	b140      	cbz	r0, 80057f6 <_svfiprintf_r+0x152>
 80057e4:	2340      	movs	r3, #64	; 0x40
 80057e6:	eba0 000a 	sub.w	r0, r0, sl
 80057ea:	fa03 f000 	lsl.w	r0, r3, r0
 80057ee:	9b04      	ldr	r3, [sp, #16]
 80057f0:	3401      	adds	r4, #1
 80057f2:	4303      	orrs	r3, r0
 80057f4:	9304      	str	r3, [sp, #16]
 80057f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057fa:	2206      	movs	r2, #6
 80057fc:	4826      	ldr	r0, [pc, #152]	; (8005898 <_svfiprintf_r+0x1f4>)
 80057fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005802:	f000 f9e5 	bl	8005bd0 <memchr>
 8005806:	2800      	cmp	r0, #0
 8005808:	d038      	beq.n	800587c <_svfiprintf_r+0x1d8>
 800580a:	4b24      	ldr	r3, [pc, #144]	; (800589c <_svfiprintf_r+0x1f8>)
 800580c:	bb1b      	cbnz	r3, 8005856 <_svfiprintf_r+0x1b2>
 800580e:	9b03      	ldr	r3, [sp, #12]
 8005810:	3307      	adds	r3, #7
 8005812:	f023 0307 	bic.w	r3, r3, #7
 8005816:	3308      	adds	r3, #8
 8005818:	9303      	str	r3, [sp, #12]
 800581a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800581c:	4433      	add	r3, r6
 800581e:	9309      	str	r3, [sp, #36]	; 0x24
 8005820:	e767      	b.n	80056f2 <_svfiprintf_r+0x4e>
 8005822:	460c      	mov	r4, r1
 8005824:	2001      	movs	r0, #1
 8005826:	fb0c 3202 	mla	r2, ip, r2, r3
 800582a:	e7a5      	b.n	8005778 <_svfiprintf_r+0xd4>
 800582c:	2300      	movs	r3, #0
 800582e:	f04f 0c0a 	mov.w	ip, #10
 8005832:	4619      	mov	r1, r3
 8005834:	3401      	adds	r4, #1
 8005836:	9305      	str	r3, [sp, #20]
 8005838:	4620      	mov	r0, r4
 800583a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800583e:	3a30      	subs	r2, #48	; 0x30
 8005840:	2a09      	cmp	r2, #9
 8005842:	d903      	bls.n	800584c <_svfiprintf_r+0x1a8>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0c5      	beq.n	80057d4 <_svfiprintf_r+0x130>
 8005848:	9105      	str	r1, [sp, #20]
 800584a:	e7c3      	b.n	80057d4 <_svfiprintf_r+0x130>
 800584c:	4604      	mov	r4, r0
 800584e:	2301      	movs	r3, #1
 8005850:	fb0c 2101 	mla	r1, ip, r1, r2
 8005854:	e7f0      	b.n	8005838 <_svfiprintf_r+0x194>
 8005856:	ab03      	add	r3, sp, #12
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	462a      	mov	r2, r5
 800585c:	4638      	mov	r0, r7
 800585e:	4b10      	ldr	r3, [pc, #64]	; (80058a0 <_svfiprintf_r+0x1fc>)
 8005860:	a904      	add	r1, sp, #16
 8005862:	f3af 8000 	nop.w
 8005866:	1c42      	adds	r2, r0, #1
 8005868:	4606      	mov	r6, r0
 800586a:	d1d6      	bne.n	800581a <_svfiprintf_r+0x176>
 800586c:	89ab      	ldrh	r3, [r5, #12]
 800586e:	065b      	lsls	r3, r3, #25
 8005870:	f53f af2c 	bmi.w	80056cc <_svfiprintf_r+0x28>
 8005874:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005876:	b01d      	add	sp, #116	; 0x74
 8005878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800587c:	ab03      	add	r3, sp, #12
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	462a      	mov	r2, r5
 8005882:	4638      	mov	r0, r7
 8005884:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <_svfiprintf_r+0x1fc>)
 8005886:	a904      	add	r1, sp, #16
 8005888:	f000 f87c 	bl	8005984 <_printf_i>
 800588c:	e7eb      	b.n	8005866 <_svfiprintf_r+0x1c2>
 800588e:	bf00      	nop
 8005890:	08006088 	.word	0x08006088
 8005894:	0800608e 	.word	0x0800608e
 8005898:	08006092 	.word	0x08006092
 800589c:	00000000 	.word	0x00000000
 80058a0:	080055ed 	.word	0x080055ed

080058a4 <_printf_common>:
 80058a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058a8:	4616      	mov	r6, r2
 80058aa:	4699      	mov	r9, r3
 80058ac:	688a      	ldr	r2, [r1, #8]
 80058ae:	690b      	ldr	r3, [r1, #16]
 80058b0:	4607      	mov	r7, r0
 80058b2:	4293      	cmp	r3, r2
 80058b4:	bfb8      	it	lt
 80058b6:	4613      	movlt	r3, r2
 80058b8:	6033      	str	r3, [r6, #0]
 80058ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058be:	460c      	mov	r4, r1
 80058c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058c4:	b10a      	cbz	r2, 80058ca <_printf_common+0x26>
 80058c6:	3301      	adds	r3, #1
 80058c8:	6033      	str	r3, [r6, #0]
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	0699      	lsls	r1, r3, #26
 80058ce:	bf42      	ittt	mi
 80058d0:	6833      	ldrmi	r3, [r6, #0]
 80058d2:	3302      	addmi	r3, #2
 80058d4:	6033      	strmi	r3, [r6, #0]
 80058d6:	6825      	ldr	r5, [r4, #0]
 80058d8:	f015 0506 	ands.w	r5, r5, #6
 80058dc:	d106      	bne.n	80058ec <_printf_common+0x48>
 80058de:	f104 0a19 	add.w	sl, r4, #25
 80058e2:	68e3      	ldr	r3, [r4, #12]
 80058e4:	6832      	ldr	r2, [r6, #0]
 80058e6:	1a9b      	subs	r3, r3, r2
 80058e8:	42ab      	cmp	r3, r5
 80058ea:	dc28      	bgt.n	800593e <_printf_common+0x9a>
 80058ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058f0:	1e13      	subs	r3, r2, #0
 80058f2:	6822      	ldr	r2, [r4, #0]
 80058f4:	bf18      	it	ne
 80058f6:	2301      	movne	r3, #1
 80058f8:	0692      	lsls	r2, r2, #26
 80058fa:	d42d      	bmi.n	8005958 <_printf_common+0xb4>
 80058fc:	4649      	mov	r1, r9
 80058fe:	4638      	mov	r0, r7
 8005900:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005904:	47c0      	blx	r8
 8005906:	3001      	adds	r0, #1
 8005908:	d020      	beq.n	800594c <_printf_common+0xa8>
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	68e5      	ldr	r5, [r4, #12]
 800590e:	f003 0306 	and.w	r3, r3, #6
 8005912:	2b04      	cmp	r3, #4
 8005914:	bf18      	it	ne
 8005916:	2500      	movne	r5, #0
 8005918:	6832      	ldr	r2, [r6, #0]
 800591a:	f04f 0600 	mov.w	r6, #0
 800591e:	68a3      	ldr	r3, [r4, #8]
 8005920:	bf08      	it	eq
 8005922:	1aad      	subeq	r5, r5, r2
 8005924:	6922      	ldr	r2, [r4, #16]
 8005926:	bf08      	it	eq
 8005928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800592c:	4293      	cmp	r3, r2
 800592e:	bfc4      	itt	gt
 8005930:	1a9b      	subgt	r3, r3, r2
 8005932:	18ed      	addgt	r5, r5, r3
 8005934:	341a      	adds	r4, #26
 8005936:	42b5      	cmp	r5, r6
 8005938:	d11a      	bne.n	8005970 <_printf_common+0xcc>
 800593a:	2000      	movs	r0, #0
 800593c:	e008      	b.n	8005950 <_printf_common+0xac>
 800593e:	2301      	movs	r3, #1
 8005940:	4652      	mov	r2, sl
 8005942:	4649      	mov	r1, r9
 8005944:	4638      	mov	r0, r7
 8005946:	47c0      	blx	r8
 8005948:	3001      	adds	r0, #1
 800594a:	d103      	bne.n	8005954 <_printf_common+0xb0>
 800594c:	f04f 30ff 	mov.w	r0, #4294967295
 8005950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005954:	3501      	adds	r5, #1
 8005956:	e7c4      	b.n	80058e2 <_printf_common+0x3e>
 8005958:	2030      	movs	r0, #48	; 0x30
 800595a:	18e1      	adds	r1, r4, r3
 800595c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005960:	1c5a      	adds	r2, r3, #1
 8005962:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005966:	4422      	add	r2, r4
 8005968:	3302      	adds	r3, #2
 800596a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800596e:	e7c5      	b.n	80058fc <_printf_common+0x58>
 8005970:	2301      	movs	r3, #1
 8005972:	4622      	mov	r2, r4
 8005974:	4649      	mov	r1, r9
 8005976:	4638      	mov	r0, r7
 8005978:	47c0      	blx	r8
 800597a:	3001      	adds	r0, #1
 800597c:	d0e6      	beq.n	800594c <_printf_common+0xa8>
 800597e:	3601      	adds	r6, #1
 8005980:	e7d9      	b.n	8005936 <_printf_common+0x92>
	...

08005984 <_printf_i>:
 8005984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005988:	7e0f      	ldrb	r7, [r1, #24]
 800598a:	4691      	mov	r9, r2
 800598c:	2f78      	cmp	r7, #120	; 0x78
 800598e:	4680      	mov	r8, r0
 8005990:	460c      	mov	r4, r1
 8005992:	469a      	mov	sl, r3
 8005994:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800599a:	d807      	bhi.n	80059ac <_printf_i+0x28>
 800599c:	2f62      	cmp	r7, #98	; 0x62
 800599e:	d80a      	bhi.n	80059b6 <_printf_i+0x32>
 80059a0:	2f00      	cmp	r7, #0
 80059a2:	f000 80d9 	beq.w	8005b58 <_printf_i+0x1d4>
 80059a6:	2f58      	cmp	r7, #88	; 0x58
 80059a8:	f000 80a4 	beq.w	8005af4 <_printf_i+0x170>
 80059ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059b4:	e03a      	b.n	8005a2c <_printf_i+0xa8>
 80059b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059ba:	2b15      	cmp	r3, #21
 80059bc:	d8f6      	bhi.n	80059ac <_printf_i+0x28>
 80059be:	a101      	add	r1, pc, #4	; (adr r1, 80059c4 <_printf_i+0x40>)
 80059c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059c4:	08005a1d 	.word	0x08005a1d
 80059c8:	08005a31 	.word	0x08005a31
 80059cc:	080059ad 	.word	0x080059ad
 80059d0:	080059ad 	.word	0x080059ad
 80059d4:	080059ad 	.word	0x080059ad
 80059d8:	080059ad 	.word	0x080059ad
 80059dc:	08005a31 	.word	0x08005a31
 80059e0:	080059ad 	.word	0x080059ad
 80059e4:	080059ad 	.word	0x080059ad
 80059e8:	080059ad 	.word	0x080059ad
 80059ec:	080059ad 	.word	0x080059ad
 80059f0:	08005b3f 	.word	0x08005b3f
 80059f4:	08005a61 	.word	0x08005a61
 80059f8:	08005b21 	.word	0x08005b21
 80059fc:	080059ad 	.word	0x080059ad
 8005a00:	080059ad 	.word	0x080059ad
 8005a04:	08005b61 	.word	0x08005b61
 8005a08:	080059ad 	.word	0x080059ad
 8005a0c:	08005a61 	.word	0x08005a61
 8005a10:	080059ad 	.word	0x080059ad
 8005a14:	080059ad 	.word	0x080059ad
 8005a18:	08005b29 	.word	0x08005b29
 8005a1c:	682b      	ldr	r3, [r5, #0]
 8005a1e:	1d1a      	adds	r2, r3, #4
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	602a      	str	r2, [r5, #0]
 8005a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e0a4      	b.n	8005b7a <_printf_i+0x1f6>
 8005a30:	6820      	ldr	r0, [r4, #0]
 8005a32:	6829      	ldr	r1, [r5, #0]
 8005a34:	0606      	lsls	r6, r0, #24
 8005a36:	f101 0304 	add.w	r3, r1, #4
 8005a3a:	d50a      	bpl.n	8005a52 <_printf_i+0xce>
 8005a3c:	680e      	ldr	r6, [r1, #0]
 8005a3e:	602b      	str	r3, [r5, #0]
 8005a40:	2e00      	cmp	r6, #0
 8005a42:	da03      	bge.n	8005a4c <_printf_i+0xc8>
 8005a44:	232d      	movs	r3, #45	; 0x2d
 8005a46:	4276      	negs	r6, r6
 8005a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a4c:	230a      	movs	r3, #10
 8005a4e:	485e      	ldr	r0, [pc, #376]	; (8005bc8 <_printf_i+0x244>)
 8005a50:	e019      	b.n	8005a86 <_printf_i+0x102>
 8005a52:	680e      	ldr	r6, [r1, #0]
 8005a54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a58:	602b      	str	r3, [r5, #0]
 8005a5a:	bf18      	it	ne
 8005a5c:	b236      	sxthne	r6, r6
 8005a5e:	e7ef      	b.n	8005a40 <_printf_i+0xbc>
 8005a60:	682b      	ldr	r3, [r5, #0]
 8005a62:	6820      	ldr	r0, [r4, #0]
 8005a64:	1d19      	adds	r1, r3, #4
 8005a66:	6029      	str	r1, [r5, #0]
 8005a68:	0601      	lsls	r1, r0, #24
 8005a6a:	d501      	bpl.n	8005a70 <_printf_i+0xec>
 8005a6c:	681e      	ldr	r6, [r3, #0]
 8005a6e:	e002      	b.n	8005a76 <_printf_i+0xf2>
 8005a70:	0646      	lsls	r6, r0, #25
 8005a72:	d5fb      	bpl.n	8005a6c <_printf_i+0xe8>
 8005a74:	881e      	ldrh	r6, [r3, #0]
 8005a76:	2f6f      	cmp	r7, #111	; 0x6f
 8005a78:	bf0c      	ite	eq
 8005a7a:	2308      	moveq	r3, #8
 8005a7c:	230a      	movne	r3, #10
 8005a7e:	4852      	ldr	r0, [pc, #328]	; (8005bc8 <_printf_i+0x244>)
 8005a80:	2100      	movs	r1, #0
 8005a82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a86:	6865      	ldr	r5, [r4, #4]
 8005a88:	2d00      	cmp	r5, #0
 8005a8a:	bfa8      	it	ge
 8005a8c:	6821      	ldrge	r1, [r4, #0]
 8005a8e:	60a5      	str	r5, [r4, #8]
 8005a90:	bfa4      	itt	ge
 8005a92:	f021 0104 	bicge.w	r1, r1, #4
 8005a96:	6021      	strge	r1, [r4, #0]
 8005a98:	b90e      	cbnz	r6, 8005a9e <_printf_i+0x11a>
 8005a9a:	2d00      	cmp	r5, #0
 8005a9c:	d04d      	beq.n	8005b3a <_printf_i+0x1b6>
 8005a9e:	4615      	mov	r5, r2
 8005aa0:	fbb6 f1f3 	udiv	r1, r6, r3
 8005aa4:	fb03 6711 	mls	r7, r3, r1, r6
 8005aa8:	5dc7      	ldrb	r7, [r0, r7]
 8005aaa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005aae:	4637      	mov	r7, r6
 8005ab0:	42bb      	cmp	r3, r7
 8005ab2:	460e      	mov	r6, r1
 8005ab4:	d9f4      	bls.n	8005aa0 <_printf_i+0x11c>
 8005ab6:	2b08      	cmp	r3, #8
 8005ab8:	d10b      	bne.n	8005ad2 <_printf_i+0x14e>
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	07de      	lsls	r6, r3, #31
 8005abe:	d508      	bpl.n	8005ad2 <_printf_i+0x14e>
 8005ac0:	6923      	ldr	r3, [r4, #16]
 8005ac2:	6861      	ldr	r1, [r4, #4]
 8005ac4:	4299      	cmp	r1, r3
 8005ac6:	bfde      	ittt	le
 8005ac8:	2330      	movle	r3, #48	; 0x30
 8005aca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ace:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ad2:	1b52      	subs	r2, r2, r5
 8005ad4:	6122      	str	r2, [r4, #16]
 8005ad6:	464b      	mov	r3, r9
 8005ad8:	4621      	mov	r1, r4
 8005ada:	4640      	mov	r0, r8
 8005adc:	f8cd a000 	str.w	sl, [sp]
 8005ae0:	aa03      	add	r2, sp, #12
 8005ae2:	f7ff fedf 	bl	80058a4 <_printf_common>
 8005ae6:	3001      	adds	r0, #1
 8005ae8:	d14c      	bne.n	8005b84 <_printf_i+0x200>
 8005aea:	f04f 30ff 	mov.w	r0, #4294967295
 8005aee:	b004      	add	sp, #16
 8005af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af4:	4834      	ldr	r0, [pc, #208]	; (8005bc8 <_printf_i+0x244>)
 8005af6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005afa:	6829      	ldr	r1, [r5, #0]
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b02:	6029      	str	r1, [r5, #0]
 8005b04:	061d      	lsls	r5, r3, #24
 8005b06:	d514      	bpl.n	8005b32 <_printf_i+0x1ae>
 8005b08:	07df      	lsls	r7, r3, #31
 8005b0a:	bf44      	itt	mi
 8005b0c:	f043 0320 	orrmi.w	r3, r3, #32
 8005b10:	6023      	strmi	r3, [r4, #0]
 8005b12:	b91e      	cbnz	r6, 8005b1c <_printf_i+0x198>
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	f023 0320 	bic.w	r3, r3, #32
 8005b1a:	6023      	str	r3, [r4, #0]
 8005b1c:	2310      	movs	r3, #16
 8005b1e:	e7af      	b.n	8005a80 <_printf_i+0xfc>
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	f043 0320 	orr.w	r3, r3, #32
 8005b26:	6023      	str	r3, [r4, #0]
 8005b28:	2378      	movs	r3, #120	; 0x78
 8005b2a:	4828      	ldr	r0, [pc, #160]	; (8005bcc <_printf_i+0x248>)
 8005b2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b30:	e7e3      	b.n	8005afa <_printf_i+0x176>
 8005b32:	0659      	lsls	r1, r3, #25
 8005b34:	bf48      	it	mi
 8005b36:	b2b6      	uxthmi	r6, r6
 8005b38:	e7e6      	b.n	8005b08 <_printf_i+0x184>
 8005b3a:	4615      	mov	r5, r2
 8005b3c:	e7bb      	b.n	8005ab6 <_printf_i+0x132>
 8005b3e:	682b      	ldr	r3, [r5, #0]
 8005b40:	6826      	ldr	r6, [r4, #0]
 8005b42:	1d18      	adds	r0, r3, #4
 8005b44:	6961      	ldr	r1, [r4, #20]
 8005b46:	6028      	str	r0, [r5, #0]
 8005b48:	0635      	lsls	r5, r6, #24
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	d501      	bpl.n	8005b52 <_printf_i+0x1ce>
 8005b4e:	6019      	str	r1, [r3, #0]
 8005b50:	e002      	b.n	8005b58 <_printf_i+0x1d4>
 8005b52:	0670      	lsls	r0, r6, #25
 8005b54:	d5fb      	bpl.n	8005b4e <_printf_i+0x1ca>
 8005b56:	8019      	strh	r1, [r3, #0]
 8005b58:	2300      	movs	r3, #0
 8005b5a:	4615      	mov	r5, r2
 8005b5c:	6123      	str	r3, [r4, #16]
 8005b5e:	e7ba      	b.n	8005ad6 <_printf_i+0x152>
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	2100      	movs	r1, #0
 8005b64:	1d1a      	adds	r2, r3, #4
 8005b66:	602a      	str	r2, [r5, #0]
 8005b68:	681d      	ldr	r5, [r3, #0]
 8005b6a:	6862      	ldr	r2, [r4, #4]
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	f000 f82f 	bl	8005bd0 <memchr>
 8005b72:	b108      	cbz	r0, 8005b78 <_printf_i+0x1f4>
 8005b74:	1b40      	subs	r0, r0, r5
 8005b76:	6060      	str	r0, [r4, #4]
 8005b78:	6863      	ldr	r3, [r4, #4]
 8005b7a:	6123      	str	r3, [r4, #16]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b82:	e7a8      	b.n	8005ad6 <_printf_i+0x152>
 8005b84:	462a      	mov	r2, r5
 8005b86:	4649      	mov	r1, r9
 8005b88:	4640      	mov	r0, r8
 8005b8a:	6923      	ldr	r3, [r4, #16]
 8005b8c:	47d0      	blx	sl
 8005b8e:	3001      	adds	r0, #1
 8005b90:	d0ab      	beq.n	8005aea <_printf_i+0x166>
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	079b      	lsls	r3, r3, #30
 8005b96:	d413      	bmi.n	8005bc0 <_printf_i+0x23c>
 8005b98:	68e0      	ldr	r0, [r4, #12]
 8005b9a:	9b03      	ldr	r3, [sp, #12]
 8005b9c:	4298      	cmp	r0, r3
 8005b9e:	bfb8      	it	lt
 8005ba0:	4618      	movlt	r0, r3
 8005ba2:	e7a4      	b.n	8005aee <_printf_i+0x16a>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	4632      	mov	r2, r6
 8005ba8:	4649      	mov	r1, r9
 8005baa:	4640      	mov	r0, r8
 8005bac:	47d0      	blx	sl
 8005bae:	3001      	adds	r0, #1
 8005bb0:	d09b      	beq.n	8005aea <_printf_i+0x166>
 8005bb2:	3501      	adds	r5, #1
 8005bb4:	68e3      	ldr	r3, [r4, #12]
 8005bb6:	9903      	ldr	r1, [sp, #12]
 8005bb8:	1a5b      	subs	r3, r3, r1
 8005bba:	42ab      	cmp	r3, r5
 8005bbc:	dcf2      	bgt.n	8005ba4 <_printf_i+0x220>
 8005bbe:	e7eb      	b.n	8005b98 <_printf_i+0x214>
 8005bc0:	2500      	movs	r5, #0
 8005bc2:	f104 0619 	add.w	r6, r4, #25
 8005bc6:	e7f5      	b.n	8005bb4 <_printf_i+0x230>
 8005bc8:	08006099 	.word	0x08006099
 8005bcc:	080060aa 	.word	0x080060aa

08005bd0 <memchr>:
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	b510      	push	{r4, lr}
 8005bd4:	b2c9      	uxtb	r1, r1
 8005bd6:	4402      	add	r2, r0
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	4618      	mov	r0, r3
 8005bdc:	d101      	bne.n	8005be2 <memchr+0x12>
 8005bde:	2000      	movs	r0, #0
 8005be0:	e003      	b.n	8005bea <memchr+0x1a>
 8005be2:	7804      	ldrb	r4, [r0, #0]
 8005be4:	3301      	adds	r3, #1
 8005be6:	428c      	cmp	r4, r1
 8005be8:	d1f6      	bne.n	8005bd8 <memchr+0x8>
 8005bea:	bd10      	pop	{r4, pc}

08005bec <memmove>:
 8005bec:	4288      	cmp	r0, r1
 8005bee:	b510      	push	{r4, lr}
 8005bf0:	eb01 0402 	add.w	r4, r1, r2
 8005bf4:	d902      	bls.n	8005bfc <memmove+0x10>
 8005bf6:	4284      	cmp	r4, r0
 8005bf8:	4623      	mov	r3, r4
 8005bfa:	d807      	bhi.n	8005c0c <memmove+0x20>
 8005bfc:	1e43      	subs	r3, r0, #1
 8005bfe:	42a1      	cmp	r1, r4
 8005c00:	d008      	beq.n	8005c14 <memmove+0x28>
 8005c02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c0a:	e7f8      	b.n	8005bfe <memmove+0x12>
 8005c0c:	4601      	mov	r1, r0
 8005c0e:	4402      	add	r2, r0
 8005c10:	428a      	cmp	r2, r1
 8005c12:	d100      	bne.n	8005c16 <memmove+0x2a>
 8005c14:	bd10      	pop	{r4, pc}
 8005c16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c1e:	e7f7      	b.n	8005c10 <memmove+0x24>

08005c20 <_free_r>:
 8005c20:	b538      	push	{r3, r4, r5, lr}
 8005c22:	4605      	mov	r5, r0
 8005c24:	2900      	cmp	r1, #0
 8005c26:	d040      	beq.n	8005caa <_free_r+0x8a>
 8005c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c2c:	1f0c      	subs	r4, r1, #4
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	bfb8      	it	lt
 8005c32:	18e4      	addlt	r4, r4, r3
 8005c34:	f000 f910 	bl	8005e58 <__malloc_lock>
 8005c38:	4a1c      	ldr	r2, [pc, #112]	; (8005cac <_free_r+0x8c>)
 8005c3a:	6813      	ldr	r3, [r2, #0]
 8005c3c:	b933      	cbnz	r3, 8005c4c <_free_r+0x2c>
 8005c3e:	6063      	str	r3, [r4, #4]
 8005c40:	6014      	str	r4, [r2, #0]
 8005c42:	4628      	mov	r0, r5
 8005c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c48:	f000 b90c 	b.w	8005e64 <__malloc_unlock>
 8005c4c:	42a3      	cmp	r3, r4
 8005c4e:	d908      	bls.n	8005c62 <_free_r+0x42>
 8005c50:	6820      	ldr	r0, [r4, #0]
 8005c52:	1821      	adds	r1, r4, r0
 8005c54:	428b      	cmp	r3, r1
 8005c56:	bf01      	itttt	eq
 8005c58:	6819      	ldreq	r1, [r3, #0]
 8005c5a:	685b      	ldreq	r3, [r3, #4]
 8005c5c:	1809      	addeq	r1, r1, r0
 8005c5e:	6021      	streq	r1, [r4, #0]
 8005c60:	e7ed      	b.n	8005c3e <_free_r+0x1e>
 8005c62:	461a      	mov	r2, r3
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	b10b      	cbz	r3, 8005c6c <_free_r+0x4c>
 8005c68:	42a3      	cmp	r3, r4
 8005c6a:	d9fa      	bls.n	8005c62 <_free_r+0x42>
 8005c6c:	6811      	ldr	r1, [r2, #0]
 8005c6e:	1850      	adds	r0, r2, r1
 8005c70:	42a0      	cmp	r0, r4
 8005c72:	d10b      	bne.n	8005c8c <_free_r+0x6c>
 8005c74:	6820      	ldr	r0, [r4, #0]
 8005c76:	4401      	add	r1, r0
 8005c78:	1850      	adds	r0, r2, r1
 8005c7a:	4283      	cmp	r3, r0
 8005c7c:	6011      	str	r1, [r2, #0]
 8005c7e:	d1e0      	bne.n	8005c42 <_free_r+0x22>
 8005c80:	6818      	ldr	r0, [r3, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	4401      	add	r1, r0
 8005c86:	6011      	str	r1, [r2, #0]
 8005c88:	6053      	str	r3, [r2, #4]
 8005c8a:	e7da      	b.n	8005c42 <_free_r+0x22>
 8005c8c:	d902      	bls.n	8005c94 <_free_r+0x74>
 8005c8e:	230c      	movs	r3, #12
 8005c90:	602b      	str	r3, [r5, #0]
 8005c92:	e7d6      	b.n	8005c42 <_free_r+0x22>
 8005c94:	6820      	ldr	r0, [r4, #0]
 8005c96:	1821      	adds	r1, r4, r0
 8005c98:	428b      	cmp	r3, r1
 8005c9a:	bf01      	itttt	eq
 8005c9c:	6819      	ldreq	r1, [r3, #0]
 8005c9e:	685b      	ldreq	r3, [r3, #4]
 8005ca0:	1809      	addeq	r1, r1, r0
 8005ca2:	6021      	streq	r1, [r4, #0]
 8005ca4:	6063      	str	r3, [r4, #4]
 8005ca6:	6054      	str	r4, [r2, #4]
 8005ca8:	e7cb      	b.n	8005c42 <_free_r+0x22>
 8005caa:	bd38      	pop	{r3, r4, r5, pc}
 8005cac:	20001e80 	.word	0x20001e80

08005cb0 <sbrk_aligned>:
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	4e0e      	ldr	r6, [pc, #56]	; (8005cec <sbrk_aligned+0x3c>)
 8005cb4:	460c      	mov	r4, r1
 8005cb6:	6831      	ldr	r1, [r6, #0]
 8005cb8:	4605      	mov	r5, r0
 8005cba:	b911      	cbnz	r1, 8005cc2 <sbrk_aligned+0x12>
 8005cbc:	f000 f8bc 	bl	8005e38 <_sbrk_r>
 8005cc0:	6030      	str	r0, [r6, #0]
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	f000 f8b7 	bl	8005e38 <_sbrk_r>
 8005cca:	1c43      	adds	r3, r0, #1
 8005ccc:	d00a      	beq.n	8005ce4 <sbrk_aligned+0x34>
 8005cce:	1cc4      	adds	r4, r0, #3
 8005cd0:	f024 0403 	bic.w	r4, r4, #3
 8005cd4:	42a0      	cmp	r0, r4
 8005cd6:	d007      	beq.n	8005ce8 <sbrk_aligned+0x38>
 8005cd8:	1a21      	subs	r1, r4, r0
 8005cda:	4628      	mov	r0, r5
 8005cdc:	f000 f8ac 	bl	8005e38 <_sbrk_r>
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	d101      	bne.n	8005ce8 <sbrk_aligned+0x38>
 8005ce4:	f04f 34ff 	mov.w	r4, #4294967295
 8005ce8:	4620      	mov	r0, r4
 8005cea:	bd70      	pop	{r4, r5, r6, pc}
 8005cec:	20001e84 	.word	0x20001e84

08005cf0 <_malloc_r>:
 8005cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf4:	1ccd      	adds	r5, r1, #3
 8005cf6:	f025 0503 	bic.w	r5, r5, #3
 8005cfa:	3508      	adds	r5, #8
 8005cfc:	2d0c      	cmp	r5, #12
 8005cfe:	bf38      	it	cc
 8005d00:	250c      	movcc	r5, #12
 8005d02:	2d00      	cmp	r5, #0
 8005d04:	4607      	mov	r7, r0
 8005d06:	db01      	blt.n	8005d0c <_malloc_r+0x1c>
 8005d08:	42a9      	cmp	r1, r5
 8005d0a:	d905      	bls.n	8005d18 <_malloc_r+0x28>
 8005d0c:	230c      	movs	r3, #12
 8005d0e:	2600      	movs	r6, #0
 8005d10:	603b      	str	r3, [r7, #0]
 8005d12:	4630      	mov	r0, r6
 8005d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d18:	4e2e      	ldr	r6, [pc, #184]	; (8005dd4 <_malloc_r+0xe4>)
 8005d1a:	f000 f89d 	bl	8005e58 <__malloc_lock>
 8005d1e:	6833      	ldr	r3, [r6, #0]
 8005d20:	461c      	mov	r4, r3
 8005d22:	bb34      	cbnz	r4, 8005d72 <_malloc_r+0x82>
 8005d24:	4629      	mov	r1, r5
 8005d26:	4638      	mov	r0, r7
 8005d28:	f7ff ffc2 	bl	8005cb0 <sbrk_aligned>
 8005d2c:	1c43      	adds	r3, r0, #1
 8005d2e:	4604      	mov	r4, r0
 8005d30:	d14d      	bne.n	8005dce <_malloc_r+0xde>
 8005d32:	6834      	ldr	r4, [r6, #0]
 8005d34:	4626      	mov	r6, r4
 8005d36:	2e00      	cmp	r6, #0
 8005d38:	d140      	bne.n	8005dbc <_malloc_r+0xcc>
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	4631      	mov	r1, r6
 8005d3e:	4638      	mov	r0, r7
 8005d40:	eb04 0803 	add.w	r8, r4, r3
 8005d44:	f000 f878 	bl	8005e38 <_sbrk_r>
 8005d48:	4580      	cmp	r8, r0
 8005d4a:	d13a      	bne.n	8005dc2 <_malloc_r+0xd2>
 8005d4c:	6821      	ldr	r1, [r4, #0]
 8005d4e:	3503      	adds	r5, #3
 8005d50:	1a6d      	subs	r5, r5, r1
 8005d52:	f025 0503 	bic.w	r5, r5, #3
 8005d56:	3508      	adds	r5, #8
 8005d58:	2d0c      	cmp	r5, #12
 8005d5a:	bf38      	it	cc
 8005d5c:	250c      	movcc	r5, #12
 8005d5e:	4638      	mov	r0, r7
 8005d60:	4629      	mov	r1, r5
 8005d62:	f7ff ffa5 	bl	8005cb0 <sbrk_aligned>
 8005d66:	3001      	adds	r0, #1
 8005d68:	d02b      	beq.n	8005dc2 <_malloc_r+0xd2>
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	442b      	add	r3, r5
 8005d6e:	6023      	str	r3, [r4, #0]
 8005d70:	e00e      	b.n	8005d90 <_malloc_r+0xa0>
 8005d72:	6822      	ldr	r2, [r4, #0]
 8005d74:	1b52      	subs	r2, r2, r5
 8005d76:	d41e      	bmi.n	8005db6 <_malloc_r+0xc6>
 8005d78:	2a0b      	cmp	r2, #11
 8005d7a:	d916      	bls.n	8005daa <_malloc_r+0xba>
 8005d7c:	1961      	adds	r1, r4, r5
 8005d7e:	42a3      	cmp	r3, r4
 8005d80:	6025      	str	r5, [r4, #0]
 8005d82:	bf18      	it	ne
 8005d84:	6059      	strne	r1, [r3, #4]
 8005d86:	6863      	ldr	r3, [r4, #4]
 8005d88:	bf08      	it	eq
 8005d8a:	6031      	streq	r1, [r6, #0]
 8005d8c:	5162      	str	r2, [r4, r5]
 8005d8e:	604b      	str	r3, [r1, #4]
 8005d90:	4638      	mov	r0, r7
 8005d92:	f104 060b 	add.w	r6, r4, #11
 8005d96:	f000 f865 	bl	8005e64 <__malloc_unlock>
 8005d9a:	f026 0607 	bic.w	r6, r6, #7
 8005d9e:	1d23      	adds	r3, r4, #4
 8005da0:	1af2      	subs	r2, r6, r3
 8005da2:	d0b6      	beq.n	8005d12 <_malloc_r+0x22>
 8005da4:	1b9b      	subs	r3, r3, r6
 8005da6:	50a3      	str	r3, [r4, r2]
 8005da8:	e7b3      	b.n	8005d12 <_malloc_r+0x22>
 8005daa:	6862      	ldr	r2, [r4, #4]
 8005dac:	42a3      	cmp	r3, r4
 8005dae:	bf0c      	ite	eq
 8005db0:	6032      	streq	r2, [r6, #0]
 8005db2:	605a      	strne	r2, [r3, #4]
 8005db4:	e7ec      	b.n	8005d90 <_malloc_r+0xa0>
 8005db6:	4623      	mov	r3, r4
 8005db8:	6864      	ldr	r4, [r4, #4]
 8005dba:	e7b2      	b.n	8005d22 <_malloc_r+0x32>
 8005dbc:	4634      	mov	r4, r6
 8005dbe:	6876      	ldr	r6, [r6, #4]
 8005dc0:	e7b9      	b.n	8005d36 <_malloc_r+0x46>
 8005dc2:	230c      	movs	r3, #12
 8005dc4:	4638      	mov	r0, r7
 8005dc6:	603b      	str	r3, [r7, #0]
 8005dc8:	f000 f84c 	bl	8005e64 <__malloc_unlock>
 8005dcc:	e7a1      	b.n	8005d12 <_malloc_r+0x22>
 8005dce:	6025      	str	r5, [r4, #0]
 8005dd0:	e7de      	b.n	8005d90 <_malloc_r+0xa0>
 8005dd2:	bf00      	nop
 8005dd4:	20001e80 	.word	0x20001e80

08005dd8 <_realloc_r>:
 8005dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ddc:	4680      	mov	r8, r0
 8005dde:	4614      	mov	r4, r2
 8005de0:	460e      	mov	r6, r1
 8005de2:	b921      	cbnz	r1, 8005dee <_realloc_r+0x16>
 8005de4:	4611      	mov	r1, r2
 8005de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dea:	f7ff bf81 	b.w	8005cf0 <_malloc_r>
 8005dee:	b92a      	cbnz	r2, 8005dfc <_realloc_r+0x24>
 8005df0:	f7ff ff16 	bl	8005c20 <_free_r>
 8005df4:	4625      	mov	r5, r4
 8005df6:	4628      	mov	r0, r5
 8005df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dfc:	f000 f838 	bl	8005e70 <_malloc_usable_size_r>
 8005e00:	4284      	cmp	r4, r0
 8005e02:	4607      	mov	r7, r0
 8005e04:	d802      	bhi.n	8005e0c <_realloc_r+0x34>
 8005e06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e0a:	d812      	bhi.n	8005e32 <_realloc_r+0x5a>
 8005e0c:	4621      	mov	r1, r4
 8005e0e:	4640      	mov	r0, r8
 8005e10:	f7ff ff6e 	bl	8005cf0 <_malloc_r>
 8005e14:	4605      	mov	r5, r0
 8005e16:	2800      	cmp	r0, #0
 8005e18:	d0ed      	beq.n	8005df6 <_realloc_r+0x1e>
 8005e1a:	42bc      	cmp	r4, r7
 8005e1c:	4622      	mov	r2, r4
 8005e1e:	4631      	mov	r1, r6
 8005e20:	bf28      	it	cs
 8005e22:	463a      	movcs	r2, r7
 8005e24:	f7ff fbac 	bl	8005580 <memcpy>
 8005e28:	4631      	mov	r1, r6
 8005e2a:	4640      	mov	r0, r8
 8005e2c:	f7ff fef8 	bl	8005c20 <_free_r>
 8005e30:	e7e1      	b.n	8005df6 <_realloc_r+0x1e>
 8005e32:	4635      	mov	r5, r6
 8005e34:	e7df      	b.n	8005df6 <_realloc_r+0x1e>
	...

08005e38 <_sbrk_r>:
 8005e38:	b538      	push	{r3, r4, r5, lr}
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	4d05      	ldr	r5, [pc, #20]	; (8005e54 <_sbrk_r+0x1c>)
 8005e3e:	4604      	mov	r4, r0
 8005e40:	4608      	mov	r0, r1
 8005e42:	602b      	str	r3, [r5, #0]
 8005e44:	f7fa fe6e 	bl	8000b24 <_sbrk>
 8005e48:	1c43      	adds	r3, r0, #1
 8005e4a:	d102      	bne.n	8005e52 <_sbrk_r+0x1a>
 8005e4c:	682b      	ldr	r3, [r5, #0]
 8005e4e:	b103      	cbz	r3, 8005e52 <_sbrk_r+0x1a>
 8005e50:	6023      	str	r3, [r4, #0]
 8005e52:	bd38      	pop	{r3, r4, r5, pc}
 8005e54:	20001e88 	.word	0x20001e88

08005e58 <__malloc_lock>:
 8005e58:	4801      	ldr	r0, [pc, #4]	; (8005e60 <__malloc_lock+0x8>)
 8005e5a:	f000 b811 	b.w	8005e80 <__retarget_lock_acquire_recursive>
 8005e5e:	bf00      	nop
 8005e60:	20001e8c 	.word	0x20001e8c

08005e64 <__malloc_unlock>:
 8005e64:	4801      	ldr	r0, [pc, #4]	; (8005e6c <__malloc_unlock+0x8>)
 8005e66:	f000 b80c 	b.w	8005e82 <__retarget_lock_release_recursive>
 8005e6a:	bf00      	nop
 8005e6c:	20001e8c 	.word	0x20001e8c

08005e70 <_malloc_usable_size_r>:
 8005e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e74:	1f18      	subs	r0, r3, #4
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	bfbc      	itt	lt
 8005e7a:	580b      	ldrlt	r3, [r1, r0]
 8005e7c:	18c0      	addlt	r0, r0, r3
 8005e7e:	4770      	bx	lr

08005e80 <__retarget_lock_acquire_recursive>:
 8005e80:	4770      	bx	lr

08005e82 <__retarget_lock_release_recursive>:
 8005e82:	4770      	bx	lr

08005e84 <_init>:
 8005e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e86:	bf00      	nop
 8005e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8a:	bc08      	pop	{r3}
 8005e8c:	469e      	mov	lr, r3
 8005e8e:	4770      	bx	lr

08005e90 <_fini>:
 8005e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e92:	bf00      	nop
 8005e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e96:	bc08      	pop	{r3}
 8005e98:	469e      	mov	lr, r3
 8005e9a:	4770      	bx	lr
