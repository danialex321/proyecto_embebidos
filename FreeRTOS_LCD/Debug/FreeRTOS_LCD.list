
FreeRTOS_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046c8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  080047d8  080047d8  000147d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049a4  080049a4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080049a4  080049a4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049a4  080049a4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049a4  080049a4  000149a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049a8  080049a8  000149a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080049ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dd4  20000010  080049bc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001de4  080049bc  00021de4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012840  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c60  00000000  00000000  00032879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  000354e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  00036600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000035fa  00000000  00000000  000375e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012250  00000000  00000000  0003abe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091df7  00000000  00000000  0004ce32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dec29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004708  00000000  00000000  000dec7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080047c0 	.word	0x080047c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080047c0 	.word	0x080047c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000160:	b5b0      	push	{r4, r5, r7, lr}
 8000162:	b08a      	sub	sp, #40	; 0x28
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
 800016c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800016e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000172:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000176:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800017a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 800017c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800017e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000180:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000182:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 800018c:	68bb      	ldr	r3, [r7, #8]
 800018e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000190:	f107 0310 	add.w	r3, r7, #16
 8000194:	4618      	mov	r0, r3
 8000196:	f000 f80e 	bl	80001b6 <Lcd_init>

	return lcd;
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	461d      	mov	r5, r3
 800019e:	f107 0410 	add.w	r4, r7, #16
 80001a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80001aa:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80001ae:	68f8      	ldr	r0, [r7, #12]
 80001b0:	3728      	adds	r7, #40	; 0x28
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bdb0      	pop	{r4, r5, r7, pc}

080001b6 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80001b6:	b580      	push	{r7, lr}
 80001b8:	b082      	sub	sp, #8
 80001ba:	af00      	add	r7, sp, #0
 80001bc:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	7d9b      	ldrb	r3, [r3, #22]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d10c      	bne.n	80001e0 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80001c6:	2133      	movs	r1, #51	; 0x33
 80001c8:	6878      	ldr	r0, [r7, #4]
 80001ca:	f000 f857 	bl	800027c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80001ce:	2132      	movs	r1, #50	; 0x32
 80001d0:	6878      	ldr	r0, [r7, #4]
 80001d2:	f000 f853 	bl	800027c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80001d6:	2128      	movs	r1, #40	; 0x28
 80001d8:	6878      	ldr	r0, [r7, #4]
 80001da:	f000 f84f 	bl	800027c <lcd_write_command>
 80001de:	e003      	b.n	80001e8 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80001e0:	2138      	movs	r1, #56	; 0x38
 80001e2:	6878      	ldr	r0, [r7, #4]
 80001e4:	f000 f84a 	bl	800027c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80001e8:	2101      	movs	r1, #1
 80001ea:	6878      	ldr	r0, [r7, #4]
 80001ec:	f000 f846 	bl	800027c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80001f0:	210c      	movs	r1, #12
 80001f2:	6878      	ldr	r0, [r7, #4]
 80001f4:	f000 f842 	bl	800027c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80001f8:	2106      	movs	r1, #6
 80001fa:	6878      	ldr	r0, [r7, #4]
 80001fc:	f000 f83e 	bl	800027c <lcd_write_command>
}
 8000200:	bf00      	nop
 8000202:	3708      	adds	r7, #8
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}

08000208 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000208:	b590      	push	{r4, r7, lr}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
 8000210:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000212:	2300      	movs	r3, #0
 8000214:	73fb      	strb	r3, [r7, #15]
 8000216:	e00a      	b.n	800022e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000218:	7bfb      	ldrb	r3, [r7, #15]
 800021a:	683a      	ldr	r2, [r7, #0]
 800021c:	4413      	add	r3, r2
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	4619      	mov	r1, r3
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	f000 f858 	bl	80002d8 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000228:	7bfb      	ldrb	r3, [r7, #15]
 800022a:	3301      	adds	r3, #1
 800022c:	73fb      	strb	r3, [r7, #15]
 800022e:	7bfc      	ldrb	r4, [r7, #15]
 8000230:	6838      	ldr	r0, [r7, #0]
 8000232:	f7ff ff8d 	bl	8000150 <strlen>
 8000236:	4603      	mov	r3, r0
 8000238:	429c      	cmp	r4, r3
 800023a:	d3ed      	bcc.n	8000218 <Lcd_string+0x10>
	}
}
 800023c:	bf00      	nop
 800023e:	bf00      	nop
 8000240:	3714      	adds	r7, #20
 8000242:	46bd      	mov	sp, r7
 8000244:	bd90      	pop	{r4, r7, pc}
	...

08000248 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	460b      	mov	r3, r1
 8000252:	70fb      	strb	r3, [r7, #3]
 8000254:	4613      	mov	r3, r2
 8000256:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000258:	78fb      	ldrb	r3, [r7, #3]
 800025a:	4a07      	ldr	r2, [pc, #28]	; (8000278 <Lcd_cursor+0x30>)
 800025c:	5cd2      	ldrb	r2, [r2, r3]
 800025e:	78bb      	ldrb	r3, [r7, #2]
 8000260:	4413      	add	r3, r2
 8000262:	b2db      	uxtb	r3, r3
 8000264:	3b80      	subs	r3, #128	; 0x80
 8000266:	b2db      	uxtb	r3, r3
 8000268:	4619      	mov	r1, r3
 800026a:	6878      	ldr	r0, [r7, #4]
 800026c:	f000 f806 	bl	800027c <lcd_write_command>
	#endif
}
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	08004874 	.word	0x08004874

0800027c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	460b      	mov	r3, r1
 8000286:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	6898      	ldr	r0, [r3, #8]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	899b      	ldrh	r3, [r3, #12]
 8000290:	2200      	movs	r2, #0
 8000292:	4619      	mov	r1, r3
 8000294:	f000 fe26 	bl	8000ee4 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	7d9b      	ldrb	r3, [r3, #22]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d111      	bne.n	80002c4 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80002a0:	78fb      	ldrb	r3, [r7, #3]
 80002a2:	091b      	lsrs	r3, r3, #4
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	2204      	movs	r2, #4
 80002a8:	4619      	mov	r1, r3
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f000 f842 	bl	8000334 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80002b0:	78fb      	ldrb	r3, [r7, #3]
 80002b2:	f003 030f 	and.w	r3, r3, #15
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	2204      	movs	r2, #4
 80002ba:	4619      	mov	r1, r3
 80002bc:	6878      	ldr	r0, [r7, #4]
 80002be:	f000 f839 	bl	8000334 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80002c2:	e005      	b.n	80002d0 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80002c4:	78fb      	ldrb	r3, [r7, #3]
 80002c6:	2208      	movs	r2, #8
 80002c8:	4619      	mov	r1, r3
 80002ca:	6878      	ldr	r0, [r7, #4]
 80002cc:	f000 f832 	bl	8000334 <lcd_write>
}
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	460b      	mov	r3, r1
 80002e2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	6898      	ldr	r0, [r3, #8]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	899b      	ldrh	r3, [r3, #12]
 80002ec:	2201      	movs	r2, #1
 80002ee:	4619      	mov	r1, r3
 80002f0:	f000 fdf8 	bl	8000ee4 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	7d9b      	ldrb	r3, [r3, #22]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d111      	bne.n	8000320 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80002fc:	78fb      	ldrb	r3, [r7, #3]
 80002fe:	091b      	lsrs	r3, r3, #4
 8000300:	b2db      	uxtb	r3, r3
 8000302:	2204      	movs	r2, #4
 8000304:	4619      	mov	r1, r3
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	f000 f814 	bl	8000334 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800030c:	78fb      	ldrb	r3, [r7, #3]
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	b2db      	uxtb	r3, r3
 8000314:	2204      	movs	r2, #4
 8000316:	4619      	mov	r1, r3
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f000 f80b 	bl	8000334 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800031e:	e005      	b.n	800032c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000320:	78fb      	ldrb	r3, [r7, #3]
 8000322:	2208      	movs	r2, #8
 8000324:	4619      	mov	r1, r3
 8000326:	6878      	ldr	r0, [r7, #4]
 8000328:	f000 f804 	bl	8000334 <lcd_write>
}
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}

08000334 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	70fb      	strb	r3, [r7, #3]
 8000340:	4613      	mov	r3, r2
 8000342:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000344:	2300      	movs	r3, #0
 8000346:	73fb      	strb	r3, [r7, #15]
 8000348:	e019      	b.n	800037e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	4413      	add	r3, r2
 8000354:	6818      	ldr	r0, [r3, #0]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	685a      	ldr	r2, [r3, #4]
 800035a:	7bfb      	ldrb	r3, [r7, #15]
 800035c:	005b      	lsls	r3, r3, #1
 800035e:	4413      	add	r3, r2
 8000360:	8819      	ldrh	r1, [r3, #0]
 8000362:	78fa      	ldrb	r2, [r7, #3]
 8000364:	7bfb      	ldrb	r3, [r7, #15]
 8000366:	fa42 f303 	asr.w	r3, r2, r3
 800036a:	b2db      	uxtb	r3, r3
 800036c:	f003 0301 	and.w	r3, r3, #1
 8000370:	b2db      	uxtb	r3, r3
 8000372:	461a      	mov	r2, r3
 8000374:	f000 fdb6 	bl	8000ee4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000378:	7bfb      	ldrb	r3, [r7, #15]
 800037a:	3301      	adds	r3, #1
 800037c:	73fb      	strb	r3, [r7, #15]
 800037e:	7bfa      	ldrb	r2, [r7, #15]
 8000380:	78bb      	ldrb	r3, [r7, #2]
 8000382:	429a      	cmp	r2, r3
 8000384:	d3e1      	bcc.n	800034a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	6918      	ldr	r0, [r3, #16]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	8a9b      	ldrh	r3, [r3, #20]
 800038e:	2201      	movs	r2, #1
 8000390:	4619      	mov	r1, r3
 8000392:	f000 fda7 	bl	8000ee4 <HAL_GPIO_WritePin>
	DELAY(1);
 8000396:	2001      	movs	r0, #1
 8000398:	f000 fb1c 	bl	80009d4 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	6918      	ldr	r0, [r3, #16]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	8a9b      	ldrh	r3, [r3, #20]
 80003a4:	2200      	movs	r2, #0
 80003a6:	4619      	mov	r1, r3
 80003a8:	f000 fd9c 	bl	8000ee4 <HAL_GPIO_WritePin>
}
 80003ac:	bf00      	nop
 80003ae:	3710      	adds	r7, #16
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b4:	b5b0      	push	{r4, r5, r7, lr}
 80003b6:	b096      	sub	sp, #88	; 0x58
 80003b8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ba:	f000 fad9 	bl	8000970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003be:	f000 f8b9 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c2:	f000 f8fd 	bl	80005c0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
    Lcd_PortType ports[] = { GPIOB, GPIOB, GPIOB, GPIOB };
 80003c6:	4b40      	ldr	r3, [pc, #256]	; (80004c8 <main+0x114>)
 80003c8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80003cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
    Lcd_PinType pins[] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_10, GPIO_PIN_11};
 80003d2:	4a3e      	ldr	r2, [pc, #248]	; (80004cc <main+0x118>)
 80003d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003dc:	e883 0003 	stmia.w	r3, {r0, r1}
    Lcd_HandleTypeDef lcd;
    // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
    lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_3, LCD_4_BIT_MODE);
 80003e0:	4638      	mov	r0, r7
 80003e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80003e6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80003ea:	2300      	movs	r3, #0
 80003ec:	9303      	str	r3, [sp, #12]
 80003ee:	2308      	movs	r3, #8
 80003f0:	9302      	str	r3, [sp, #8]
 80003f2:	4b37      	ldr	r3, [pc, #220]	; (80004d0 <main+0x11c>)
 80003f4:	9301      	str	r3, [sp, #4]
 80003f6:	2302      	movs	r3, #2
 80003f8:	9300      	str	r3, [sp, #0]
 80003fa:	4b35      	ldr	r3, [pc, #212]	; (80004d0 <main+0x11c>)
 80003fc:	f7ff feb0 	bl	8000160 <Lcd_create>
 8000400:	f107 0418 	add.w	r4, r7, #24
 8000404:	463d      	mov	r5, r7
 8000406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800040a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800040e:	e884 0003 	stmia.w	r4, {r0, r1}
    Lcd_cursor(&lcd, 0,1);
 8000412:	f107 0318 	add.w	r3, r7, #24
 8000416:	2201      	movs	r2, #1
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff14 	bl	8000248 <Lcd_cursor>
    Lcd_string(&lcd, "Testing LCD");
 8000420:	f107 0318 	add.w	r3, r7, #24
 8000424:	492b      	ldr	r1, [pc, #172]	; (80004d4 <main+0x120>)
 8000426:	4618      	mov	r0, r3
 8000428:	f7ff feee 	bl	8000208 <Lcd_string>
      HAL_Delay (1000);
    }*/
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800042c:	f001 fbf2 	bl	8001c14 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of BrakeQ */
  BrakeQHandle = osMessageQueueNew (16, sizeof(uint16_t), &BrakeQ_attributes);
 8000430:	4a29      	ldr	r2, [pc, #164]	; (80004d8 <main+0x124>)
 8000432:	2102      	movs	r1, #2
 8000434:	2010      	movs	r0, #16
 8000436:	f001 fd2b 	bl	8001e90 <osMessageQueueNew>
 800043a:	4603      	mov	r3, r0
 800043c:	4a27      	ldr	r2, [pc, #156]	; (80004dc <main+0x128>)
 800043e:	6013      	str	r3, [r2, #0]

  /* creation of ThrottleQ */
  ThrottleQHandle = osMessageQueueNew (16, sizeof(uint16_t), &ThrottleQ_attributes);
 8000440:	4a27      	ldr	r2, [pc, #156]	; (80004e0 <main+0x12c>)
 8000442:	2102      	movs	r1, #2
 8000444:	2010      	movs	r0, #16
 8000446:	f001 fd23 	bl	8001e90 <osMessageQueueNew>
 800044a:	4603      	mov	r3, r0
 800044c:	4a25      	ldr	r2, [pc, #148]	; (80004e4 <main+0x130>)
 800044e:	6013      	str	r3, [r2, #0]

  /* creation of GearQ */
  GearQHandle = osMessageQueueNew (16, sizeof(char), &GearQ_attributes);
 8000450:	4a25      	ldr	r2, [pc, #148]	; (80004e8 <main+0x134>)
 8000452:	2101      	movs	r1, #1
 8000454:	2010      	movs	r0, #16
 8000456:	f001 fd1b 	bl	8001e90 <osMessageQueueNew>
 800045a:	4603      	mov	r3, r0
 800045c:	4a23      	ldr	r2, [pc, #140]	; (80004ec <main+0x138>)
 800045e:	6013      	str	r3, [r2, #0]

  /* creation of SpeedQ */
  SpeedQHandle = osMessageQueueNew (16, sizeof(uint16_t), &SpeedQ_attributes);
 8000460:	4a23      	ldr	r2, [pc, #140]	; (80004f0 <main+0x13c>)
 8000462:	2102      	movs	r1, #2
 8000464:	2010      	movs	r0, #16
 8000466:	f001 fd13 	bl	8001e90 <osMessageQueueNew>
 800046a:	4603      	mov	r3, r0
 800046c:	4a21      	ldr	r2, [pc, #132]	; (80004f4 <main+0x140>)
 800046e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Brake */
  BrakeHandle = osThreadNew(BrakeInput, NULL, &Brake_attributes);
 8000470:	4a21      	ldr	r2, [pc, #132]	; (80004f8 <main+0x144>)
 8000472:	2100      	movs	r1, #0
 8000474:	4821      	ldr	r0, [pc, #132]	; (80004fc <main+0x148>)
 8000476:	f001 fc33 	bl	8001ce0 <osThreadNew>
 800047a:	4603      	mov	r3, r0
 800047c:	4a20      	ldr	r2, [pc, #128]	; (8000500 <main+0x14c>)
 800047e:	6013      	str	r3, [r2, #0]

  /* creation of Throttle */
  ThrottleHandle = osThreadNew(ThrottleInput, NULL, &Throttle_attributes);
 8000480:	4a20      	ldr	r2, [pc, #128]	; (8000504 <main+0x150>)
 8000482:	2100      	movs	r1, #0
 8000484:	4820      	ldr	r0, [pc, #128]	; (8000508 <main+0x154>)
 8000486:	f001 fc2b 	bl	8001ce0 <osThreadNew>
 800048a:	4603      	mov	r3, r0
 800048c:	4a1f      	ldr	r2, [pc, #124]	; (800050c <main+0x158>)
 800048e:	6013      	str	r3, [r2, #0]

  /* creation of Gear */
  GearHandle = osThreadNew(GearSelection, NULL, &Gear_attributes);
 8000490:	4a1f      	ldr	r2, [pc, #124]	; (8000510 <main+0x15c>)
 8000492:	2100      	movs	r1, #0
 8000494:	481f      	ldr	r0, [pc, #124]	; (8000514 <main+0x160>)
 8000496:	f001 fc23 	bl	8001ce0 <osThreadNew>
 800049a:	4603      	mov	r3, r0
 800049c:	4a1e      	ldr	r2, [pc, #120]	; (8000518 <main+0x164>)
 800049e:	6013      	str	r3, [r2, #0]

  /* creation of Data */
  DataHandle = osThreadNew(DataInput, NULL, &Data_attributes);
 80004a0:	4a1e      	ldr	r2, [pc, #120]	; (800051c <main+0x168>)
 80004a2:	2100      	movs	r1, #0
 80004a4:	481e      	ldr	r0, [pc, #120]	; (8000520 <main+0x16c>)
 80004a6:	f001 fc1b 	bl	8001ce0 <osThreadNew>
 80004aa:	4603      	mov	r3, r0
 80004ac:	4a1d      	ldr	r2, [pc, #116]	; (8000524 <main+0x170>)
 80004ae:	6013      	str	r3, [r2, #0]

  /* creation of Display */
  DisplayHandle = osThreadNew(DisplayInput, NULL, &Display_attributes);
 80004b0:	4a1d      	ldr	r2, [pc, #116]	; (8000528 <main+0x174>)
 80004b2:	2100      	movs	r1, #0
 80004b4:	481d      	ldr	r0, [pc, #116]	; (800052c <main+0x178>)
 80004b6:	f001 fc13 	bl	8001ce0 <osThreadNew>
 80004ba:	4603      	mov	r3, r0
 80004bc:	4a1c      	ldr	r2, [pc, #112]	; (8000530 <main+0x17c>)
 80004be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004c0:	f001 fbda 	bl	8001c78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <main+0x110>
 80004c6:	bf00      	nop
 80004c8:	08004834 	.word	0x08004834
 80004cc:	08004844 	.word	0x08004844
 80004d0:	40010800 	.word	0x40010800
 80004d4:	08004828 	.word	0x08004828
 80004d8:	0800492c 	.word	0x0800492c
 80004dc:	20000040 	.word	0x20000040
 80004e0:	08004944 	.word	0x08004944
 80004e4:	20000044 	.word	0x20000044
 80004e8:	0800495c 	.word	0x0800495c
 80004ec:	20000048 	.word	0x20000048
 80004f0:	08004974 	.word	0x08004974
 80004f4:	2000004c 	.word	0x2000004c
 80004f8:	08004878 	.word	0x08004878
 80004fc:	08000681 	.word	0x08000681
 8000500:	2000002c 	.word	0x2000002c
 8000504:	0800489c 	.word	0x0800489c
 8000508:	08000709 	.word	0x08000709
 800050c:	20000030 	.word	0x20000030
 8000510:	080048c0 	.word	0x080048c0
 8000514:	08000719 	.word	0x08000719
 8000518:	20000034 	.word	0x20000034
 800051c:	080048e4 	.word	0x080048e4
 8000520:	08000729 	.word	0x08000729
 8000524:	20000038 	.word	0x20000038
 8000528:	08004908 	.word	0x08004908
 800052c:	08000739 	.word	0x08000739
 8000530:	2000003c 	.word	0x2000003c

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b090      	sub	sp, #64	; 0x40
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0318 	add.w	r3, r7, #24
 800053e:	2228      	movs	r2, #40	; 0x28
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f004 f934 	bl	80047b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000556:	2301      	movs	r3, #1
 8000558:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800055e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000568:	2302      	movs	r3, #2
 800056a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000572:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0318 	add.w	r3, r7, #24
 800057c:	4618      	mov	r0, r3
 800057e:	f000 fcc9 	bl	8000f14 <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000588:	f000 f8ed 	bl	8000766 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000590:	2302      	movs	r3, #2
 8000592:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800059c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2102      	movs	r1, #2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 ff36 	bl	8001418 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005b2:	f000 f8d8 	bl	8000766 <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3740      	adds	r7, #64	; 0x40
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 0310 	add.w	r3, r7, #16
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <MX_GPIO_Init+0xb4>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a26      	ldr	r2, [pc, #152]	; (8000674 <MX_GPIO_Init+0xb4>)
 80005da:	f043 0320 	orr.w	r3, r3, #32
 80005de:	6193      	str	r3, [r2, #24]
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <MX_GPIO_Init+0xb4>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	f003 0320 	and.w	r3, r3, #32
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <MX_GPIO_Init+0xb4>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a20      	ldr	r2, [pc, #128]	; (8000674 <MX_GPIO_Init+0xb4>)
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_GPIO_Init+0xb4>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f003 0304 	and.w	r3, r3, #4
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_GPIO_Init+0xb4>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a1a      	ldr	r2, [pc, #104]	; (8000674 <MX_GPIO_Init+0xb4>)
 800060a:	f043 0308 	orr.w	r3, r3, #8
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_GPIO_Init+0xb4>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0308 	and.w	r3, r3, #8
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	210a      	movs	r1, #10
 8000620:	4815      	ldr	r0, [pc, #84]	; (8000678 <MX_GPIO_Init+0xb8>)
 8000622:	f000 fc5f 	bl	8000ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f640 4103 	movw	r1, #3075	; 0xc03
 800062c:	4813      	ldr	r0, [pc, #76]	; (800067c <MX_GPIO_Init+0xbc>)
 800062e:	f000 fc59 	bl	8000ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000632:	230a      	movs	r3, #10
 8000634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2302      	movs	r3, #2
 8000640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000642:	f107 0310 	add.w	r3, r7, #16
 8000646:	4619      	mov	r1, r3
 8000648:	480b      	ldr	r0, [pc, #44]	; (8000678 <MX_GPIO_Init+0xb8>)
 800064a:	f000 fac7 	bl	8000bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 800064e:	f640 4303 	movw	r3, #3075	; 0xc03
 8000652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2302      	movs	r3, #2
 800065e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	4619      	mov	r1, r3
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_GPIO_Init+0xbc>)
 8000668:	f000 fab8 	bl	8000bdc <HAL_GPIO_Init>

}
 800066c:	bf00      	nop
 800066e:	3720      	adds	r7, #32
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000
 8000678:	40010800 	.word	0x40010800
 800067c:	40010c00 	.word	0x40010c00

08000680 <BrakeInput>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BrakeInput */
void BrakeInput(void *argument)
{
 8000680:	b5b0      	push	{r4, r5, r7, lr}
 8000682:	b098      	sub	sp, #96	; 0x60
 8000684:	af04      	add	r7, sp, #16
 8000686:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
	// Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
	Lcd_PortType ports[] = { GPIOB, GPIOB, GPIOB, GPIOB };
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <BrakeInput+0x78>)
 800068a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800068e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000690:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
	Lcd_PinType pins[] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_10, GPIO_PIN_11};
 8000694:	4a19      	ldr	r2, [pc, #100]	; (80006fc <BrakeInput+0x7c>)
 8000696:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800069a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800069e:	e883 0003 	stmia.w	r3, {r0, r1}
	Lcd_HandleTypeDef lcd;
	// Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
	lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_3, LCD_4_BIT_MODE);
 80006a2:	4638      	mov	r0, r7
 80006a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80006a8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80006ac:	2300      	movs	r3, #0
 80006ae:	9303      	str	r3, [sp, #12]
 80006b0:	2308      	movs	r3, #8
 80006b2:	9302      	str	r3, [sp, #8]
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <BrakeInput+0x80>)
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	2302      	movs	r3, #2
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	4b10      	ldr	r3, [pc, #64]	; (8000700 <BrakeInput+0x80>)
 80006be:	f7ff fd4f 	bl	8000160 <Lcd_create>
 80006c2:	f107 0420 	add.w	r4, r7, #32
 80006c6:	463d      	mov	r5, r7
 80006c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006d0:	e884 0003 	stmia.w	r4, {r0, r1}

  /* Infinite loop */
  for(;;)
  {
	  Lcd_cursor(&lcd, 0,1);
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	2201      	movs	r2, #1
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff fdb3 	bl	8000248 <Lcd_cursor>
	  Lcd_string(&lcd, "Testing LCD");
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	4907      	ldr	r1, [pc, #28]	; (8000704 <BrakeInput+0x84>)
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff fd8d 	bl	8000208 <Lcd_string>
	  osDelay(1);
 80006ee:	2001      	movs	r0, #1
 80006f0:	f001 fba0 	bl	8001e34 <osDelay>
	  Lcd_cursor(&lcd, 0,1);
 80006f4:	e7ee      	b.n	80006d4 <BrakeInput+0x54>
 80006f6:	bf00      	nop
 80006f8:	08004834 	.word	0x08004834
 80006fc:	08004844 	.word	0x08004844
 8000700:	40010800 	.word	0x40010800
 8000704:	08004828 	.word	0x08004828

08000708 <ThrottleInput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ThrottleInput */
void ThrottleInput(void *argument)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ThrottleInput */

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000710:	2001      	movs	r0, #1
 8000712:	f001 fb8f 	bl	8001e34 <osDelay>
 8000716:	e7fb      	b.n	8000710 <ThrottleInput+0x8>

08000718 <GearSelection>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GearSelection */
void GearSelection(void *argument)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GearSelection */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000720:	2001      	movs	r0, #1
 8000722:	f001 fb87 	bl	8001e34 <osDelay>
 8000726:	e7fb      	b.n	8000720 <GearSelection+0x8>

08000728 <DataInput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DataInput */
void DataInput(void *argument)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DataInput */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000730:	2001      	movs	r0, #1
 8000732:	f001 fb7f 	bl	8001e34 <osDelay>
 8000736:	e7fb      	b.n	8000730 <DataInput+0x8>

08000738 <DisplayInput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DisplayInput */
void DisplayInput(void *argument)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DisplayInput */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000740:	2001      	movs	r0, #1
 8000742:	f001 fb77 	bl	8001e34 <osDelay>
 8000746:	e7fb      	b.n	8000740 <DisplayInput+0x8>

08000748 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000758:	d101      	bne.n	800075e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800075a:	f000 f91f 	bl	800099c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076a:	b672      	cpsid	i
}
 800076c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076e:	e7fe      	b.n	800076e <Error_Handler+0x8>

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <HAL_MspInit+0x68>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	4a17      	ldr	r2, [pc, #92]	; (80007d8 <HAL_MspInit+0x68>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6193      	str	r3, [r2, #24]
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <HAL_MspInit+0x68>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_MspInit+0x68>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	4a11      	ldr	r2, [pc, #68]	; (80007d8 <HAL_MspInit+0x68>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	61d3      	str	r3, [r2, #28]
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <HAL_MspInit+0x68>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	210f      	movs	r1, #15
 80007aa:	f06f 0001 	mvn.w	r0, #1
 80007ae:	f000 f9ea 	bl	8000b86 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <HAL_MspInit+0x6c>)
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	4a04      	ldr	r2, [pc, #16]	; (80007dc <HAL_MspInit+0x6c>)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40010000 	.word	0x40010000

080007e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08e      	sub	sp, #56	; 0x38
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80007f0:	2300      	movs	r3, #0
 80007f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80007f6:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <HAL_InitTick+0xe8>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	4a33      	ldr	r2, [pc, #204]	; (80008c8 <HAL_InitTick+0xe8>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	61d3      	str	r3, [r2, #28]
 8000802:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <HAL_InitTick+0xe8>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800080e:	f107 0210 	add.w	r2, r7, #16
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4611      	mov	r1, r2
 8000818:	4618      	mov	r0, r3
 800081a:	f000 ff63 	bl	80016e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800081e:	6a3b      	ldr	r3, [r7, #32]
 8000820:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000824:	2b00      	cmp	r3, #0
 8000826:	d103      	bne.n	8000830 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000828:	f000 ff48 	bl	80016bc <HAL_RCC_GetPCLK1Freq>
 800082c:	6378      	str	r0, [r7, #52]	; 0x34
 800082e:	e004      	b.n	800083a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000830:	f000 ff44 	bl	80016bc <HAL_RCC_GetPCLK1Freq>
 8000834:	4603      	mov	r3, r0
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800083a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800083c:	4a23      	ldr	r2, [pc, #140]	; (80008cc <HAL_InitTick+0xec>)
 800083e:	fba2 2303 	umull	r2, r3, r2, r3
 8000842:	0c9b      	lsrs	r3, r3, #18
 8000844:	3b01      	subs	r3, #1
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000848:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <HAL_InitTick+0xf0>)
 800084a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800084e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <HAL_InitTick+0xf0>)
 8000852:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000856:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000858:	4a1d      	ldr	r2, [pc, #116]	; (80008d0 <HAL_InitTick+0xf0>)
 800085a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800085c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <HAL_InitTick+0xf0>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <HAL_InitTick+0xf0>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <HAL_InitTick+0xf0>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000870:	4817      	ldr	r0, [pc, #92]	; (80008d0 <HAL_InitTick+0xf0>)
 8000872:	f000 ff85 	bl	8001780 <HAL_TIM_Base_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800087c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000880:	2b00      	cmp	r3, #0
 8000882:	d11b      	bne.n	80008bc <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000884:	4812      	ldr	r0, [pc, #72]	; (80008d0 <HAL_InitTick+0xf0>)
 8000886:	f000 ffd3 	bl	8001830 <HAL_TIM_Base_Start_IT>
 800088a:	4603      	mov	r3, r0
 800088c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000890:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000894:	2b00      	cmp	r3, #0
 8000896:	d111      	bne.n	80008bc <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000898:	201c      	movs	r0, #28
 800089a:	f000 f990 	bl	8000bbe <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d808      	bhi.n	80008b6 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80008a4:	2200      	movs	r2, #0
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	201c      	movs	r0, #28
 80008aa:	f000 f96c 	bl	8000b86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ae:	4a09      	ldr	r2, [pc, #36]	; (80008d4 <HAL_InitTick+0xf4>)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	e002      	b.n	80008bc <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3738      	adds	r7, #56	; 0x38
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40021000 	.word	0x40021000
 80008cc:	431bde83 	.word	0x431bde83
 80008d0:	20000050 	.word	0x20000050
 80008d4:	20000004 	.word	0x20000004

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <NMI_Handler+0x4>

080008de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <MemManage_Handler+0x4>

080008ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
	...

08000904 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <TIM2_IRQHandler+0x10>)
 800090a:	f000 ffe3 	bl	80018d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000050 	.word	0x20000050

08000918 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000926:	490d      	ldr	r1, [pc, #52]	; (800095c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000928:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800092c:	e002      	b.n	8000934 <LoopCopyDataInit>

0800092e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000932:	3304      	adds	r3, #4

08000934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000938:	d3f9      	bcc.n	800092e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093a:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800093c:	4c0a      	ldr	r4, [pc, #40]	; (8000968 <LoopFillZerobss+0x22>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000940:	e001      	b.n	8000946 <LoopFillZerobss>

08000942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000944:	3204      	adds	r2, #4

08000946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000948:	d3fb      	bcc.n	8000942 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800094a:	f7ff ffe5 	bl	8000918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094e:	f003 fefd 	bl	800474c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000952:	f7ff fd2f 	bl	80003b4 <main>
  bx lr
 8000956:	4770      	bx	lr
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000960:	080049ac 	.word	0x080049ac
  ldr r2, =_sbss
 8000964:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000968:	20001de4 	.word	0x20001de4

0800096c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC1_2_IRQHandler>
	...

08000970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_Init+0x28>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a07      	ldr	r2, [pc, #28]	; (8000998 <HAL_Init+0x28>)
 800097a:	f043 0310 	orr.w	r3, r3, #16
 800097e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000980:	2003      	movs	r0, #3
 8000982:	f000 f8f5 	bl	8000b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000986:	200f      	movs	r0, #15
 8000988:	f7ff ff2a 	bl	80007e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800098c:	f7ff fef0 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40022000 	.word	0x40022000

0800099c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <HAL_IncTick+0x1c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_IncTick+0x20>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a03      	ldr	r2, [pc, #12]	; (80009bc <HAL_IncTick+0x20>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000098 	.word	0x20000098

080009c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return uwTick;
 80009c4:	4b02      	ldr	r3, [pc, #8]	; (80009d0 <HAL_GetTick+0x10>)
 80009c6:	681b      	ldr	r3, [r3, #0]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	20000098 	.word	0x20000098

080009d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009dc:	f7ff fff0 	bl	80009c0 <HAL_GetTick>
 80009e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ec:	d005      	beq.n	80009fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <HAL_Delay+0x44>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4413      	add	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009fa:	bf00      	nop
 80009fc:	f7ff ffe0 	bl	80009c0 <HAL_GetTick>
 8000a00:	4602      	mov	r2, r0
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d8f7      	bhi.n	80009fc <HAL_Delay+0x28>
  {
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000008 	.word	0x20000008

08000a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4e:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	60d3      	str	r3, [r2, #12]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <__NVIC_GetPriorityGrouping+0x18>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	f003 0307 	and.w	r3, r3, #7
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	db0b      	blt.n	8000aaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	f003 021f 	and.w	r2, r3, #31
 8000a98:	4906      	ldr	r1, [pc, #24]	; (8000ab4 <__NVIC_EnableIRQ+0x34>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	095b      	lsrs	r3, r3, #5
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e100 	.word	0xe000e100

08000ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	db0a      	blt.n	8000ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	490c      	ldr	r1, [pc, #48]	; (8000b04 <__NVIC_SetPriority+0x4c>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	0112      	lsls	r2, r2, #4
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	440b      	add	r3, r1
 8000adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae0:	e00a      	b.n	8000af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4908      	ldr	r1, [pc, #32]	; (8000b08 <__NVIC_SetPriority+0x50>)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	3b04      	subs	r3, #4
 8000af0:	0112      	lsls	r2, r2, #4
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	440b      	add	r3, r1
 8000af6:	761a      	strb	r2, [r3, #24]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000e100 	.word	0xe000e100
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	; 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	f1c3 0307 	rsb	r3, r3, #7
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	bf28      	it	cs
 8000b2a:	2304      	movcs	r3, #4
 8000b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3304      	adds	r3, #4
 8000b32:	2b06      	cmp	r3, #6
 8000b34:	d902      	bls.n	8000b3c <NVIC_EncodePriority+0x30>
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3b03      	subs	r3, #3
 8000b3a:	e000      	b.n	8000b3e <NVIC_EncodePriority+0x32>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	f04f 32ff 	mov.w	r2, #4294967295
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	401a      	ands	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b54:	f04f 31ff 	mov.w	r1, #4294967295
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5e:	43d9      	mvns	r1, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	4313      	orrs	r3, r2
         );
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3724      	adds	r7, #36	; 0x24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff4f 	bl	8000a1c <__NVIC_SetPriorityGrouping>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b98:	f7ff ff64 	bl	8000a64 <__NVIC_GetPriorityGrouping>
 8000b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	6978      	ldr	r0, [r7, #20]
 8000ba4:	f7ff ffb2 	bl	8000b0c <NVIC_EncodePriority>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff81 	bl	8000ab8 <__NVIC_SetPriority>
}
 8000bb6:	bf00      	nop
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff57 	bl	8000a80 <__NVIC_EnableIRQ>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b08b      	sub	sp, #44	; 0x2c
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bee:	e169      	b.n	8000ec4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	69fa      	ldr	r2, [r7, #28]
 8000c00:	4013      	ands	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	f040 8158 	bne.w	8000ebe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	4a9a      	ldr	r2, [pc, #616]	; (8000e7c <HAL_GPIO_Init+0x2a0>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d05e      	beq.n	8000cd6 <HAL_GPIO_Init+0xfa>
 8000c18:	4a98      	ldr	r2, [pc, #608]	; (8000e7c <HAL_GPIO_Init+0x2a0>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d875      	bhi.n	8000d0a <HAL_GPIO_Init+0x12e>
 8000c1e:	4a98      	ldr	r2, [pc, #608]	; (8000e80 <HAL_GPIO_Init+0x2a4>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d058      	beq.n	8000cd6 <HAL_GPIO_Init+0xfa>
 8000c24:	4a96      	ldr	r2, [pc, #600]	; (8000e80 <HAL_GPIO_Init+0x2a4>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d86f      	bhi.n	8000d0a <HAL_GPIO_Init+0x12e>
 8000c2a:	4a96      	ldr	r2, [pc, #600]	; (8000e84 <HAL_GPIO_Init+0x2a8>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d052      	beq.n	8000cd6 <HAL_GPIO_Init+0xfa>
 8000c30:	4a94      	ldr	r2, [pc, #592]	; (8000e84 <HAL_GPIO_Init+0x2a8>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d869      	bhi.n	8000d0a <HAL_GPIO_Init+0x12e>
 8000c36:	4a94      	ldr	r2, [pc, #592]	; (8000e88 <HAL_GPIO_Init+0x2ac>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d04c      	beq.n	8000cd6 <HAL_GPIO_Init+0xfa>
 8000c3c:	4a92      	ldr	r2, [pc, #584]	; (8000e88 <HAL_GPIO_Init+0x2ac>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d863      	bhi.n	8000d0a <HAL_GPIO_Init+0x12e>
 8000c42:	4a92      	ldr	r2, [pc, #584]	; (8000e8c <HAL_GPIO_Init+0x2b0>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d046      	beq.n	8000cd6 <HAL_GPIO_Init+0xfa>
 8000c48:	4a90      	ldr	r2, [pc, #576]	; (8000e8c <HAL_GPIO_Init+0x2b0>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d85d      	bhi.n	8000d0a <HAL_GPIO_Init+0x12e>
 8000c4e:	2b12      	cmp	r3, #18
 8000c50:	d82a      	bhi.n	8000ca8 <HAL_GPIO_Init+0xcc>
 8000c52:	2b12      	cmp	r3, #18
 8000c54:	d859      	bhi.n	8000d0a <HAL_GPIO_Init+0x12e>
 8000c56:	a201      	add	r2, pc, #4	; (adr r2, 8000c5c <HAL_GPIO_Init+0x80>)
 8000c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5c:	08000cd7 	.word	0x08000cd7
 8000c60:	08000cb1 	.word	0x08000cb1
 8000c64:	08000cc3 	.word	0x08000cc3
 8000c68:	08000d05 	.word	0x08000d05
 8000c6c:	08000d0b 	.word	0x08000d0b
 8000c70:	08000d0b 	.word	0x08000d0b
 8000c74:	08000d0b 	.word	0x08000d0b
 8000c78:	08000d0b 	.word	0x08000d0b
 8000c7c:	08000d0b 	.word	0x08000d0b
 8000c80:	08000d0b 	.word	0x08000d0b
 8000c84:	08000d0b 	.word	0x08000d0b
 8000c88:	08000d0b 	.word	0x08000d0b
 8000c8c:	08000d0b 	.word	0x08000d0b
 8000c90:	08000d0b 	.word	0x08000d0b
 8000c94:	08000d0b 	.word	0x08000d0b
 8000c98:	08000d0b 	.word	0x08000d0b
 8000c9c:	08000d0b 	.word	0x08000d0b
 8000ca0:	08000cb9 	.word	0x08000cb9
 8000ca4:	08000ccd 	.word	0x08000ccd
 8000ca8:	4a79      	ldr	r2, [pc, #484]	; (8000e90 <HAL_GPIO_Init+0x2b4>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d013      	beq.n	8000cd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cae:	e02c      	b.n	8000d0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	623b      	str	r3, [r7, #32]
          break;
 8000cb6:	e029      	b.n	8000d0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	623b      	str	r3, [r7, #32]
          break;
 8000cc0:	e024      	b.n	8000d0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	3308      	adds	r3, #8
 8000cc8:	623b      	str	r3, [r7, #32]
          break;
 8000cca:	e01f      	b.n	8000d0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	330c      	adds	r3, #12
 8000cd2:	623b      	str	r3, [r7, #32]
          break;
 8000cd4:	e01a      	b.n	8000d0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d102      	bne.n	8000ce4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cde:	2304      	movs	r3, #4
 8000ce0:	623b      	str	r3, [r7, #32]
          break;
 8000ce2:	e013      	b.n	8000d0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d105      	bne.n	8000cf8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cec:	2308      	movs	r3, #8
 8000cee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	69fa      	ldr	r2, [r7, #28]
 8000cf4:	611a      	str	r2, [r3, #16]
          break;
 8000cf6:	e009      	b.n	8000d0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	69fa      	ldr	r2, [r7, #28]
 8000d00:	615a      	str	r2, [r3, #20]
          break;
 8000d02:	e003      	b.n	8000d0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d04:	2300      	movs	r3, #0
 8000d06:	623b      	str	r3, [r7, #32]
          break;
 8000d08:	e000      	b.n	8000d0c <HAL_GPIO_Init+0x130>
          break;
 8000d0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	2bff      	cmp	r3, #255	; 0xff
 8000d10:	d801      	bhi.n	8000d16 <HAL_GPIO_Init+0x13a>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	e001      	b.n	8000d1a <HAL_GPIO_Init+0x13e>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	2bff      	cmp	r3, #255	; 0xff
 8000d20:	d802      	bhi.n	8000d28 <HAL_GPIO_Init+0x14c>
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	e002      	b.n	8000d2e <HAL_GPIO_Init+0x152>
 8000d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2a:	3b08      	subs	r3, #8
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	210f      	movs	r1, #15
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	401a      	ands	r2, r3
 8000d40:	6a39      	ldr	r1, [r7, #32]
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	fa01 f303 	lsl.w	r3, r1, r3
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f000 80b1 	beq.w	8000ebe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d5c:	4b4d      	ldr	r3, [pc, #308]	; (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a4c      	ldr	r2, [pc, #304]	; (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b4a      	ldr	r3, [pc, #296]	; (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d74:	4a48      	ldr	r2, [pc, #288]	; (8000e98 <HAL_GPIO_Init+0x2bc>)
 8000d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d78:	089b      	lsrs	r3, r3, #2
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	220f      	movs	r2, #15
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	4013      	ands	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a40      	ldr	r2, [pc, #256]	; (8000e9c <HAL_GPIO_Init+0x2c0>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d013      	beq.n	8000dc8 <HAL_GPIO_Init+0x1ec>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a3f      	ldr	r2, [pc, #252]	; (8000ea0 <HAL_GPIO_Init+0x2c4>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d00d      	beq.n	8000dc4 <HAL_GPIO_Init+0x1e8>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a3e      	ldr	r2, [pc, #248]	; (8000ea4 <HAL_GPIO_Init+0x2c8>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d007      	beq.n	8000dc0 <HAL_GPIO_Init+0x1e4>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a3d      	ldr	r2, [pc, #244]	; (8000ea8 <HAL_GPIO_Init+0x2cc>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d101      	bne.n	8000dbc <HAL_GPIO_Init+0x1e0>
 8000db8:	2303      	movs	r3, #3
 8000dba:	e006      	b.n	8000dca <HAL_GPIO_Init+0x1ee>
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	e004      	b.n	8000dca <HAL_GPIO_Init+0x1ee>
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	e002      	b.n	8000dca <HAL_GPIO_Init+0x1ee>
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e000      	b.n	8000dca <HAL_GPIO_Init+0x1ee>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dcc:	f002 0203 	and.w	r2, r2, #3
 8000dd0:	0092      	lsls	r2, r2, #2
 8000dd2:	4093      	lsls	r3, r2
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dda:	492f      	ldr	r1, [pc, #188]	; (8000e98 <HAL_GPIO_Init+0x2bc>)
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dde:	089b      	lsrs	r3, r3, #2
 8000de0:	3302      	adds	r3, #2
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d006      	beq.n	8000e02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000df4:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <HAL_GPIO_Init+0x2d0>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	492c      	ldr	r1, [pc, #176]	; (8000eac <HAL_GPIO_Init+0x2d0>)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	600b      	str	r3, [r1, #0]
 8000e00:	e006      	b.n	8000e10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e02:	4b2a      	ldr	r3, [pc, #168]	; (8000eac <HAL_GPIO_Init+0x2d0>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	4928      	ldr	r1, [pc, #160]	; (8000eac <HAL_GPIO_Init+0x2d0>)
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d006      	beq.n	8000e2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e1c:	4b23      	ldr	r3, [pc, #140]	; (8000eac <HAL_GPIO_Init+0x2d0>)
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	4922      	ldr	r1, [pc, #136]	; (8000eac <HAL_GPIO_Init+0x2d0>)
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	604b      	str	r3, [r1, #4]
 8000e28:	e006      	b.n	8000e38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e2a:	4b20      	ldr	r3, [pc, #128]	; (8000eac <HAL_GPIO_Init+0x2d0>)
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	491e      	ldr	r1, [pc, #120]	; (8000eac <HAL_GPIO_Init+0x2d0>)
 8000e34:	4013      	ands	r3, r2
 8000e36:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d006      	beq.n	8000e52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e44:	4b19      	ldr	r3, [pc, #100]	; (8000eac <HAL_GPIO_Init+0x2d0>)
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	4918      	ldr	r1, [pc, #96]	; (8000eac <HAL_GPIO_Init+0x2d0>)
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	608b      	str	r3, [r1, #8]
 8000e50:	e006      	b.n	8000e60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <HAL_GPIO_Init+0x2d0>)
 8000e54:	689a      	ldr	r2, [r3, #8]
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	4914      	ldr	r1, [pc, #80]	; (8000eac <HAL_GPIO_Init+0x2d0>)
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d021      	beq.n	8000eb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <HAL_GPIO_Init+0x2d0>)
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	490e      	ldr	r1, [pc, #56]	; (8000eac <HAL_GPIO_Init+0x2d0>)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	60cb      	str	r3, [r1, #12]
 8000e78:	e021      	b.n	8000ebe <HAL_GPIO_Init+0x2e2>
 8000e7a:	bf00      	nop
 8000e7c:	10320000 	.word	0x10320000
 8000e80:	10310000 	.word	0x10310000
 8000e84:	10220000 	.word	0x10220000
 8000e88:	10210000 	.word	0x10210000
 8000e8c:	10120000 	.word	0x10120000
 8000e90:	10110000 	.word	0x10110000
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010000 	.word	0x40010000
 8000e9c:	40010800 	.word	0x40010800
 8000ea0:	40010c00 	.word	0x40010c00
 8000ea4:	40011000 	.word	0x40011000
 8000ea8:	40011400 	.word	0x40011400
 8000eac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <HAL_GPIO_Init+0x304>)
 8000eb2:	68da      	ldr	r2, [r3, #12]
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	4909      	ldr	r1, [pc, #36]	; (8000ee0 <HAL_GPIO_Init+0x304>)
 8000eba:	4013      	ands	r3, r2
 8000ebc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	fa22 f303 	lsr.w	r3, r2, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f47f ae8e 	bne.w	8000bf0 <HAL_GPIO_Init+0x14>
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	372c      	adds	r7, #44	; 0x2c
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	40010400 	.word	0x40010400

08000ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	807b      	strh	r3, [r7, #2]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ef4:	787b      	ldrb	r3, [r7, #1]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000efa:	887a      	ldrh	r2, [r7, #2]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f00:	e003      	b.n	8000f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f02:	887b      	ldrh	r3, [r7, #2]
 8000f04:	041a      	lsls	r2, r3, #16
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	611a      	str	r2, [r3, #16]
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d101      	bne.n	8000f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e272      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 8087 	beq.w	8001042 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f34:	4b92      	ldr	r3, [pc, #584]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 030c 	and.w	r3, r3, #12
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d00c      	beq.n	8000f5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f40:	4b8f      	ldr	r3, [pc, #572]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 030c 	and.w	r3, r3, #12
 8000f48:	2b08      	cmp	r3, #8
 8000f4a:	d112      	bne.n	8000f72 <HAL_RCC_OscConfig+0x5e>
 8000f4c:	4b8c      	ldr	r3, [pc, #560]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f58:	d10b      	bne.n	8000f72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f5a:	4b89      	ldr	r3, [pc, #548]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d06c      	beq.n	8001040 <HAL_RCC_OscConfig+0x12c>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d168      	bne.n	8001040 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e24c      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f7a:	d106      	bne.n	8000f8a <HAL_RCC_OscConfig+0x76>
 8000f7c:	4b80      	ldr	r3, [pc, #512]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a7f      	ldr	r2, [pc, #508]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	e02e      	b.n	8000fe8 <HAL_RCC_OscConfig+0xd4>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10c      	bne.n	8000fac <HAL_RCC_OscConfig+0x98>
 8000f92:	4b7b      	ldr	r3, [pc, #492]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a7a      	ldr	r2, [pc, #488]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	4b78      	ldr	r3, [pc, #480]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a77      	ldr	r2, [pc, #476]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	e01d      	b.n	8000fe8 <HAL_RCC_OscConfig+0xd4>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fb4:	d10c      	bne.n	8000fd0 <HAL_RCC_OscConfig+0xbc>
 8000fb6:	4b72      	ldr	r3, [pc, #456]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a71      	ldr	r2, [pc, #452]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	4b6f      	ldr	r3, [pc, #444]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a6e      	ldr	r2, [pc, #440]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	e00b      	b.n	8000fe8 <HAL_RCC_OscConfig+0xd4>
 8000fd0:	4b6b      	ldr	r3, [pc, #428]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a6a      	ldr	r2, [pc, #424]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b68      	ldr	r3, [pc, #416]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a67      	ldr	r2, [pc, #412]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d013      	beq.n	8001018 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fce6 	bl	80009c0 <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff8:	f7ff fce2 	bl	80009c0 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b64      	cmp	r3, #100	; 0x64
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e200      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100a:	4b5d      	ldr	r3, [pc, #372]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0f0      	beq.n	8000ff8 <HAL_RCC_OscConfig+0xe4>
 8001016:	e014      	b.n	8001042 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fcd2 	bl	80009c0 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001020:	f7ff fcce 	bl	80009c0 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b64      	cmp	r3, #100	; 0x64
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e1ec      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001032:	4b53      	ldr	r3, [pc, #332]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f0      	bne.n	8001020 <HAL_RCC_OscConfig+0x10c>
 800103e:	e000      	b.n	8001042 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d063      	beq.n	8001116 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800104e:	4b4c      	ldr	r3, [pc, #304]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 030c 	and.w	r3, r3, #12
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00b      	beq.n	8001072 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800105a:	4b49      	ldr	r3, [pc, #292]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 030c 	and.w	r3, r3, #12
 8001062:	2b08      	cmp	r3, #8
 8001064:	d11c      	bne.n	80010a0 <HAL_RCC_OscConfig+0x18c>
 8001066:	4b46      	ldr	r3, [pc, #280]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d116      	bne.n	80010a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001072:	4b43      	ldr	r3, [pc, #268]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <HAL_RCC_OscConfig+0x176>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d001      	beq.n	800108a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e1c0      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108a:	4b3d      	ldr	r3, [pc, #244]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	4939      	ldr	r1, [pc, #228]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800109a:	4313      	orrs	r3, r2
 800109c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109e:	e03a      	b.n	8001116 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d020      	beq.n	80010ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010a8:	4b36      	ldr	r3, [pc, #216]	; (8001184 <HAL_RCC_OscConfig+0x270>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ae:	f7ff fc87 	bl	80009c0 <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010b6:	f7ff fc83 	bl	80009c0 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e1a1      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c8:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0f0      	beq.n	80010b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d4:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	4927      	ldr	r1, [pc, #156]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	600b      	str	r3, [r1, #0]
 80010e8:	e015      	b.n	8001116 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <HAL_RCC_OscConfig+0x270>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fc66 	bl	80009c0 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010f8:	f7ff fc62 	bl	80009c0 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e180      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	2b00      	cmp	r3, #0
 8001120:	d03a      	beq.n	8001198 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d019      	beq.n	800115e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_RCC_OscConfig+0x274>)
 800112c:	2201      	movs	r2, #1
 800112e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001130:	f7ff fc46 	bl	80009c0 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001138:	f7ff fc42 	bl	80009c0 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e160      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f0      	beq.n	8001138 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001156:	2001      	movs	r0, #1
 8001158:	f000 faf4 	bl	8001744 <RCC_Delay>
 800115c:	e01c      	b.n	8001198 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_RCC_OscConfig+0x274>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001164:	f7ff fc2c 	bl	80009c0 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116a:	e00f      	b.n	800118c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800116c:	f7ff fc28 	bl	80009c0 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d908      	bls.n	800118c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e146      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	42420000 	.word	0x42420000
 8001188:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800118c:	4b92      	ldr	r3, [pc, #584]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1e9      	bne.n	800116c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 80a6 	beq.w	80012f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011aa:	4b8b      	ldr	r3, [pc, #556]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10d      	bne.n	80011d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	4b88      	ldr	r3, [pc, #544]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a87      	ldr	r2, [pc, #540]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c0:	61d3      	str	r3, [r2, #28]
 80011c2:	4b85      	ldr	r3, [pc, #532]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ce:	2301      	movs	r3, #1
 80011d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d2:	4b82      	ldr	r3, [pc, #520]	; (80013dc <HAL_RCC_OscConfig+0x4c8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d118      	bne.n	8001210 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011de:	4b7f      	ldr	r3, [pc, #508]	; (80013dc <HAL_RCC_OscConfig+0x4c8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a7e      	ldr	r2, [pc, #504]	; (80013dc <HAL_RCC_OscConfig+0x4c8>)
 80011e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ea:	f7ff fbe9 	bl	80009c0 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f2:	f7ff fbe5 	bl	80009c0 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b64      	cmp	r3, #100	; 0x64
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e103      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001204:	4b75      	ldr	r3, [pc, #468]	; (80013dc <HAL_RCC_OscConfig+0x4c8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f0      	beq.n	80011f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d106      	bne.n	8001226 <HAL_RCC_OscConfig+0x312>
 8001218:	4b6f      	ldr	r3, [pc, #444]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	4a6e      	ldr	r2, [pc, #440]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	6213      	str	r3, [r2, #32]
 8001224:	e02d      	b.n	8001282 <HAL_RCC_OscConfig+0x36e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10c      	bne.n	8001248 <HAL_RCC_OscConfig+0x334>
 800122e:	4b6a      	ldr	r3, [pc, #424]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	4a69      	ldr	r2, [pc, #420]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001234:	f023 0301 	bic.w	r3, r3, #1
 8001238:	6213      	str	r3, [r2, #32]
 800123a:	4b67      	ldr	r3, [pc, #412]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	4a66      	ldr	r2, [pc, #408]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001240:	f023 0304 	bic.w	r3, r3, #4
 8001244:	6213      	str	r3, [r2, #32]
 8001246:	e01c      	b.n	8001282 <HAL_RCC_OscConfig+0x36e>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	2b05      	cmp	r3, #5
 800124e:	d10c      	bne.n	800126a <HAL_RCC_OscConfig+0x356>
 8001250:	4b61      	ldr	r3, [pc, #388]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	4a60      	ldr	r2, [pc, #384]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	6213      	str	r3, [r2, #32]
 800125c:	4b5e      	ldr	r3, [pc, #376]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	4a5d      	ldr	r2, [pc, #372]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6213      	str	r3, [r2, #32]
 8001268:	e00b      	b.n	8001282 <HAL_RCC_OscConfig+0x36e>
 800126a:	4b5b      	ldr	r3, [pc, #364]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	4a5a      	ldr	r2, [pc, #360]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001270:	f023 0301 	bic.w	r3, r3, #1
 8001274:	6213      	str	r3, [r2, #32]
 8001276:	4b58      	ldr	r3, [pc, #352]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	4a57      	ldr	r2, [pc, #348]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 800127c:	f023 0304 	bic.w	r3, r3, #4
 8001280:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d015      	beq.n	80012b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128a:	f7ff fb99 	bl	80009c0 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001290:	e00a      	b.n	80012a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001292:	f7ff fb95 	bl	80009c0 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e0b1      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a8:	4b4b      	ldr	r3, [pc, #300]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0ee      	beq.n	8001292 <HAL_RCC_OscConfig+0x37e>
 80012b4:	e014      	b.n	80012e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fb83 	bl	80009c0 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012bc:	e00a      	b.n	80012d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012be:	f7ff fb7f 	bl	80009c0 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e09b      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d4:	4b40      	ldr	r3, [pc, #256]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1ee      	bne.n	80012be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d105      	bne.n	80012f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e6:	4b3c      	ldr	r3, [pc, #240]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4a3b      	ldr	r2, [pc, #236]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 80012ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 8087 	beq.w	800140a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012fc:	4b36      	ldr	r3, [pc, #216]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	2b08      	cmp	r3, #8
 8001306:	d061      	beq.n	80013cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d146      	bne.n	800139e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001310:	4b33      	ldr	r3, [pc, #204]	; (80013e0 <HAL_RCC_OscConfig+0x4cc>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001316:	f7ff fb53 	bl	80009c0 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131e:	f7ff fb4f 	bl	80009c0 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e06d      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001330:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f0      	bne.n	800131e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001344:	d108      	bne.n	8001358 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001346:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	4921      	ldr	r1, [pc, #132]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001358:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a19      	ldr	r1, [r3, #32]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	430b      	orrs	r3, r1
 800136a:	491b      	ldr	r1, [pc, #108]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001370:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <HAL_RCC_OscConfig+0x4cc>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001376:	f7ff fb23 	bl	80009c0 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137e:	f7ff fb1f 	bl	80009c0 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e03d      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x46a>
 800139c:	e035      	b.n	800140a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_RCC_OscConfig+0x4cc>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fb0c 	bl	80009c0 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ac:	f7ff fb08 	bl	80009c0 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e026      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x498>
 80013ca:	e01e      	b.n	800140a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d107      	bne.n	80013e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e019      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40007000 	.word	0x40007000
 80013e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_RCC_OscConfig+0x500>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d106      	bne.n	8001406 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001402:	429a      	cmp	r2, r3
 8001404:	d001      	beq.n	800140a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40021000 	.word	0x40021000

08001418 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e0d0      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800142c:	4b6a      	ldr	r3, [pc, #424]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d910      	bls.n	800145c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143a:	4b67      	ldr	r3, [pc, #412]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 0207 	bic.w	r2, r3, #7
 8001442:	4965      	ldr	r1, [pc, #404]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	4313      	orrs	r3, r2
 8001448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800144a:	4b63      	ldr	r3, [pc, #396]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d001      	beq.n	800145c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e0b8      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d020      	beq.n	80014aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001474:	4b59      	ldr	r3, [pc, #356]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	4a58      	ldr	r2, [pc, #352]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800147e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800148c:	4b53      	ldr	r3, [pc, #332]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4a52      	ldr	r2, [pc, #328]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001496:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001498:	4b50      	ldr	r3, [pc, #320]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	494d      	ldr	r1, [pc, #308]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d040      	beq.n	8001538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d107      	bne.n	80014ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014be:	4b47      	ldr	r3, [pc, #284]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d115      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e07f      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d107      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d6:	4b41      	ldr	r3, [pc, #260]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d109      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e073      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e6:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e06b      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014f6:	4b39      	ldr	r3, [pc, #228]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f023 0203 	bic.w	r2, r3, #3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4936      	ldr	r1, [pc, #216]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001508:	f7ff fa5a 	bl	80009c0 <HAL_GetTick>
 800150c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150e:	e00a      	b.n	8001526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001510:	f7ff fa56 	bl	80009c0 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	f241 3288 	movw	r2, #5000	; 0x1388
 800151e:	4293      	cmp	r3, r2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e053      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001526:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 020c 	and.w	r2, r3, #12
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	429a      	cmp	r2, r3
 8001536:	d1eb      	bne.n	8001510 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001538:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d210      	bcs.n	8001568 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001546:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 0207 	bic.w	r2, r3, #7
 800154e:	4922      	ldr	r1, [pc, #136]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	4313      	orrs	r3, r2
 8001554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001556:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d001      	beq.n	8001568 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e032      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d008      	beq.n	8001586 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	4916      	ldr	r1, [pc, #88]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d009      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	490e      	ldr	r1, [pc, #56]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015a6:	f000 f821 	bl	80015ec <HAL_RCC_GetSysClockFreq>
 80015aa:	4602      	mov	r2, r0
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	490a      	ldr	r1, [pc, #40]	; (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 80015b8:	5ccb      	ldrb	r3, [r1, r3]
 80015ba:	fa22 f303 	lsr.w	r3, r2, r3
 80015be:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <HAL_RCC_ClockConfig+0x1cc>)
 80015c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_RCC_ClockConfig+0x1d0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff f90a 	bl	80007e0 <HAL_InitTick>

  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40022000 	.word	0x40022000
 80015dc:	40021000 	.word	0x40021000
 80015e0:	0800498c 	.word	0x0800498c
 80015e4:	20000000 	.word	0x20000000
 80015e8:	20000004 	.word	0x20000004

080015ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015ec:	b490      	push	{r4, r7}
 80015ee:	b08a      	sub	sp, #40	; 0x28
 80015f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015f2:	4b29      	ldr	r3, [pc, #164]	; (8001698 <HAL_RCC_GetSysClockFreq+0xac>)
 80015f4:	1d3c      	adds	r4, r7, #4
 80015f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015fc:	f240 2301 	movw	r3, #513	; 0x201
 8001600:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001616:	4b21      	ldr	r3, [pc, #132]	; (800169c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b04      	cmp	r3, #4
 8001624:	d002      	beq.n	800162c <HAL_RCC_GetSysClockFreq+0x40>
 8001626:	2b08      	cmp	r3, #8
 8001628:	d003      	beq.n	8001632 <HAL_RCC_GetSysClockFreq+0x46>
 800162a:	e02b      	b.n	8001684 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800162c:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800162e:	623b      	str	r3, [r7, #32]
      break;
 8001630:	e02b      	b.n	800168a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	0c9b      	lsrs	r3, r3, #18
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	3328      	adds	r3, #40	; 0x28
 800163c:	443b      	add	r3, r7
 800163e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001642:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d012      	beq.n	8001674 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	0c5b      	lsrs	r3, r3, #17
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	3328      	adds	r3, #40	; 0x28
 800165a:	443b      	add	r3, r7
 800165c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001660:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001666:	fb03 f202 	mul.w	r2, r3, r2
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
 8001672:	e004      	b.n	800167e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001678:	fb02 f303 	mul.w	r3, r2, r3
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	623b      	str	r3, [r7, #32]
      break;
 8001682:	e002      	b.n	800168a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001686:	623b      	str	r3, [r7, #32]
      break;
 8001688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800168a:	6a3b      	ldr	r3, [r7, #32]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3728      	adds	r7, #40	; 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bc90      	pop	{r4, r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	0800484c 	.word	0x0800484c
 800169c:	40021000 	.word	0x40021000
 80016a0:	007a1200 	.word	0x007a1200
 80016a4:	003d0900 	.word	0x003d0900

080016a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016ac:	4b02      	ldr	r3, [pc, #8]	; (80016b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	20000000 	.word	0x20000000

080016bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016c0:	f7ff fff2 	bl	80016a8 <HAL_RCC_GetHCLKFreq>
 80016c4:	4602      	mov	r2, r0
 80016c6:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	0a1b      	lsrs	r3, r3, #8
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	4903      	ldr	r1, [pc, #12]	; (80016e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016d2:	5ccb      	ldrb	r3, [r1, r3]
 80016d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016d8:	4618      	mov	r0, r3
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40021000 	.word	0x40021000
 80016e0:	0800499c 	.word	0x0800499c

080016e4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	220f      	movs	r2, #15
 80016f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <HAL_RCC_GetClockConfig+0x58>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0203 	and.w	r2, r3, #3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001700:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_RCC_GetClockConfig+0x58>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_RCC_GetClockConfig+0x58>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <HAL_RCC_GetClockConfig+0x58>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	08db      	lsrs	r3, r3, #3
 800171e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_RCC_GetClockConfig+0x5c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0207 	and.w	r2, r3, #7
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	40021000 	.word	0x40021000
 8001740:	40022000 	.word	0x40022000

08001744 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <RCC_Delay+0x34>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0a      	ldr	r2, [pc, #40]	; (800177c <RCC_Delay+0x38>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	0a5b      	lsrs	r3, r3, #9
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	fb02 f303 	mul.w	r3, r2, r3
 800175e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001760:	bf00      	nop
  }
  while (Delay --);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1e5a      	subs	r2, r3, #1
 8001766:	60fa      	str	r2, [r7, #12]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f9      	bne.n	8001760 <RCC_Delay+0x1c>
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	20000000 	.word	0x20000000
 800177c:	10624dd3 	.word	0x10624dd3

08001780 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e041      	b.n	8001816 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d106      	bne.n	80017ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f839 	bl	800181e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2202      	movs	r2, #2
 80017b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3304      	adds	r3, #4
 80017bc:	4619      	mov	r1, r3
 80017be:	4610      	mov	r0, r2
 80017c0:	f000 f9b4 	bl	8001b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b01      	cmp	r3, #1
 8001842:	d001      	beq.n	8001848 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e03a      	b.n	80018be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2202      	movs	r2, #2
 800184c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <HAL_TIM_Base_Start_IT+0x98>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d00e      	beq.n	8001888 <HAL_TIM_Base_Start_IT+0x58>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001872:	d009      	beq.n	8001888 <HAL_TIM_Base_Start_IT+0x58>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a14      	ldr	r2, [pc, #80]	; (80018cc <HAL_TIM_Base_Start_IT+0x9c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d004      	beq.n	8001888 <HAL_TIM_Base_Start_IT+0x58>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a13      	ldr	r2, [pc, #76]	; (80018d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d111      	bne.n	80018ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b06      	cmp	r3, #6
 8001898:	d010      	beq.n	80018bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f042 0201 	orr.w	r2, r2, #1
 80018a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018aa:	e007      	b.n	80018bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0201 	orr.w	r2, r2, #1
 80018ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	40012c00 	.word	0x40012c00
 80018cc:	40000400 	.word	0x40000400
 80018d0:	40000800 	.word	0x40000800

080018d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d122      	bne.n	8001930 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d11b      	bne.n	8001930 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f06f 0202 	mvn.w	r2, #2
 8001900:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f8ed 	bl	8001af6 <HAL_TIM_IC_CaptureCallback>
 800191c:	e005      	b.n	800192a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f8e0 	bl	8001ae4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 f8ef 	bl	8001b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	2b04      	cmp	r3, #4
 800193c:	d122      	bne.n	8001984 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b04      	cmp	r3, #4
 800194a:	d11b      	bne.n	8001984 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f06f 0204 	mvn.w	r2, #4
 8001954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2202      	movs	r2, #2
 800195a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f8c3 	bl	8001af6 <HAL_TIM_IC_CaptureCallback>
 8001970:	e005      	b.n	800197e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f8b6 	bl	8001ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f8c5 	bl	8001b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b08      	cmp	r3, #8
 8001990:	d122      	bne.n	80019d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b08      	cmp	r3, #8
 800199e:	d11b      	bne.n	80019d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f06f 0208 	mvn.w	r2, #8
 80019a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2204      	movs	r2, #4
 80019ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f899 	bl	8001af6 <HAL_TIM_IC_CaptureCallback>
 80019c4:	e005      	b.n	80019d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f88c 	bl	8001ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f89b 	bl	8001b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	d122      	bne.n	8001a2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	2b10      	cmp	r3, #16
 80019f2:	d11b      	bne.n	8001a2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f06f 0210 	mvn.w	r2, #16
 80019fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2208      	movs	r2, #8
 8001a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f86f 	bl	8001af6 <HAL_TIM_IC_CaptureCallback>
 8001a18:	e005      	b.n	8001a26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f862 	bl	8001ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f871 	bl	8001b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d10e      	bne.n	8001a58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d107      	bne.n	8001a58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f06f 0201 	mvn.w	r2, #1
 8001a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7fe fe78 	bl	8000748 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a62:	2b80      	cmp	r3, #128	; 0x80
 8001a64:	d10e      	bne.n	8001a84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a70:	2b80      	cmp	r3, #128	; 0x80
 8001a72:	d107      	bne.n	8001a84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f8bf 	bl	8001c02 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8e:	2b40      	cmp	r3, #64	; 0x40
 8001a90:	d10e      	bne.n	8001ab0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9c:	2b40      	cmp	r3, #64	; 0x40
 8001a9e:	d107      	bne.n	8001ab0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f835 	bl	8001b1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	f003 0320 	and.w	r3, r3, #32
 8001aba:	2b20      	cmp	r3, #32
 8001abc:	d10e      	bne.n	8001adc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	f003 0320 	and.w	r3, r3, #32
 8001ac8:	2b20      	cmp	r3, #32
 8001aca:	d107      	bne.n	8001adc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f06f 0220 	mvn.w	r2, #32
 8001ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f88a 	bl	8001bf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr

08001af6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a29      	ldr	r2, [pc, #164]	; (8001be4 <TIM_Base_SetConfig+0xb8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d00b      	beq.n	8001b5c <TIM_Base_SetConfig+0x30>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b4a:	d007      	beq.n	8001b5c <TIM_Base_SetConfig+0x30>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a26      	ldr	r2, [pc, #152]	; (8001be8 <TIM_Base_SetConfig+0xbc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d003      	beq.n	8001b5c <TIM_Base_SetConfig+0x30>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a25      	ldr	r2, [pc, #148]	; (8001bec <TIM_Base_SetConfig+0xc0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d108      	bne.n	8001b6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a1c      	ldr	r2, [pc, #112]	; (8001be4 <TIM_Base_SetConfig+0xb8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00b      	beq.n	8001b8e <TIM_Base_SetConfig+0x62>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7c:	d007      	beq.n	8001b8e <TIM_Base_SetConfig+0x62>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <TIM_Base_SetConfig+0xbc>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d003      	beq.n	8001b8e <TIM_Base_SetConfig+0x62>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a18      	ldr	r2, [pc, #96]	; (8001bec <TIM_Base_SetConfig+0xc0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d108      	bne.n	8001ba0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a07      	ldr	r2, [pc, #28]	; (8001be4 <TIM_Base_SetConfig+0xb8>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d103      	bne.n	8001bd4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	615a      	str	r2, [r3, #20]
}
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	40012c00 	.word	0x40012c00
 8001be8:	40000400 	.word	0x40000400
 8001bec:	40000800 	.word	0x40000800

08001bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr

08001c02 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c1a:	f3ef 8305 	mrs	r3, IPSR
 8001c1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001c20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10f      	bne.n	8001c46 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c26:	f3ef 8310 	mrs	r3, PRIMASK
 8001c2a:	607b      	str	r3, [r7, #4]
  return(result);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d109      	bne.n	8001c46 <osKernelInitialize+0x32>
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <osKernelInitialize+0x60>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d109      	bne.n	8001c4e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c3a:	f3ef 8311 	mrs	r3, BASEPRI
 8001c3e:	603b      	str	r3, [r7, #0]
  return(result);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001c46:	f06f 0305 	mvn.w	r3, #5
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	e00c      	b.n	8001c68 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <osKernelInitialize+0x60>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d105      	bne.n	8001c62 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <osKernelInitialize+0x60>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	e002      	b.n	8001c68 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
 8001c66:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001c68:	68fb      	ldr	r3, [r7, #12]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	2000009c 	.word	0x2000009c

08001c78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c7e:	f3ef 8305 	mrs	r3, IPSR
 8001c82:	60bb      	str	r3, [r7, #8]
  return(result);
 8001c84:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10f      	bne.n	8001caa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8001c8e:	607b      	str	r3, [r7, #4]
  return(result);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d109      	bne.n	8001caa <osKernelStart+0x32>
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <osKernelStart+0x64>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d109      	bne.n	8001cb2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c9e:	f3ef 8311 	mrs	r3, BASEPRI
 8001ca2:	603b      	str	r3, [r7, #0]
  return(result);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001caa:	f06f 0305 	mvn.w	r3, #5
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	e00e      	b.n	8001cd0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <osKernelStart+0x64>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d107      	bne.n	8001cca <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001cba:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <osKernelStart+0x64>)
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001cc0:	f001 f93c 	bl	8002f3c <vTaskStartScheduler>
      stat = osOK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	e002      	b.n	8001cd0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
 8001cce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2000009c 	.word	0x2000009c

08001ce0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b092      	sub	sp, #72	; 0x48
 8001ce4:	af04      	add	r7, sp, #16
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001cf0:	f3ef 8305 	mrs	r3, IPSR
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f040 8094 	bne.w	8001e26 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8001d02:	623b      	str	r3, [r7, #32]
  return(result);
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f040 808d 	bne.w	8001e26 <osThreadNew+0x146>
 8001d0c:	4b48      	ldr	r3, [pc, #288]	; (8001e30 <osThreadNew+0x150>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d106      	bne.n	8001d22 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001d14:	f3ef 8311 	mrs	r3, BASEPRI
 8001d18:	61fb      	str	r3, [r7, #28]
  return(result);
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f040 8082 	bne.w	8001e26 <osThreadNew+0x146>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d07e      	beq.n	8001e26 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001d2c:	2318      	movs	r3, #24
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001d30:	2300      	movs	r3, #0
 8001d32:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001d34:	f107 031b 	add.w	r3, r7, #27
 8001d38:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d045      	beq.n	8001dd2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <osThreadNew+0x74>
        name = attr->name;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <osThreadNew+0x9a>
 8001d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6a:	2b38      	cmp	r3, #56	; 0x38
 8001d6c:	d805      	bhi.n	8001d7a <osThreadNew+0x9a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <osThreadNew+0x9e>
        return (NULL);
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e054      	b.n	8001e28 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	089b      	lsrs	r3, r3, #2
 8001d8c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00e      	beq.n	8001db4 <osThreadNew+0xd4>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2b5b      	cmp	r3, #91	; 0x5b
 8001d9c:	d90a      	bls.n	8001db4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <osThreadNew+0xd4>
        mem = 1;
 8001dae:	2301      	movs	r3, #1
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001db2:	e010      	b.n	8001dd6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10c      	bne.n	8001dd6 <osThreadNew+0xf6>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d108      	bne.n	8001dd6 <osThreadNew+0xf6>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d104      	bne.n	8001dd6 <osThreadNew+0xf6>
          mem = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dd0:	e001      	b.n	8001dd6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d110      	bne.n	8001dfe <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001de4:	9202      	str	r2, [sp, #8]
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001df0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 fed6 	bl	8002ba4 <xTaskCreateStatic>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	e013      	b.n	8001e26 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d110      	bne.n	8001e26 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	9301      	str	r3, [sp, #4]
 8001e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 ff20 	bl	8002c5c <xTaskCreate>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d001      	beq.n	8001e26 <osThreadNew+0x146>
          hTask = NULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001e26:	697b      	ldr	r3, [r7, #20]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3738      	adds	r7, #56	; 0x38
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	2000009c 	.word	0x2000009c

08001e34 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e3c:	f3ef 8305 	mrs	r3, IPSR
 8001e40:	613b      	str	r3, [r7, #16]
  return(result);
 8001e42:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10f      	bne.n	8001e68 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e48:	f3ef 8310 	mrs	r3, PRIMASK
 8001e4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d109      	bne.n	8001e68 <osDelay+0x34>
 8001e54:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <osDelay+0x58>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d109      	bne.n	8001e70 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e5c:	f3ef 8311 	mrs	r3, BASEPRI
 8001e60:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <osDelay+0x3c>
    stat = osErrorISR;
 8001e68:	f06f 0305 	mvn.w	r3, #5
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	e007      	b.n	8001e80 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f001 f82a 	bl	8002ed4 <vTaskDelay>
    }
  }

  return (stat);
 8001e80:	697b      	ldr	r3, [r7, #20]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	2000009c 	.word	0x2000009c

08001e90 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08c      	sub	sp, #48	; 0x30
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ea0:	f3ef 8305 	mrs	r3, IPSR
 8001ea4:	61bb      	str	r3, [r7, #24]
  return(result);
 8001ea6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d16f      	bne.n	8001f8c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001eac:	f3ef 8310 	mrs	r3, PRIMASK
 8001eb0:	617b      	str	r3, [r7, #20]
  return(result);
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d169      	bne.n	8001f8c <osMessageQueueNew+0xfc>
 8001eb8:	4b37      	ldr	r3, [pc, #220]	; (8001f98 <osMessageQueueNew+0x108>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d105      	bne.n	8001ecc <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ec0:	f3ef 8311 	mrs	r3, BASEPRI
 8001ec4:	613b      	str	r3, [r7, #16]
  return(result);
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d15f      	bne.n	8001f8c <osMessageQueueNew+0xfc>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d05c      	beq.n	8001f8c <osMessageQueueNew+0xfc>
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d059      	beq.n	8001f8c <osMessageQueueNew+0xfc>
    mem = -1;
 8001ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8001edc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d029      	beq.n	8001f38 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d012      	beq.n	8001f12 <osMessageQueueNew+0x82>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	2b4f      	cmp	r3, #79	; 0x4f
 8001ef2:	d90e      	bls.n	8001f12 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00a      	beq.n	8001f12 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	695a      	ldr	r2, [r3, #20]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	68b9      	ldr	r1, [r7, #8]
 8001f04:	fb01 f303 	mul.w	r3, r1, r3
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d302      	bcc.n	8001f12 <osMessageQueueNew+0x82>
        mem = 1;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	623b      	str	r3, [r7, #32]
 8001f10:	e014      	b.n	8001f3c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d110      	bne.n	8001f3c <osMessageQueueNew+0xac>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10c      	bne.n	8001f3c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d108      	bne.n	8001f3c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d104      	bne.n	8001f3c <osMessageQueueNew+0xac>
          mem = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	623b      	str	r3, [r7, #32]
 8001f36:	e001      	b.n	8001f3c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d10b      	bne.n	8001f5a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691a      	ldr	r2, [r3, #16]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	9100      	str	r1, [sp, #0]
 8001f4e:	68b9      	ldr	r1, [r7, #8]
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 f96d 	bl	8002230 <xQueueGenericCreateStatic>
 8001f56:	6278      	str	r0, [r7, #36]	; 0x24
 8001f58:	e008      	b.n	8001f6c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d105      	bne.n	8001f6c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8001f60:	2200      	movs	r2, #0
 8001f62:	68b9      	ldr	r1, [r7, #8]
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 f9da 	bl	800231e <xQueueGenericCreate>
 8001f6a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00c      	beq.n	8001f8c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <osMessageQueueNew+0xf0>
        name = attr->name;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	e001      	b.n	8001f84 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8001f84:	69f9      	ldr	r1, [r7, #28]
 8001f86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f88:	f000 fdb0 	bl	8002aec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3728      	adds	r7, #40	; 0x28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	2000009c 	.word	0x2000009c

08001f9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4a06      	ldr	r2, [pc, #24]	; (8001fc4 <vApplicationGetIdleTaskMemory+0x28>)
 8001fac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001fb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2280      	movs	r2, #128	; 0x80
 8001fb8:	601a      	str	r2, [r3, #0]
}
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	200000a0 	.word	0x200000a0
 8001fc8:	200000fc 	.word	0x200000fc

08001fcc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <vApplicationGetTimerTaskMemory+0x2c>)
 8001fdc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	4a06      	ldr	r2, [pc, #24]	; (8001ffc <vApplicationGetTimerTaskMemory+0x30>)
 8001fe2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fea:	601a      	str	r2, [r3, #0]
}
 8001fec:	bf00      	nop
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	200002fc 	.word	0x200002fc
 8001ffc:	20000358 	.word	0x20000358

08002000 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f103 0208 	add.w	r2, r3, #8
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f04f 32ff 	mov.w	r2, #4294967295
 8002018:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f103 0208 	add.w	r2, r3, #8
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f103 0208 	add.w	r2, r3, #8
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr

0800203e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002056:	b480      	push	{r7}
 8002058:	b085      	sub	sp, #20
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	601a      	str	r2, [r3, #0]
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b2:	d103      	bne.n	80020bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	e00c      	b.n	80020d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3308      	adds	r3, #8
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	e002      	b.n	80020ca <vListInsert+0x2e>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d2f6      	bcs.n	80020c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	601a      	str	r2, [r3, #0]
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6892      	ldr	r2, [r2, #8]
 8002122:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6852      	ldr	r2, [r2, #4]
 800212c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	d103      	bne.n	8002140 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	1e5a      	subs	r2, r3, #1
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr
	...

08002160 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10a      	bne.n	800218a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002178:	f383 8811 	msr	BASEPRI, r3
 800217c:	f3bf 8f6f 	isb	sy
 8002180:	f3bf 8f4f 	dsb	sy
 8002184:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002186:	bf00      	nop
 8002188:	e7fe      	b.n	8002188 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800218a:	f002 f807 	bl	800419c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002196:	68f9      	ldr	r1, [r7, #12]
 8002198:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800219a:	fb01 f303 	mul.w	r3, r1, r3
 800219e:	441a      	add	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ba:	3b01      	subs	r3, #1
 80021bc:	68f9      	ldr	r1, [r7, #12]
 80021be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	441a      	add	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	22ff      	movs	r2, #255	; 0xff
 80021ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	22ff      	movs	r2, #255	; 0xff
 80021d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d114      	bne.n	800220a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d01a      	beq.n	800221e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3310      	adds	r3, #16
 80021ec:	4618      	mov	r0, r3
 80021ee:	f001 f92f 	bl	8003450 <xTaskRemoveFromEventList>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d012      	beq.n	800221e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <xQueueGenericReset+0xcc>)
 80021fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	f3bf 8f4f 	dsb	sy
 8002204:	f3bf 8f6f 	isb	sy
 8002208:	e009      	b.n	800221e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	3310      	adds	r3, #16
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fef6 	bl	8002000 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	3324      	adds	r3, #36	; 0x24
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fef1 	bl	8002000 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800221e:	f001 ffed 	bl	80041fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002222:	2301      	movs	r3, #1
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	e000ed04 	.word	0xe000ed04

08002230 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08e      	sub	sp, #56	; 0x38
 8002234:	af02      	add	r7, sp, #8
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
 800223c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10a      	bne.n	800225a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002248:	f383 8811 	msr	BASEPRI, r3
 800224c:	f3bf 8f6f 	isb	sy
 8002250:	f3bf 8f4f 	dsb	sy
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002256:	bf00      	nop
 8002258:	e7fe      	b.n	8002258 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10a      	bne.n	8002276 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002264:	f383 8811 	msr	BASEPRI, r3
 8002268:	f3bf 8f6f 	isb	sy
 800226c:	f3bf 8f4f 	dsb	sy
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002272:	bf00      	nop
 8002274:	e7fe      	b.n	8002274 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <xQueueGenericCreateStatic+0x52>
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <xQueueGenericCreateStatic+0x56>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <xQueueGenericCreateStatic+0x58>
 8002286:	2300      	movs	r3, #0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10a      	bne.n	80022a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800228c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002290:	f383 8811 	msr	BASEPRI, r3
 8002294:	f3bf 8f6f 	isb	sy
 8002298:	f3bf 8f4f 	dsb	sy
 800229c:	623b      	str	r3, [r7, #32]
}
 800229e:	bf00      	nop
 80022a0:	e7fe      	b.n	80022a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d102      	bne.n	80022ae <xQueueGenericCreateStatic+0x7e>
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <xQueueGenericCreateStatic+0x82>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <xQueueGenericCreateStatic+0x84>
 80022b2:	2300      	movs	r3, #0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10a      	bne.n	80022ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80022b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022bc:	f383 8811 	msr	BASEPRI, r3
 80022c0:	f3bf 8f6f 	isb	sy
 80022c4:	f3bf 8f4f 	dsb	sy
 80022c8:	61fb      	str	r3, [r7, #28]
}
 80022ca:	bf00      	nop
 80022cc:	e7fe      	b.n	80022cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80022ce:	2350      	movs	r3, #80	; 0x50
 80022d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2b50      	cmp	r3, #80	; 0x50
 80022d6:	d00a      	beq.n	80022ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80022d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022dc:	f383 8811 	msr	BASEPRI, r3
 80022e0:	f3bf 8f6f 	isb	sy
 80022e4:	f3bf 8f4f 	dsb	sy
 80022e8:	61bb      	str	r3, [r7, #24]
}
 80022ea:	bf00      	nop
 80022ec:	e7fe      	b.n	80022ec <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80022f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00d      	beq.n	8002314 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80022f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002300:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68b9      	ldr	r1, [r7, #8]
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 f843 	bl	800239a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002316:	4618      	mov	r0, r3
 8002318:	3730      	adds	r7, #48	; 0x30
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800231e:	b580      	push	{r7, lr}
 8002320:	b08a      	sub	sp, #40	; 0x28
 8002322:	af02      	add	r7, sp, #8
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	4613      	mov	r3, r2
 800232a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10a      	bne.n	8002348 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002336:	f383 8811 	msr	BASEPRI, r3
 800233a:	f3bf 8f6f 	isb	sy
 800233e:	f3bf 8f4f 	dsb	sy
 8002342:	613b      	str	r3, [r7, #16]
}
 8002344:	bf00      	nop
 8002346:	e7fe      	b.n	8002346 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d102      	bne.n	8002354 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	e004      	b.n	800235e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	fb02 f303 	mul.w	r3, r2, r3
 800235c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3350      	adds	r3, #80	; 0x50
 8002362:	4618      	mov	r0, r3
 8002364:	f002 f81a 	bl	800439c <pvPortMalloc>
 8002368:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00f      	beq.n	8002390 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	3350      	adds	r3, #80	; 0x50
 8002374:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800237e:	79fa      	ldrb	r2, [r7, #7]
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	4613      	mov	r3, r2
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 f805 	bl	800239a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002390:	69bb      	ldr	r3, [r7, #24]
	}
 8002392:	4618      	mov	r0, r3
 8002394:	3720      	adds	r7, #32
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d103      	bne.n	80023b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	e002      	b.n	80023bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023c8:	2101      	movs	r1, #1
 80023ca:	69b8      	ldr	r0, [r7, #24]
 80023cc:	f7ff fec8 	bl	8002160 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	78fa      	ldrb	r2, [r7, #3]
 80023d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08e      	sub	sp, #56	; 0x38
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80023ee:	2300      	movs	r3, #0
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80023f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10a      	bne.n	8002412 <xQueueGenericSend+0x32>
	__asm volatile
 80023fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002400:	f383 8811 	msr	BASEPRI, r3
 8002404:	f3bf 8f6f 	isb	sy
 8002408:	f3bf 8f4f 	dsb	sy
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800240e:	bf00      	nop
 8002410:	e7fe      	b.n	8002410 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d103      	bne.n	8002420 <xQueueGenericSend+0x40>
 8002418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <xQueueGenericSend+0x44>
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <xQueueGenericSend+0x46>
 8002424:	2300      	movs	r3, #0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10a      	bne.n	8002440 <xQueueGenericSend+0x60>
	__asm volatile
 800242a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242e:	f383 8811 	msr	BASEPRI, r3
 8002432:	f3bf 8f6f 	isb	sy
 8002436:	f3bf 8f4f 	dsb	sy
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800243c:	bf00      	nop
 800243e:	e7fe      	b.n	800243e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d103      	bne.n	800244e <xQueueGenericSend+0x6e>
 8002446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244a:	2b01      	cmp	r3, #1
 800244c:	d101      	bne.n	8002452 <xQueueGenericSend+0x72>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <xQueueGenericSend+0x74>
 8002452:	2300      	movs	r3, #0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10a      	bne.n	800246e <xQueueGenericSend+0x8e>
	__asm volatile
 8002458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800245c:	f383 8811 	msr	BASEPRI, r3
 8002460:	f3bf 8f6f 	isb	sy
 8002464:	f3bf 8f4f 	dsb	sy
 8002468:	623b      	str	r3, [r7, #32]
}
 800246a:	bf00      	nop
 800246c:	e7fe      	b.n	800246c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800246e:	f001 f9b1 	bl	80037d4 <xTaskGetSchedulerState>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d102      	bne.n	800247e <xQueueGenericSend+0x9e>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <xQueueGenericSend+0xa2>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <xQueueGenericSend+0xa4>
 8002482:	2300      	movs	r3, #0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10a      	bne.n	800249e <xQueueGenericSend+0xbe>
	__asm volatile
 8002488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248c:	f383 8811 	msr	BASEPRI, r3
 8002490:	f3bf 8f6f 	isb	sy
 8002494:	f3bf 8f4f 	dsb	sy
 8002498:	61fb      	str	r3, [r7, #28]
}
 800249a:	bf00      	nop
 800249c:	e7fe      	b.n	800249c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800249e:	f001 fe7d 	bl	800419c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d302      	bcc.n	80024b4 <xQueueGenericSend+0xd4>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d129      	bne.n	8002508 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	68b9      	ldr	r1, [r7, #8]
 80024b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024ba:	f000 fa07 	bl	80028cc <prvCopyDataToQueue>
 80024be:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d010      	beq.n	80024ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ca:	3324      	adds	r3, #36	; 0x24
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 ffbf 	bl	8003450 <xTaskRemoveFromEventList>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d013      	beq.n	8002500 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80024d8:	4b3f      	ldr	r3, [pc, #252]	; (80025d8 <xQueueGenericSend+0x1f8>)
 80024da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	f3bf 8f6f 	isb	sy
 80024e8:	e00a      	b.n	8002500 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80024ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80024f0:	4b39      	ldr	r3, [pc, #228]	; (80025d8 <xQueueGenericSend+0x1f8>)
 80024f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	f3bf 8f4f 	dsb	sy
 80024fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002500:	f001 fe7c 	bl	80041fc <vPortExitCritical>
				return pdPASS;
 8002504:	2301      	movs	r3, #1
 8002506:	e063      	b.n	80025d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d103      	bne.n	8002516 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800250e:	f001 fe75 	bl	80041fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002512:	2300      	movs	r3, #0
 8002514:	e05c      	b.n	80025d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002518:	2b00      	cmp	r3, #0
 800251a:	d106      	bne.n	800252a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	4618      	mov	r0, r3
 8002522:	f000 fff9 	bl	8003518 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002526:	2301      	movs	r3, #1
 8002528:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800252a:	f001 fe67 	bl	80041fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800252e:	f000 fd6b 	bl	8003008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002532:	f001 fe33 	bl	800419c <vPortEnterCritical>
 8002536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002538:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800253c:	b25b      	sxtb	r3, r3
 800253e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002542:	d103      	bne.n	800254c <xQueueGenericSend+0x16c>
 8002544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800254c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002552:	b25b      	sxtb	r3, r3
 8002554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002558:	d103      	bne.n	8002562 <xQueueGenericSend+0x182>
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002562:	f001 fe4b 	bl	80041fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002566:	1d3a      	adds	r2, r7, #4
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	4611      	mov	r1, r2
 800256e:	4618      	mov	r0, r3
 8002570:	f000 ffe8 	bl	8003544 <xTaskCheckForTimeOut>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d124      	bne.n	80025c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800257a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800257c:	f000 fa9e 	bl	8002abc <prvIsQueueFull>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d018      	beq.n	80025b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002588:	3310      	adds	r3, #16
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	4611      	mov	r1, r2
 800258e:	4618      	mov	r0, r3
 8002590:	f000 ff0e 	bl	80033b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002596:	f000 fa29 	bl	80029ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800259a:	f000 fd43 	bl	8003024 <xTaskResumeAll>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f47f af7c 	bne.w	800249e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80025a6:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <xQueueGenericSend+0x1f8>)
 80025a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	f3bf 8f6f 	isb	sy
 80025b6:	e772      	b.n	800249e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80025b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025ba:	f000 fa17 	bl	80029ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025be:	f000 fd31 	bl	8003024 <xTaskResumeAll>
 80025c2:	e76c      	b.n	800249e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80025c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025c6:	f000 fa11 	bl	80029ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025ca:	f000 fd2b 	bl	8003024 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80025ce:	2300      	movs	r3, #0
		}
	}
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3738      	adds	r7, #56	; 0x38
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	e000ed04 	.word	0xe000ed04

080025dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08e      	sub	sp, #56	; 0x38
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80025ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10a      	bne.n	800260a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80025f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f8:	f383 8811 	msr	BASEPRI, r3
 80025fc:	f3bf 8f6f 	isb	sy
 8002600:	f3bf 8f4f 	dsb	sy
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002606:	bf00      	nop
 8002608:	e7fe      	b.n	8002608 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d103      	bne.n	8002618 <xQueueGenericSendFromISR+0x3c>
 8002610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <xQueueGenericSendFromISR+0x40>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <xQueueGenericSendFromISR+0x42>
 800261c:	2300      	movs	r3, #0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10a      	bne.n	8002638 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002626:	f383 8811 	msr	BASEPRI, r3
 800262a:	f3bf 8f6f 	isb	sy
 800262e:	f3bf 8f4f 	dsb	sy
 8002632:	623b      	str	r3, [r7, #32]
}
 8002634:	bf00      	nop
 8002636:	e7fe      	b.n	8002636 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d103      	bne.n	8002646 <xQueueGenericSendFromISR+0x6a>
 800263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <xQueueGenericSendFromISR+0x6e>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <xQueueGenericSendFromISR+0x70>
 800264a:	2300      	movs	r3, #0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10a      	bne.n	8002666 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002654:	f383 8811 	msr	BASEPRI, r3
 8002658:	f3bf 8f6f 	isb	sy
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	61fb      	str	r3, [r7, #28]
}
 8002662:	bf00      	nop
 8002664:	e7fe      	b.n	8002664 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002666:	f001 fe5b 	bl	8004320 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800266a:	f3ef 8211 	mrs	r2, BASEPRI
 800266e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002672:	f383 8811 	msr	BASEPRI, r3
 8002676:	f3bf 8f6f 	isb	sy
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	61ba      	str	r2, [r7, #24]
 8002680:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002682:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268e:	429a      	cmp	r2, r3
 8002690:	d302      	bcc.n	8002698 <xQueueGenericSendFromISR+0xbc>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d12c      	bne.n	80026f2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800269e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026a8:	f000 f910 	bl	80028cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80026ac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d112      	bne.n	80026dc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d016      	beq.n	80026ec <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c0:	3324      	adds	r3, #36	; 0x24
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 fec4 	bl	8003450 <xTaskRemoveFromEventList>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00e      	beq.n	80026ec <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00b      	beq.n	80026ec <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	e007      	b.n	80026ec <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80026dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026e0:	3301      	adds	r3, #1
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	b25a      	sxtb	r2, r3
 80026e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80026ec:	2301      	movs	r3, #1
 80026ee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80026f0:	e001      	b.n	80026f6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	637b      	str	r3, [r7, #52]	; 0x34
 80026f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002700:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002704:	4618      	mov	r0, r3
 8002706:	3738      	adds	r7, #56	; 0x38
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08c      	sub	sp, #48	; 0x30
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002718:	2300      	movs	r3, #0
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10a      	bne.n	800273c <xQueueReceive+0x30>
	__asm volatile
 8002726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272a:	f383 8811 	msr	BASEPRI, r3
 800272e:	f3bf 8f6f 	isb	sy
 8002732:	f3bf 8f4f 	dsb	sy
 8002736:	623b      	str	r3, [r7, #32]
}
 8002738:	bf00      	nop
 800273a:	e7fe      	b.n	800273a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d103      	bne.n	800274a <xQueueReceive+0x3e>
 8002742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <xQueueReceive+0x42>
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <xQueueReceive+0x44>
 800274e:	2300      	movs	r3, #0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <xQueueReceive+0x5e>
	__asm volatile
 8002754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	f3bf 8f4f 	dsb	sy
 8002764:	61fb      	str	r3, [r7, #28]
}
 8002766:	bf00      	nop
 8002768:	e7fe      	b.n	8002768 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800276a:	f001 f833 	bl	80037d4 <xTaskGetSchedulerState>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d102      	bne.n	800277a <xQueueReceive+0x6e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <xQueueReceive+0x72>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <xQueueReceive+0x74>
 800277e:	2300      	movs	r3, #0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10a      	bne.n	800279a <xQueueReceive+0x8e>
	__asm volatile
 8002784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002788:	f383 8811 	msr	BASEPRI, r3
 800278c:	f3bf 8f6f 	isb	sy
 8002790:	f3bf 8f4f 	dsb	sy
 8002794:	61bb      	str	r3, [r7, #24]
}
 8002796:	bf00      	nop
 8002798:	e7fe      	b.n	8002798 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800279a:	f001 fcff 	bl	800419c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d01f      	beq.n	80027ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027ae:	f000 f8f7 	bl	80029a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	1e5a      	subs	r2, r3, #1
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00f      	beq.n	80027e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c4:	3310      	adds	r3, #16
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fe42 	bl	8003450 <xTaskRemoveFromEventList>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d007      	beq.n	80027e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80027d2:	4b3d      	ldr	r3, [pc, #244]	; (80028c8 <xQueueReceive+0x1bc>)
 80027d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	f3bf 8f4f 	dsb	sy
 80027de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80027e2:	f001 fd0b 	bl	80041fc <vPortExitCritical>
				return pdPASS;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e069      	b.n	80028be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d103      	bne.n	80027f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027f0:	f001 fd04 	bl	80041fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80027f4:	2300      	movs	r3, #0
 80027f6:	e062      	b.n	80028be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027fe:	f107 0310 	add.w	r3, r7, #16
 8002802:	4618      	mov	r0, r3
 8002804:	f000 fe88 	bl	8003518 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002808:	2301      	movs	r3, #1
 800280a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800280c:	f001 fcf6 	bl	80041fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002810:	f000 fbfa 	bl	8003008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002814:	f001 fcc2 	bl	800419c <vPortEnterCritical>
 8002818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800281e:	b25b      	sxtb	r3, r3
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d103      	bne.n	800282e <xQueueReceive+0x122>
 8002826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002830:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002834:	b25b      	sxtb	r3, r3
 8002836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283a:	d103      	bne.n	8002844 <xQueueReceive+0x138>
 800283c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002844:	f001 fcda 	bl	80041fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002848:	1d3a      	adds	r2, r7, #4
 800284a:	f107 0310 	add.w	r3, r7, #16
 800284e:	4611      	mov	r1, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f000 fe77 	bl	8003544 <xTaskCheckForTimeOut>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d123      	bne.n	80028a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800285c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800285e:	f000 f917 	bl	8002a90 <prvIsQueueEmpty>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d017      	beq.n	8002898 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286a:	3324      	adds	r3, #36	; 0x24
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	4611      	mov	r1, r2
 8002870:	4618      	mov	r0, r3
 8002872:	f000 fd9d 	bl	80033b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002876:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002878:	f000 f8b8 	bl	80029ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800287c:	f000 fbd2 	bl	8003024 <xTaskResumeAll>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d189      	bne.n	800279a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002886:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <xQueueReceive+0x1bc>)
 8002888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	f3bf 8f4f 	dsb	sy
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	e780      	b.n	800279a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800289a:	f000 f8a7 	bl	80029ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800289e:	f000 fbc1 	bl	8003024 <xTaskResumeAll>
 80028a2:	e77a      	b.n	800279a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80028a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028a6:	f000 f8a1 	bl	80029ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028aa:	f000 fbbb 	bl	8003024 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028b0:	f000 f8ee 	bl	8002a90 <prvIsQueueEmpty>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f43f af6f 	beq.w	800279a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80028bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3730      	adds	r7, #48	; 0x30
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	e000ed04 	.word	0xe000ed04

080028cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10d      	bne.n	8002906 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d14d      	bne.n	800298e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 ff8a 	bl	8003810 <xTaskPriorityDisinherit>
 80028fc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	605a      	str	r2, [r3, #4]
 8002904:	e043      	b.n	800298e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d119      	bne.n	8002940 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6898      	ldr	r0, [r3, #8]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	461a      	mov	r2, r3
 8002916:	68b9      	ldr	r1, [r7, #8]
 8002918:	f001 ff3c 	bl	8004794 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	441a      	add	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	429a      	cmp	r2, r3
 8002934:	d32b      	bcc.n	800298e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	e026      	b.n	800298e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	68d8      	ldr	r0, [r3, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	461a      	mov	r2, r3
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	f001 ff22 	bl	8004794 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	425b      	negs	r3, r3
 800295a:	441a      	add	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d207      	bcs.n	800297c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	425b      	negs	r3, r3
 8002976:	441a      	add	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d105      	bne.n	800298e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	3b01      	subs	r3, #1
 800298c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002996:	697b      	ldr	r3, [r7, #20]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d018      	beq.n	80029e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	441a      	add	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d303      	bcc.n	80029d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68d9      	ldr	r1, [r3, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	461a      	mov	r2, r3
 80029de:	6838      	ldr	r0, [r7, #0]
 80029e0:	f001 fed8 	bl	8004794 <memcpy>
	}
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80029f4:	f001 fbd2 	bl	800419c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a00:	e011      	b.n	8002a26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d012      	beq.n	8002a30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3324      	adds	r3, #36	; 0x24
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fd1e 	bl	8003450 <xTaskRemoveFromEventList>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a1a:	f000 fdf5 	bl	8003608 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	dce9      	bgt.n	8002a02 <prvUnlockQueue+0x16>
 8002a2e:	e000      	b.n	8002a32 <prvUnlockQueue+0x46>
					break;
 8002a30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	22ff      	movs	r2, #255	; 0xff
 8002a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002a3a:	f001 fbdf 	bl	80041fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a3e:	f001 fbad 	bl	800419c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a4a:	e011      	b.n	8002a70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d012      	beq.n	8002a7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3310      	adds	r3, #16
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 fcf9 	bl	8003450 <xTaskRemoveFromEventList>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002a64:	f000 fdd0 	bl	8003608 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002a68:	7bbb      	ldrb	r3, [r7, #14]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	dce9      	bgt.n	8002a4c <prvUnlockQueue+0x60>
 8002a78:	e000      	b.n	8002a7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002a7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	22ff      	movs	r2, #255	; 0xff
 8002a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002a84:	f001 fbba 	bl	80041fc <vPortExitCritical>
}
 8002a88:	bf00      	nop
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a98:	f001 fb80 	bl	800419c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d102      	bne.n	8002aaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	e001      	b.n	8002aae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002aae:	f001 fba5 	bl	80041fc <vPortExitCritical>

	return xReturn;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ac4:	f001 fb6a 	bl	800419c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d102      	bne.n	8002ada <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	e001      	b.n	8002ade <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ade:	f001 fb8d 	bl	80041fc <vPortExitCritical>

	return xReturn;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	e014      	b.n	8002b26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002afc:	4a0e      	ldr	r2, [pc, #56]	; (8002b38 <vQueueAddToRegistry+0x4c>)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10b      	bne.n	8002b20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b08:	490b      	ldr	r1, [pc, #44]	; (8002b38 <vQueueAddToRegistry+0x4c>)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b12:	4a09      	ldr	r2, [pc, #36]	; (8002b38 <vQueueAddToRegistry+0x4c>)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002b1e:	e006      	b.n	8002b2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	3301      	adds	r3, #1
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b07      	cmp	r3, #7
 8002b2a:	d9e7      	bls.n	8002afc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr
 8002b38:	20000758 	.word	0x20000758

08002b3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b4c:	f001 fb26 	bl	800419c <vPortEnterCritical>
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b56:	b25b      	sxtb	r3, r3
 8002b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5c:	d103      	bne.n	8002b66 <vQueueWaitForMessageRestricted+0x2a>
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b6c:	b25b      	sxtb	r3, r3
 8002b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b72:	d103      	bne.n	8002b7c <vQueueWaitForMessageRestricted+0x40>
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b7c:	f001 fb3e 	bl	80041fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	3324      	adds	r3, #36	; 0x24
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fc31 	bl	80033f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002b96:	6978      	ldr	r0, [r7, #20]
 8002b98:	f7ff ff28 	bl	80029ec <prvUnlockQueue>
	}
 8002b9c:	bf00      	nop
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08e      	sub	sp, #56	; 0x38
 8002ba8:	af04      	add	r7, sp, #16
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <xTaskCreateStatic+0x2a>
	__asm volatile
 8002bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbc:	f383 8811 	msr	BASEPRI, r3
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	623b      	str	r3, [r7, #32]
}
 8002bca:	bf00      	nop
 8002bcc:	e7fe      	b.n	8002bcc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10a      	bne.n	8002bea <xTaskCreateStatic+0x46>
	__asm volatile
 8002bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd8:	f383 8811 	msr	BASEPRI, r3
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	f3bf 8f4f 	dsb	sy
 8002be4:	61fb      	str	r3, [r7, #28]
}
 8002be6:	bf00      	nop
 8002be8:	e7fe      	b.n	8002be8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002bea:	235c      	movs	r3, #92	; 0x5c
 8002bec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	2b5c      	cmp	r3, #92	; 0x5c
 8002bf2:	d00a      	beq.n	8002c0a <xTaskCreateStatic+0x66>
	__asm volatile
 8002bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf8:	f383 8811 	msr	BASEPRI, r3
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	61bb      	str	r3, [r7, #24]
}
 8002c06:	bf00      	nop
 8002c08:	e7fe      	b.n	8002c08 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01e      	beq.n	8002c4e <xTaskCreateStatic+0xaa>
 8002c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d01b      	beq.n	8002c4e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c28:	2300      	movs	r3, #0
 8002c2a:	9303      	str	r3, [sp, #12]
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	9302      	str	r3, [sp, #8]
 8002c30:	f107 0314 	add.w	r3, r7, #20
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	68b9      	ldr	r1, [r7, #8]
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 f850 	bl	8002ce6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c48:	f000 f8d4 	bl	8002df4 <prvAddNewTaskToReadyList>
 8002c4c:	e001      	b.n	8002c52 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c52:	697b      	ldr	r3, [r7, #20]
	}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3728      	adds	r7, #40	; 0x28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08c      	sub	sp, #48	; 0x30
 8002c60:	af04      	add	r7, sp, #16
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f001 fb93 	bl	800439c <pvPortMalloc>
 8002c76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00e      	beq.n	8002c9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002c7e:	205c      	movs	r0, #92	; 0x5c
 8002c80:	f001 fb8c 	bl	800439c <pvPortMalloc>
 8002c84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30
 8002c92:	e005      	b.n	8002ca0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c94:	6978      	ldr	r0, [r7, #20]
 8002c96:	f001 fc45 	bl	8004524 <vPortFree>
 8002c9a:	e001      	b.n	8002ca0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d017      	beq.n	8002cd6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cae:	88fa      	ldrh	r2, [r7, #6]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	9303      	str	r3, [sp, #12]
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	9302      	str	r3, [sp, #8]
 8002cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	68b9      	ldr	r1, [r7, #8]
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f80e 	bl	8002ce6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cca:	69f8      	ldr	r0, [r7, #28]
 8002ccc:	f000 f892 	bl	8002df4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	61bb      	str	r3, [r7, #24]
 8002cd4:	e002      	b.n	8002cdc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002cdc:	69bb      	ldr	r3, [r7, #24]
	}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3720      	adds	r7, #32
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b088      	sub	sp, #32
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	21a5      	movs	r1, #165	; 0xa5
 8002d00:	f001 fd56 	bl	80047b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	f023 0307 	bic.w	r3, r3, #7
 8002d1c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00a      	beq.n	8002d3e <prvInitialiseNewTask+0x58>
	__asm volatile
 8002d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	617b      	str	r3, [r7, #20]
}
 8002d3a:	bf00      	nop
 8002d3c:	e7fe      	b.n	8002d3c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	e012      	b.n	8002d6a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	4413      	add	r3, r2
 8002d4a:	7819      	ldrb	r1, [r3, #0]
 8002d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	4413      	add	r3, r2
 8002d52:	3334      	adds	r3, #52	; 0x34
 8002d54:	460a      	mov	r2, r1
 8002d56:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d006      	beq.n	8002d72 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	3301      	adds	r3, #1
 8002d68:	61fb      	str	r3, [r7, #28]
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	2b0f      	cmp	r3, #15
 8002d6e:	d9e9      	bls.n	8002d44 <prvInitialiseNewTask+0x5e>
 8002d70:	e000      	b.n	8002d74 <prvInitialiseNewTask+0x8e>
		{
			break;
 8002d72:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	2b37      	cmp	r3, #55	; 0x37
 8002d80:	d901      	bls.n	8002d86 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d82:	2337      	movs	r3, #55	; 0x37
 8002d84:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d8a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d90:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d94:	2200      	movs	r2, #0
 8002d96:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff f94e 	bl	800203e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	3318      	adds	r3, #24
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff f949 	bl	800203e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002db0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	68f9      	ldr	r1, [r7, #12]
 8002dd4:	69b8      	ldr	r0, [r7, #24]
 8002dd6:	f001 f8ef 	bl	8003fb8 <pxPortInitialiseStack>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002dec:	bf00      	nop
 8002dee:	3720      	adds	r7, #32
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002dfc:	f001 f9ce 	bl	800419c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e00:	4b2d      	ldr	r3, [pc, #180]	; (8002eb8 <prvAddNewTaskToReadyList+0xc4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3301      	adds	r3, #1
 8002e06:	4a2c      	ldr	r2, [pc, #176]	; (8002eb8 <prvAddNewTaskToReadyList+0xc4>)
 8002e08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e0a:	4b2c      	ldr	r3, [pc, #176]	; (8002ebc <prvAddNewTaskToReadyList+0xc8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e12:	4a2a      	ldr	r2, [pc, #168]	; (8002ebc <prvAddNewTaskToReadyList+0xc8>)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e18:	4b27      	ldr	r3, [pc, #156]	; (8002eb8 <prvAddNewTaskToReadyList+0xc4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d110      	bne.n	8002e42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e20:	f000 fc16 	bl	8003650 <prvInitialiseTaskLists>
 8002e24:	e00d      	b.n	8002e42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e26:	4b26      	ldr	r3, [pc, #152]	; (8002ec0 <prvAddNewTaskToReadyList+0xcc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e2e:	4b23      	ldr	r3, [pc, #140]	; (8002ebc <prvAddNewTaskToReadyList+0xc8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d802      	bhi.n	8002e42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e3c:	4a1f      	ldr	r2, [pc, #124]	; (8002ebc <prvAddNewTaskToReadyList+0xc8>)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e42:	4b20      	ldr	r3, [pc, #128]	; (8002ec4 <prvAddNewTaskToReadyList+0xd0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	3301      	adds	r3, #1
 8002e48:	4a1e      	ldr	r2, [pc, #120]	; (8002ec4 <prvAddNewTaskToReadyList+0xd0>)
 8002e4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <prvAddNewTaskToReadyList+0xd0>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <prvAddNewTaskToReadyList+0xd4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d903      	bls.n	8002e68 <prvAddNewTaskToReadyList+0x74>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	4a18      	ldr	r2, [pc, #96]	; (8002ec8 <prvAddNewTaskToReadyList+0xd4>)
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4a15      	ldr	r2, [pc, #84]	; (8002ecc <prvAddNewTaskToReadyList+0xd8>)
 8002e76:	441a      	add	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	f7ff f8e9 	bl	8002056 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e84:	f001 f9ba 	bl	80041fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e88:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <prvAddNewTaskToReadyList+0xcc>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00e      	beq.n	8002eae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e90:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <prvAddNewTaskToReadyList+0xc8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d207      	bcs.n	8002eae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <prvAddNewTaskToReadyList+0xdc>)
 8002ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000c6c 	.word	0x20000c6c
 8002ebc:	20000798 	.word	0x20000798
 8002ec0:	20000c78 	.word	0x20000c78
 8002ec4:	20000c88 	.word	0x20000c88
 8002ec8:	20000c74 	.word	0x20000c74
 8002ecc:	2000079c 	.word	0x2000079c
 8002ed0:	e000ed04 	.word	0xe000ed04

08002ed4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d017      	beq.n	8002f16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002ee6:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <vTaskDelay+0x60>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00a      	beq.n	8002f04 <vTaskDelay+0x30>
	__asm volatile
 8002eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef2:	f383 8811 	msr	BASEPRI, r3
 8002ef6:	f3bf 8f6f 	isb	sy
 8002efa:	f3bf 8f4f 	dsb	sy
 8002efe:	60bb      	str	r3, [r7, #8]
}
 8002f00:	bf00      	nop
 8002f02:	e7fe      	b.n	8002f02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f04:	f000 f880 	bl	8003008 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f08:	2100      	movs	r1, #0
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fcee 	bl	80038ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f10:	f000 f888 	bl	8003024 <xTaskResumeAll>
 8002f14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d107      	bne.n	8002f2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <vTaskDelay+0x64>)
 8002f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000c94 	.word	0x20000c94
 8002f38:	e000ed04 	.word	0xe000ed04

08002f3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	; 0x28
 8002f40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f4a:	463a      	mov	r2, r7
 8002f4c:	1d39      	adds	r1, r7, #4
 8002f4e:	f107 0308 	add.w	r3, r7, #8
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff f822 	bl	8001f9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f58:	6839      	ldr	r1, [r7, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	9202      	str	r2, [sp, #8]
 8002f60:	9301      	str	r3, [sp, #4]
 8002f62:	2300      	movs	r3, #0
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	2300      	movs	r3, #0
 8002f68:	460a      	mov	r2, r1
 8002f6a:	4921      	ldr	r1, [pc, #132]	; (8002ff0 <vTaskStartScheduler+0xb4>)
 8002f6c:	4821      	ldr	r0, [pc, #132]	; (8002ff4 <vTaskStartScheduler+0xb8>)
 8002f6e:	f7ff fe19 	bl	8002ba4 <xTaskCreateStatic>
 8002f72:	4603      	mov	r3, r0
 8002f74:	4a20      	ldr	r2, [pc, #128]	; (8002ff8 <vTaskStartScheduler+0xbc>)
 8002f76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f78:	4b1f      	ldr	r3, [pc, #124]	; (8002ff8 <vTaskStartScheduler+0xbc>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f80:	2301      	movs	r3, #1
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	e001      	b.n	8002f8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d102      	bne.n	8002f96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002f90:	f000 fd00 	bl	8003994 <xTimerCreateTimerTask>
 8002f94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d116      	bne.n	8002fca <vTaskStartScheduler+0x8e>
	__asm volatile
 8002f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	613b      	str	r3, [r7, #16]
}
 8002fae:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002fb0:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <vTaskStartScheduler+0xc0>)
 8002fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fb8:	4b11      	ldr	r3, [pc, #68]	; (8003000 <vTaskStartScheduler+0xc4>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002fbe:	4b11      	ldr	r3, [pc, #68]	; (8003004 <vTaskStartScheduler+0xc8>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fc4:	f001 f878 	bl	80040b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fc8:	e00e      	b.n	8002fe8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d10a      	bne.n	8002fe8 <vTaskStartScheduler+0xac>
	__asm volatile
 8002fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd6:	f383 8811 	msr	BASEPRI, r3
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	60fb      	str	r3, [r7, #12]
}
 8002fe4:	bf00      	nop
 8002fe6:	e7fe      	b.n	8002fe6 <vTaskStartScheduler+0xaa>
}
 8002fe8:	bf00      	nop
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	0800485c 	.word	0x0800485c
 8002ff4:	08003621 	.word	0x08003621
 8002ff8:	20000c90 	.word	0x20000c90
 8002ffc:	20000c8c 	.word	0x20000c8c
 8003000:	20000c78 	.word	0x20000c78
 8003004:	20000c70 	.word	0x20000c70

08003008 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800300c:	4b04      	ldr	r3, [pc, #16]	; (8003020 <vTaskSuspendAll+0x18>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3301      	adds	r3, #1
 8003012:	4a03      	ldr	r2, [pc, #12]	; (8003020 <vTaskSuspendAll+0x18>)
 8003014:	6013      	str	r3, [r2, #0]
}
 8003016:	bf00      	nop
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	20000c94 	.word	0x20000c94

08003024 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800302e:	2300      	movs	r3, #0
 8003030:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003032:	4b42      	ldr	r3, [pc, #264]	; (800313c <xTaskResumeAll+0x118>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <xTaskResumeAll+0x2c>
	__asm volatile
 800303a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	603b      	str	r3, [r7, #0]
}
 800304c:	bf00      	nop
 800304e:	e7fe      	b.n	800304e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003050:	f001 f8a4 	bl	800419c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003054:	4b39      	ldr	r3, [pc, #228]	; (800313c <xTaskResumeAll+0x118>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3b01      	subs	r3, #1
 800305a:	4a38      	ldr	r2, [pc, #224]	; (800313c <xTaskResumeAll+0x118>)
 800305c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800305e:	4b37      	ldr	r3, [pc, #220]	; (800313c <xTaskResumeAll+0x118>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d162      	bne.n	800312c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003066:	4b36      	ldr	r3, [pc, #216]	; (8003140 <xTaskResumeAll+0x11c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d05e      	beq.n	800312c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800306e:	e02f      	b.n	80030d0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003070:	4b34      	ldr	r3, [pc, #208]	; (8003144 <xTaskResumeAll+0x120>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3318      	adds	r3, #24
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff f845 	bl	800210c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3304      	adds	r3, #4
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff f840 	bl	800210c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003090:	4b2d      	ldr	r3, [pc, #180]	; (8003148 <xTaskResumeAll+0x124>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d903      	bls.n	80030a0 <xTaskResumeAll+0x7c>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	4a2a      	ldr	r2, [pc, #168]	; (8003148 <xTaskResumeAll+0x124>)
 800309e:	6013      	str	r3, [r2, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4a27      	ldr	r2, [pc, #156]	; (800314c <xTaskResumeAll+0x128>)
 80030ae:	441a      	add	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	3304      	adds	r3, #4
 80030b4:	4619      	mov	r1, r3
 80030b6:	4610      	mov	r0, r2
 80030b8:	f7fe ffcd 	bl	8002056 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c0:	4b23      	ldr	r3, [pc, #140]	; (8003150 <xTaskResumeAll+0x12c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d302      	bcc.n	80030d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80030ca:	4b22      	ldr	r3, [pc, #136]	; (8003154 <xTaskResumeAll+0x130>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030d0:	4b1c      	ldr	r3, [pc, #112]	; (8003144 <xTaskResumeAll+0x120>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1cb      	bne.n	8003070 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80030de:	f000 fb55 	bl	800378c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80030e2:	4b1d      	ldr	r3, [pc, #116]	; (8003158 <xTaskResumeAll+0x134>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d010      	beq.n	8003110 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80030ee:	f000 f845 	bl	800317c <xTaskIncrementTick>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80030f8:	4b16      	ldr	r3, [pc, #88]	; (8003154 <xTaskResumeAll+0x130>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3b01      	subs	r3, #1
 8003102:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f1      	bne.n	80030ee <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800310a:	4b13      	ldr	r3, [pc, #76]	; (8003158 <xTaskResumeAll+0x134>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003110:	4b10      	ldr	r3, [pc, #64]	; (8003154 <xTaskResumeAll+0x130>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d009      	beq.n	800312c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003118:	2301      	movs	r3, #1
 800311a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800311c:	4b0f      	ldr	r3, [pc, #60]	; (800315c <xTaskResumeAll+0x138>)
 800311e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800312c:	f001 f866 	bl	80041fc <vPortExitCritical>

	return xAlreadyYielded;
 8003130:	68bb      	ldr	r3, [r7, #8]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000c94 	.word	0x20000c94
 8003140:	20000c6c 	.word	0x20000c6c
 8003144:	20000c2c 	.word	0x20000c2c
 8003148:	20000c74 	.word	0x20000c74
 800314c:	2000079c 	.word	0x2000079c
 8003150:	20000798 	.word	0x20000798
 8003154:	20000c80 	.word	0x20000c80
 8003158:	20000c7c 	.word	0x20000c7c
 800315c:	e000ed04 	.word	0xe000ed04

08003160 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003166:	4b04      	ldr	r3, [pc, #16]	; (8003178 <xTaskGetTickCount+0x18>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800316c:	687b      	ldr	r3, [r7, #4]
}
 800316e:	4618      	mov	r0, r3
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	20000c70 	.word	0x20000c70

0800317c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003186:	4b51      	ldr	r3, [pc, #324]	; (80032cc <xTaskIncrementTick+0x150>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f040 808e 	bne.w	80032ac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003190:	4b4f      	ldr	r3, [pc, #316]	; (80032d0 <xTaskIncrementTick+0x154>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3301      	adds	r3, #1
 8003196:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003198:	4a4d      	ldr	r2, [pc, #308]	; (80032d0 <xTaskIncrementTick+0x154>)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d120      	bne.n	80031e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80031a4:	4b4b      	ldr	r3, [pc, #300]	; (80032d4 <xTaskIncrementTick+0x158>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80031ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	603b      	str	r3, [r7, #0]
}
 80031c0:	bf00      	nop
 80031c2:	e7fe      	b.n	80031c2 <xTaskIncrementTick+0x46>
 80031c4:	4b43      	ldr	r3, [pc, #268]	; (80032d4 <xTaskIncrementTick+0x158>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	4b43      	ldr	r3, [pc, #268]	; (80032d8 <xTaskIncrementTick+0x15c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a41      	ldr	r2, [pc, #260]	; (80032d4 <xTaskIncrementTick+0x158>)
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	4a41      	ldr	r2, [pc, #260]	; (80032d8 <xTaskIncrementTick+0x15c>)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	4b40      	ldr	r3, [pc, #256]	; (80032dc <xTaskIncrementTick+0x160>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3301      	adds	r3, #1
 80031de:	4a3f      	ldr	r2, [pc, #252]	; (80032dc <xTaskIncrementTick+0x160>)
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	f000 fad3 	bl	800378c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031e6:	4b3e      	ldr	r3, [pc, #248]	; (80032e0 <xTaskIncrementTick+0x164>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d34e      	bcc.n	800328e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031f0:	4b38      	ldr	r3, [pc, #224]	; (80032d4 <xTaskIncrementTick+0x158>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <xTaskIncrementTick+0x82>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <xTaskIncrementTick+0x84>
 80031fe:	2300      	movs	r3, #0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d004      	beq.n	800320e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003204:	4b36      	ldr	r3, [pc, #216]	; (80032e0 <xTaskIncrementTick+0x164>)
 8003206:	f04f 32ff 	mov.w	r2, #4294967295
 800320a:	601a      	str	r2, [r3, #0]
					break;
 800320c:	e03f      	b.n	800328e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800320e:	4b31      	ldr	r3, [pc, #196]	; (80032d4 <xTaskIncrementTick+0x158>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	429a      	cmp	r2, r3
 8003224:	d203      	bcs.n	800322e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003226:	4a2e      	ldr	r2, [pc, #184]	; (80032e0 <xTaskIncrementTick+0x164>)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6013      	str	r3, [r2, #0]
						break;
 800322c:	e02f      	b.n	800328e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	3304      	adds	r3, #4
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe ff6a 	bl	800210c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323c:	2b00      	cmp	r3, #0
 800323e:	d004      	beq.n	800324a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	3318      	adds	r3, #24
 8003244:	4618      	mov	r0, r3
 8003246:	f7fe ff61 	bl	800210c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324e:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <xTaskIncrementTick+0x168>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d903      	bls.n	800325e <xTaskIncrementTick+0xe2>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	4a22      	ldr	r2, [pc, #136]	; (80032e4 <xTaskIncrementTick+0x168>)
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4a1f      	ldr	r2, [pc, #124]	; (80032e8 <xTaskIncrementTick+0x16c>)
 800326c:	441a      	add	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	3304      	adds	r3, #4
 8003272:	4619      	mov	r1, r3
 8003274:	4610      	mov	r0, r2
 8003276:	f7fe feee 	bl	8002056 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327e:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <xTaskIncrementTick+0x170>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	429a      	cmp	r2, r3
 8003286:	d3b3      	bcc.n	80031f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003288:	2301      	movs	r3, #1
 800328a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800328c:	e7b0      	b.n	80031f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800328e:	4b17      	ldr	r3, [pc, #92]	; (80032ec <xTaskIncrementTick+0x170>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003294:	4914      	ldr	r1, [pc, #80]	; (80032e8 <xTaskIncrementTick+0x16c>)
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d907      	bls.n	80032b6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80032a6:	2301      	movs	r3, #1
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	e004      	b.n	80032b6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80032ac:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <xTaskIncrementTick+0x174>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3301      	adds	r3, #1
 80032b2:	4a0f      	ldr	r2, [pc, #60]	; (80032f0 <xTaskIncrementTick+0x174>)
 80032b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80032b6:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <xTaskIncrementTick+0x178>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80032be:	2301      	movs	r3, #1
 80032c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80032c2:	697b      	ldr	r3, [r7, #20]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20000c94 	.word	0x20000c94
 80032d0:	20000c70 	.word	0x20000c70
 80032d4:	20000c24 	.word	0x20000c24
 80032d8:	20000c28 	.word	0x20000c28
 80032dc:	20000c84 	.word	0x20000c84
 80032e0:	20000c8c 	.word	0x20000c8c
 80032e4:	20000c74 	.word	0x20000c74
 80032e8:	2000079c 	.word	0x2000079c
 80032ec:	20000798 	.word	0x20000798
 80032f0:	20000c7c 	.word	0x20000c7c
 80032f4:	20000c80 	.word	0x20000c80

080032f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032fe:	4b27      	ldr	r3, [pc, #156]	; (800339c <vTaskSwitchContext+0xa4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003306:	4b26      	ldr	r3, [pc, #152]	; (80033a0 <vTaskSwitchContext+0xa8>)
 8003308:	2201      	movs	r2, #1
 800330a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800330c:	e041      	b.n	8003392 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800330e:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <vTaskSwitchContext+0xa8>)
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003314:	4b23      	ldr	r3, [pc, #140]	; (80033a4 <vTaskSwitchContext+0xac>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	e010      	b.n	800333e <vTaskSwitchContext+0x46>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10a      	bne.n	8003338 <vTaskSwitchContext+0x40>
	__asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	607b      	str	r3, [r7, #4]
}
 8003334:	bf00      	nop
 8003336:	e7fe      	b.n	8003336 <vTaskSwitchContext+0x3e>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	3b01      	subs	r3, #1
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	491a      	ldr	r1, [pc, #104]	; (80033a8 <vTaskSwitchContext+0xb0>)
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0e4      	beq.n	800331c <vTaskSwitchContext+0x24>
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4a12      	ldr	r2, [pc, #72]	; (80033a8 <vTaskSwitchContext+0xb0>)
 800335e:	4413      	add	r3, r2
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	3308      	adds	r3, #8
 8003374:	429a      	cmp	r2, r3
 8003376:	d104      	bne.n	8003382 <vTaskSwitchContext+0x8a>
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	605a      	str	r2, [r3, #4]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4a08      	ldr	r2, [pc, #32]	; (80033ac <vTaskSwitchContext+0xb4>)
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	4a05      	ldr	r2, [pc, #20]	; (80033a4 <vTaskSwitchContext+0xac>)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6013      	str	r3, [r2, #0]
}
 8003392:	bf00      	nop
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	20000c94 	.word	0x20000c94
 80033a0:	20000c80 	.word	0x20000c80
 80033a4:	20000c74 	.word	0x20000c74
 80033a8:	2000079c 	.word	0x2000079c
 80033ac:	20000798 	.word	0x20000798

080033b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10a      	bne.n	80033d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80033c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	60fb      	str	r3, [r7, #12]
}
 80033d2:	bf00      	nop
 80033d4:	e7fe      	b.n	80033d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033d6:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <vTaskPlaceOnEventList+0x44>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3318      	adds	r3, #24
 80033dc:	4619      	mov	r1, r3
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7fe fe5c 	bl	800209c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033e4:	2101      	movs	r1, #1
 80033e6:	6838      	ldr	r0, [r7, #0]
 80033e8:	f000 fa80 	bl	80038ec <prvAddCurrentTaskToDelayedList>
}
 80033ec:	bf00      	nop
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20000798 	.word	0x20000798

080033f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800340a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	617b      	str	r3, [r7, #20]
}
 800341c:	bf00      	nop
 800341e:	e7fe      	b.n	800341e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003420:	4b0a      	ldr	r3, [pc, #40]	; (800344c <vTaskPlaceOnEventListRestricted+0x54>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	3318      	adds	r3, #24
 8003426:	4619      	mov	r1, r3
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f7fe fe14 	bl	8002056 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003434:	f04f 33ff 	mov.w	r3, #4294967295
 8003438:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	68b8      	ldr	r0, [r7, #8]
 800343e:	f000 fa55 	bl	80038ec <prvAddCurrentTaskToDelayedList>
	}
 8003442:	bf00      	nop
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000798 	.word	0x20000798

08003450 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10a      	bne.n	800347c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	60fb      	str	r3, [r7, #12]
}
 8003478:	bf00      	nop
 800347a:	e7fe      	b.n	800347a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	3318      	adds	r3, #24
 8003480:	4618      	mov	r0, r3
 8003482:	f7fe fe43 	bl	800210c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003486:	4b1e      	ldr	r3, [pc, #120]	; (8003500 <xTaskRemoveFromEventList+0xb0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d11d      	bne.n	80034ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	3304      	adds	r3, #4
 8003492:	4618      	mov	r0, r3
 8003494:	f7fe fe3a 	bl	800210c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349c:	4b19      	ldr	r3, [pc, #100]	; (8003504 <xTaskRemoveFromEventList+0xb4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d903      	bls.n	80034ac <xTaskRemoveFromEventList+0x5c>
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a8:	4a16      	ldr	r2, [pc, #88]	; (8003504 <xTaskRemoveFromEventList+0xb4>)
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4a13      	ldr	r2, [pc, #76]	; (8003508 <xTaskRemoveFromEventList+0xb8>)
 80034ba:	441a      	add	r2, r3
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	3304      	adds	r3, #4
 80034c0:	4619      	mov	r1, r3
 80034c2:	4610      	mov	r0, r2
 80034c4:	f7fe fdc7 	bl	8002056 <vListInsertEnd>
 80034c8:	e005      	b.n	80034d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	3318      	adds	r3, #24
 80034ce:	4619      	mov	r1, r3
 80034d0:	480e      	ldr	r0, [pc, #56]	; (800350c <xTaskRemoveFromEventList+0xbc>)
 80034d2:	f7fe fdc0 	bl	8002056 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034da:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <xTaskRemoveFromEventList+0xc0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d905      	bls.n	80034f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80034e4:	2301      	movs	r3, #1
 80034e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80034e8:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <xTaskRemoveFromEventList+0xc4>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	e001      	b.n	80034f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80034f4:	697b      	ldr	r3, [r7, #20]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000c94 	.word	0x20000c94
 8003504:	20000c74 	.word	0x20000c74
 8003508:	2000079c 	.word	0x2000079c
 800350c:	20000c2c 	.word	0x20000c2c
 8003510:	20000798 	.word	0x20000798
 8003514:	20000c80 	.word	0x20000c80

08003518 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <vTaskInternalSetTimeOutState+0x24>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003528:	4b05      	ldr	r3, [pc, #20]	; (8003540 <vTaskInternalSetTimeOutState+0x28>)
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	605a      	str	r2, [r3, #4]
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	20000c84 	.word	0x20000c84
 8003540:	20000c70 	.word	0x20000c70

08003544 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10a      	bne.n	800356a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	613b      	str	r3, [r7, #16]
}
 8003566:	bf00      	nop
 8003568:	e7fe      	b.n	8003568 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10a      	bne.n	8003586 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003574:	f383 8811 	msr	BASEPRI, r3
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	60fb      	str	r3, [r7, #12]
}
 8003582:	bf00      	nop
 8003584:	e7fe      	b.n	8003584 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003586:	f000 fe09 	bl	800419c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800358a:	4b1d      	ldr	r3, [pc, #116]	; (8003600 <xTaskCheckForTimeOut+0xbc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a2:	d102      	bne.n	80035aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	e023      	b.n	80035f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <xTaskCheckForTimeOut+0xc0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d007      	beq.n	80035c6 <xTaskCheckForTimeOut+0x82>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d302      	bcc.n	80035c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80035c0:	2301      	movs	r3, #1
 80035c2:	61fb      	str	r3, [r7, #28]
 80035c4:	e015      	b.n	80035f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d20b      	bcs.n	80035e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	1ad2      	subs	r2, r2, r3
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ff9b 	bl	8003518 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
 80035e6:	e004      	b.n	80035f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80035ee:	2301      	movs	r3, #1
 80035f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80035f2:	f000 fe03 	bl	80041fc <vPortExitCritical>

	return xReturn;
 80035f6:	69fb      	ldr	r3, [r7, #28]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3720      	adds	r7, #32
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20000c70 	.word	0x20000c70
 8003604:	20000c84 	.word	0x20000c84

08003608 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <vTaskMissedYield+0x14>)
 800360e:	2201      	movs	r2, #1
 8003610:	601a      	str	r2, [r3, #0]
}
 8003612:	bf00      	nop
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	20000c80 	.word	0x20000c80

08003620 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003628:	f000 f852 	bl	80036d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800362c:	4b06      	ldr	r3, [pc, #24]	; (8003648 <prvIdleTask+0x28>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d9f9      	bls.n	8003628 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <prvIdleTask+0x2c>)
 8003636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003644:	e7f0      	b.n	8003628 <prvIdleTask+0x8>
 8003646:	bf00      	nop
 8003648:	2000079c 	.word	0x2000079c
 800364c:	e000ed04 	.word	0xe000ed04

08003650 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003656:	2300      	movs	r3, #0
 8003658:	607b      	str	r3, [r7, #4]
 800365a:	e00c      	b.n	8003676 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4a12      	ldr	r2, [pc, #72]	; (80036b0 <prvInitialiseTaskLists+0x60>)
 8003668:	4413      	add	r3, r2
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe fcc8 	bl	8002000 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3301      	adds	r3, #1
 8003674:	607b      	str	r3, [r7, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b37      	cmp	r3, #55	; 0x37
 800367a:	d9ef      	bls.n	800365c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800367c:	480d      	ldr	r0, [pc, #52]	; (80036b4 <prvInitialiseTaskLists+0x64>)
 800367e:	f7fe fcbf 	bl	8002000 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003682:	480d      	ldr	r0, [pc, #52]	; (80036b8 <prvInitialiseTaskLists+0x68>)
 8003684:	f7fe fcbc 	bl	8002000 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003688:	480c      	ldr	r0, [pc, #48]	; (80036bc <prvInitialiseTaskLists+0x6c>)
 800368a:	f7fe fcb9 	bl	8002000 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800368e:	480c      	ldr	r0, [pc, #48]	; (80036c0 <prvInitialiseTaskLists+0x70>)
 8003690:	f7fe fcb6 	bl	8002000 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003694:	480b      	ldr	r0, [pc, #44]	; (80036c4 <prvInitialiseTaskLists+0x74>)
 8003696:	f7fe fcb3 	bl	8002000 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800369a:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <prvInitialiseTaskLists+0x78>)
 800369c:	4a05      	ldr	r2, [pc, #20]	; (80036b4 <prvInitialiseTaskLists+0x64>)
 800369e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036a0:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <prvInitialiseTaskLists+0x7c>)
 80036a2:	4a05      	ldr	r2, [pc, #20]	; (80036b8 <prvInitialiseTaskLists+0x68>)
 80036a4:	601a      	str	r2, [r3, #0]
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	2000079c 	.word	0x2000079c
 80036b4:	20000bfc 	.word	0x20000bfc
 80036b8:	20000c10 	.word	0x20000c10
 80036bc:	20000c2c 	.word	0x20000c2c
 80036c0:	20000c40 	.word	0x20000c40
 80036c4:	20000c58 	.word	0x20000c58
 80036c8:	20000c24 	.word	0x20000c24
 80036cc:	20000c28 	.word	0x20000c28

080036d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036d6:	e019      	b.n	800370c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80036d8:	f000 fd60 	bl	800419c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80036dc:	4b10      	ldr	r3, [pc, #64]	; (8003720 <prvCheckTasksWaitingTermination+0x50>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3304      	adds	r3, #4
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fe fd0f 	bl	800210c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80036ee:	4b0d      	ldr	r3, [pc, #52]	; (8003724 <prvCheckTasksWaitingTermination+0x54>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	4a0b      	ldr	r2, [pc, #44]	; (8003724 <prvCheckTasksWaitingTermination+0x54>)
 80036f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <prvCheckTasksWaitingTermination+0x58>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	4a0a      	ldr	r2, [pc, #40]	; (8003728 <prvCheckTasksWaitingTermination+0x58>)
 8003700:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003702:	f000 fd7b 	bl	80041fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f810 	bl	800372c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <prvCheckTasksWaitingTermination+0x58>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e1      	bne.n	80036d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003714:	bf00      	nop
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000c40 	.word	0x20000c40
 8003724:	20000c6c 	.word	0x20000c6c
 8003728:	20000c54 	.word	0x20000c54

0800372c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800373a:	2b00      	cmp	r3, #0
 800373c:	d108      	bne.n	8003750 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	4618      	mov	r0, r3
 8003744:	f000 feee 	bl	8004524 <vPortFree>
				vPortFree( pxTCB );
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 feeb 	bl	8004524 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800374e:	e018      	b.n	8003782 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003756:	2b01      	cmp	r3, #1
 8003758:	d103      	bne.n	8003762 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fee2 	bl	8004524 <vPortFree>
	}
 8003760:	e00f      	b.n	8003782 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003768:	2b02      	cmp	r3, #2
 800376a:	d00a      	beq.n	8003782 <prvDeleteTCB+0x56>
	__asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	60fb      	str	r3, [r7, #12]
}
 800377e:	bf00      	nop
 8003780:	e7fe      	b.n	8003780 <prvDeleteTCB+0x54>
	}
 8003782:	bf00      	nop
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003792:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <prvResetNextTaskUnblockTime+0x40>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <prvResetNextTaskUnblockTime+0x14>
 800379c:	2301      	movs	r3, #1
 800379e:	e000      	b.n	80037a2 <prvResetNextTaskUnblockTime+0x16>
 80037a0:	2300      	movs	r3, #0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d004      	beq.n	80037b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037a6:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <prvResetNextTaskUnblockTime+0x44>)
 80037a8:	f04f 32ff 	mov.w	r2, #4294967295
 80037ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037ae:	e008      	b.n	80037c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <prvResetNextTaskUnblockTime+0x40>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	4a04      	ldr	r2, [pc, #16]	; (80037d0 <prvResetNextTaskUnblockTime+0x44>)
 80037c0:	6013      	str	r3, [r2, #0]
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr
 80037cc:	20000c24 	.word	0x20000c24
 80037d0:	20000c8c 	.word	0x20000c8c

080037d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80037da:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <xTaskGetSchedulerState+0x34>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d102      	bne.n	80037e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80037e2:	2301      	movs	r3, #1
 80037e4:	607b      	str	r3, [r7, #4]
 80037e6:	e008      	b.n	80037fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037e8:	4b08      	ldr	r3, [pc, #32]	; (800380c <xTaskGetSchedulerState+0x38>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d102      	bne.n	80037f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80037f0:	2302      	movs	r3, #2
 80037f2:	607b      	str	r3, [r7, #4]
 80037f4:	e001      	b.n	80037fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80037f6:	2300      	movs	r3, #0
 80037f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80037fa:	687b      	ldr	r3, [r7, #4]
	}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20000c78 	.word	0x20000c78
 800380c:	20000c94 	.word	0x20000c94

08003810 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d056      	beq.n	80038d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003826:	4b2e      	ldr	r3, [pc, #184]	; (80038e0 <xTaskPriorityDisinherit+0xd0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	429a      	cmp	r2, r3
 800382e:	d00a      	beq.n	8003846 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	60fb      	str	r3, [r7, #12]
}
 8003842:	bf00      	nop
 8003844:	e7fe      	b.n	8003844 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10a      	bne.n	8003864 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003852:	f383 8811 	msr	BASEPRI, r3
 8003856:	f3bf 8f6f 	isb	sy
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	60bb      	str	r3, [r7, #8]
}
 8003860:	bf00      	nop
 8003862:	e7fe      	b.n	8003862 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003868:	1e5a      	subs	r2, r3, #1
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003876:	429a      	cmp	r2, r3
 8003878:	d02c      	beq.n	80038d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387e:	2b00      	cmp	r3, #0
 8003880:	d128      	bne.n	80038d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	3304      	adds	r3, #4
 8003886:	4618      	mov	r0, r3
 8003888:	f7fe fc40 	bl	800210c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a4:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <xTaskPriorityDisinherit+0xd4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d903      	bls.n	80038b4 <xTaskPriorityDisinherit+0xa4>
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	4a0c      	ldr	r2, [pc, #48]	; (80038e4 <xTaskPriorityDisinherit+0xd4>)
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <xTaskPriorityDisinherit+0xd8>)
 80038c2:	441a      	add	r2, r3
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	3304      	adds	r3, #4
 80038c8:	4619      	mov	r1, r3
 80038ca:	4610      	mov	r0, r2
 80038cc:	f7fe fbc3 	bl	8002056 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80038d0:	2301      	movs	r3, #1
 80038d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80038d4:	697b      	ldr	r3, [r7, #20]
	}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20000798 	.word	0x20000798
 80038e4:	20000c74 	.word	0x20000c74
 80038e8:	2000079c 	.word	0x2000079c

080038ec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80038f6:	4b21      	ldr	r3, [pc, #132]	; (800397c <prvAddCurrentTaskToDelayedList+0x90>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038fc:	4b20      	ldr	r3, [pc, #128]	; (8003980 <prvAddCurrentTaskToDelayedList+0x94>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3304      	adds	r3, #4
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe fc02 	bl	800210c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390e:	d10a      	bne.n	8003926 <prvAddCurrentTaskToDelayedList+0x3a>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d007      	beq.n	8003926 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003916:	4b1a      	ldr	r3, [pc, #104]	; (8003980 <prvAddCurrentTaskToDelayedList+0x94>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3304      	adds	r3, #4
 800391c:	4619      	mov	r1, r3
 800391e:	4819      	ldr	r0, [pc, #100]	; (8003984 <prvAddCurrentTaskToDelayedList+0x98>)
 8003920:	f7fe fb99 	bl	8002056 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003924:	e026      	b.n	8003974 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4413      	add	r3, r2
 800392c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800392e:	4b14      	ldr	r3, [pc, #80]	; (8003980 <prvAddCurrentTaskToDelayedList+0x94>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	429a      	cmp	r2, r3
 800393c:	d209      	bcs.n	8003952 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800393e:	4b12      	ldr	r3, [pc, #72]	; (8003988 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <prvAddCurrentTaskToDelayedList+0x94>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	3304      	adds	r3, #4
 8003948:	4619      	mov	r1, r3
 800394a:	4610      	mov	r0, r2
 800394c:	f7fe fba6 	bl	800209c <vListInsert>
}
 8003950:	e010      	b.n	8003974 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003952:	4b0e      	ldr	r3, [pc, #56]	; (800398c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <prvAddCurrentTaskToDelayedList+0x94>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3304      	adds	r3, #4
 800395c:	4619      	mov	r1, r3
 800395e:	4610      	mov	r0, r2
 8003960:	f7fe fb9c 	bl	800209c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003964:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	429a      	cmp	r2, r3
 800396c:	d202      	bcs.n	8003974 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800396e:	4a08      	ldr	r2, [pc, #32]	; (8003990 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	6013      	str	r3, [r2, #0]
}
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20000c70 	.word	0x20000c70
 8003980:	20000798 	.word	0x20000798
 8003984:	20000c58 	.word	0x20000c58
 8003988:	20000c28 	.word	0x20000c28
 800398c:	20000c24 	.word	0x20000c24
 8003990:	20000c8c 	.word	0x20000c8c

08003994 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08a      	sub	sp, #40	; 0x28
 8003998:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800399e:	f000 facb 	bl	8003f38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80039a2:	4b1c      	ldr	r3, [pc, #112]	; (8003a14 <xTimerCreateTimerTask+0x80>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d021      	beq.n	80039ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80039b2:	1d3a      	adds	r2, r7, #4
 80039b4:	f107 0108 	add.w	r1, r7, #8
 80039b8:	f107 030c 	add.w	r3, r7, #12
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fe fb05 	bl	8001fcc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	9202      	str	r2, [sp, #8]
 80039ca:	9301      	str	r3, [sp, #4]
 80039cc:	2302      	movs	r3, #2
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	2300      	movs	r3, #0
 80039d2:	460a      	mov	r2, r1
 80039d4:	4910      	ldr	r1, [pc, #64]	; (8003a18 <xTimerCreateTimerTask+0x84>)
 80039d6:	4811      	ldr	r0, [pc, #68]	; (8003a1c <xTimerCreateTimerTask+0x88>)
 80039d8:	f7ff f8e4 	bl	8002ba4 <xTaskCreateStatic>
 80039dc:	4603      	mov	r3, r0
 80039de:	4a10      	ldr	r2, [pc, #64]	; (8003a20 <xTimerCreateTimerTask+0x8c>)
 80039e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80039e2:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <xTimerCreateTimerTask+0x8c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80039ea:	2301      	movs	r3, #1
 80039ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <xTimerCreateTimerTask+0x76>
	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	613b      	str	r3, [r7, #16]
}
 8003a06:	bf00      	nop
 8003a08:	e7fe      	b.n	8003a08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003a0a:	697b      	ldr	r3, [r7, #20]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20000cc8 	.word	0x20000cc8
 8003a18:	08004864 	.word	0x08004864
 8003a1c:	08003b41 	.word	0x08003b41
 8003a20:	20000ccc 	.word	0x20000ccc

08003a24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08a      	sub	sp, #40	; 0x28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10a      	bne.n	8003a52 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	623b      	str	r3, [r7, #32]
}
 8003a4e:	bf00      	nop
 8003a50:	e7fe      	b.n	8003a50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a52:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <xTimerGenericCommand+0x98>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d02a      	beq.n	8003ab0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b05      	cmp	r3, #5
 8003a6a:	dc18      	bgt.n	8003a9e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a6c:	f7ff feb2 	bl	80037d4 <xTaskGetSchedulerState>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d109      	bne.n	8003a8a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a76:	4b11      	ldr	r3, [pc, #68]	; (8003abc <xTimerGenericCommand+0x98>)
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	f107 0110 	add.w	r1, r7, #16
 8003a7e:	2300      	movs	r3, #0
 8003a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a82:	f7fe fcad 	bl	80023e0 <xQueueGenericSend>
 8003a86:	6278      	str	r0, [r7, #36]	; 0x24
 8003a88:	e012      	b.n	8003ab0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a8a:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <xTimerGenericCommand+0x98>)
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	f107 0110 	add.w	r1, r7, #16
 8003a92:	2300      	movs	r3, #0
 8003a94:	2200      	movs	r2, #0
 8003a96:	f7fe fca3 	bl	80023e0 <xQueueGenericSend>
 8003a9a:	6278      	str	r0, [r7, #36]	; 0x24
 8003a9c:	e008      	b.n	8003ab0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a9e:	4b07      	ldr	r3, [pc, #28]	; (8003abc <xTimerGenericCommand+0x98>)
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	f107 0110 	add.w	r1, r7, #16
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	f7fe fd97 	bl	80025dc <xQueueGenericSendFromISR>
 8003aae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3728      	adds	r7, #40	; 0x28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000cc8 	.word	0x20000cc8

08003ac0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003aca:	4b1c      	ldr	r3, [pc, #112]	; (8003b3c <prvProcessExpiredTimer+0x7c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fe fb17 	bl	800210c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d122      	bne.n	8003b2c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	18d1      	adds	r1, r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	6978      	ldr	r0, [r7, #20]
 8003af4:	f000 f8c8 	bl	8003c88 <prvInsertTimerInActiveList>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d016      	beq.n	8003b2c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003afe:	2300      	movs	r3, #0
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	2300      	movs	r3, #0
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	2100      	movs	r1, #0
 8003b08:	6978      	ldr	r0, [r7, #20]
 8003b0a:	f7ff ff8b 	bl	8003a24 <xTimerGenericCommand>
 8003b0e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10a      	bne.n	8003b2c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	60fb      	str	r3, [r7, #12]
}
 8003b28:	bf00      	nop
 8003b2a:	e7fe      	b.n	8003b2a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	6978      	ldr	r0, [r7, #20]
 8003b32:	4798      	blx	r3
}
 8003b34:	bf00      	nop
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20000cc0 	.word	0x20000cc0

08003b40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b48:	f107 0308 	add.w	r3, r7, #8
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 f857 	bl	8003c00 <prvGetNextExpireTime>
 8003b52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4619      	mov	r1, r3
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f803 	bl	8003b64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b5e:	f000 f8d5 	bl	8003d0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b62:	e7f1      	b.n	8003b48 <prvTimerTask+0x8>

08003b64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b6e:	f7ff fa4b 	bl	8003008 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b72:	f107 0308 	add.w	r3, r7, #8
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 f866 	bl	8003c48 <prvSampleTimeNow>
 8003b7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d130      	bne.n	8003be6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10a      	bne.n	8003ba0 <prvProcessTimerOrBlockTask+0x3c>
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d806      	bhi.n	8003ba0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003b92:	f7ff fa47 	bl	8003024 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b96:	68f9      	ldr	r1, [r7, #12]
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff ff91 	bl	8003ac0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003b9e:	e024      	b.n	8003bea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d008      	beq.n	8003bb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003ba6:	4b13      	ldr	r3, [pc, #76]	; (8003bf4 <prvProcessTimerOrBlockTask+0x90>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003bb8:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <prvProcessTimerOrBlockTask+0x94>)
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f7fe ffb9 	bl	8002b3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003bca:	f7ff fa2b 	bl	8003024 <xTaskResumeAll>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10a      	bne.n	8003bea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003bd4:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <prvProcessTimerOrBlockTask+0x98>)
 8003bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	f3bf 8f6f 	isb	sy
}
 8003be4:	e001      	b.n	8003bea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003be6:	f7ff fa1d 	bl	8003024 <xTaskResumeAll>
}
 8003bea:	bf00      	nop
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000cc4 	.word	0x20000cc4
 8003bf8:	20000cc8 	.word	0x20000cc8
 8003bfc:	e000ed04 	.word	0xe000ed04

08003c00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c08:	4b0e      	ldr	r3, [pc, #56]	; (8003c44 <prvGetNextExpireTime+0x44>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	bf0c      	ite	eq
 8003c12:	2301      	moveq	r3, #1
 8003c14:	2300      	movne	r3, #0
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	461a      	mov	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d105      	bne.n	8003c32 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c26:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <prvGetNextExpireTime+0x44>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	e001      	b.n	8003c36 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003c36:	68fb      	ldr	r3, [r7, #12]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000cc0 	.word	0x20000cc0

08003c48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003c50:	f7ff fa86 	bl	8003160 <xTaskGetTickCount>
 8003c54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <prvSampleTimeNow+0x3c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d205      	bcs.n	8003c6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003c60:	f000 f908 	bl	8003e74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	e002      	b.n	8003c72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003c72:	4a04      	ldr	r2, [pc, #16]	; (8003c84 <prvSampleTimeNow+0x3c>)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003c78:	68fb      	ldr	r3, [r7, #12]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000cd0 	.word	0x20000cd0

08003c88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d812      	bhi.n	8003cd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	1ad2      	subs	r2, r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d302      	bcc.n	8003cc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	e01b      	b.n	8003cfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003cc2:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <prvInsertTimerInActiveList+0x7c>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4610      	mov	r0, r2
 8003cce:	f7fe f9e5 	bl	800209c <vListInsert>
 8003cd2:	e012      	b.n	8003cfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d206      	bcs.n	8003cea <prvInsertTimerInActiveList+0x62>
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d302      	bcc.n	8003cea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	e007      	b.n	8003cfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003cea:	4b07      	ldr	r3, [pc, #28]	; (8003d08 <prvInsertTimerInActiveList+0x80>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	f7fe f9d1 	bl	800209c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003cfa:	697b      	ldr	r3, [r7, #20]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	20000cc4 	.word	0x20000cc4
 8003d08:	20000cc0 	.word	0x20000cc0

08003d0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08e      	sub	sp, #56	; 0x38
 8003d10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d12:	e09d      	b.n	8003e50 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	da18      	bge.n	8003d4c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003d1a:	1d3b      	adds	r3, r7, #4
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2a:	f383 8811 	msr	BASEPRI, r3
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	61fb      	str	r3, [r7, #28]
}
 8003d38:	bf00      	nop
 8003d3a:	e7fe      	b.n	8003d3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d42:	6850      	ldr	r0, [r2, #4]
 8003d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d46:	6892      	ldr	r2, [r2, #8]
 8003d48:	4611      	mov	r1, r2
 8003d4a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	db7d      	blt.n	8003e4e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d004      	beq.n	8003d68 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d60:	3304      	adds	r3, #4
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fe f9d2 	bl	800210c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d68:	463b      	mov	r3, r7
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff ff6c 	bl	8003c48 <prvSampleTimeNow>
 8003d70:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b09      	cmp	r3, #9
 8003d76:	d86b      	bhi.n	8003e50 <prvProcessReceivedCommands+0x144>
 8003d78:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <prvProcessReceivedCommands+0x74>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003da9 	.word	0x08003da9
 8003d84:	08003da9 	.word	0x08003da9
 8003d88:	08003da9 	.word	0x08003da9
 8003d8c:	08003e51 	.word	0x08003e51
 8003d90:	08003e05 	.word	0x08003e05
 8003d94:	08003e3d 	.word	0x08003e3d
 8003d98:	08003da9 	.word	0x08003da9
 8003d9c:	08003da9 	.word	0x08003da9
 8003da0:	08003e51 	.word	0x08003e51
 8003da4:	08003e05 	.word	0x08003e05
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	18d1      	adds	r1, r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003db6:	f7ff ff67 	bl	8003c88 <prvInsertTimerInActiveList>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d047      	beq.n	8003e50 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dc6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d13f      	bne.n	8003e50 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	441a      	add	r2, r3
 8003dd8:	2300      	movs	r3, #0
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	2300      	movs	r3, #0
 8003dde:	2100      	movs	r1, #0
 8003de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003de2:	f7ff fe1f 	bl	8003a24 <xTimerGenericCommand>
 8003de6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d130      	bne.n	8003e50 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8003dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	61bb      	str	r3, [r7, #24]
}
 8003e00:	bf00      	nop
 8003e02:	e7fe      	b.n	8003e02 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e08:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10a      	bne.n	8003e28 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	617b      	str	r3, [r7, #20]
}
 8003e24:	bf00      	nop
 8003e26:	e7fe      	b.n	8003e26 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2a:	699a      	ldr	r2, [r3, #24]
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	18d1      	adds	r1, r2, r3
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e36:	f7ff ff27 	bl	8003c88 <prvInsertTimerInActiveList>
					break;
 8003e3a:	e009      	b.n	8003e50 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d104      	bne.n	8003e50 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8003e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e48:	f000 fb6c 	bl	8004524 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003e4c:	e000      	b.n	8003e50 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003e4e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e50:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <prvProcessReceivedCommands+0x164>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	1d39      	adds	r1, r7, #4
 8003e56:	2200      	movs	r2, #0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fe fc57 	bl	800270c <xQueueReceive>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f47f af57 	bne.w	8003d14 <prvProcessReceivedCommands+0x8>
	}
}
 8003e66:	bf00      	nop
 8003e68:	bf00      	nop
 8003e6a:	3730      	adds	r7, #48	; 0x30
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20000cc8 	.word	0x20000cc8

08003e74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e7a:	e045      	b.n	8003f08 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e7c:	4b2c      	ldr	r3, [pc, #176]	; (8003f30 <prvSwitchTimerLists+0xbc>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e86:	4b2a      	ldr	r3, [pc, #168]	; (8003f30 <prvSwitchTimerLists+0xbc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	3304      	adds	r3, #4
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fe f939 	bl	800210c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d12e      	bne.n	8003f08 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d90e      	bls.n	8003eda <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ec8:	4b19      	ldr	r3, [pc, #100]	; (8003f30 <prvSwitchTimerLists+0xbc>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	f7fe f8e2 	bl	800209c <vListInsert>
 8003ed8:	e016      	b.n	8003f08 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003eda:	2300      	movs	r3, #0
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f7ff fd9d 	bl	8003a24 <xTimerGenericCommand>
 8003eea:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10a      	bne.n	8003f08 <prvSwitchTimerLists+0x94>
	__asm volatile
 8003ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	603b      	str	r3, [r7, #0]
}
 8003f04:	bf00      	nop
 8003f06:	e7fe      	b.n	8003f06 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f08:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <prvSwitchTimerLists+0xbc>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1b4      	bne.n	8003e7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003f12:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <prvSwitchTimerLists+0xbc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003f18:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <prvSwitchTimerLists+0xc0>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a04      	ldr	r2, [pc, #16]	; (8003f30 <prvSwitchTimerLists+0xbc>)
 8003f1e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003f20:	4a04      	ldr	r2, [pc, #16]	; (8003f34 <prvSwitchTimerLists+0xc0>)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	6013      	str	r3, [r2, #0]
}
 8003f26:	bf00      	nop
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20000cc0 	.word	0x20000cc0
 8003f34:	20000cc4 	.word	0x20000cc4

08003f38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003f3e:	f000 f92d 	bl	800419c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003f42:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <prvCheckForValidListAndQueue+0x60>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d120      	bne.n	8003f8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003f4a:	4814      	ldr	r0, [pc, #80]	; (8003f9c <prvCheckForValidListAndQueue+0x64>)
 8003f4c:	f7fe f858 	bl	8002000 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003f50:	4813      	ldr	r0, [pc, #76]	; (8003fa0 <prvCheckForValidListAndQueue+0x68>)
 8003f52:	f7fe f855 	bl	8002000 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003f56:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <prvCheckForValidListAndQueue+0x6c>)
 8003f58:	4a10      	ldr	r2, [pc, #64]	; (8003f9c <prvCheckForValidListAndQueue+0x64>)
 8003f5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003f5c:	4b12      	ldr	r3, [pc, #72]	; (8003fa8 <prvCheckForValidListAndQueue+0x70>)
 8003f5e:	4a10      	ldr	r2, [pc, #64]	; (8003fa0 <prvCheckForValidListAndQueue+0x68>)
 8003f60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003f62:	2300      	movs	r3, #0
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	4b11      	ldr	r3, [pc, #68]	; (8003fac <prvCheckForValidListAndQueue+0x74>)
 8003f68:	4a11      	ldr	r2, [pc, #68]	; (8003fb0 <prvCheckForValidListAndQueue+0x78>)
 8003f6a:	2110      	movs	r1, #16
 8003f6c:	200a      	movs	r0, #10
 8003f6e:	f7fe f95f 	bl	8002230 <xQueueGenericCreateStatic>
 8003f72:	4603      	mov	r3, r0
 8003f74:	4a08      	ldr	r2, [pc, #32]	; (8003f98 <prvCheckForValidListAndQueue+0x60>)
 8003f76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003f78:	4b07      	ldr	r3, [pc, #28]	; (8003f98 <prvCheckForValidListAndQueue+0x60>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <prvCheckForValidListAndQueue+0x60>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	490b      	ldr	r1, [pc, #44]	; (8003fb4 <prvCheckForValidListAndQueue+0x7c>)
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe fdb0 	bl	8002aec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f8c:	f000 f936 	bl	80041fc <vPortExitCritical>
}
 8003f90:	bf00      	nop
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000cc8 	.word	0x20000cc8
 8003f9c:	20000c98 	.word	0x20000c98
 8003fa0:	20000cac 	.word	0x20000cac
 8003fa4:	20000cc0 	.word	0x20000cc0
 8003fa8:	20000cc4 	.word	0x20000cc4
 8003fac:	20000d74 	.word	0x20000d74
 8003fb0:	20000cd4 	.word	0x20000cd4
 8003fb4:	0800486c 	.word	0x0800486c

08003fb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3b04      	subs	r3, #4
 8003fc8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	3b04      	subs	r3, #4
 8003fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f023 0201 	bic.w	r2, r3, #1
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	3b04      	subs	r3, #4
 8003fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003fe8:	4a08      	ldr	r2, [pc, #32]	; (800400c <pxPortInitialiseStack+0x54>)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3b14      	subs	r3, #20
 8003ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	3b20      	subs	r3, #32
 8003ffe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004000:	68fb      	ldr	r3, [r7, #12]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr
 800400c:	08004011 	.word	0x08004011

08004010 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004016:	2300      	movs	r3, #0
 8004018:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800401a:	4b12      	ldr	r3, [pc, #72]	; (8004064 <prvTaskExitError+0x54>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004022:	d00a      	beq.n	800403a <prvTaskExitError+0x2a>
	__asm volatile
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	60fb      	str	r3, [r7, #12]
}
 8004036:	bf00      	nop
 8004038:	e7fe      	b.n	8004038 <prvTaskExitError+0x28>
	__asm volatile
 800403a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	60bb      	str	r3, [r7, #8]
}
 800404c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800404e:	bf00      	nop
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0fc      	beq.n	8004050 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004056:	bf00      	nop
 8004058:	bf00      	nop
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	2000000c 	.word	0x2000000c
	...

08004070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004070:	4b07      	ldr	r3, [pc, #28]	; (8004090 <pxCurrentTCBConst2>)
 8004072:	6819      	ldr	r1, [r3, #0]
 8004074:	6808      	ldr	r0, [r1, #0]
 8004076:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800407a:	f380 8809 	msr	PSP, r0
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f04f 0000 	mov.w	r0, #0
 8004086:	f380 8811 	msr	BASEPRI, r0
 800408a:	f04e 0e0d 	orr.w	lr, lr, #13
 800408e:	4770      	bx	lr

08004090 <pxCurrentTCBConst2>:
 8004090:	20000798 	.word	0x20000798
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop

08004098 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004098:	4806      	ldr	r0, [pc, #24]	; (80040b4 <prvPortStartFirstTask+0x1c>)
 800409a:	6800      	ldr	r0, [r0, #0]
 800409c:	6800      	ldr	r0, [r0, #0]
 800409e:	f380 8808 	msr	MSP, r0
 80040a2:	b662      	cpsie	i
 80040a4:	b661      	cpsie	f
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	df00      	svc	0
 80040b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80040b2:	bf00      	nop
 80040b4:	e000ed08 	.word	0xe000ed08

080040b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040be:	4b32      	ldr	r3, [pc, #200]	; (8004188 <xPortStartScheduler+0xd0>)
 80040c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	22ff      	movs	r2, #255	; 0xff
 80040ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	4b2a      	ldr	r3, [pc, #168]	; (800418c <xPortStartScheduler+0xd4>)
 80040e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80040e6:	4b2a      	ldr	r3, [pc, #168]	; (8004190 <xPortStartScheduler+0xd8>)
 80040e8:	2207      	movs	r2, #7
 80040ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040ec:	e009      	b.n	8004102 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80040ee:	4b28      	ldr	r3, [pc, #160]	; (8004190 <xPortStartScheduler+0xd8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	4a26      	ldr	r2, [pc, #152]	; (8004190 <xPortStartScheduler+0xd8>)
 80040f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004102:	78fb      	ldrb	r3, [r7, #3]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410a:	2b80      	cmp	r3, #128	; 0x80
 800410c:	d0ef      	beq.n	80040ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800410e:	4b20      	ldr	r3, [pc, #128]	; (8004190 <xPortStartScheduler+0xd8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f1c3 0307 	rsb	r3, r3, #7
 8004116:	2b04      	cmp	r3, #4
 8004118:	d00a      	beq.n	8004130 <xPortStartScheduler+0x78>
	__asm volatile
 800411a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	60bb      	str	r3, [r7, #8]
}
 800412c:	bf00      	nop
 800412e:	e7fe      	b.n	800412e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004130:	4b17      	ldr	r3, [pc, #92]	; (8004190 <xPortStartScheduler+0xd8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	021b      	lsls	r3, r3, #8
 8004136:	4a16      	ldr	r2, [pc, #88]	; (8004190 <xPortStartScheduler+0xd8>)
 8004138:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800413a:	4b15      	ldr	r3, [pc, #84]	; (8004190 <xPortStartScheduler+0xd8>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004142:	4a13      	ldr	r2, [pc, #76]	; (8004190 <xPortStartScheduler+0xd8>)
 8004144:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	b2da      	uxtb	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800414e:	4b11      	ldr	r3, [pc, #68]	; (8004194 <xPortStartScheduler+0xdc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a10      	ldr	r2, [pc, #64]	; (8004194 <xPortStartScheduler+0xdc>)
 8004154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004158:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800415a:	4b0e      	ldr	r3, [pc, #56]	; (8004194 <xPortStartScheduler+0xdc>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a0d      	ldr	r2, [pc, #52]	; (8004194 <xPortStartScheduler+0xdc>)
 8004160:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004164:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004166:	f000 f8b9 	bl	80042dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800416a:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <xPortStartScheduler+0xe0>)
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004170:	f7ff ff92 	bl	8004098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004174:	f7ff f8c0 	bl	80032f8 <vTaskSwitchContext>
	prvTaskExitError();
 8004178:	f7ff ff4a 	bl	8004010 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	e000e400 	.word	0xe000e400
 800418c:	20000dc4 	.word	0x20000dc4
 8004190:	20000dc8 	.word	0x20000dc8
 8004194:	e000ed20 	.word	0xe000ed20
 8004198:	2000000c 	.word	0x2000000c

0800419c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
	__asm volatile
 80041a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a6:	f383 8811 	msr	BASEPRI, r3
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	607b      	str	r3, [r7, #4]
}
 80041b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80041b6:	4b0f      	ldr	r3, [pc, #60]	; (80041f4 <vPortEnterCritical+0x58>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3301      	adds	r3, #1
 80041bc:	4a0d      	ldr	r2, [pc, #52]	; (80041f4 <vPortEnterCritical+0x58>)
 80041be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80041c0:	4b0c      	ldr	r3, [pc, #48]	; (80041f4 <vPortEnterCritical+0x58>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d10f      	bne.n	80041e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041c8:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <vPortEnterCritical+0x5c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	603b      	str	r3, [r7, #0]
}
 80041e4:	bf00      	nop
 80041e6:	e7fe      	b.n	80041e6 <vPortEnterCritical+0x4a>
	}
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	2000000c 	.word	0x2000000c
 80041f8:	e000ed04 	.word	0xe000ed04

080041fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004202:	4b11      	ldr	r3, [pc, #68]	; (8004248 <vPortExitCritical+0x4c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10a      	bne.n	8004220 <vPortExitCritical+0x24>
	__asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	607b      	str	r3, [r7, #4]
}
 800421c:	bf00      	nop
 800421e:	e7fe      	b.n	800421e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004220:	4b09      	ldr	r3, [pc, #36]	; (8004248 <vPortExitCritical+0x4c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3b01      	subs	r3, #1
 8004226:	4a08      	ldr	r2, [pc, #32]	; (8004248 <vPortExitCritical+0x4c>)
 8004228:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800422a:	4b07      	ldr	r3, [pc, #28]	; (8004248 <vPortExitCritical+0x4c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d105      	bne.n	800423e <vPortExitCritical+0x42>
 8004232:	2300      	movs	r3, #0
 8004234:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	f383 8811 	msr	BASEPRI, r3
}
 800423c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr
 8004248:	2000000c 	.word	0x2000000c
 800424c:	00000000 	.word	0x00000000

08004250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004250:	f3ef 8009 	mrs	r0, PSP
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	4b0d      	ldr	r3, [pc, #52]	; (8004290 <pxCurrentTCBConst>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004260:	6010      	str	r0, [r2, #0]
 8004262:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004266:	f04f 0050 	mov.w	r0, #80	; 0x50
 800426a:	f380 8811 	msr	BASEPRI, r0
 800426e:	f7ff f843 	bl	80032f8 <vTaskSwitchContext>
 8004272:	f04f 0000 	mov.w	r0, #0
 8004276:	f380 8811 	msr	BASEPRI, r0
 800427a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800427e:	6819      	ldr	r1, [r3, #0]
 8004280:	6808      	ldr	r0, [r1, #0]
 8004282:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004286:	f380 8809 	msr	PSP, r0
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	4770      	bx	lr

08004290 <pxCurrentTCBConst>:
 8004290:	20000798 	.word	0x20000798
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop

08004298 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
	__asm volatile
 800429e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	607b      	str	r3, [r7, #4]
}
 80042b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80042b2:	f7fe ff63 	bl	800317c <xTaskIncrementTick>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80042bc:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <SysTick_Handler+0x40>)
 80042be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	2300      	movs	r3, #0
 80042c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	f383 8811 	msr	BASEPRI, r3
}
 80042ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80042d0:	bf00      	nop
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	e000ed04 	.word	0xe000ed04

080042dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042e0:	4b0a      	ldr	r3, [pc, #40]	; (800430c <vPortSetupTimerInterrupt+0x30>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042e6:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <vPortSetupTimerInterrupt+0x34>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042ec:	4b09      	ldr	r3, [pc, #36]	; (8004314 <vPortSetupTimerInterrupt+0x38>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a09      	ldr	r2, [pc, #36]	; (8004318 <vPortSetupTimerInterrupt+0x3c>)
 80042f2:	fba2 2303 	umull	r2, r3, r2, r3
 80042f6:	099b      	lsrs	r3, r3, #6
 80042f8:	4a08      	ldr	r2, [pc, #32]	; (800431c <vPortSetupTimerInterrupt+0x40>)
 80042fa:	3b01      	subs	r3, #1
 80042fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042fe:	4b03      	ldr	r3, [pc, #12]	; (800430c <vPortSetupTimerInterrupt+0x30>)
 8004300:	2207      	movs	r2, #7
 8004302:	601a      	str	r2, [r3, #0]
}
 8004304:	bf00      	nop
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr
 800430c:	e000e010 	.word	0xe000e010
 8004310:	e000e018 	.word	0xe000e018
 8004314:	20000000 	.word	0x20000000
 8004318:	10624dd3 	.word	0x10624dd3
 800431c:	e000e014 	.word	0xe000e014

08004320 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004326:	f3ef 8305 	mrs	r3, IPSR
 800432a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b0f      	cmp	r3, #15
 8004330:	d914      	bls.n	800435c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004332:	4a16      	ldr	r2, [pc, #88]	; (800438c <vPortValidateInterruptPriority+0x6c>)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4413      	add	r3, r2
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800433c:	4b14      	ldr	r3, [pc, #80]	; (8004390 <vPortValidateInterruptPriority+0x70>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	7afa      	ldrb	r2, [r7, #11]
 8004342:	429a      	cmp	r2, r3
 8004344:	d20a      	bcs.n	800435c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	607b      	str	r3, [r7, #4]
}
 8004358:	bf00      	nop
 800435a:	e7fe      	b.n	800435a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800435c:	4b0d      	ldr	r3, [pc, #52]	; (8004394 <vPortValidateInterruptPriority+0x74>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004364:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <vPortValidateInterruptPriority+0x78>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d90a      	bls.n	8004382 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	603b      	str	r3, [r7, #0]
}
 800437e:	bf00      	nop
 8004380:	e7fe      	b.n	8004380 <vPortValidateInterruptPriority+0x60>
	}
 8004382:	bf00      	nop
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr
 800438c:	e000e3f0 	.word	0xe000e3f0
 8004390:	20000dc4 	.word	0x20000dc4
 8004394:	e000ed0c 	.word	0xe000ed0c
 8004398:	20000dc8 	.word	0x20000dc8

0800439c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08a      	sub	sp, #40	; 0x28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80043a8:	f7fe fe2e 	bl	8003008 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80043ac:	4b58      	ldr	r3, [pc, #352]	; (8004510 <pvPortMalloc+0x174>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80043b4:	f000 f910 	bl	80045d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80043b8:	4b56      	ldr	r3, [pc, #344]	; (8004514 <pvPortMalloc+0x178>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4013      	ands	r3, r2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f040 808e 	bne.w	80044e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01d      	beq.n	8004408 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80043cc:	2208      	movs	r2, #8
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4413      	add	r3, r2
 80043d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d014      	beq.n	8004408 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f023 0307 	bic.w	r3, r3, #7
 80043e4:	3308      	adds	r3, #8
 80043e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <pvPortMalloc+0x6c>
	__asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	617b      	str	r3, [r7, #20]
}
 8004404:	bf00      	nop
 8004406:	e7fe      	b.n	8004406 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d069      	beq.n	80044e2 <pvPortMalloc+0x146>
 800440e:	4b42      	ldr	r3, [pc, #264]	; (8004518 <pvPortMalloc+0x17c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	429a      	cmp	r2, r3
 8004416:	d864      	bhi.n	80044e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004418:	4b40      	ldr	r3, [pc, #256]	; (800451c <pvPortMalloc+0x180>)
 800441a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800441c:	4b3f      	ldr	r3, [pc, #252]	; (800451c <pvPortMalloc+0x180>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004422:	e004      	b.n	800442e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	429a      	cmp	r2, r3
 8004436:	d903      	bls.n	8004440 <pvPortMalloc+0xa4>
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1f1      	bne.n	8004424 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004440:	4b33      	ldr	r3, [pc, #204]	; (8004510 <pvPortMalloc+0x174>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004446:	429a      	cmp	r2, r3
 8004448:	d04b      	beq.n	80044e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2208      	movs	r2, #8
 8004450:	4413      	add	r3, r2
 8004452:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	1ad2      	subs	r2, r2, r3
 8004464:	2308      	movs	r3, #8
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	429a      	cmp	r2, r3
 800446a:	d91f      	bls.n	80044ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800446c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4413      	add	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <pvPortMalloc+0xf8>
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	613b      	str	r3, [r7, #16]
}
 8004490:	bf00      	nop
 8004492:	e7fe      	b.n	8004492 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	1ad2      	subs	r2, r2, r3
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80044a6:	69b8      	ldr	r0, [r7, #24]
 80044a8:	f000 f8f8 	bl	800469c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80044ac:	4b1a      	ldr	r3, [pc, #104]	; (8004518 <pvPortMalloc+0x17c>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	4a18      	ldr	r2, [pc, #96]	; (8004518 <pvPortMalloc+0x17c>)
 80044b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80044ba:	4b17      	ldr	r3, [pc, #92]	; (8004518 <pvPortMalloc+0x17c>)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	4b18      	ldr	r3, [pc, #96]	; (8004520 <pvPortMalloc+0x184>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d203      	bcs.n	80044ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80044c6:	4b14      	ldr	r3, [pc, #80]	; (8004518 <pvPortMalloc+0x17c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a15      	ldr	r2, [pc, #84]	; (8004520 <pvPortMalloc+0x184>)
 80044cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	4b10      	ldr	r3, [pc, #64]	; (8004514 <pvPortMalloc+0x178>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80044e2:	f7fe fd9f 	bl	8003024 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <pvPortMalloc+0x16a>
	__asm volatile
 80044f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	60fb      	str	r3, [r7, #12]
}
 8004502:	bf00      	nop
 8004504:	e7fe      	b.n	8004504 <pvPortMalloc+0x168>
	return pvReturn;
 8004506:	69fb      	ldr	r3, [r7, #28]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3728      	adds	r7, #40	; 0x28
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	20001dd4 	.word	0x20001dd4
 8004514:	20001de0 	.word	0x20001de0
 8004518:	20001dd8 	.word	0x20001dd8
 800451c:	20001dcc 	.word	0x20001dcc
 8004520:	20001ddc 	.word	0x20001ddc

08004524 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d048      	beq.n	80045c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004536:	2308      	movs	r3, #8
 8004538:	425b      	negs	r3, r3
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4413      	add	r3, r2
 800453e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	4b21      	ldr	r3, [pc, #132]	; (80045d0 <vPortFree+0xac>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4013      	ands	r3, r2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10a      	bne.n	8004568 <vPortFree+0x44>
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	60fb      	str	r3, [r7, #12]
}
 8004564:	bf00      	nop
 8004566:	e7fe      	b.n	8004566 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00a      	beq.n	8004586 <vPortFree+0x62>
	__asm volatile
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	60bb      	str	r3, [r7, #8]
}
 8004582:	bf00      	nop
 8004584:	e7fe      	b.n	8004584 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	4b11      	ldr	r3, [pc, #68]	; (80045d0 <vPortFree+0xac>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d019      	beq.n	80045c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d115      	bne.n	80045c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <vPortFree+0xac>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	43db      	mvns	r3, r3
 80045a6:	401a      	ands	r2, r3
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80045ac:	f7fe fd2c 	bl	8003008 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <vPortFree+0xb0>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4413      	add	r3, r2
 80045ba:	4a06      	ldr	r2, [pc, #24]	; (80045d4 <vPortFree+0xb0>)
 80045bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80045be:	6938      	ldr	r0, [r7, #16]
 80045c0:	f000 f86c 	bl	800469c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80045c4:	f7fe fd2e 	bl	8003024 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80045c8:	bf00      	nop
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	20001de0 	.word	0x20001de0
 80045d4:	20001dd8 	.word	0x20001dd8

080045d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80045e4:	4b27      	ldr	r3, [pc, #156]	; (8004684 <prvHeapInit+0xac>)
 80045e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00c      	beq.n	800460c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	3307      	adds	r3, #7
 80045f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0307 	bic.w	r3, r3, #7
 80045fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	4a1f      	ldr	r2, [pc, #124]	; (8004684 <prvHeapInit+0xac>)
 8004608:	4413      	add	r3, r2
 800460a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004610:	4a1d      	ldr	r2, [pc, #116]	; (8004688 <prvHeapInit+0xb0>)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004616:	4b1c      	ldr	r3, [pc, #112]	; (8004688 <prvHeapInit+0xb0>)
 8004618:	2200      	movs	r2, #0
 800461a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	4413      	add	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004624:	2208      	movs	r2, #8
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1a9b      	subs	r3, r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0307 	bic.w	r3, r3, #7
 8004632:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4a15      	ldr	r2, [pc, #84]	; (800468c <prvHeapInit+0xb4>)
 8004638:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800463a:	4b14      	ldr	r3, [pc, #80]	; (800468c <prvHeapInit+0xb4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2200      	movs	r2, #0
 8004640:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004642:	4b12      	ldr	r3, [pc, #72]	; (800468c <prvHeapInit+0xb4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2200      	movs	r2, #0
 8004648:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	1ad2      	subs	r2, r2, r3
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004658:	4b0c      	ldr	r3, [pc, #48]	; (800468c <prvHeapInit+0xb4>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	4a0a      	ldr	r2, [pc, #40]	; (8004690 <prvHeapInit+0xb8>)
 8004666:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	4a09      	ldr	r2, [pc, #36]	; (8004694 <prvHeapInit+0xbc>)
 800466e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004670:	4b09      	ldr	r3, [pc, #36]	; (8004698 <prvHeapInit+0xc0>)
 8004672:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004676:	601a      	str	r2, [r3, #0]
}
 8004678:	bf00      	nop
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20000dcc 	.word	0x20000dcc
 8004688:	20001dcc 	.word	0x20001dcc
 800468c:	20001dd4 	.word	0x20001dd4
 8004690:	20001ddc 	.word	0x20001ddc
 8004694:	20001dd8 	.word	0x20001dd8
 8004698:	20001de0 	.word	0x20001de0

0800469c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80046a4:	4b27      	ldr	r3, [pc, #156]	; (8004744 <prvInsertBlockIntoFreeList+0xa8>)
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e002      	b.n	80046b0 <prvInsertBlockIntoFreeList+0x14>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d8f7      	bhi.n	80046aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	4413      	add	r3, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d108      	bne.n	80046de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	441a      	add	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	441a      	add	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d118      	bne.n	8004724 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	4b14      	ldr	r3, [pc, #80]	; (8004748 <prvInsertBlockIntoFreeList+0xac>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d00d      	beq.n	800471a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	441a      	add	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	e008      	b.n	800472c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <prvInsertBlockIntoFreeList+0xac>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	e003      	b.n	800472c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	429a      	cmp	r2, r3
 8004732:	d002      	beq.n	800473a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800473a:	bf00      	nop
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr
 8004744:	20001dcc 	.word	0x20001dcc
 8004748:	20001dd4 	.word	0x20001dd4

0800474c <__libc_init_array>:
 800474c:	b570      	push	{r4, r5, r6, lr}
 800474e:	2600      	movs	r6, #0
 8004750:	4d0c      	ldr	r5, [pc, #48]	; (8004784 <__libc_init_array+0x38>)
 8004752:	4c0d      	ldr	r4, [pc, #52]	; (8004788 <__libc_init_array+0x3c>)
 8004754:	1b64      	subs	r4, r4, r5
 8004756:	10a4      	asrs	r4, r4, #2
 8004758:	42a6      	cmp	r6, r4
 800475a:	d109      	bne.n	8004770 <__libc_init_array+0x24>
 800475c:	f000 f830 	bl	80047c0 <_init>
 8004760:	2600      	movs	r6, #0
 8004762:	4d0a      	ldr	r5, [pc, #40]	; (800478c <__libc_init_array+0x40>)
 8004764:	4c0a      	ldr	r4, [pc, #40]	; (8004790 <__libc_init_array+0x44>)
 8004766:	1b64      	subs	r4, r4, r5
 8004768:	10a4      	asrs	r4, r4, #2
 800476a:	42a6      	cmp	r6, r4
 800476c:	d105      	bne.n	800477a <__libc_init_array+0x2e>
 800476e:	bd70      	pop	{r4, r5, r6, pc}
 8004770:	f855 3b04 	ldr.w	r3, [r5], #4
 8004774:	4798      	blx	r3
 8004776:	3601      	adds	r6, #1
 8004778:	e7ee      	b.n	8004758 <__libc_init_array+0xc>
 800477a:	f855 3b04 	ldr.w	r3, [r5], #4
 800477e:	4798      	blx	r3
 8004780:	3601      	adds	r6, #1
 8004782:	e7f2      	b.n	800476a <__libc_init_array+0x1e>
 8004784:	080049a4 	.word	0x080049a4
 8004788:	080049a4 	.word	0x080049a4
 800478c:	080049a4 	.word	0x080049a4
 8004790:	080049a8 	.word	0x080049a8

08004794 <memcpy>:
 8004794:	440a      	add	r2, r1
 8004796:	4291      	cmp	r1, r2
 8004798:	f100 33ff 	add.w	r3, r0, #4294967295
 800479c:	d100      	bne.n	80047a0 <memcpy+0xc>
 800479e:	4770      	bx	lr
 80047a0:	b510      	push	{r4, lr}
 80047a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047a6:	4291      	cmp	r1, r2
 80047a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047ac:	d1f9      	bne.n	80047a2 <memcpy+0xe>
 80047ae:	bd10      	pop	{r4, pc}

080047b0 <memset>:
 80047b0:	4603      	mov	r3, r0
 80047b2:	4402      	add	r2, r0
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d100      	bne.n	80047ba <memset+0xa>
 80047b8:	4770      	bx	lr
 80047ba:	f803 1b01 	strb.w	r1, [r3], #1
 80047be:	e7f9      	b.n	80047b4 <memset+0x4>

080047c0 <_init>:
 80047c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c2:	bf00      	nop
 80047c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047c6:	bc08      	pop	{r3}
 80047c8:	469e      	mov	lr, r3
 80047ca:	4770      	bx	lr

080047cc <_fini>:
 80047cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ce:	bf00      	nop
 80047d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d2:	bc08      	pop	{r3}
 80047d4:	469e      	mov	lr, r3
 80047d6:	4770      	bx	lr
