
FreeRTOS_V6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071ec  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  080072fc  080072fc  000172fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007530  08007530  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08007530  08007530  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007530  08007530  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007530  08007530  00017530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007534  08007534  00017534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ecc  20000078  080075b0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f44  080075b0  00021f44  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014dfb  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003178  00000000  00000000  00034e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00038018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  000392d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d9b  00000000  00000000  0003a430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014639  00000000  00000000  0003e1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000972f4  00000000  00000000  00052804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9af8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051a0  00000000  00000000  000e9b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080072e4 	.word	0x080072e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080072e4 	.word	0x080072e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000160:	b5b0      	push	{r4, r5, r7, lr}
 8000162:	b08a      	sub	sp, #40	; 0x28
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
 800016c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800016e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000172:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000176:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800017a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 800017c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800017e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000180:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000182:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 800018c:	68bb      	ldr	r3, [r7, #8]
 800018e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000190:	f107 0310 	add.w	r3, r7, #16
 8000194:	4618      	mov	r0, r3
 8000196:	f000 f80e 	bl	80001b6 <Lcd_init>

	return lcd;
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	461d      	mov	r5, r3
 800019e:	f107 0410 	add.w	r4, r7, #16
 80001a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80001aa:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80001ae:	68f8      	ldr	r0, [r7, #12]
 80001b0:	3728      	adds	r7, #40	; 0x28
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bdb0      	pop	{r4, r5, r7, pc}

080001b6 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80001b6:	b580      	push	{r7, lr}
 80001b8:	b082      	sub	sp, #8
 80001ba:	af00      	add	r7, sp, #0
 80001bc:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	7d9b      	ldrb	r3, [r3, #22]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d10c      	bne.n	80001e0 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80001c6:	2133      	movs	r1, #51	; 0x33
 80001c8:	6878      	ldr	r0, [r7, #4]
 80001ca:	f000 f86f 	bl	80002ac <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80001ce:	2132      	movs	r1, #50	; 0x32
 80001d0:	6878      	ldr	r0, [r7, #4]
 80001d2:	f000 f86b 	bl	80002ac <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80001d6:	2128      	movs	r1, #40	; 0x28
 80001d8:	6878      	ldr	r0, [r7, #4]
 80001da:	f000 f867 	bl	80002ac <lcd_write_command>
 80001de:	e003      	b.n	80001e8 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80001e0:	2138      	movs	r1, #56	; 0x38
 80001e2:	6878      	ldr	r0, [r7, #4]
 80001e4:	f000 f862 	bl	80002ac <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80001e8:	2101      	movs	r1, #1
 80001ea:	6878      	ldr	r0, [r7, #4]
 80001ec:	f000 f85e 	bl	80002ac <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80001f0:	210c      	movs	r1, #12
 80001f2:	6878      	ldr	r0, [r7, #4]
 80001f4:	f000 f85a 	bl	80002ac <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80001f8:	2106      	movs	r1, #6
 80001fa:	6878      	ldr	r0, [r7, #4]
 80001fc:	f000 f856 	bl	80002ac <lcd_write_command>
}
 8000200:	bf00      	nop
 8000202:	3708      	adds	r7, #8
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}

08000208 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b086      	sub	sp, #24
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
 8000210:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000212:	f107 030c 	add.w	r3, r7, #12
 8000216:	683a      	ldr	r2, [r7, #0]
 8000218:	4906      	ldr	r1, [pc, #24]	; (8000234 <Lcd_int+0x2c>)
 800021a:	4618      	mov	r0, r3
 800021c:	f006 fbf6 	bl	8006a0c <siprintf>

	Lcd_string(lcd, buffer);
 8000220:	f107 030c 	add.w	r3, r7, #12
 8000224:	4619      	mov	r1, r3
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	f000 f806 	bl	8000238 <Lcd_string>
}
 800022c:	bf00      	nop
 800022e:	3718      	adds	r7, #24
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	080072fc 	.word	0x080072fc

08000238 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000238:	b590      	push	{r4, r7, lr}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
 8000240:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000242:	2300      	movs	r3, #0
 8000244:	73fb      	strb	r3, [r7, #15]
 8000246:	e00a      	b.n	800025e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000248:	7bfb      	ldrb	r3, [r7, #15]
 800024a:	683a      	ldr	r2, [r7, #0]
 800024c:	4413      	add	r3, r2
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	4619      	mov	r1, r3
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f000 f858 	bl	8000308 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000258:	7bfb      	ldrb	r3, [r7, #15]
 800025a:	3301      	adds	r3, #1
 800025c:	73fb      	strb	r3, [r7, #15]
 800025e:	7bfc      	ldrb	r4, [r7, #15]
 8000260:	6838      	ldr	r0, [r7, #0]
 8000262:	f7ff ff75 	bl	8000150 <strlen>
 8000266:	4603      	mov	r3, r0
 8000268:	429c      	cmp	r4, r3
 800026a:	d3ed      	bcc.n	8000248 <Lcd_string+0x10>
	}
}
 800026c:	bf00      	nop
 800026e:	bf00      	nop
 8000270:	3714      	adds	r7, #20
 8000272:	46bd      	mov	sp, r7
 8000274:	bd90      	pop	{r4, r7, pc}
	...

08000278 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	460b      	mov	r3, r1
 8000282:	70fb      	strb	r3, [r7, #3]
 8000284:	4613      	mov	r3, r2
 8000286:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000288:	78fb      	ldrb	r3, [r7, #3]
 800028a:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <Lcd_cursor+0x30>)
 800028c:	5cd2      	ldrb	r2, [r2, r3]
 800028e:	78bb      	ldrb	r3, [r7, #2]
 8000290:	4413      	add	r3, r2
 8000292:	b2db      	uxtb	r3, r3
 8000294:	3b80      	subs	r3, #128	; 0x80
 8000296:	b2db      	uxtb	r3, r3
 8000298:	4619      	mov	r1, r3
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	f000 f806 	bl	80002ac <lcd_write_command>
	#endif
}
 80002a0:	bf00      	nop
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	080073cc 	.word	0x080073cc

080002ac <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	460b      	mov	r3, r1
 80002b6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	6898      	ldr	r0, [r3, #8]
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	899b      	ldrh	r3, [r3, #12]
 80002c0:	2200      	movs	r2, #0
 80002c2:	4619      	mov	r1, r3
 80002c4:	f001 ff3f 	bl	8002146 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	7d9b      	ldrb	r3, [r3, #22]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d111      	bne.n	80002f4 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80002d0:	78fb      	ldrb	r3, [r7, #3]
 80002d2:	091b      	lsrs	r3, r3, #4
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	2204      	movs	r2, #4
 80002d8:	4619      	mov	r1, r3
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f000 f842 	bl	8000364 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80002e0:	78fb      	ldrb	r3, [r7, #3]
 80002e2:	f003 030f 	and.w	r3, r3, #15
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	2204      	movs	r2, #4
 80002ea:	4619      	mov	r1, r3
 80002ec:	6878      	ldr	r0, [r7, #4]
 80002ee:	f000 f839 	bl	8000364 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80002f2:	e005      	b.n	8000300 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80002f4:	78fb      	ldrb	r3, [r7, #3]
 80002f6:	2208      	movs	r2, #8
 80002f8:	4619      	mov	r1, r3
 80002fa:	6878      	ldr	r0, [r7, #4]
 80002fc:	f000 f832 	bl	8000364 <lcd_write>
}
 8000300:	bf00      	nop
 8000302:	3708      	adds	r7, #8
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	460b      	mov	r3, r1
 8000312:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	6898      	ldr	r0, [r3, #8]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	899b      	ldrh	r3, [r3, #12]
 800031c:	2201      	movs	r2, #1
 800031e:	4619      	mov	r1, r3
 8000320:	f001 ff11 	bl	8002146 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	7d9b      	ldrb	r3, [r3, #22]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d111      	bne.n	8000350 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800032c:	78fb      	ldrb	r3, [r7, #3]
 800032e:	091b      	lsrs	r3, r3, #4
 8000330:	b2db      	uxtb	r3, r3
 8000332:	2204      	movs	r2, #4
 8000334:	4619      	mov	r1, r3
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f000 f814 	bl	8000364 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800033c:	78fb      	ldrb	r3, [r7, #3]
 800033e:	f003 030f 	and.w	r3, r3, #15
 8000342:	b2db      	uxtb	r3, r3
 8000344:	2204      	movs	r2, #4
 8000346:	4619      	mov	r1, r3
 8000348:	6878      	ldr	r0, [r7, #4]
 800034a:	f000 f80b 	bl	8000364 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800034e:	e005      	b.n	800035c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000350:	78fb      	ldrb	r3, [r7, #3]
 8000352:	2208      	movs	r2, #8
 8000354:	4619      	mov	r1, r3
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	f000 f804 	bl	8000364 <lcd_write>
}
 800035c:	bf00      	nop
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	460b      	mov	r3, r1
 800036e:	70fb      	strb	r3, [r7, #3]
 8000370:	4613      	mov	r3, r2
 8000372:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000374:	2300      	movs	r3, #0
 8000376:	73fb      	strb	r3, [r7, #15]
 8000378:	e019      	b.n	80003ae <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	4413      	add	r3, r2
 8000384:	6818      	ldr	r0, [r3, #0]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	685a      	ldr	r2, [r3, #4]
 800038a:	7bfb      	ldrb	r3, [r7, #15]
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	4413      	add	r3, r2
 8000390:	8819      	ldrh	r1, [r3, #0]
 8000392:	78fa      	ldrb	r2, [r7, #3]
 8000394:	7bfb      	ldrb	r3, [r7, #15]
 8000396:	fa42 f303 	asr.w	r3, r2, r3
 800039a:	b2db      	uxtb	r3, r3
 800039c:	f003 0301 	and.w	r3, r3, #1
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	461a      	mov	r2, r3
 80003a4:	f001 fecf 	bl	8002146 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80003a8:	7bfb      	ldrb	r3, [r7, #15]
 80003aa:	3301      	adds	r3, #1
 80003ac:	73fb      	strb	r3, [r7, #15]
 80003ae:	7bfa      	ldrb	r2, [r7, #15]
 80003b0:	78bb      	ldrb	r3, [r7, #2]
 80003b2:	429a      	cmp	r2, r3
 80003b4:	d3e1      	bcc.n	800037a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	6918      	ldr	r0, [r3, #16]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	8a9b      	ldrh	r3, [r3, #20]
 80003be:	2201      	movs	r2, #1
 80003c0:	4619      	mov	r1, r3
 80003c2:	f001 fec0 	bl	8002146 <HAL_GPIO_WritePin>
	DELAY(1);
 80003c6:	2001      	movs	r0, #1
 80003c8:	f000 fff2 	bl	80013b0 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	6918      	ldr	r0, [r3, #16]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	8a9b      	ldrh	r3, [r3, #20]
 80003d4:	2200      	movs	r2, #0
 80003d6:	4619      	mov	r1, r3
 80003d8:	f001 feb5 	bl	8002146 <HAL_GPIO_WritePin>
}
 80003dc:	bf00      	nop
 80003de:	3710      	adds	r7, #16
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e8:	f000 ffb0 	bl	800134c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ec:	f000 f894 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f0:	f000 f9e0 	bl	80007b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003f4:	f000 f8ec 	bl	80005d0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80003f8:	f000 f928 	bl	800064c <MX_ADC2_Init>
  MX_TIM2_Init();
 80003fc:	f000 f964 	bl	80006c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000400:	482b      	ldr	r0, [pc, #172]	; (80004b0 <main+0xcc>)
 8000402:	f001 f8d1 	bl	80015a8 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8000406:	482b      	ldr	r0, [pc, #172]	; (80004b4 <main+0xd0>)
 8000408:	f001 f8ce 	bl	80015a8 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800040c:	2100      	movs	r1, #0
 800040e:	482a      	ldr	r0, [pc, #168]	; (80004b8 <main+0xd4>)
 8000410:	f002 fd58 	bl	8002ec4 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000414:	f003 fbba 	bl	8003b8c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of ThrottleQueue */
  ThrottleQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &ThrottleQueue_attributes);
 8000418:	4a28      	ldr	r2, [pc, #160]	; (80004bc <main+0xd8>)
 800041a:	2102      	movs	r1, #2
 800041c:	2010      	movs	r0, #16
 800041e:	f003 fcf3 	bl	8003e08 <osMessageQueueNew>
 8000422:	4603      	mov	r3, r0
 8000424:	4a26      	ldr	r2, [pc, #152]	; (80004c0 <main+0xdc>)
 8000426:	6013      	str	r3, [r2, #0]

  /* creation of BrakeQueue */
  BrakeQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &BrakeQueue_attributes);
 8000428:	4a26      	ldr	r2, [pc, #152]	; (80004c4 <main+0xe0>)
 800042a:	2102      	movs	r1, #2
 800042c:	2010      	movs	r0, #16
 800042e:	f003 fceb 	bl	8003e08 <osMessageQueueNew>
 8000432:	4603      	mov	r3, r0
 8000434:	4a24      	ldr	r2, [pc, #144]	; (80004c8 <main+0xe4>)
 8000436:	6013      	str	r3, [r2, #0]

  /* creation of GearQueue */
  GearQueueHandle = osMessageQueueNew (16, sizeof(char), &GearQueue_attributes);
 8000438:	4a24      	ldr	r2, [pc, #144]	; (80004cc <main+0xe8>)
 800043a:	2101      	movs	r1, #1
 800043c:	2010      	movs	r0, #16
 800043e:	f003 fce3 	bl	8003e08 <osMessageQueueNew>
 8000442:	4603      	mov	r3, r0
 8000444:	4a22      	ldr	r2, [pc, #136]	; (80004d0 <main+0xec>)
 8000446:	6013      	str	r3, [r2, #0]

  /* creation of SpeedQueue */
  SpeedQueueHandle = osMessageQueueNew (16, sizeof(uint32_t), &SpeedQueue_attributes);
 8000448:	4a22      	ldr	r2, [pc, #136]	; (80004d4 <main+0xf0>)
 800044a:	2104      	movs	r1, #4
 800044c:	2010      	movs	r0, #16
 800044e:	f003 fcdb 	bl	8003e08 <osMessageQueueNew>
 8000452:	4603      	mov	r3, r0
 8000454:	4a20      	ldr	r2, [pc, #128]	; (80004d8 <main+0xf4>)
 8000456:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Throttle */
  ThrottleHandle = osThreadNew(ThrottleInput, NULL, &Throttle_attributes);
 8000458:	4a20      	ldr	r2, [pc, #128]	; (80004dc <main+0xf8>)
 800045a:	2100      	movs	r1, #0
 800045c:	4820      	ldr	r0, [pc, #128]	; (80004e0 <main+0xfc>)
 800045e:	f003 fbfb 	bl	8003c58 <osThreadNew>
 8000462:	4603      	mov	r3, r0
 8000464:	4a1f      	ldr	r2, [pc, #124]	; (80004e4 <main+0x100>)
 8000466:	6013      	str	r3, [r2, #0]

  /* creation of Brake */
  BrakeHandle = osThreadNew(BrakeInput, NULL, &Brake_attributes);
 8000468:	4a1f      	ldr	r2, [pc, #124]	; (80004e8 <main+0x104>)
 800046a:	2100      	movs	r1, #0
 800046c:	481f      	ldr	r0, [pc, #124]	; (80004ec <main+0x108>)
 800046e:	f003 fbf3 	bl	8003c58 <osThreadNew>
 8000472:	4603      	mov	r3, r0
 8000474:	4a1e      	ldr	r2, [pc, #120]	; (80004f0 <main+0x10c>)
 8000476:	6013      	str	r3, [r2, #0]

  /* creation of Gear */
  GearHandle = osThreadNew(GearSelection, NULL, &Gear_attributes);
 8000478:	4a1e      	ldr	r2, [pc, #120]	; (80004f4 <main+0x110>)
 800047a:	2100      	movs	r1, #0
 800047c:	481e      	ldr	r0, [pc, #120]	; (80004f8 <main+0x114>)
 800047e:	f003 fbeb 	bl	8003c58 <osThreadNew>
 8000482:	4603      	mov	r3, r0
 8000484:	4a1d      	ldr	r2, [pc, #116]	; (80004fc <main+0x118>)
 8000486:	6013      	str	r3, [r2, #0]

  /* creation of Data */
  DataHandle = osThreadNew(DataProcessing, NULL, &Data_attributes);
 8000488:	4a1d      	ldr	r2, [pc, #116]	; (8000500 <main+0x11c>)
 800048a:	2100      	movs	r1, #0
 800048c:	481d      	ldr	r0, [pc, #116]	; (8000504 <main+0x120>)
 800048e:	f003 fbe3 	bl	8003c58 <osThreadNew>
 8000492:	4603      	mov	r3, r0
 8000494:	4a1c      	ldr	r2, [pc, #112]	; (8000508 <main+0x124>)
 8000496:	6013      	str	r3, [r2, #0]

  /* creation of Display */
  DisplayHandle = osThreadNew(OutputDisplay, NULL, &Display_attributes);
 8000498:	4a1c      	ldr	r2, [pc, #112]	; (800050c <main+0x128>)
 800049a:	2100      	movs	r1, #0
 800049c:	481c      	ldr	r0, [pc, #112]	; (8000510 <main+0x12c>)
 800049e:	f003 fbdb 	bl	8003c58 <osThreadNew>
 80004a2:	4603      	mov	r3, r0
 80004a4:	4a1b      	ldr	r2, [pc, #108]	; (8000514 <main+0x130>)
 80004a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004a8:	f003 fba2 	bl	8003bf0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <main+0xc8>
 80004ae:	bf00      	nop
 80004b0:	20000094 	.word	0x20000094
 80004b4:	200000c4 	.word	0x200000c4
 80004b8:	200000f4 	.word	0x200000f4
 80004bc:	08007484 	.word	0x08007484
 80004c0:	20000150 	.word	0x20000150
 80004c4:	0800749c 	.word	0x0800749c
 80004c8:	20000154 	.word	0x20000154
 80004cc:	080074b4 	.word	0x080074b4
 80004d0:	20000158 	.word	0x20000158
 80004d4:	080074cc 	.word	0x080074cc
 80004d8:	2000015c 	.word	0x2000015c
 80004dc:	080073d0 	.word	0x080073d0
 80004e0:	080008e1 	.word	0x080008e1
 80004e4:	2000013c 	.word	0x2000013c
 80004e8:	080073f4 	.word	0x080073f4
 80004ec:	080009ad 	.word	0x080009ad
 80004f0:	20000140 	.word	0x20000140
 80004f4:	08007418 	.word	0x08007418
 80004f8:	08000a29 	.word	0x08000a29
 80004fc:	20000144 	.word	0x20000144
 8000500:	0800743c 	.word	0x0800743c
 8000504:	08000ad9 	.word	0x08000ad9
 8000508:	20000148 	.word	0x20000148
 800050c:	08007460 	.word	0x08007460
 8000510:	08000e09 	.word	0x08000e09
 8000514:	2000014c 	.word	0x2000014c

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	; 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000522:	2228      	movs	r2, #40	; 0x28
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f006 fa68 	bl	80069fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 0314 	add.w	r3, r7, #20
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000548:	2301      	movs	r3, #1
 800054a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800054c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000550:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000552:	2300      	movs	r3, #0
 8000554:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000556:	2301      	movs	r3, #1
 8000558:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000562:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000564:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000568:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800056e:	4618      	mov	r0, r3
 8000570:	f001 fe02 	bl	8002178 <HAL_RCC_OscConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800057a:	f000 fd03 	bl	8000f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057e:	230f      	movs	r3, #15
 8000580:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000582:	2302      	movs	r3, #2
 8000584:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800058a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800058e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	2102      	movs	r1, #2
 800059a:	4618      	mov	r0, r3
 800059c:	f002 f86e 	bl	800267c <HAL_RCC_ClockConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005a6:	f000 fced 	bl	8000f84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005aa:	2302      	movs	r3, #2
 80005ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80005ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005b2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 fa14 	bl	80029e4 <HAL_RCCEx_PeriphCLKConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005c2:	f000 fcdf 	bl	8000f84 <Error_Handler>
  }
}
 80005c6:	bf00      	nop
 80005c8:	3750      	adds	r7, #80	; 0x50
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <MX_ADC1_Init+0x74>)
 80005e2:	4a19      	ldr	r2, [pc, #100]	; (8000648 <MX_ADC1_Init+0x78>)
 80005e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <MX_ADC1_Init+0x74>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <MX_ADC1_Init+0x74>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_ADC1_Init+0x74>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <MX_ADC1_Init+0x74>)
 80005fa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000600:	4b10      	ldr	r3, [pc, #64]	; (8000644 <MX_ADC1_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_ADC1_Init+0x74>)
 8000608:	2201      	movs	r2, #1
 800060a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <MX_ADC1_Init+0x74>)
 800060e:	f000 fef3 	bl	80013f8 <HAL_ADC_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000618:	f000 fcb4 	bl	8000f84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800061c:	2304      	movs	r3, #4
 800061e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000620:	2301      	movs	r3, #1
 8000622:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	4619      	mov	r1, r3
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <MX_ADC1_Init+0x74>)
 800062e:	f001 f97b 	bl	8001928 <HAL_ADC_ConfigChannel>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000638:	f000 fca4 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000094 	.word	0x20000094
 8000648:	40012400 	.word	0x40012400

0800064c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_ADC2_Init+0x74>)
 800065e:	4a19      	ldr	r2, [pc, #100]	; (80006c4 <MX_ADC2_Init+0x78>)
 8000660:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_ADC2_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_ADC2_Init+0x74>)
 800066a:	2201      	movs	r2, #1
 800066c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_ADC2_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_ADC2_Init+0x74>)
 8000676:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800067a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_ADC2_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_ADC2_Init+0x74>)
 8000684:	2201      	movs	r2, #1
 8000686:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000688:	480d      	ldr	r0, [pc, #52]	; (80006c0 <MX_ADC2_Init+0x74>)
 800068a:	f000 feb5 	bl	80013f8 <HAL_ADC_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000694:	f000 fc76 	bl	8000f84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000698:	2305      	movs	r3, #5
 800069a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069c:	2301      	movs	r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_ADC2_Init+0x74>)
 80006aa:	f001 f93d 	bl	8001928 <HAL_ADC_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80006b4:	f000 fc66 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200000c4 	.word	0x200000c4
 80006c4:	40012800 	.word	0x40012800

080006c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08e      	sub	sp, #56	; 0x38
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
 80006f4:	615a      	str	r2, [r3, #20]
 80006f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006f8:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <MX_TIM2_Init+0xe8>)
 80006fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000700:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <MX_TIM2_Init+0xe8>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000706:	4b2a      	ldr	r3, [pc, #168]	; (80007b0 <MX_TIM2_Init+0xe8>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800070c:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <MX_TIM2_Init+0xe8>)
 800070e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000712:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000714:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <MX_TIM2_Init+0xe8>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071a:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <MX_TIM2_Init+0xe8>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000720:	4823      	ldr	r0, [pc, #140]	; (80007b0 <MX_TIM2_Init+0xe8>)
 8000722:	f002 fad5 	bl	8002cd0 <HAL_TIM_Base_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800072c:	f000 fc2a 	bl	8000f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000734:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800073a:	4619      	mov	r1, r3
 800073c:	481c      	ldr	r0, [pc, #112]	; (80007b0 <MX_TIM2_Init+0xe8>)
 800073e:	f002 fe29 	bl	8003394 <HAL_TIM_ConfigClockSource>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000748:	f000 fc1c 	bl	8000f84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800074c:	4818      	ldr	r0, [pc, #96]	; (80007b0 <MX_TIM2_Init+0xe8>)
 800074e:	f002 fb61 	bl	8002e14 <HAL_TIM_PWM_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000758:	f000 fc14 	bl	8000f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000764:	f107 0320 	add.w	r3, r7, #32
 8000768:	4619      	mov	r1, r3
 800076a:	4811      	ldr	r0, [pc, #68]	; (80007b0 <MX_TIM2_Init+0xe8>)
 800076c:	f003 f99e 	bl	8003aac <HAL_TIMEx_MasterConfigSynchronization>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000776:	f000 fc05 	bl	8000f84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800077a:	2360      	movs	r3, #96	; 0x60
 800077c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2200      	movs	r2, #0
 800078e:	4619      	mov	r1, r3
 8000790:	4807      	ldr	r0, [pc, #28]	; (80007b0 <MX_TIM2_Init+0xe8>)
 8000792:	f002 fd41 	bl	8003218 <HAL_TIM_PWM_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800079c:	f000 fbf2 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007a0:	4803      	ldr	r0, [pc, #12]	; (80007b0 <MX_TIM2_Init+0xe8>)
 80007a2:	f000 fcaf 	bl	8001104 <HAL_TIM_MspPostInit>

}
 80007a6:	bf00      	nop
 80007a8:	3738      	adds	r7, #56	; 0x38
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000f4 	.word	0x200000f4

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c8:	4b2e      	ldr	r3, [pc, #184]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a2d      	ldr	r2, [pc, #180]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007ce:	f043 0320 	orr.w	r3, r3, #32
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b2b      	ldr	r3, [pc, #172]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0320 	and.w	r3, r3, #32
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b28      	ldr	r3, [pc, #160]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a27      	ldr	r2, [pc, #156]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007e6:	f043 0304 	orr.w	r3, r3, #4
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b25      	ldr	r3, [pc, #148]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0304 	and.w	r3, r3, #4
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a21      	ldr	r2, [pc, #132]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007fe:	f043 0308 	orr.w	r3, r3, #8
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0308 	and.w	r3, r3, #8
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	210a      	movs	r1, #10
 8000814:	481c      	ldr	r0, [pc, #112]	; (8000888 <MX_GPIO_Init+0xd4>)
 8000816:	f001 fc96 	bl	8002146 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f640 4103 	movw	r1, #3075	; 0xc03
 8000820:	481a      	ldr	r0, [pc, #104]	; (800088c <MX_GPIO_Init+0xd8>)
 8000822:	f001 fc90 	bl	8002146 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000826:	230a      	movs	r3, #10
 8000828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2302      	movs	r3, #2
 8000834:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000836:	f107 0310 	add.w	r3, r7, #16
 800083a:	4619      	mov	r1, r3
 800083c:	4812      	ldr	r0, [pc, #72]	; (8000888 <MX_GPIO_Init+0xd4>)
 800083e:	f001 fae7 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8000842:	f640 4303 	movw	r3, #3075	; 0xc03
 8000846:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	2301      	movs	r3, #1
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2302      	movs	r3, #2
 8000852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	4619      	mov	r1, r3
 800085a:	480c      	ldr	r0, [pc, #48]	; (800088c <MX_GPIO_Init+0xd8>)
 800085c:	f001 fad8 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000860:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000864:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	4619      	mov	r1, r3
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_GPIO_Init+0xd4>)
 8000876:	f001 facb 	bl	8001e10 <HAL_GPIO_Init>

}
 800087a:	bf00      	nop
 800087c:	3720      	adds	r7, #32
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000
 8000888:	40010800 	.word	0x40010800
 800088c:	40010c00 	.word	0x40010c00

08000890 <MAP.0>:
/* USER CODE END Header_ThrottleInput */
void ThrottleInput(void *argument)

{  /* USER CODE BEGIN 5 */
	uint16_t MAP(uint16_t au32_IN, uint16_t au32_INmin, uint16_t au32_INmax, uint16_t au32_OUTmin, uint16_t au32_OUTmax)
		{
 8000890:	b490      	push	{r4, r7}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	4604      	mov	r4, r0
 8000898:	4608      	mov	r0, r1
 800089a:	4611      	mov	r1, r2
 800089c:	461a      	mov	r2, r3
 800089e:	4623      	mov	r3, r4
 80008a0:	81fb      	strh	r3, [r7, #14]
 80008a2:	4603      	mov	r3, r0
 80008a4:	81bb      	strh	r3, [r7, #12]
 80008a6:	460b      	mov	r3, r1
 80008a8:	817b      	strh	r3, [r7, #10]
 80008aa:	4613      	mov	r3, r2
 80008ac:	813b      	strh	r3, [r7, #8]
 80008ae:	f8c7 c004 	str.w	ip, [r7, #4]
		    return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 80008b2:	89fa      	ldrh	r2, [r7, #14]
 80008b4:	89bb      	ldrh	r3, [r7, #12]
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	8b39      	ldrh	r1, [r7, #24]
 80008ba:	893a      	ldrh	r2, [r7, #8]
 80008bc:	1a8a      	subs	r2, r1, r2
 80008be:	fb03 f202 	mul.w	r2, r3, r2
 80008c2:	8979      	ldrh	r1, [r7, #10]
 80008c4:	89bb      	ldrh	r3, [r7, #12]
 80008c6:	1acb      	subs	r3, r1, r3
 80008c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	893b      	ldrh	r3, [r7, #8]
 80008d0:	4413      	add	r3, r2
 80008d2:	b29b      	uxth	r3, r3
		}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc90      	pop	{r4, r7}
 80008dc:	4770      	bx	lr
	...

080008e0 <ThrottleInput>:
{  /* USER CODE BEGIN 5 */
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af02      	add	r7, sp, #8
 80008e6:	6078      	str	r0, [r7, #4]
void ThrottleInput(void *argument)
 80008e8:	f107 0318 	add.w	r3, r7, #24
 80008ec:	60fb      	str	r3, [r7, #12]
	lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_3, LCD_4_BIT_MODE);
*/
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_PollForConversion(&hadc1,1000);
 80008ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008f2:	4816      	ldr	r0, [pc, #88]	; (800094c <ThrottleInput+0x6c>)
 80008f4:	f000 ff06 	bl	8001704 <HAL_ADC_PollForConversion>
	  throttle = HAL_ADC_GetValue(&hadc1);
 80008f8:	4814      	ldr	r0, [pc, #80]	; (800094c <ThrottleInput+0x6c>)
 80008fa:	f001 f809 	bl	8001910 <HAL_ADC_GetValue>
 80008fe:	4603      	mov	r3, r0
 8000900:	b29a      	uxth	r2, r3
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <ThrottleInput+0x70>)
 8000904:	801a      	strh	r2, [r3, #0]
	  throttleMap = MAP(throttle, 0,4020,0,100);
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <ThrottleInput+0x70>)
 8000908:	8818      	ldrh	r0, [r3, #0]
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	2264      	movs	r2, #100	; 0x64
 8000910:	9200      	str	r2, [sp, #0]
 8000912:	469c      	mov	ip, r3
 8000914:	2300      	movs	r3, #0
 8000916:	f640 72b4 	movw	r2, #4020	; 0xfb4
 800091a:	2100      	movs	r1, #0
 800091c:	f7ff ffb8 	bl	8000890 <MAP.0>
 8000920:	4603      	mov	r3, r0
 8000922:	461a      	mov	r2, r3
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <ThrottleInput+0x74>)
 8000926:	801a      	strh	r2, [r3, #0]
	  if (throttleMap < 15)
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <ThrottleInput+0x74>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	2b0e      	cmp	r3, #14
 800092e:	d802      	bhi.n	8000936 <ThrottleInput+0x56>
	  {
		  throttleMap = 0;
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <ThrottleInput+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	801a      	strh	r2, [r3, #0]
	  Lcd_cursor(&lcd, 0,0);
	  Lcd_string(&lcd, "throttle value");
	  Lcd_cursor(&lcd, 1,0);
	  Lcd_int(&lcd,throttleMap);
*/
	  osMessageQueuePut(ThrottleQueueHandle, &throttleMap,0,200);
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <ThrottleInput+0x78>)
 8000938:	6818      	ldr	r0, [r3, #0]
 800093a:	23c8      	movs	r3, #200	; 0xc8
 800093c:	2200      	movs	r2, #0
 800093e:	4905      	ldr	r1, [pc, #20]	; (8000954 <ThrottleInput+0x74>)
 8000940:	f003 fae8 	bl	8003f14 <osMessageQueuePut>
    osDelay(1);
 8000944:	2001      	movs	r0, #1
 8000946:	f003 fa31 	bl	8003dac <osDelay>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 800094a:	e7d0      	b.n	80008ee <ThrottleInput+0xe>
 800094c:	20000094 	.word	0x20000094
 8000950:	20000160 	.word	0x20000160
 8000954:	20000164 	.word	0x20000164
 8000958:	20000150 	.word	0x20000150

0800095c <MAP.1>:
/* USER CODE END Header_BrakeInput */
void BrakeInput(void *argument)
{
	 /* USER CODE BEGIN BrakeInput */
		uint16_t MAP(uint16_t au32_IN, uint16_t au32_INmin, uint16_t au32_INmax, uint16_t au32_OUTmin, uint16_t au32_OUTmax)
		{
 800095c:	b490      	push	{r4, r7}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	4604      	mov	r4, r0
 8000964:	4608      	mov	r0, r1
 8000966:	4611      	mov	r1, r2
 8000968:	461a      	mov	r2, r3
 800096a:	4623      	mov	r3, r4
 800096c:	81fb      	strh	r3, [r7, #14]
 800096e:	4603      	mov	r3, r0
 8000970:	81bb      	strh	r3, [r7, #12]
 8000972:	460b      	mov	r3, r1
 8000974:	817b      	strh	r3, [r7, #10]
 8000976:	4613      	mov	r3, r2
 8000978:	813b      	strh	r3, [r7, #8]
 800097a:	f8c7 c004 	str.w	ip, [r7, #4]
		    return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 800097e:	89fa      	ldrh	r2, [r7, #14]
 8000980:	89bb      	ldrh	r3, [r7, #12]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	8b39      	ldrh	r1, [r7, #24]
 8000986:	893a      	ldrh	r2, [r7, #8]
 8000988:	1a8a      	subs	r2, r1, r2
 800098a:	fb03 f202 	mul.w	r2, r3, r2
 800098e:	8979      	ldrh	r1, [r7, #10]
 8000990:	89bb      	ldrh	r3, [r7, #12]
 8000992:	1acb      	subs	r3, r1, r3
 8000994:	fb92 f3f3 	sdiv	r3, r2, r3
 8000998:	b29a      	uxth	r2, r3
 800099a:	893b      	ldrh	r3, [r7, #8]
 800099c:	4413      	add	r3, r2
 800099e:	b29b      	uxth	r3, r3
		}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc90      	pop	{r4, r7}
 80009a8:	4770      	bx	lr
	...

080009ac <BrakeInput>:
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af02      	add	r7, sp, #8
 80009b2:	6078      	str	r0, [r7, #4]
void BrakeInput(void *argument)
 80009b4:	f107 0318 	add.w	r3, r7, #24
 80009b8:	60fb      	str	r3, [r7, #12]
		lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_3, LCD_4_BIT_MODE);
*/
	  /* Infinite loop */
	  for(;;)
	  {
		  HAL_ADC_PollForConversion(&hadc2,1000);
 80009ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009be:	4816      	ldr	r0, [pc, #88]	; (8000a18 <BrakeInput+0x6c>)
 80009c0:	f000 fea0 	bl	8001704 <HAL_ADC_PollForConversion>
		  brake = HAL_ADC_GetValue(&hadc2);
 80009c4:	4814      	ldr	r0, [pc, #80]	; (8000a18 <BrakeInput+0x6c>)
 80009c6:	f000 ffa3 	bl	8001910 <HAL_ADC_GetValue>
 80009ca:	4603      	mov	r3, r0
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <BrakeInput+0x70>)
 80009d0:	801a      	strh	r2, [r3, #0]
		  brakeMap = MAP(brake, 0,4020,0,100);
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <BrakeInput+0x70>)
 80009d4:	8818      	ldrh	r0, [r3, #0]
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	2264      	movs	r2, #100	; 0x64
 80009dc:	9200      	str	r2, [sp, #0]
 80009de:	469c      	mov	ip, r3
 80009e0:	2300      	movs	r3, #0
 80009e2:	f640 72b4 	movw	r2, #4020	; 0xfb4
 80009e6:	2100      	movs	r1, #0
 80009e8:	f7ff ffb8 	bl	800095c <MAP.1>
 80009ec:	4603      	mov	r3, r0
 80009ee:	461a      	mov	r2, r3
 80009f0:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <BrakeInput+0x74>)
 80009f2:	801a      	strh	r2, [r3, #0]
		  if (brakeMap < 15)
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <BrakeInput+0x74>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	2b0e      	cmp	r3, #14
 80009fa:	d802      	bhi.n	8000a02 <BrakeInput+0x56>
		  	  {
		  		  brakeMap = 0;
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <BrakeInput+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	801a      	strh	r2, [r3, #0]
		  Lcd_string(&lcd, "brake 2 value");
		  Lcd_cursor(&lcd, 1,0);
		  Lcd_int(&lcd,brakeMap);
*/

		  osMessageQueuePut(BrakeQueueHandle, &brakeMap,0,200);
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <BrakeInput+0x78>)
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	23c8      	movs	r3, #200	; 0xc8
 8000a08:	2200      	movs	r2, #0
 8000a0a:	4905      	ldr	r1, [pc, #20]	; (8000a20 <BrakeInput+0x74>)
 8000a0c:	f003 fa82 	bl	8003f14 <osMessageQueuePut>
	    osDelay(1);
 8000a10:	2001      	movs	r0, #1
 8000a12:	f003 f9cb 	bl	8003dac <osDelay>
		  HAL_ADC_PollForConversion(&hadc2,1000);
 8000a16:	e7d0      	b.n	80009ba <BrakeInput+0xe>
 8000a18:	200000c4 	.word	0x200000c4
 8000a1c:	20000162 	.word	0x20000162
 8000a20:	20000166 	.word	0x20000166
 8000a24:	20000154 	.word	0x20000154

08000a28 <GearSelection>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GearSelection */
void GearSelection(void *argument)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	  lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_3, LCD_4_BIT_MODE);
*/
	  /* Infinite loop */
	  for(;;)
	  {
		  if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12)) //if bit0 == 1(which is bit4 in DIP) means car is parked
 8000a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a34:	4811      	ldr	r0, [pc, #68]	; (8000a7c <GearSelection+0x54>)
 8000a36:	f001 fb6f 	bl	8002118 <HAL_GPIO_ReadPin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d003      	beq.n	8000a48 <GearSelection+0x20>
		 	  {
		 		  gear = 'P';
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <GearSelection+0x58>)
 8000a42:	2250      	movs	r2, #80	; 0x50
 8000a44:	701a      	strb	r2, [r3, #0]
 8000a46:	e00e      	b.n	8000a66 <GearSelection+0x3e>
				  /*Lcd_cursor(&lcd, 1,0);
				  Lcd_string(&lcd, "P");*/
		 	  }
		 	  else //car is moving
		 	  {
		 		  if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11)) //bit1 means car is moving
 8000a48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a4c:	480b      	ldr	r0, [pc, #44]	; (8000a7c <GearSelection+0x54>)
 8000a4e:	f001 fb63 	bl	8002118 <HAL_GPIO_ReadPin>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d003      	beq.n	8000a60 <GearSelection+0x38>
		 		  {
		 			  gear = '2';
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <GearSelection+0x58>)
 8000a5a:	2232      	movs	r2, #50	; 0x32
 8000a5c:	701a      	strb	r2, [r3, #0]
 8000a5e:	e002      	b.n	8000a66 <GearSelection+0x3e>
		 			 /*Lcd_cursor(&lcd, 1,0);
		 			 Lcd_string(&lcd, "2");*/
		 		  }
		 		  else
		 		  {
		 			  gear = '1';
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <GearSelection+0x58>)
 8000a62:	2231      	movs	r2, #49	; 0x31
 8000a64:	701a      	strb	r2, [r3, #0]
/*
		  Lcd_cursor(&lcd, 0,0);
		  Lcd_string(&lcd, "gear value");
*/

		  osMessageQueuePut(GearQueueHandle,&gear,0,250);
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <GearSelection+0x5c>)
 8000a68:	6818      	ldr	r0, [r3, #0]
 8000a6a:	23fa      	movs	r3, #250	; 0xfa
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	4904      	ldr	r1, [pc, #16]	; (8000a80 <GearSelection+0x58>)
 8000a70:	f003 fa50 	bl	8003f14 <osMessageQueuePut>
	    osDelay(1);
 8000a74:	2001      	movs	r0, #1
 8000a76:	f003 f999 	bl	8003dac <osDelay>
		  if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12)) //if bit0 == 1(which is bit4 in DIP) means car is parked
 8000a7a:	e7d9      	b.n	8000a30 <GearSelection+0x8>
 8000a7c:	40010800 	.word	0x40010800
 8000a80:	20000000 	.word	0x20000000
 8000a84:	20000158 	.word	0x20000158

08000a88 <MAP.2>:
*/
/* USER CODE END Header_DataProcessing */
void DataProcessing(void *argument)
{
	uint16_t MAP(uint16_t au32_IN, uint16_t au32_INmin, uint16_t au32_INmax, uint16_t au32_OUTmin, uint16_t au32_OUTmax)
	{
 8000a88:	b490      	push	{r4, r7}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4604      	mov	r4, r0
 8000a90:	4608      	mov	r0, r1
 8000a92:	4611      	mov	r1, r2
 8000a94:	461a      	mov	r2, r3
 8000a96:	4623      	mov	r3, r4
 8000a98:	81fb      	strh	r3, [r7, #14]
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	81bb      	strh	r3, [r7, #12]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	817b      	strh	r3, [r7, #10]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	813b      	strh	r3, [r7, #8]
 8000aa6:	f8c7 c004 	str.w	ip, [r7, #4]
		return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 8000aaa:	89fa      	ldrh	r2, [r7, #14]
 8000aac:	89bb      	ldrh	r3, [r7, #12]
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	8b39      	ldrh	r1, [r7, #24]
 8000ab2:	893a      	ldrh	r2, [r7, #8]
 8000ab4:	1a8a      	subs	r2, r1, r2
 8000ab6:	fb03 f202 	mul.w	r2, r3, r2
 8000aba:	8979      	ldrh	r1, [r7, #10]
 8000abc:	89bb      	ldrh	r3, [r7, #12]
 8000abe:	1acb      	subs	r3, r1, r3
 8000ac0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	893b      	ldrh	r3, [r7, #8]
 8000ac8:	4413      	add	r3, r2
 8000aca:	b29b      	uxth	r3, r3
	}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc90      	pop	{r4, r7}
 8000ad4:	4770      	bx	lr
	...

08000ad8 <DataProcessing>:
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af02      	add	r7, sp, #8
 8000ade:	6078      	str	r0, [r7, #4]
void DataProcessing(void *argument)
 8000ae0:	f107 0318 	add.w	r3, r7, #24
 8000ae4:	60bb      	str	r3, [r7, #8]
	  lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_3, LCD_4_BIT_MODE);
*/

	  for(;;)
	  {
		AverageBrakePercentageTotal = 0;
 8000ae6:	4b8c      	ldr	r3, [pc, #560]	; (8000d18 <DataProcessing+0x240>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
		AverageThrottlePercentageTotal = 0;
 8000aec:	4b8b      	ldr	r3, [pc, #556]	; (8000d1c <DataProcessing+0x244>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
		brakeMapReceived = 0;
 8000af2:	4b8b      	ldr	r3, [pc, #556]	; (8000d20 <DataProcessing+0x248>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
		throttleMapReceived = 0;
 8000af8:	4b8a      	ldr	r3, [pc, #552]	; (8000d24 <DataProcessing+0x24c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]

		osMessageQueueGet(GearQueueHandle,&gearReceived,NULL,250); //get gear
 8000afe:	4b8a      	ldr	r3, [pc, #552]	; (8000d28 <DataProcessing+0x250>)
 8000b00:	6818      	ldr	r0, [r3, #0]
 8000b02:	23fa      	movs	r3, #250	; 0xfa
 8000b04:	2200      	movs	r2, #0
 8000b06:	4989      	ldr	r1, [pc, #548]	; (8000d2c <DataProcessing+0x254>)
 8000b08:	f003 fa78 	bl	8003ffc <osMessageQueueGet>

		  for (int i = 0; i < 16; i++) //cuantas iteraciones
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	e01e      	b.n	8000b50 <DataProcessing+0x78>
		  {
			  osMessageQueueGet(BrakeQueueHandle,&brakeMapReceived,NULL,250); //get brakequeue
 8000b12:	4b87      	ldr	r3, [pc, #540]	; (8000d30 <DataProcessing+0x258>)
 8000b14:	6818      	ldr	r0, [r3, #0]
 8000b16:	23fa      	movs	r3, #250	; 0xfa
 8000b18:	2200      	movs	r2, #0
 8000b1a:	4981      	ldr	r1, [pc, #516]	; (8000d20 <DataProcessing+0x248>)
 8000b1c:	f003 fa6e 	bl	8003ffc <osMessageQueueGet>
			  osMessageQueueGet(ThrottleQueueHandle, &throttleMapReceived,NULL,250); //get throttle
 8000b20:	4b84      	ldr	r3, [pc, #528]	; (8000d34 <DataProcessing+0x25c>)
 8000b22:	6818      	ldr	r0, [r3, #0]
 8000b24:	23fa      	movs	r3, #250	; 0xfa
 8000b26:	2200      	movs	r2, #0
 8000b28:	497e      	ldr	r1, [pc, #504]	; (8000d24 <DataProcessing+0x24c>)
 8000b2a:	f003 fa67 	bl	8003ffc <osMessageQueueGet>
			  AverageBrakePercentageTotal = AverageBrakePercentageTotal + brakeMapReceived;
 8000b2e:	4b7a      	ldr	r3, [pc, #488]	; (8000d18 <DataProcessing+0x240>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	4b7b      	ldr	r3, [pc, #492]	; (8000d20 <DataProcessing+0x248>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	4a77      	ldr	r2, [pc, #476]	; (8000d18 <DataProcessing+0x240>)
 8000b3a:	6013      	str	r3, [r2, #0]
			  AverageThrottlePercentageTotal = AverageThrottlePercentageTotal + throttleMapReceived;
 8000b3c:	4b77      	ldr	r3, [pc, #476]	; (8000d1c <DataProcessing+0x244>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b78      	ldr	r3, [pc, #480]	; (8000d24 <DataProcessing+0x24c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4413      	add	r3, r2
 8000b46:	4a75      	ldr	r2, [pc, #468]	; (8000d1c <DataProcessing+0x244>)
 8000b48:	6013      	str	r3, [r2, #0]
		  for (int i = 0; i < 16; i++) //cuantas iteraciones
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2b0f      	cmp	r3, #15
 8000b54:	dddd      	ble.n	8000b12 <DataProcessing+0x3a>

		  }
		  AverageBrakePercentage = AverageBrakePercentageTotal / 16;
 8000b56:	4b70      	ldr	r3, [pc, #448]	; (8000d18 <DataProcessing+0x240>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	da00      	bge.n	8000b60 <DataProcessing+0x88>
 8000b5e:	330f      	adds	r3, #15
 8000b60:	111b      	asrs	r3, r3, #4
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b74      	ldr	r3, [pc, #464]	; (8000d38 <DataProcessing+0x260>)
 8000b66:	601a      	str	r2, [r3, #0]
		  AverageThrottlePercentage = AverageThrottlePercentageTotal / 16;
 8000b68:	4b6c      	ldr	r3, [pc, #432]	; (8000d1c <DataProcessing+0x244>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	da00      	bge.n	8000b72 <DataProcessing+0x9a>
 8000b70:	330f      	adds	r3, #15
 8000b72:	111b      	asrs	r3, r3, #4
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b71      	ldr	r3, [pc, #452]	; (8000d3c <DataProcessing+0x264>)
 8000b78:	601a      	str	r2, [r3, #0]
		  Lcd_cursor(&lcd, 1,0);
		  Lcd_int(&lcd, AverageThrottlePercentage);
		  Lcd_string(&lcd, "   ");
*/

		  if (gearReceived == 'P' || gearReceived == 'N')
 8000b7a:	4b6c      	ldr	r3, [pc, #432]	; (8000d2c <DataProcessing+0x254>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b50      	cmp	r3, #80	; 0x50
 8000b80:	d003      	beq.n	8000b8a <DataProcessing+0xb2>
 8000b82:	4b6a      	ldr	r3, [pc, #424]	; (8000d2c <DataProcessing+0x254>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b4e      	cmp	r3, #78	; 0x4e
 8000b88:	d10e      	bne.n	8000ba8 <DataProcessing+0xd0>
		  {
			  DesiredSpeed = DesiredSpeed - 400;
 8000b8a:	4b6d      	ldr	r3, [pc, #436]	; (8000d40 <DataProcessing+0x268>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000b92:	4a6b      	ldr	r2, [pc, #428]	; (8000d40 <DataProcessing+0x268>)
 8000b94:	6013      	str	r3, [r2, #0]
			  if (DesiredSpeed <= 0)
 8000b96:	4b6a      	ldr	r3, [pc, #424]	; (8000d40 <DataProcessing+0x268>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f300 80f9 	bgt.w	8000d92 <DataProcessing+0x2ba>
			  {
				  DesiredSpeed = 0;
 8000ba0:	4b67      	ldr	r3, [pc, #412]	; (8000d40 <DataProcessing+0x268>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
			  if (DesiredSpeed <= 0)
 8000ba6:	e0f4      	b.n	8000d92 <DataProcessing+0x2ba>
			  }
		  }
		  else if (gearReceived == '1')
 8000ba8:	4b60      	ldr	r3, [pc, #384]	; (8000d2c <DataProcessing+0x254>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b31      	cmp	r3, #49	; 0x31
 8000bae:	d167      	bne.n	8000c80 <DataProcessing+0x1a8>
		  {
			  if (DesiredSpeed >= 80000)
 8000bb0:	4b63      	ldr	r3, [pc, #396]	; (8000d40 <DataProcessing+0x268>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a63      	ldr	r2, [pc, #396]	; (8000d44 <DataProcessing+0x26c>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	dd02      	ble.n	8000bc0 <DataProcessing+0xe8>
			  {
				  DesiredSpeed = 80000;
 8000bba:	4b61      	ldr	r3, [pc, #388]	; (8000d40 <DataProcessing+0x268>)
 8000bbc:	4a62      	ldr	r2, [pc, #392]	; (8000d48 <DataProcessing+0x270>)
 8000bbe:	601a      	str	r2, [r3, #0]
			  }

			  if(AverageBrakePercentage > 0 && AverageThrottlePercentage > 0)
 8000bc0:	4b5d      	ldr	r3, [pc, #372]	; (8000d38 <DataProcessing+0x260>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	dd08      	ble.n	8000bda <DataProcessing+0x102>
 8000bc8:	4b5c      	ldr	r3, [pc, #368]	; (8000d3c <DataProcessing+0x264>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	dd04      	ble.n	8000bda <DataProcessing+0x102>
			  {
				  DesiredSpeed = DesiredSpeed;
 8000bd0:	4b5b      	ldr	r3, [pc, #364]	; (8000d40 <DataProcessing+0x268>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a5a      	ldr	r2, [pc, #360]	; (8000d40 <DataProcessing+0x268>)
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	e0db      	b.n	8000d92 <DataProcessing+0x2ba>

			  }
			  //ACCELERATION
			  else if(AverageBrakePercentage <= 0 && AverageThrottlePercentage > 0)
 8000bda:	4b57      	ldr	r3, [pc, #348]	; (8000d38 <DataProcessing+0x260>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	dc1d      	bgt.n	8000c1e <DataProcessing+0x146>
 8000be2:	4b56      	ldr	r3, [pc, #344]	; (8000d3c <DataProcessing+0x264>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	dd19      	ble.n	8000c1e <DataProcessing+0x146>
			  {
					  MapDesiredSpeed = MAP(AverageThrottlePercentage, 0, 100, 0, 1600);
 8000bea:	4b54      	ldr	r3, [pc, #336]	; (8000d3c <DataProcessing+0x264>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	b298      	uxth	r0, r3
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000bf8:	9200      	str	r2, [sp, #0]
 8000bfa:	469c      	mov	ip, r3
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	2264      	movs	r2, #100	; 0x64
 8000c00:	2100      	movs	r1, #0
 8000c02:	f7ff ff41 	bl	8000a88 <MAP.2>
 8000c06:	4603      	mov	r3, r0
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b50      	ldr	r3, [pc, #320]	; (8000d4c <DataProcessing+0x274>)
 8000c0c:	601a      	str	r2, [r3, #0]
					  DesiredSpeed = DesiredSpeed + MapDesiredSpeed;
 8000c0e:	4b4c      	ldr	r3, [pc, #304]	; (8000d40 <DataProcessing+0x268>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	4b4e      	ldr	r3, [pc, #312]	; (8000d4c <DataProcessing+0x274>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	4a49      	ldr	r2, [pc, #292]	; (8000d40 <DataProcessing+0x268>)
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	e0b9      	b.n	8000d92 <DataProcessing+0x2ba>
			  }
			  //BRAKING
			  else if(AverageBrakePercentage > 0 && AverageThrottlePercentage <= 0)
 8000c1e:	4b46      	ldr	r3, [pc, #280]	; (8000d38 <DataProcessing+0x260>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f340 80b5 	ble.w	8000d92 <DataProcessing+0x2ba>
 8000c28:	4b44      	ldr	r3, [pc, #272]	; (8000d3c <DataProcessing+0x264>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	f300 80b0 	bgt.w	8000d92 <DataProcessing+0x2ba>
			  {
				  if (DesiredSpeed <= 0)
 8000c32:	4b43      	ldr	r3, [pc, #268]	; (8000d40 <DataProcessing+0x268>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	dc03      	bgt.n	8000c42 <DataProcessing+0x16a>
				  {
					  DesiredSpeed = 0;
 8000c3a:	4b41      	ldr	r3, [pc, #260]	; (8000d40 <DataProcessing+0x268>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	e0a7      	b.n	8000d92 <DataProcessing+0x2ba>
				  }
				  else if (AverageBrakePercentage > 0)
 8000c42:	4b3d      	ldr	r3, [pc, #244]	; (8000d38 <DataProcessing+0x260>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f340 80a3 	ble.w	8000d92 <DataProcessing+0x2ba>
				  {
					  MapDesiredSpeed = MAP(AverageBrakePercentage, 0, 100, 0, 3200);
 8000c4c:	4b3a      	ldr	r3, [pc, #232]	; (8000d38 <DataProcessing+0x260>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	b298      	uxth	r0, r3
 8000c52:	f107 0308 	add.w	r3, r7, #8
 8000c56:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000c5a:	9200      	str	r2, [sp, #0]
 8000c5c:	469c      	mov	ip, r3
 8000c5e:	2300      	movs	r3, #0
 8000c60:	2264      	movs	r2, #100	; 0x64
 8000c62:	2100      	movs	r1, #0
 8000c64:	f7ff ff10 	bl	8000a88 <MAP.2>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	4b37      	ldr	r3, [pc, #220]	; (8000d4c <DataProcessing+0x274>)
 8000c6e:	601a      	str	r2, [r3, #0]
					  DesiredSpeed = DesiredSpeed - MapDesiredSpeed;
 8000c70:	4b33      	ldr	r3, [pc, #204]	; (8000d40 <DataProcessing+0x268>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b35      	ldr	r3, [pc, #212]	; (8000d4c <DataProcessing+0x274>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	4a31      	ldr	r2, [pc, #196]	; (8000d40 <DataProcessing+0x268>)
 8000c7c:	6013      	str	r3, [r2, #0]
 8000c7e:	e088      	b.n	8000d92 <DataProcessing+0x2ba>
				  }
			  }
		  }
		  else if (gearReceived == '2')
 8000c80:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <DataProcessing+0x254>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b32      	cmp	r3, #50	; 0x32
 8000c86:	f040 8084 	bne.w	8000d92 <DataProcessing+0x2ba>
		  {
			  if (DesiredSpeed >= 200000)
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <DataProcessing+0x268>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a30      	ldr	r2, [pc, #192]	; (8000d50 <DataProcessing+0x278>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	dd02      	ble.n	8000c9a <DataProcessing+0x1c2>
			  {
				  DesiredSpeed = 200000;
 8000c94:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <DataProcessing+0x268>)
 8000c96:	4a2f      	ldr	r2, [pc, #188]	; (8000d54 <DataProcessing+0x27c>)
 8000c98:	601a      	str	r2, [r3, #0]
			  }

			  if(AverageBrakePercentage > 0 && AverageThrottlePercentage > 0)
 8000c9a:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <DataProcessing+0x260>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	dd08      	ble.n	8000cb4 <DataProcessing+0x1dc>
 8000ca2:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <DataProcessing+0x264>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	dd04      	ble.n	8000cb4 <DataProcessing+0x1dc>
			  {
				  DesiredSpeed = DesiredSpeed;
 8000caa:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <DataProcessing+0x268>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a24      	ldr	r2, [pc, #144]	; (8000d40 <DataProcessing+0x268>)
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	e06e      	b.n	8000d92 <DataProcessing+0x2ba>
			  }
			  else if(AverageBrakePercentage <= 0 && AverageThrottlePercentage > 0)
 8000cb4:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <DataProcessing+0x260>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	dc1d      	bgt.n	8000cf8 <DataProcessing+0x220>
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <DataProcessing+0x264>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	dd19      	ble.n	8000cf8 <DataProcessing+0x220>
			  {
				  MapDesiredSpeed = MAP(AverageThrottlePercentage, 0, 100, 0, 3200);
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <DataProcessing+0x264>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	b298      	uxth	r0, r3
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000cd2:	9200      	str	r2, [sp, #0]
 8000cd4:	469c      	mov	ip, r3
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	2264      	movs	r2, #100	; 0x64
 8000cda:	2100      	movs	r1, #0
 8000cdc:	f7ff fed4 	bl	8000a88 <MAP.2>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <DataProcessing+0x274>)
 8000ce6:	601a      	str	r2, [r3, #0]
				  DesiredSpeed = DesiredSpeed + MapDesiredSpeed;
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <DataProcessing+0x268>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <DataProcessing+0x274>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <DataProcessing+0x268>)
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	e04c      	b.n	8000d92 <DataProcessing+0x2ba>
			  }
			  //BRAKING
			  else if(AverageBrakePercentage > 0 && AverageThrottlePercentage <= 0)
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <DataProcessing+0x260>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	dd48      	ble.n	8000d92 <DataProcessing+0x2ba>
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <DataProcessing+0x264>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	dc44      	bgt.n	8000d92 <DataProcessing+0x2ba>
			  {
				  if (DesiredSpeed <= 0)
 8000d08:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <DataProcessing+0x268>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	dc23      	bgt.n	8000d58 <DataProcessing+0x280>
				  {
					  DesiredSpeed = 0;
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <DataProcessing+0x268>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	e03c      	b.n	8000d92 <DataProcessing+0x2ba>
 8000d18:	20000188 	.word	0x20000188
 8000d1c:	2000018c 	.word	0x2000018c
 8000d20:	20000168 	.word	0x20000168
 8000d24:	2000016c 	.word	0x2000016c
 8000d28:	20000158 	.word	0x20000158
 8000d2c:	20000170 	.word	0x20000170
 8000d30:	20000154 	.word	0x20000154
 8000d34:	20000150 	.word	0x20000150
 8000d38:	20000180 	.word	0x20000180
 8000d3c:	20000184 	.word	0x20000184
 8000d40:	20000178 	.word	0x20000178
 8000d44:	0001387f 	.word	0x0001387f
 8000d48:	00013880 	.word	0x00013880
 8000d4c:	2000017c 	.word	0x2000017c
 8000d50:	00030d3f 	.word	0x00030d3f
 8000d54:	00030d40 	.word	0x00030d40
				  }
				  else if (AverageBrakePercentage > 0)
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <DataProcessing+0x2d0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	dd18      	ble.n	8000d92 <DataProcessing+0x2ba>
				  {
					  MapDesiredSpeed = MAP(AverageBrakePercentage, 0, 100, 0, 3200);
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <DataProcessing+0x2d0>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	b298      	uxth	r0, r3
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000d6e:	9200      	str	r2, [sp, #0]
 8000d70:	469c      	mov	ip, r3
 8000d72:	2300      	movs	r3, #0
 8000d74:	2264      	movs	r2, #100	; 0x64
 8000d76:	2100      	movs	r1, #0
 8000d78:	f7ff fe86 	bl	8000a88 <MAP.2>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <DataProcessing+0x2d4>)
 8000d82:	601a      	str	r2, [r3, #0]
					  DesiredSpeed = DesiredSpeed - MapDesiredSpeed;
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <DataProcessing+0x2d8>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <DataProcessing+0x2d4>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <DataProcessing+0x2d8>)
 8000d90:	6013      	str	r3, [r2, #0]
				  Lcd_string(&lcd, "speed");
				  Lcd_cursor(&lcd, 1,0);
		  		  Lcd_int(&lcd, DesiredSpeed);
		  		  Lcd_string(&lcd, "          ");
*/
		  osMessageQueuePut(SpeedQueueHandle,&DesiredSpeed,0,250);
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <DataProcessing+0x2dc>)
 8000d94:	6818      	ldr	r0, [r3, #0]
 8000d96:	23fa      	movs	r3, #250	; 0xfa
 8000d98:	2200      	movs	r2, #0
 8000d9a:	4905      	ldr	r1, [pc, #20]	; (8000db0 <DataProcessing+0x2d8>)
 8000d9c:	f003 f8ba 	bl	8003f14 <osMessageQueuePut>

		  osDelay(1);
 8000da0:	2001      	movs	r0, #1
 8000da2:	f003 f803 	bl	8003dac <osDelay>
		AverageBrakePercentageTotal = 0;
 8000da6:	e69e      	b.n	8000ae6 <DataProcessing+0xe>
 8000da8:	20000180 	.word	0x20000180
 8000dac:	2000017c 	.word	0x2000017c
 8000db0:	20000178 	.word	0x20000178
 8000db4:	2000015c 	.word	0x2000015c

08000db8 <MAP.3>:
		  Lcd_PinType pins[] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_10, GPIO_PIN_11};
		  Lcd_HandleTypeDef lcd;
		  lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_3, LCD_4_BIT_MODE);

		  uint16_t MAP(uint16_t au32_IN, uint16_t au32_INmin, uint16_t au32_INmax, uint16_t au32_OUTmin, uint16_t au32_OUTmax)
		  	{
 8000db8:	b490      	push	{r4, r7}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4623      	mov	r3, r4
 8000dc8:	81fb      	strh	r3, [r7, #14]
 8000dca:	4603      	mov	r3, r0
 8000dcc:	81bb      	strh	r3, [r7, #12]
 8000dce:	460b      	mov	r3, r1
 8000dd0:	817b      	strh	r3, [r7, #10]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	813b      	strh	r3, [r7, #8]
 8000dd6:	f8c7 c004 	str.w	ip, [r7, #4]
		  		return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 8000dda:	89fa      	ldrh	r2, [r7, #14]
 8000ddc:	89bb      	ldrh	r3, [r7, #12]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	8b39      	ldrh	r1, [r7, #24]
 8000de2:	893a      	ldrh	r2, [r7, #8]
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	fb03 f202 	mul.w	r2, r3, r2
 8000dea:	8979      	ldrh	r1, [r7, #10]
 8000dec:	89bb      	ldrh	r3, [r7, #12]
 8000dee:	1acb      	subs	r3, r1, r3
 8000df0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	893b      	ldrh	r3, [r7, #8]
 8000df8:	4413      	add	r3, r2
 8000dfa:	b29b      	uxth	r3, r3
		  	}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc90      	pop	{r4, r7}
 8000e04:	4770      	bx	lr
	...

08000e08 <OutputDisplay>:
{
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b09a      	sub	sp, #104	; 0x68
 8000e0c:	af04      	add	r7, sp, #16
 8000e0e:	61f8      	str	r0, [r7, #28]
void OutputDisplay(void *argument)
 8000e10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e14:	623b      	str	r3, [r7, #32]
		  Lcd_PortType ports[] = { GPIOB, GPIOB, GPIOB, GPIOB };
 8000e16:	4b46      	ldr	r3, [pc, #280]	; (8000f30 <OutputDisplay+0x128>)
 8000e18:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000e1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  Lcd_PinType pins[] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_10, GPIO_PIN_11};
 8000e22:	4a44      	ldr	r2, [pc, #272]	; (8000f34 <OutputDisplay+0x12c>)
 8000e24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e2c:	e883 0003 	stmia.w	r3, {r0, r1}
		  lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_3, LCD_4_BIT_MODE);
 8000e30:	4638      	mov	r0, r7
 8000e32:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000e36:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	9303      	str	r3, [sp, #12]
 8000e3e:	2308      	movs	r3, #8
 8000e40:	9302      	str	r3, [sp, #8]
 8000e42:	4b3d      	ldr	r3, [pc, #244]	; (8000f38 <OutputDisplay+0x130>)
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	2302      	movs	r3, #2
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	4b3b      	ldr	r3, [pc, #236]	; (8000f38 <OutputDisplay+0x130>)
 8000e4c:	f7ff f988 	bl	8000160 <Lcd_create>
 8000e50:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000e54:	463d      	mov	r5, r7
 8000e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e5e:	e884 0003 	stmia.w	r4, {r0, r1}

	  for(;;)
	  {
		  AverageSpeedTotal = 0;
 8000e62:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <OutputDisplay+0x134>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
		  for (int i = 0; i < 16; i++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	657b      	str	r3, [r7, #84]	; 0x54
 8000e6c:	e010      	b.n	8000e90 <OutputDisplay+0x88>
		  {
			  osMessageQueueGet(SpeedQueueHandle,&DesiredSpeedReceived,NULL,250);
 8000e6e:	4b34      	ldr	r3, [pc, #208]	; (8000f40 <OutputDisplay+0x138>)
 8000e70:	6818      	ldr	r0, [r3, #0]
 8000e72:	23fa      	movs	r3, #250	; 0xfa
 8000e74:	2200      	movs	r2, #0
 8000e76:	4933      	ldr	r1, [pc, #204]	; (8000f44 <OutputDisplay+0x13c>)
 8000e78:	f003 f8c0 	bl	8003ffc <osMessageQueueGet>
			  AverageSpeedTotal = AverageSpeedTotal + DesiredSpeedReceived;
 8000e7c:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <OutputDisplay+0x134>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b30      	ldr	r3, [pc, #192]	; (8000f44 <OutputDisplay+0x13c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4413      	add	r3, r2
 8000e86:	4a2d      	ldr	r2, [pc, #180]	; (8000f3c <OutputDisplay+0x134>)
 8000e88:	6013      	str	r3, [r2, #0]
		  for (int i = 0; i < 16; i++)
 8000e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	657b      	str	r3, [r7, #84]	; 0x54
 8000e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e92:	2b0f      	cmp	r3, #15
 8000e94:	ddeb      	ble.n	8000e6e <OutputDisplay+0x66>

		  }
		  AverageSpeed = AverageSpeedTotal / 16;
 8000e96:	4b29      	ldr	r3, [pc, #164]	; (8000f3c <OutputDisplay+0x134>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	da00      	bge.n	8000ea0 <OutputDisplay+0x98>
 8000e9e:	330f      	adds	r3, #15
 8000ea0:	111b      	asrs	r3, r3, #4
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b28      	ldr	r3, [pc, #160]	; (8000f48 <OutputDisplay+0x140>)
 8000ea6:	601a      	str	r2, [r3, #0]
		  finalSpeed = AverageSpeed / 1000;
 8000ea8:	4b27      	ldr	r3, [pc, #156]	; (8000f48 <OutputDisplay+0x140>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a27      	ldr	r2, [pc, #156]	; (8000f4c <OutputDisplay+0x144>)
 8000eae:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb2:	1192      	asrs	r2, r2, #6
 8000eb4:	17db      	asrs	r3, r3, #31
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	4a25      	ldr	r2, [pc, #148]	; (8000f50 <OutputDisplay+0x148>)
 8000eba:	6013      	str	r3, [r2, #0]

		  Lcd_cursor(&lcd, 0,0);
 8000ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff f9d7 	bl	8000278 <Lcd_cursor>
		  Lcd_string(&lcd, "final speed ");
 8000eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ece:	4921      	ldr	r1, [pc, #132]	; (8000f54 <OutputDisplay+0x14c>)
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff f9b1 	bl	8000238 <Lcd_string>
		  Lcd_cursor(&lcd, 1,0);
 8000ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eda:	2200      	movs	r2, #0
 8000edc:	2101      	movs	r1, #1
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff f9ca 	bl	8000278 <Lcd_cursor>
		  Lcd_int(&lcd,finalSpeed);
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <OutputDisplay+0x148>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff f98a 	bl	8000208 <Lcd_int>
		  Lcd_string(&lcd, "          ");
 8000ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef8:	4917      	ldr	r1, [pc, #92]	; (8000f58 <OutputDisplay+0x150>)
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff f99c 	bl	8000238 <Lcd_string>

		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, MAP(finalSpeed,0,220,0,65535));
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <OutputDisplay+0x148>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	b298      	uxth	r0, r3
 8000f06:	f107 0320 	add.w	r3, r7, #32
 8000f0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f0e:	9200      	str	r2, [sp, #0]
 8000f10:	469c      	mov	ip, r3
 8000f12:	2300      	movs	r3, #0
 8000f14:	22dc      	movs	r2, #220	; 0xdc
 8000f16:	2100      	movs	r1, #0
 8000f18:	f7ff ff4e 	bl	8000db8 <MAP.3>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <OutputDisplay+0x154>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	635a      	str	r2, [r3, #52]	; 0x34

		  osDelay(1);
 8000f26:	2001      	movs	r0, #1
 8000f28:	f002 ff40 	bl	8003dac <osDelay>
		  AverageSpeedTotal = 0;
 8000f2c:	e799      	b.n	8000e62 <OutputDisplay+0x5a>
 8000f2e:	bf00      	nop
 8000f30:	0800737c 	.word	0x0800737c
 8000f34:	0800738c 	.word	0x0800738c
 8000f38:	40010800 	.word	0x40010800
 8000f3c:	20000194 	.word	0x20000194
 8000f40:	2000015c 	.word	0x2000015c
 8000f44:	20000174 	.word	0x20000174
 8000f48:	20000190 	.word	0x20000190
 8000f4c:	10624dd3 	.word	0x10624dd3
 8000f50:	20000198 	.word	0x20000198
 8000f54:	08007360 	.word	0x08007360
 8000f58:	08007370 	.word	0x08007370
 8000f5c:	200000f4 	.word	0x200000f4

08000f60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d101      	bne.n	8000f76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f72:	f000 fa01 	bl	8001378 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40012c00 	.word	0x40012c00

08000f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f88:	b672      	cpsid	i
}
 8000f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <Error_Handler+0x8>
	...

08000f90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_MspInit+0x68>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4a17      	ldr	r2, [pc, #92]	; (8000ff8 <HAL_MspInit+0x68>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6193      	str	r3, [r2, #24]
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_MspInit+0x68>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_MspInit+0x68>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a11      	ldr	r2, [pc, #68]	; (8000ff8 <HAL_MspInit+0x68>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	61d3      	str	r3, [r2, #28]
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_MspInit+0x68>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	210f      	movs	r1, #15
 8000fca:	f06f 0001 	mvn.w	r0, #1
 8000fce:	f000 fef4 	bl	8001dba <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_MspInit+0x6c>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <HAL_MspInit+0x6c>)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010000 	.word	0x40010000

08001000 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0318 	add.w	r3, r7, #24
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a28      	ldr	r2, [pc, #160]	; (80010bc <HAL_ADC_MspInit+0xbc>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d122      	bne.n	8001066 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <HAL_ADC_MspInit+0xc0>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a26      	ldr	r2, [pc, #152]	; (80010c0 <HAL_ADC_MspInit+0xc0>)
 8001026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <HAL_ADC_MspInit+0xc0>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_ADC_MspInit+0xc0>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a20      	ldr	r2, [pc, #128]	; (80010c0 <HAL_ADC_MspInit+0xc0>)
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <HAL_ADC_MspInit+0xc0>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001050:	2310      	movs	r3, #16
 8001052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001054:	2303      	movs	r3, #3
 8001056:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 0318 	add.w	r3, r7, #24
 800105c:	4619      	mov	r1, r3
 800105e:	4819      	ldr	r0, [pc, #100]	; (80010c4 <HAL_ADC_MspInit+0xc4>)
 8001060:	f000 fed6 	bl	8001e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001064:	e026      	b.n	80010b4 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a17      	ldr	r2, [pc, #92]	; (80010c8 <HAL_ADC_MspInit+0xc8>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d121      	bne.n	80010b4 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_ADC_MspInit+0xc0>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <HAL_ADC_MspInit+0xc0>)
 8001076:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_ADC_MspInit+0xc0>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_ADC_MspInit+0xc0>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <HAL_ADC_MspInit+0xc0>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_ADC_MspInit+0xc0>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010a0:	2320      	movs	r3, #32
 80010a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a4:	2303      	movs	r3, #3
 80010a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	4619      	mov	r1, r3
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <HAL_ADC_MspInit+0xc4>)
 80010b0:	f000 feae 	bl	8001e10 <HAL_GPIO_Init>
}
 80010b4:	bf00      	nop
 80010b6:	3728      	adds	r7, #40	; 0x28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40012400 	.word	0x40012400
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40010800 	.word	0x40010800
 80010c8:	40012800 	.word	0x40012800

080010cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010dc:	d10b      	bne.n	80010f6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_TIM_Base_MspInit+0x34>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_TIM_Base_MspInit+0x34>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	61d3      	str	r3, [r2, #28]
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_TIM_Base_MspInit+0x34>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001122:	d117      	bne.n	8001154 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <HAL_TIM_MspPostInit+0x58>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a0c      	ldr	r2, [pc, #48]	; (800115c <HAL_TIM_MspPostInit+0x58>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_TIM_MspPostInit+0x58>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800113c:	2301      	movs	r3, #1
 800113e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2302      	movs	r3, #2
 8001146:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	4619      	mov	r1, r3
 800114e:	4804      	ldr	r0, [pc, #16]	; (8001160 <HAL_TIM_MspPostInit+0x5c>)
 8001150:	f000 fe5e 	bl	8001e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001154:	bf00      	nop
 8001156:	3720      	adds	r7, #32
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40021000 	.word	0x40021000
 8001160:	40010800 	.word	0x40010800

08001164 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08c      	sub	sp, #48	; 0x30
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800116c:	2300      	movs	r3, #0
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800117a:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <HAL_InitTick+0xd0>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	4a2d      	ldr	r2, [pc, #180]	; (8001234 <HAL_InitTick+0xd0>)
 8001180:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001184:	6193      	str	r3, [r2, #24]
 8001186:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <HAL_InitTick+0xd0>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001192:	f107 020c 	add.w	r2, r7, #12
 8001196:	f107 0310 	add.w	r3, r7, #16
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f001 fbd3 	bl	8002948 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011a2:	f001 fbbd 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 80011a6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011aa:	4a23      	ldr	r2, [pc, #140]	; (8001238 <HAL_InitTick+0xd4>)
 80011ac:	fba2 2303 	umull	r2, r3, r2, r3
 80011b0:	0c9b      	lsrs	r3, r3, #18
 80011b2:	3b01      	subs	r3, #1
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <HAL_InitTick+0xd8>)
 80011b8:	4a21      	ldr	r2, [pc, #132]	; (8001240 <HAL_InitTick+0xdc>)
 80011ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <HAL_InitTick+0xd8>)
 80011be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011c2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011c4:	4a1d      	ldr	r2, [pc, #116]	; (800123c <HAL_InitTick+0xd8>)
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <HAL_InitTick+0xd8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <HAL_InitTick+0xd8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_InitTick+0xd8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80011dc:	4817      	ldr	r0, [pc, #92]	; (800123c <HAL_InitTick+0xd8>)
 80011de:	f001 fd77 	bl	8002cd0 <HAL_TIM_Base_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80011e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d11b      	bne.n	8001228 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80011f0:	4812      	ldr	r0, [pc, #72]	; (800123c <HAL_InitTick+0xd8>)
 80011f2:	f001 fdbd 	bl	8002d70 <HAL_TIM_Base_Start_IT>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80011fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001200:	2b00      	cmp	r3, #0
 8001202:	d111      	bne.n	8001228 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001204:	2019      	movs	r0, #25
 8001206:	f000 fdf4 	bl	8001df2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	d808      	bhi.n	8001222 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001210:	2200      	movs	r2, #0
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	2019      	movs	r0, #25
 8001216:	f000 fdd0 	bl	8001dba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <HAL_InitTick+0xe0>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	e002      	b.n	8001228 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001228:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800122c:	4618      	mov	r0, r3
 800122e:	3730      	adds	r7, #48	; 0x30
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40021000 	.word	0x40021000
 8001238:	431bde83 	.word	0x431bde83
 800123c:	2000019c 	.word	0x2000019c
 8001240:	40012c00 	.word	0x40012c00
 8001244:	20000008 	.word	0x20000008

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800124c:	e7fe      	b.n	800124c <NMI_Handler+0x4>

0800124e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <MemManage_Handler+0x4>

0800125a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <UsageFault_Handler+0x4>

08001266 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
	...

08001274 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <TIM1_UP_IRQHandler+0x10>)
 800127a:	f001 fec5 	bl	8003008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2000019c 	.word	0x2000019c

08001288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001290:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <_sbrk+0x5c>)
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <_sbrk+0x60>)
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d102      	bne.n	80012aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <_sbrk+0x64>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <_sbrk+0x68>)
 80012a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d207      	bcs.n	80012c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b8:	f005 fb68 	bl	800698c <__errno>
 80012bc:	4603      	mov	r3, r0
 80012be:	220c      	movs	r2, #12
 80012c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	e009      	b.n	80012dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <_sbrk+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <_sbrk+0x64>)
 80012d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20005000 	.word	0x20005000
 80012e8:	00000400 	.word	0x00000400
 80012ec:	200001e4 	.word	0x200001e4
 80012f0:	20001f48 	.word	0x20001f48

080012f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001302:	490d      	ldr	r1, [pc, #52]	; (8001338 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001308:	e002      	b.n	8001310 <LoopCopyDataInit>

0800130a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800130c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130e:	3304      	adds	r3, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001314:	d3f9      	bcc.n	800130a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001318:	4c0a      	ldr	r4, [pc, #40]	; (8001344 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800131c:	e001      	b.n	8001322 <LoopFillZerobss>

0800131e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001320:	3204      	adds	r2, #4

08001322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001324:	d3fb      	bcc.n	800131e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001326:	f7ff ffe5 	bl	80012f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800132a:	f005 fb35 	bl	8006998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800132e:	f7ff f859 	bl	80003e4 <main>
  bx lr
 8001332:	4770      	bx	lr
  ldr r0, =_sdata
 8001334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001338:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800133c:	08007538 	.word	0x08007538
  ldr r2, =_sbss
 8001340:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001344:	20001f44 	.word	0x20001f44

08001348 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC1_2_IRQHandler>
	...

0800134c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_Init+0x28>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_Init+0x28>)
 8001356:	f043 0310 	orr.w	r3, r3, #16
 800135a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135c:	2003      	movs	r0, #3
 800135e:	f000 fd21 	bl	8001da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001362:	200f      	movs	r0, #15
 8001364:	f7ff fefe 	bl	8001164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001368:	f7ff fe12 	bl	8000f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40022000 	.word	0x40022000

08001378 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_IncTick+0x1c>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_IncTick+0x20>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a03      	ldr	r2, [pc, #12]	; (8001398 <HAL_IncTick+0x20>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	2000000c 	.word	0x2000000c
 8001398:	200001e8 	.word	0x200001e8

0800139c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;
 80013a0:	4b02      	ldr	r3, [pc, #8]	; (80013ac <HAL_GetTick+0x10>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	200001e8 	.word	0x200001e8

080013b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b8:	f7ff fff0 	bl	800139c <HAL_GetTick>
 80013bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c8:	d005      	beq.n	80013d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_Delay+0x44>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013d6:	bf00      	nop
 80013d8:	f7ff ffe0 	bl	800139c <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d8f7      	bhi.n	80013d8 <HAL_Delay+0x28>
  {
  }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000000c 	.word	0x2000000c

080013f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e0be      	b.n	8001598 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	2b00      	cmp	r3, #0
 8001426:	d109      	bne.n	800143c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff fde2 	bl	8001000 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 fbc5 	bl	8001bcc <ADC_ConversionStop_Disable>
 8001442:	4603      	mov	r3, r0
 8001444:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	2b00      	cmp	r3, #0
 8001450:	f040 8099 	bne.w	8001586 <HAL_ADC_Init+0x18e>
 8001454:	7dfb      	ldrb	r3, [r7, #23]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f040 8095 	bne.w	8001586 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001460:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001464:	f023 0302 	bic.w	r3, r3, #2
 8001468:	f043 0202 	orr.w	r2, r3, #2
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001478:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7b1b      	ldrb	r3, [r3, #12]
 800147e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001480:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	4313      	orrs	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001490:	d003      	beq.n	800149a <HAL_ADC_Init+0xa2>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d102      	bne.n	80014a0 <HAL_ADC_Init+0xa8>
 800149a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800149e:	e000      	b.n	80014a2 <HAL_ADC_Init+0xaa>
 80014a0:	2300      	movs	r3, #0
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7d1b      	ldrb	r3, [r3, #20]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d119      	bne.n	80014e4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7b1b      	ldrb	r3, [r3, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d109      	bne.n	80014cc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	3b01      	subs	r3, #1
 80014be:	035a      	lsls	r2, r3, #13
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	e00b      	b.n	80014e4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d0:	f043 0220 	orr.w	r2, r3, #32
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014dc:	f043 0201 	orr.w	r2, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <HAL_ADC_Init+0x1a8>)
 8001500:	4013      	ands	r3, r2
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	68b9      	ldr	r1, [r7, #8]
 8001508:	430b      	orrs	r3, r1
 800150a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001514:	d003      	beq.n	800151e <HAL_ADC_Init+0x126>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d104      	bne.n	8001528 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	3b01      	subs	r3, #1
 8001524:	051b      	lsls	r3, r3, #20
 8001526:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	430a      	orrs	r2, r1
 800153a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_ADC_Init+0x1ac>)
 8001544:	4013      	ands	r3, r2
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	429a      	cmp	r2, r3
 800154a:	d10b      	bne.n	8001564 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001556:	f023 0303 	bic.w	r3, r3, #3
 800155a:	f043 0201 	orr.w	r2, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001562:	e018      	b.n	8001596 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	f023 0312 	bic.w	r3, r3, #18
 800156c:	f043 0210 	orr.w	r2, r3, #16
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	f043 0201 	orr.w	r2, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001584:	e007      	b.n	8001596 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	f043 0210 	orr.w	r2, r3, #16
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001596:	7dfb      	ldrb	r3, [r7, #23]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	ffe1f7fd 	.word	0xffe1f7fd
 80015a4:	ff1f0efe 	.word	0xff1f0efe

080015a8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <HAL_ADC_Start+0x1a>
 80015be:	2302      	movs	r3, #2
 80015c0:	e098      	b.n	80016f4 <HAL_ADC_Start+0x14c>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 faa4 	bl	8001b18 <ADC_Enable>
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f040 8087 	bne.w	80016ea <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015e4:	f023 0301 	bic.w	r3, r3, #1
 80015e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a41      	ldr	r2, [pc, #260]	; (80016fc <HAL_ADC_Start+0x154>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d105      	bne.n	8001606 <HAL_ADC_Start+0x5e>
 80015fa:	4b41      	ldr	r3, [pc, #260]	; (8001700 <HAL_ADC_Start+0x158>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d115      	bne.n	8001632 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161c:	2b00      	cmp	r3, #0
 800161e:	d026      	beq.n	800166e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001624:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001628:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001630:	e01d      	b.n	800166e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001636:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a2f      	ldr	r2, [pc, #188]	; (8001700 <HAL_ADC_Start+0x158>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d004      	beq.n	8001652 <HAL_ADC_Start+0xaa>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a2b      	ldr	r2, [pc, #172]	; (80016fc <HAL_ADC_Start+0x154>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d10d      	bne.n	800166e <HAL_ADC_Start+0xc6>
 8001652:	4b2b      	ldr	r3, [pc, #172]	; (8001700 <HAL_ADC_Start+0x158>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165a:	2b00      	cmp	r3, #0
 800165c:	d007      	beq.n	800166e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001662:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001666:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d006      	beq.n	8001688 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167e:	f023 0206 	bic.w	r2, r3, #6
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	62da      	str	r2, [r3, #44]	; 0x2c
 8001686:	e002      	b.n	800168e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f06f 0202 	mvn.w	r2, #2
 800169e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016ae:	d113      	bne.n	80016d8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016b4:	4a11      	ldr	r2, [pc, #68]	; (80016fc <HAL_ADC_Start+0x154>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d105      	bne.n	80016c6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_ADC_Start+0x158>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d108      	bne.n	80016d8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	e00c      	b.n	80016f2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	e003      	b.n	80016f2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40012800 	.word	0x40012800
 8001700:	40012400 	.word	0x40012400

08001704 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b087      	sub	sp, #28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800171a:	f7ff fe3f 	bl	800139c <HAL_GetTick>
 800171e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00b      	beq.n	8001746 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001732:	f043 0220 	orr.w	r2, r3, #32
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e0d3      	b.n	80018ee <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001750:	2b00      	cmp	r3, #0
 8001752:	d131      	bne.n	80017b8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800175e:	2b00      	cmp	r3, #0
 8001760:	d12a      	bne.n	80017b8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001762:	e021      	b.n	80017a8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176a:	d01d      	beq.n	80017a8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d007      	beq.n	8001782 <HAL_ADC_PollForConversion+0x7e>
 8001772:	f7ff fe13 	bl	800139c <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d212      	bcs.n	80017a8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10b      	bne.n	80017a8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001794:	f043 0204 	orr.w	r2, r3, #4
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e0a2      	b.n	80018ee <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0d6      	beq.n	8001764 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80017b6:	e070      	b.n	800189a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80017b8:	4b4f      	ldr	r3, [pc, #316]	; (80018f8 <HAL_ADC_PollForConversion+0x1f4>)
 80017ba:	681c      	ldr	r4, [r3, #0]
 80017bc:	2002      	movs	r0, #2
 80017be:	f001 f9c7 	bl	8002b50 <HAL_RCCEx_GetPeriphCLKFreq>
 80017c2:	4603      	mov	r3, r0
 80017c4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6919      	ldr	r1, [r3, #16]
 80017ce:	4b4b      	ldr	r3, [pc, #300]	; (80018fc <HAL_ADC_PollForConversion+0x1f8>)
 80017d0:	400b      	ands	r3, r1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d118      	bne.n	8001808 <HAL_ADC_PollForConversion+0x104>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68d9      	ldr	r1, [r3, #12]
 80017dc:	4b48      	ldr	r3, [pc, #288]	; (8001900 <HAL_ADC_PollForConversion+0x1fc>)
 80017de:	400b      	ands	r3, r1
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d111      	bne.n	8001808 <HAL_ADC_PollForConversion+0x104>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6919      	ldr	r1, [r3, #16]
 80017ea:	4b46      	ldr	r3, [pc, #280]	; (8001904 <HAL_ADC_PollForConversion+0x200>)
 80017ec:	400b      	ands	r3, r1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d108      	bne.n	8001804 <HAL_ADC_PollForConversion+0x100>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68d9      	ldr	r1, [r3, #12]
 80017f8:	4b43      	ldr	r3, [pc, #268]	; (8001908 <HAL_ADC_PollForConversion+0x204>)
 80017fa:	400b      	ands	r3, r1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <HAL_ADC_PollForConversion+0x100>
 8001800:	2314      	movs	r3, #20
 8001802:	e020      	b.n	8001846 <HAL_ADC_PollForConversion+0x142>
 8001804:	2329      	movs	r3, #41	; 0x29
 8001806:	e01e      	b.n	8001846 <HAL_ADC_PollForConversion+0x142>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6919      	ldr	r1, [r3, #16]
 800180e:	4b3d      	ldr	r3, [pc, #244]	; (8001904 <HAL_ADC_PollForConversion+0x200>)
 8001810:	400b      	ands	r3, r1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d106      	bne.n	8001824 <HAL_ADC_PollForConversion+0x120>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68d9      	ldr	r1, [r3, #12]
 800181c:	4b3a      	ldr	r3, [pc, #232]	; (8001908 <HAL_ADC_PollForConversion+0x204>)
 800181e:	400b      	ands	r3, r1
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00d      	beq.n	8001840 <HAL_ADC_PollForConversion+0x13c>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6919      	ldr	r1, [r3, #16]
 800182a:	4b38      	ldr	r3, [pc, #224]	; (800190c <HAL_ADC_PollForConversion+0x208>)
 800182c:	400b      	ands	r3, r1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d108      	bne.n	8001844 <HAL_ADC_PollForConversion+0x140>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68d9      	ldr	r1, [r3, #12]
 8001838:	4b34      	ldr	r3, [pc, #208]	; (800190c <HAL_ADC_PollForConversion+0x208>)
 800183a:	400b      	ands	r3, r1
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_ADC_PollForConversion+0x140>
 8001840:	2354      	movs	r3, #84	; 0x54
 8001842:	e000      	b.n	8001846 <HAL_ADC_PollForConversion+0x142>
 8001844:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800184c:	e021      	b.n	8001892 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001854:	d01a      	beq.n	800188c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d007      	beq.n	800186c <HAL_ADC_PollForConversion+0x168>
 800185c:	f7ff fd9e 	bl	800139c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d20f      	bcs.n	800188c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	429a      	cmp	r2, r3
 8001872:	d90b      	bls.n	800188c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	f043 0204 	orr.w	r2, r3, #4
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e030      	b.n	80018ee <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	3301      	adds	r3, #1
 8001890:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	429a      	cmp	r2, r3
 8001898:	d8d9      	bhi.n	800184e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f06f 0212 	mvn.w	r2, #18
 80018a2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80018ba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018be:	d115      	bne.n	80018ec <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d111      	bne.n	80018ec <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d105      	bne.n	80018ec <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	f043 0201 	orr.w	r2, r3, #1
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	371c      	adds	r7, #28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd90      	pop	{r4, r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000004 	.word	0x20000004
 80018fc:	24924924 	.word	0x24924924
 8001900:	00924924 	.word	0x00924924
 8001904:	12492492 	.word	0x12492492
 8001908:	00492492 	.word	0x00492492
 800190c:	00249249 	.word	0x00249249

08001910 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x20>
 8001944:	2302      	movs	r3, #2
 8001946:	e0dc      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x1da>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b06      	cmp	r3, #6
 8001956:	d81c      	bhi.n	8001992 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	3b05      	subs	r3, #5
 800196a:	221f      	movs	r2, #31
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	4019      	ands	r1, r3
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	3b05      	subs	r3, #5
 8001984:	fa00 f203 	lsl.w	r2, r0, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	635a      	str	r2, [r3, #52]	; 0x34
 8001990:	e03c      	b.n	8001a0c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b0c      	cmp	r3, #12
 8001998:	d81c      	bhi.n	80019d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	3b23      	subs	r3, #35	; 0x23
 80019ac:	221f      	movs	r2, #31
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	4019      	ands	r1, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	3b23      	subs	r3, #35	; 0x23
 80019c6:	fa00 f203 	lsl.w	r2, r0, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	631a      	str	r2, [r3, #48]	; 0x30
 80019d2:	e01b      	b.n	8001a0c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	3b41      	subs	r3, #65	; 0x41
 80019e6:	221f      	movs	r2, #31
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	4019      	ands	r1, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	3b41      	subs	r3, #65	; 0x41
 8001a00:	fa00 f203 	lsl.w	r2, r0, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b09      	cmp	r3, #9
 8001a12:	d91c      	bls.n	8001a4e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68d9      	ldr	r1, [r3, #12]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	3b1e      	subs	r3, #30
 8001a26:	2207      	movs	r2, #7
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	4019      	ands	r1, r3
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	6898      	ldr	r0, [r3, #8]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3b1e      	subs	r3, #30
 8001a40:	fa00 f203 	lsl.w	r2, r0, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	e019      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6919      	ldr	r1, [r3, #16]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	2207      	movs	r2, #7
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	4019      	ands	r1, r3
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	6898      	ldr	r0, [r3, #8]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	fa00 f203 	lsl.w	r2, r0, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d003      	beq.n	8001a92 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a8e:	2b11      	cmp	r3, #17
 8001a90:	d132      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a1d      	ldr	r2, [pc, #116]	; (8001b0c <HAL_ADC_ConfigChannel+0x1e4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d125      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d126      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ab8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b10      	cmp	r3, #16
 8001ac0:	d11a      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a13      	ldr	r2, [pc, #76]	; (8001b14 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8001acc:	0c9a      	lsrs	r2, r3, #18
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ad8:	e002      	b.n	8001ae0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	3b01      	subs	r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f9      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x1b2>
 8001ae6:	e007      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	f043 0220 	orr.w	r2, r3, #32
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	40012400 	.word	0x40012400
 8001b10:	20000004 	.word	0x20000004
 8001b14:	431bde83 	.word	0x431bde83

08001b18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d040      	beq.n	8001bb8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f042 0201 	orr.w	r2, r2, #1
 8001b44:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b46:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <ADC_Enable+0xac>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a1f      	ldr	r2, [pc, #124]	; (8001bc8 <ADC_Enable+0xb0>)
 8001b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b50:	0c9b      	lsrs	r3, r3, #18
 8001b52:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b54:	e002      	b.n	8001b5c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f9      	bne.n	8001b56 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b62:	f7ff fc1b 	bl	800139c <HAL_GetTick>
 8001b66:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b68:	e01f      	b.n	8001baa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b6a:	f7ff fc17 	bl	800139c <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d918      	bls.n	8001baa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d011      	beq.n	8001baa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	f043 0210 	orr.w	r2, r3, #16
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	f043 0201 	orr.w	r2, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e007      	b.n	8001bba <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d1d8      	bne.n	8001b6a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000004 	.word	0x20000004
 8001bc8:	431bde83 	.word	0x431bde83

08001bcc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d12e      	bne.n	8001c44 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0201 	bic.w	r2, r2, #1
 8001bf4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bf6:	f7ff fbd1 	bl	800139c <HAL_GetTick>
 8001bfa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bfc:	e01b      	b.n	8001c36 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bfe:	f7ff fbcd 	bl	800139c <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d914      	bls.n	8001c36 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d10d      	bne.n	8001c36 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1e:	f043 0210 	orr.w	r2, r3, #16
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2a:	f043 0201 	orr.w	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e007      	b.n	8001c46 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d0dc      	beq.n	8001bfe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4906      	ldr	r1, [pc, #24]	; (8001ce8 <__NVIC_EnableIRQ+0x34>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	e000e100 	.word	0xe000e100

08001cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	6039      	str	r1, [r7, #0]
 8001cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	db0a      	blt.n	8001d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	490c      	ldr	r1, [pc, #48]	; (8001d38 <__NVIC_SetPriority+0x4c>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	0112      	lsls	r2, r2, #4
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	440b      	add	r3, r1
 8001d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d14:	e00a      	b.n	8001d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4908      	ldr	r1, [pc, #32]	; (8001d3c <__NVIC_SetPriority+0x50>)
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	3b04      	subs	r3, #4
 8001d24:	0112      	lsls	r2, r2, #4
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	440b      	add	r3, r1
 8001d2a:	761a      	strb	r2, [r3, #24]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000e100 	.word	0xe000e100
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	; 0x24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f1c3 0307 	rsb	r3, r3, #7
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	bf28      	it	cs
 8001d5e:	2304      	movcs	r3, #4
 8001d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3304      	adds	r3, #4
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d902      	bls.n	8001d70 <NVIC_EncodePriority+0x30>
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3b03      	subs	r3, #3
 8001d6e:	e000      	b.n	8001d72 <NVIC_EncodePriority+0x32>
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	f04f 32ff 	mov.w	r2, #4294967295
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	401a      	ands	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d88:	f04f 31ff 	mov.w	r1, #4294967295
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	43d9      	mvns	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	4313      	orrs	r3, r2
         );
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3724      	adds	r7, #36	; 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff4f 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dcc:	f7ff ff64 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	6978      	ldr	r0, [r7, #20]
 8001dd8:	f7ff ffb2 	bl	8001d40 <NVIC_EncodePriority>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff81 	bl	8001cec <__NVIC_SetPriority>
}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff57 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b08b      	sub	sp, #44	; 0x2c
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e22:	e169      	b.n	80020f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e24:	2201      	movs	r2, #1
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	f040 8158 	bne.w	80020f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	4a9a      	ldr	r2, [pc, #616]	; (80020b0 <HAL_GPIO_Init+0x2a0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d05e      	beq.n	8001f0a <HAL_GPIO_Init+0xfa>
 8001e4c:	4a98      	ldr	r2, [pc, #608]	; (80020b0 <HAL_GPIO_Init+0x2a0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d875      	bhi.n	8001f3e <HAL_GPIO_Init+0x12e>
 8001e52:	4a98      	ldr	r2, [pc, #608]	; (80020b4 <HAL_GPIO_Init+0x2a4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d058      	beq.n	8001f0a <HAL_GPIO_Init+0xfa>
 8001e58:	4a96      	ldr	r2, [pc, #600]	; (80020b4 <HAL_GPIO_Init+0x2a4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d86f      	bhi.n	8001f3e <HAL_GPIO_Init+0x12e>
 8001e5e:	4a96      	ldr	r2, [pc, #600]	; (80020b8 <HAL_GPIO_Init+0x2a8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d052      	beq.n	8001f0a <HAL_GPIO_Init+0xfa>
 8001e64:	4a94      	ldr	r2, [pc, #592]	; (80020b8 <HAL_GPIO_Init+0x2a8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d869      	bhi.n	8001f3e <HAL_GPIO_Init+0x12e>
 8001e6a:	4a94      	ldr	r2, [pc, #592]	; (80020bc <HAL_GPIO_Init+0x2ac>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d04c      	beq.n	8001f0a <HAL_GPIO_Init+0xfa>
 8001e70:	4a92      	ldr	r2, [pc, #584]	; (80020bc <HAL_GPIO_Init+0x2ac>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d863      	bhi.n	8001f3e <HAL_GPIO_Init+0x12e>
 8001e76:	4a92      	ldr	r2, [pc, #584]	; (80020c0 <HAL_GPIO_Init+0x2b0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d046      	beq.n	8001f0a <HAL_GPIO_Init+0xfa>
 8001e7c:	4a90      	ldr	r2, [pc, #576]	; (80020c0 <HAL_GPIO_Init+0x2b0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d85d      	bhi.n	8001f3e <HAL_GPIO_Init+0x12e>
 8001e82:	2b12      	cmp	r3, #18
 8001e84:	d82a      	bhi.n	8001edc <HAL_GPIO_Init+0xcc>
 8001e86:	2b12      	cmp	r3, #18
 8001e88:	d859      	bhi.n	8001f3e <HAL_GPIO_Init+0x12e>
 8001e8a:	a201      	add	r2, pc, #4	; (adr r2, 8001e90 <HAL_GPIO_Init+0x80>)
 8001e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e90:	08001f0b 	.word	0x08001f0b
 8001e94:	08001ee5 	.word	0x08001ee5
 8001e98:	08001ef7 	.word	0x08001ef7
 8001e9c:	08001f39 	.word	0x08001f39
 8001ea0:	08001f3f 	.word	0x08001f3f
 8001ea4:	08001f3f 	.word	0x08001f3f
 8001ea8:	08001f3f 	.word	0x08001f3f
 8001eac:	08001f3f 	.word	0x08001f3f
 8001eb0:	08001f3f 	.word	0x08001f3f
 8001eb4:	08001f3f 	.word	0x08001f3f
 8001eb8:	08001f3f 	.word	0x08001f3f
 8001ebc:	08001f3f 	.word	0x08001f3f
 8001ec0:	08001f3f 	.word	0x08001f3f
 8001ec4:	08001f3f 	.word	0x08001f3f
 8001ec8:	08001f3f 	.word	0x08001f3f
 8001ecc:	08001f3f 	.word	0x08001f3f
 8001ed0:	08001f3f 	.word	0x08001f3f
 8001ed4:	08001eed 	.word	0x08001eed
 8001ed8:	08001f01 	.word	0x08001f01
 8001edc:	4a79      	ldr	r2, [pc, #484]	; (80020c4 <HAL_GPIO_Init+0x2b4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d013      	beq.n	8001f0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ee2:	e02c      	b.n	8001f3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	623b      	str	r3, [r7, #32]
          break;
 8001eea:	e029      	b.n	8001f40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	623b      	str	r3, [r7, #32]
          break;
 8001ef4:	e024      	b.n	8001f40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	3308      	adds	r3, #8
 8001efc:	623b      	str	r3, [r7, #32]
          break;
 8001efe:	e01f      	b.n	8001f40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	330c      	adds	r3, #12
 8001f06:	623b      	str	r3, [r7, #32]
          break;
 8001f08:	e01a      	b.n	8001f40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d102      	bne.n	8001f18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f12:	2304      	movs	r3, #4
 8001f14:	623b      	str	r3, [r7, #32]
          break;
 8001f16:	e013      	b.n	8001f40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d105      	bne.n	8001f2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f20:	2308      	movs	r3, #8
 8001f22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	611a      	str	r2, [r3, #16]
          break;
 8001f2a:	e009      	b.n	8001f40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f2c:	2308      	movs	r3, #8
 8001f2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69fa      	ldr	r2, [r7, #28]
 8001f34:	615a      	str	r2, [r3, #20]
          break;
 8001f36:	e003      	b.n	8001f40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	623b      	str	r3, [r7, #32]
          break;
 8001f3c:	e000      	b.n	8001f40 <HAL_GPIO_Init+0x130>
          break;
 8001f3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2bff      	cmp	r3, #255	; 0xff
 8001f44:	d801      	bhi.n	8001f4a <HAL_GPIO_Init+0x13a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	e001      	b.n	8001f4e <HAL_GPIO_Init+0x13e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2bff      	cmp	r3, #255	; 0xff
 8001f54:	d802      	bhi.n	8001f5c <HAL_GPIO_Init+0x14c>
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	e002      	b.n	8001f62 <HAL_GPIO_Init+0x152>
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	3b08      	subs	r3, #8
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	210f      	movs	r1, #15
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	401a      	ands	r2, r3
 8001f74:	6a39      	ldr	r1, [r7, #32]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 80b1 	beq.w	80020f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f90:	4b4d      	ldr	r3, [pc, #308]	; (80020c8 <HAL_GPIO_Init+0x2b8>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	4a4c      	ldr	r2, [pc, #304]	; (80020c8 <HAL_GPIO_Init+0x2b8>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6193      	str	r3, [r2, #24]
 8001f9c:	4b4a      	ldr	r3, [pc, #296]	; (80020c8 <HAL_GPIO_Init+0x2b8>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fa8:	4a48      	ldr	r2, [pc, #288]	; (80020cc <HAL_GPIO_Init+0x2bc>)
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	089b      	lsrs	r3, r3, #2
 8001fae:	3302      	adds	r3, #2
 8001fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a40      	ldr	r2, [pc, #256]	; (80020d0 <HAL_GPIO_Init+0x2c0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d013      	beq.n	8001ffc <HAL_GPIO_Init+0x1ec>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a3f      	ldr	r2, [pc, #252]	; (80020d4 <HAL_GPIO_Init+0x2c4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d00d      	beq.n	8001ff8 <HAL_GPIO_Init+0x1e8>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a3e      	ldr	r2, [pc, #248]	; (80020d8 <HAL_GPIO_Init+0x2c8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d007      	beq.n	8001ff4 <HAL_GPIO_Init+0x1e4>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a3d      	ldr	r2, [pc, #244]	; (80020dc <HAL_GPIO_Init+0x2cc>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d101      	bne.n	8001ff0 <HAL_GPIO_Init+0x1e0>
 8001fec:	2303      	movs	r3, #3
 8001fee:	e006      	b.n	8001ffe <HAL_GPIO_Init+0x1ee>
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	e004      	b.n	8001ffe <HAL_GPIO_Init+0x1ee>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e002      	b.n	8001ffe <HAL_GPIO_Init+0x1ee>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <HAL_GPIO_Init+0x1ee>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002000:	f002 0203 	and.w	r2, r2, #3
 8002004:	0092      	lsls	r2, r2, #2
 8002006:	4093      	lsls	r3, r2
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800200e:	492f      	ldr	r1, [pc, #188]	; (80020cc <HAL_GPIO_Init+0x2bc>)
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d006      	beq.n	8002036 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002028:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	492c      	ldr	r1, [pc, #176]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	600b      	str	r3, [r1, #0]
 8002034:	e006      	b.n	8002044 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002036:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	43db      	mvns	r3, r3
 800203e:	4928      	ldr	r1, [pc, #160]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002040:	4013      	ands	r3, r2
 8002042:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d006      	beq.n	800205e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002050:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	4922      	ldr	r1, [pc, #136]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]
 800205c:	e006      	b.n	800206c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800205e:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	43db      	mvns	r3, r3
 8002066:	491e      	ldr	r1, [pc, #120]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002068:	4013      	ands	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d006      	beq.n	8002086 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002078:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	4918      	ldr	r1, [pc, #96]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	608b      	str	r3, [r1, #8]
 8002084:	e006      	b.n	8002094 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002086:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	43db      	mvns	r3, r3
 800208e:	4914      	ldr	r1, [pc, #80]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002090:	4013      	ands	r3, r2
 8002092:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d021      	beq.n	80020e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020a0:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	490e      	ldr	r1, [pc, #56]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	60cb      	str	r3, [r1, #12]
 80020ac:	e021      	b.n	80020f2 <HAL_GPIO_Init+0x2e2>
 80020ae:	bf00      	nop
 80020b0:	10320000 	.word	0x10320000
 80020b4:	10310000 	.word	0x10310000
 80020b8:	10220000 	.word	0x10220000
 80020bc:	10210000 	.word	0x10210000
 80020c0:	10120000 	.word	0x10120000
 80020c4:	10110000 	.word	0x10110000
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40010000 	.word	0x40010000
 80020d0:	40010800 	.word	0x40010800
 80020d4:	40010c00 	.word	0x40010c00
 80020d8:	40011000 	.word	0x40011000
 80020dc:	40011400 	.word	0x40011400
 80020e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_GPIO_Init+0x304>)
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	4909      	ldr	r1, [pc, #36]	; (8002114 <HAL_GPIO_Init+0x304>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	3301      	adds	r3, #1
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	f47f ae8e 	bne.w	8001e24 <HAL_GPIO_Init+0x14>
  }
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	372c      	adds	r7, #44	; 0x2c
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	40010400 	.word	0x40010400

08002118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	887b      	ldrh	r3, [r7, #2]
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002130:	2301      	movs	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
 8002134:	e001      	b.n	800213a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800213a:	7bfb      	ldrb	r3, [r7, #15]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	460b      	mov	r3, r1
 8002150:	807b      	strh	r3, [r7, #2]
 8002152:	4613      	mov	r3, r2
 8002154:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002156:	787b      	ldrb	r3, [r7, #1]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215c:	887a      	ldrh	r2, [r7, #2]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002162:	e003      	b.n	800216c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002164:	887b      	ldrh	r3, [r7, #2]
 8002166:	041a      	lsls	r2, r3, #16
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	611a      	str	r2, [r3, #16]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr
	...

08002178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e272      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 8087 	beq.w	80022a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002198:	4b92      	ldr	r3, [pc, #584]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d00c      	beq.n	80021be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021a4:	4b8f      	ldr	r3, [pc, #572]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d112      	bne.n	80021d6 <HAL_RCC_OscConfig+0x5e>
 80021b0:	4b8c      	ldr	r3, [pc, #560]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021bc:	d10b      	bne.n	80021d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021be:	4b89      	ldr	r3, [pc, #548]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d06c      	beq.n	80022a4 <HAL_RCC_OscConfig+0x12c>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d168      	bne.n	80022a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e24c      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021de:	d106      	bne.n	80021ee <HAL_RCC_OscConfig+0x76>
 80021e0:	4b80      	ldr	r3, [pc, #512]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a7f      	ldr	r2, [pc, #508]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ea:	6013      	str	r3, [r2, #0]
 80021ec:	e02e      	b.n	800224c <HAL_RCC_OscConfig+0xd4>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0x98>
 80021f6:	4b7b      	ldr	r3, [pc, #492]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a7a      	ldr	r2, [pc, #488]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	4b78      	ldr	r3, [pc, #480]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a77      	ldr	r2, [pc, #476]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e01d      	b.n	800224c <HAL_RCC_OscConfig+0xd4>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002218:	d10c      	bne.n	8002234 <HAL_RCC_OscConfig+0xbc>
 800221a:	4b72      	ldr	r3, [pc, #456]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a71      	ldr	r2, [pc, #452]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b6f      	ldr	r3, [pc, #444]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a6e      	ldr	r2, [pc, #440]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 800222c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e00b      	b.n	800224c <HAL_RCC_OscConfig+0xd4>
 8002234:	4b6b      	ldr	r3, [pc, #428]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a6a      	ldr	r2, [pc, #424]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 800223a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b68      	ldr	r3, [pc, #416]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a67      	ldr	r2, [pc, #412]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800224a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d013      	beq.n	800227c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7ff f8a2 	bl	800139c <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800225c:	f7ff f89e 	bl	800139c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b64      	cmp	r3, #100	; 0x64
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e200      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	4b5d      	ldr	r3, [pc, #372]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0xe4>
 800227a:	e014      	b.n	80022a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7ff f88e 	bl	800139c <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002284:	f7ff f88a 	bl	800139c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b64      	cmp	r3, #100	; 0x64
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e1ec      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002296:	4b53      	ldr	r3, [pc, #332]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x10c>
 80022a2:	e000      	b.n	80022a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d063      	beq.n	800237a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b2:	4b4c      	ldr	r3, [pc, #304]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00b      	beq.n	80022d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022be:	4b49      	ldr	r3, [pc, #292]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d11c      	bne.n	8002304 <HAL_RCC_OscConfig+0x18c>
 80022ca:	4b46      	ldr	r3, [pc, #280]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d116      	bne.n	8002304 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d6:	4b43      	ldr	r3, [pc, #268]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_RCC_OscConfig+0x176>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d001      	beq.n	80022ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e1c0      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ee:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4939      	ldr	r1, [pc, #228]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002302:	e03a      	b.n	800237a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d020      	beq.n	800234e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800230c:	4b36      	ldr	r3, [pc, #216]	; (80023e8 <HAL_RCC_OscConfig+0x270>)
 800230e:	2201      	movs	r2, #1
 8002310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002312:	f7ff f843 	bl	800139c <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231a:	f7ff f83f 	bl	800139c <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e1a1      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232c:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002338:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4927      	ldr	r1, [pc, #156]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002348:	4313      	orrs	r3, r2
 800234a:	600b      	str	r3, [r1, #0]
 800234c:	e015      	b.n	800237a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_RCC_OscConfig+0x270>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7ff f822 	bl	800139c <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235c:	f7ff f81e 	bl	800139c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e180      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236e:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d03a      	beq.n	80023fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d019      	beq.n	80023c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800238e:	4b17      	ldr	r3, [pc, #92]	; (80023ec <HAL_RCC_OscConfig+0x274>)
 8002390:	2201      	movs	r2, #1
 8002392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002394:	f7ff f802 	bl	800139c <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800239c:	f7fe fffe 	bl	800139c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e160      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ae:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023ba:	2001      	movs	r0, #1
 80023bc:	f000 faf4 	bl	80029a8 <RCC_Delay>
 80023c0:	e01c      	b.n	80023fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <HAL_RCC_OscConfig+0x274>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c8:	f7fe ffe8 	bl	800139c <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ce:	e00f      	b.n	80023f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d0:	f7fe ffe4 	bl	800139c <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d908      	bls.n	80023f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e146      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	42420000 	.word	0x42420000
 80023ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f0:	4b92      	ldr	r3, [pc, #584]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1e9      	bne.n	80023d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 80a6 	beq.w	8002556 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800240e:	4b8b      	ldr	r3, [pc, #556]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10d      	bne.n	8002436 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800241a:	4b88      	ldr	r3, [pc, #544]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	4a87      	ldr	r2, [pc, #540]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002424:	61d3      	str	r3, [r2, #28]
 8002426:	4b85      	ldr	r3, [pc, #532]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002432:	2301      	movs	r3, #1
 8002434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002436:	4b82      	ldr	r3, [pc, #520]	; (8002640 <HAL_RCC_OscConfig+0x4c8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d118      	bne.n	8002474 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002442:	4b7f      	ldr	r3, [pc, #508]	; (8002640 <HAL_RCC_OscConfig+0x4c8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a7e      	ldr	r2, [pc, #504]	; (8002640 <HAL_RCC_OscConfig+0x4c8>)
 8002448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800244e:	f7fe ffa5 	bl	800139c <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002456:	f7fe ffa1 	bl	800139c <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b64      	cmp	r3, #100	; 0x64
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e103      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002468:	4b75      	ldr	r3, [pc, #468]	; (8002640 <HAL_RCC_OscConfig+0x4c8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d106      	bne.n	800248a <HAL_RCC_OscConfig+0x312>
 800247c:	4b6f      	ldr	r3, [pc, #444]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	4a6e      	ldr	r2, [pc, #440]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6213      	str	r3, [r2, #32]
 8002488:	e02d      	b.n	80024e6 <HAL_RCC_OscConfig+0x36e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x334>
 8002492:	4b6a      	ldr	r3, [pc, #424]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	4a69      	ldr	r2, [pc, #420]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	6213      	str	r3, [r2, #32]
 800249e:	4b67      	ldr	r3, [pc, #412]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4a66      	ldr	r2, [pc, #408]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	f023 0304 	bic.w	r3, r3, #4
 80024a8:	6213      	str	r3, [r2, #32]
 80024aa:	e01c      	b.n	80024e6 <HAL_RCC_OscConfig+0x36e>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	2b05      	cmp	r3, #5
 80024b2:	d10c      	bne.n	80024ce <HAL_RCC_OscConfig+0x356>
 80024b4:	4b61      	ldr	r3, [pc, #388]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	4a60      	ldr	r2, [pc, #384]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	6213      	str	r3, [r2, #32]
 80024c0:	4b5e      	ldr	r3, [pc, #376]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4a5d      	ldr	r2, [pc, #372]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6213      	str	r3, [r2, #32]
 80024cc:	e00b      	b.n	80024e6 <HAL_RCC_OscConfig+0x36e>
 80024ce:	4b5b      	ldr	r3, [pc, #364]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	4a5a      	ldr	r2, [pc, #360]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	f023 0301 	bic.w	r3, r3, #1
 80024d8:	6213      	str	r3, [r2, #32]
 80024da:	4b58      	ldr	r3, [pc, #352]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4a57      	ldr	r2, [pc, #348]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	f023 0304 	bic.w	r3, r3, #4
 80024e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d015      	beq.n	800251a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ee:	f7fe ff55 	bl	800139c <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f4:	e00a      	b.n	800250c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f6:	f7fe ff51 	bl	800139c <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f241 3288 	movw	r2, #5000	; 0x1388
 8002504:	4293      	cmp	r3, r2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e0b1      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250c:	4b4b      	ldr	r3, [pc, #300]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0ee      	beq.n	80024f6 <HAL_RCC_OscConfig+0x37e>
 8002518:	e014      	b.n	8002544 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251a:	f7fe ff3f 	bl	800139c <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002522:	f7fe ff3b 	bl	800139c <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002530:	4293      	cmp	r3, r2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e09b      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002538:	4b40      	ldr	r3, [pc, #256]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1ee      	bne.n	8002522 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002544:	7dfb      	ldrb	r3, [r7, #23]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d105      	bne.n	8002556 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254a:	4b3c      	ldr	r3, [pc, #240]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	4a3b      	ldr	r2, [pc, #236]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002554:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8087 	beq.w	800266e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002560:	4b36      	ldr	r3, [pc, #216]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	2b08      	cmp	r3, #8
 800256a:	d061      	beq.n	8002630 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d146      	bne.n	8002602 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002574:	4b33      	ldr	r3, [pc, #204]	; (8002644 <HAL_RCC_OscConfig+0x4cc>)
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257a:	f7fe ff0f 	bl	800139c <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002582:	f7fe ff0b 	bl	800139c <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e06d      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002594:	4b29      	ldr	r3, [pc, #164]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f0      	bne.n	8002582 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a8:	d108      	bne.n	80025bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025aa:	4b24      	ldr	r3, [pc, #144]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	4921      	ldr	r1, [pc, #132]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025bc:	4b1f      	ldr	r3, [pc, #124]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a19      	ldr	r1, [r3, #32]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	430b      	orrs	r3, r1
 80025ce:	491b      	ldr	r1, [pc, #108]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <HAL_RCC_OscConfig+0x4cc>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025da:	f7fe fedf 	bl	800139c <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e2:	f7fe fedb 	bl	800139c <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e03d      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f4:	4b11      	ldr	r3, [pc, #68]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x46a>
 8002600:	e035      	b.n	800266e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <HAL_RCC_OscConfig+0x4cc>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7fe fec8 	bl	800139c <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002610:	f7fe fec4 	bl	800139c <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e026      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x498>
 800262e:	e01e      	b.n	800266e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d107      	bne.n	8002648 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e019      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
 800263c:	40021000 	.word	0x40021000
 8002640:	40007000 	.word	0x40007000
 8002644:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCC_OscConfig+0x500>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	429a      	cmp	r2, r3
 800265a:	d106      	bne.n	800266a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d001      	beq.n	800266e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000

0800267c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0d0      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002690:	4b6a      	ldr	r3, [pc, #424]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d910      	bls.n	80026c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269e:	4b67      	ldr	r3, [pc, #412]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 0207 	bic.w	r2, r3, #7
 80026a6:	4965      	ldr	r1, [pc, #404]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ae:	4b63      	ldr	r3, [pc, #396]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0b8      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d020      	beq.n	800270e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d8:	4b59      	ldr	r3, [pc, #356]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4a58      	ldr	r2, [pc, #352]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f0:	4b53      	ldr	r3, [pc, #332]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4a52      	ldr	r2, [pc, #328]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026fc:	4b50      	ldr	r3, [pc, #320]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	494d      	ldr	r1, [pc, #308]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d040      	beq.n	800279c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d107      	bne.n	8002732 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	4b47      	ldr	r3, [pc, #284]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d115      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e07f      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d107      	bne.n	800274a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273a:	4b41      	ldr	r3, [pc, #260]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e073      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274a:	4b3d      	ldr	r3, [pc, #244]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e06b      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800275a:	4b39      	ldr	r3, [pc, #228]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f023 0203 	bic.w	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4936      	ldr	r1, [pc, #216]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800276c:	f7fe fe16 	bl	800139c <HAL_GetTick>
 8002770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002772:	e00a      	b.n	800278a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002774:	f7fe fe12 	bl	800139c <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e053      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	4b2d      	ldr	r3, [pc, #180]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 020c 	and.w	r2, r3, #12
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	429a      	cmp	r2, r3
 800279a:	d1eb      	bne.n	8002774 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800279c:	4b27      	ldr	r3, [pc, #156]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d210      	bcs.n	80027cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b24      	ldr	r3, [pc, #144]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 0207 	bic.w	r2, r3, #7
 80027b2:	4922      	ldr	r1, [pc, #136]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ba:	4b20      	ldr	r3, [pc, #128]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e032      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d8:	4b19      	ldr	r3, [pc, #100]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4916      	ldr	r1, [pc, #88]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d009      	beq.n	800280a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027f6:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	490e      	ldr	r1, [pc, #56]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	4313      	orrs	r3, r2
 8002808:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800280a:	f000 f821 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 800280e:	4602      	mov	r2, r0
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	490a      	ldr	r1, [pc, #40]	; (8002844 <HAL_RCC_ClockConfig+0x1c8>)
 800281c:	5ccb      	ldrb	r3, [r1, r3]
 800281e:	fa22 f303 	lsr.w	r3, r2, r3
 8002822:	4a09      	ldr	r2, [pc, #36]	; (8002848 <HAL_RCC_ClockConfig+0x1cc>)
 8002824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCC_ClockConfig+0x1d0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7fe fc9a 	bl	8001164 <HAL_InitTick>

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40022000 	.word	0x40022000
 8002840:	40021000 	.word	0x40021000
 8002844:	080074e4 	.word	0x080074e4
 8002848:	20000004 	.word	0x20000004
 800284c:	20000008 	.word	0x20000008

08002850 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002850:	b490      	push	{r4, r7}
 8002852:	b08a      	sub	sp, #40	; 0x28
 8002854:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002856:	4b29      	ldr	r3, [pc, #164]	; (80028fc <HAL_RCC_GetSysClockFreq+0xac>)
 8002858:	1d3c      	adds	r4, r7, #4
 800285a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800285c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002860:	f240 2301 	movw	r3, #513	; 0x201
 8002864:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	2300      	movs	r3, #0
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800287a:	4b21      	ldr	r3, [pc, #132]	; (8002900 <HAL_RCC_GetSysClockFreq+0xb0>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b04      	cmp	r3, #4
 8002888:	d002      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x40>
 800288a:	2b08      	cmp	r3, #8
 800288c:	d003      	beq.n	8002896 <HAL_RCC_GetSysClockFreq+0x46>
 800288e:	e02b      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002890:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002892:	623b      	str	r3, [r7, #32]
      break;
 8002894:	e02b      	b.n	80028ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	0c9b      	lsrs	r3, r3, #18
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	3328      	adds	r3, #40	; 0x28
 80028a0:	443b      	add	r3, r7
 80028a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d012      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028b2:	4b13      	ldr	r3, [pc, #76]	; (8002900 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	0c5b      	lsrs	r3, r3, #17
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	3328      	adds	r3, #40	; 0x28
 80028be:	443b      	add	r3, r7
 80028c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	4a0e      	ldr	r2, [pc, #56]	; (8002904 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028ca:	fb03 f202 	mul.w	r2, r3, r2
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
 80028d6:	e004      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028dc:	fb02 f303 	mul.w	r3, r2, r3
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	623b      	str	r3, [r7, #32]
      break;
 80028e6:	e002      	b.n	80028ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028ea:	623b      	str	r3, [r7, #32]
      break;
 80028ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ee:	6a3b      	ldr	r3, [r7, #32]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3728      	adds	r7, #40	; 0x28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc90      	pop	{r4, r7}
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	08007394 	.word	0x08007394
 8002900:	40021000 	.word	0x40021000
 8002904:	007a1200 	.word	0x007a1200
 8002908:	003d0900 	.word	0x003d0900

0800290c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002910:	4b02      	ldr	r3, [pc, #8]	; (800291c <HAL_RCC_GetHCLKFreq+0x10>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	20000004 	.word	0x20000004

08002920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002924:	f7ff fff2 	bl	800290c <HAL_RCC_GetHCLKFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	0adb      	lsrs	r3, r3, #11
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	4903      	ldr	r1, [pc, #12]	; (8002944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002936:	5ccb      	ldrb	r3, [r1, r3]
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800293c:	4618      	mov	r0, r3
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40021000 	.word	0x40021000
 8002944:	080074f4 	.word	0x080074f4

08002948 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	220f      	movs	r2, #15
 8002956:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002958:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <HAL_RCC_GetClockConfig+0x58>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0203 	and.w	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002964:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <HAL_RCC_GetClockConfig+0x58>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_GetClockConfig+0x58>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_RCC_GetClockConfig+0x58>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	08db      	lsrs	r3, r3, #3
 8002982:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_RCC_GetClockConfig+0x5c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0207 	and.w	r2, r3, #7
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40022000 	.word	0x40022000

080029a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029b0:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <RCC_Delay+0x34>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <RCC_Delay+0x38>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	0a5b      	lsrs	r3, r3, #9
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	fb02 f303 	mul.w	r3, r2, r3
 80029c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029c4:	bf00      	nop
  }
  while (Delay --);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1e5a      	subs	r2, r3, #1
 80029ca:	60fa      	str	r2, [r7, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f9      	bne.n	80029c4 <RCC_Delay+0x1c>
}
 80029d0:	bf00      	nop
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	20000004 	.word	0x20000004
 80029e0:	10624dd3 	.word	0x10624dd3

080029e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d07d      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a00:	2300      	movs	r3, #0
 8002a02:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a04:	4b4f      	ldr	r3, [pc, #316]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10d      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a10:	4b4c      	ldr	r3, [pc, #304]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	4a4b      	ldr	r2, [pc, #300]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	61d3      	str	r3, [r2, #28]
 8002a1c:	4b49      	ldr	r3, [pc, #292]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2c:	4b46      	ldr	r3, [pc, #280]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d118      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a38:	4b43      	ldr	r3, [pc, #268]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a42      	ldr	r2, [pc, #264]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a44:	f7fe fcaa 	bl	800139c <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4a:	e008      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4c:	f7fe fca6 	bl	800139c <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	; 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e06d      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5e:	4b3a      	ldr	r3, [pc, #232]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a6a:	4b36      	ldr	r3, [pc, #216]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a72:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d02e      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d027      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a88:	4b2e      	ldr	r3, [pc, #184]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a92:	4b2e      	ldr	r3, [pc, #184]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a98:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a9e:	4a29      	ldr	r2, [pc, #164]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d014      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aae:	f7fe fc75 	bl	800139c <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab4:	e00a      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab6:	f7fe fc71 	bl	800139c <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e036      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002acc:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0ee      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad8:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4917      	ldr	r1, [pc, #92]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002aea:	7dfb      	ldrb	r3, [r7, #23]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d105      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af0:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	4a13      	ldr	r2, [pc, #76]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002afa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b08:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	490b      	ldr	r1, [pc, #44]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d008      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b26:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4904      	ldr	r1, [pc, #16]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40007000 	.word	0x40007000
 8002b4c:	42420440 	.word	0x42420440

08002b50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b08d      	sub	sp, #52	; 0x34
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b58:	4b58      	ldr	r3, [pc, #352]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002b5a:	f107 040c 	add.w	r4, r7, #12
 8002b5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b64:	f240 2301 	movw	r3, #513	; 0x201
 8002b68:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6e:	2300      	movs	r3, #0
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b72:	2300      	movs	r3, #0
 8002b74:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b10      	cmp	r3, #16
 8002b82:	d00a      	beq.n	8002b9a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b10      	cmp	r3, #16
 8002b88:	f200 808e 	bhi.w	8002ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d049      	beq.n	8002c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d079      	beq.n	8002c8c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002b98:	e086      	b.n	8002ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002b9a:	4b49      	ldr	r3, [pc, #292]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002ba0:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d07f      	beq.n	8002cac <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	0c9b      	lsrs	r3, r3, #18
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	3330      	adds	r3, #48	; 0x30
 8002bb6:	443b      	add	r3, r7
 8002bb8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bbc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d017      	beq.n	8002bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bc8:	4b3d      	ldr	r3, [pc, #244]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	0c5b      	lsrs	r3, r3, #17
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	3330      	adds	r3, #48	; 0x30
 8002bd4:	443b      	add	r3, r7
 8002bd6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00d      	beq.n	8002c02 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002be6:	4a37      	ldr	r2, [pc, #220]	; (8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	fb02 f303 	mul.w	r3, r2, r3
 8002bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bf6:	e004      	b.n	8002c02 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	4a33      	ldr	r2, [pc, #204]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002bfc:	fb02 f303 	mul.w	r3, r2, r3
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002c02:	4b2f      	ldr	r3, [pc, #188]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c0e:	d102      	bne.n	8002c16 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c14:	e04a      	b.n	8002cac <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4a2c      	ldr	r2, [pc, #176]	; (8002ccc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	085b      	lsrs	r3, r3, #1
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c24:	e042      	b.n	8002cac <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002c26:	4b26      	ldr	r3, [pc, #152]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c36:	d108      	bne.n	8002c4a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c48:	e01f      	b.n	8002c8a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c54:	d109      	bne.n	8002c6a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8002c56:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002c62:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c68:	e00f      	b.n	8002c8a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c74:	d11c      	bne.n	8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002c76:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d016      	beq.n	8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002c82:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002c86:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c88:	e012      	b.n	8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002c8a:	e011      	b.n	8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002c8c:	f7ff fe48 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 8002c90:	4602      	mov	r2, r0
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	0b9b      	lsrs	r3, r3, #14
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ca6:	e004      	b.n	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002ca8:	bf00      	nop
 8002caa:	e002      	b.n	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002cac:	bf00      	nop
 8002cae:	e000      	b.n	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002cb0:	bf00      	nop
    }
  }
  return (frequency);
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3734      	adds	r7, #52	; 0x34
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd90      	pop	{r4, r7, pc}
 8002cbc:	080073a4 	.word	0x080073a4
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	007a1200 	.word	0x007a1200
 8002cc8:	003d0900 	.word	0x003d0900
 8002ccc:	aaaaaaab 	.word	0xaaaaaaab

08002cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e041      	b.n	8002d66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d106      	bne.n	8002cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7fe f9e8 	bl	80010cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4610      	mov	r0, r2
 8002d10:	f000 fc28 	bl	8003564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d001      	beq.n	8002d88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e03a      	b.n	8002dfe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0201 	orr.w	r2, r2, #1
 8002d9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a18      	ldr	r2, [pc, #96]	; (8002e08 <HAL_TIM_Base_Start_IT+0x98>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00e      	beq.n	8002dc8 <HAL_TIM_Base_Start_IT+0x58>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db2:	d009      	beq.n	8002dc8 <HAL_TIM_Base_Start_IT+0x58>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a14      	ldr	r2, [pc, #80]	; (8002e0c <HAL_TIM_Base_Start_IT+0x9c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d004      	beq.n	8002dc8 <HAL_TIM_Base_Start_IT+0x58>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a13      	ldr	r2, [pc, #76]	; (8002e10 <HAL_TIM_Base_Start_IT+0xa0>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d111      	bne.n	8002dec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d010      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0201 	orr.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dea:	e007      	b.n	8002dfc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	40012c00 	.word	0x40012c00
 8002e0c:	40000400 	.word	0x40000400
 8002e10:	40000800 	.word	0x40000800

08002e14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e041      	b.n	8002eaa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f839 	bl	8002eb2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	4619      	mov	r1, r3
 8002e52:	4610      	mov	r0, r2
 8002e54:	f000 fb86 	bl	8003564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d109      	bne.n	8002ee8 <HAL_TIM_PWM_Start+0x24>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	bf14      	ite	ne
 8002ee0:	2301      	movne	r3, #1
 8002ee2:	2300      	moveq	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	e022      	b.n	8002f2e <HAL_TIM_PWM_Start+0x6a>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d109      	bne.n	8002f02 <HAL_TIM_PWM_Start+0x3e>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	bf14      	ite	ne
 8002efa:	2301      	movne	r3, #1
 8002efc:	2300      	moveq	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	e015      	b.n	8002f2e <HAL_TIM_PWM_Start+0x6a>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d109      	bne.n	8002f1c <HAL_TIM_PWM_Start+0x58>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	bf14      	ite	ne
 8002f14:	2301      	movne	r3, #1
 8002f16:	2300      	moveq	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e008      	b.n	8002f2e <HAL_TIM_PWM_Start+0x6a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	bf14      	ite	ne
 8002f28:	2301      	movne	r3, #1
 8002f2a:	2300      	moveq	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e05e      	b.n	8002ff4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d104      	bne.n	8002f46 <HAL_TIM_PWM_Start+0x82>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f44:	e013      	b.n	8002f6e <HAL_TIM_PWM_Start+0xaa>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d104      	bne.n	8002f56 <HAL_TIM_PWM_Start+0x92>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f54:	e00b      	b.n	8002f6e <HAL_TIM_PWM_Start+0xaa>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d104      	bne.n	8002f66 <HAL_TIM_PWM_Start+0xa2>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f64:	e003      	b.n	8002f6e <HAL_TIM_PWM_Start+0xaa>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2202      	movs	r2, #2
 8002f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2201      	movs	r2, #1
 8002f74:	6839      	ldr	r1, [r7, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 fd74 	bl	8003a64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a1e      	ldr	r2, [pc, #120]	; (8002ffc <HAL_TIM_PWM_Start+0x138>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d107      	bne.n	8002f96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a18      	ldr	r2, [pc, #96]	; (8002ffc <HAL_TIM_PWM_Start+0x138>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d00e      	beq.n	8002fbe <HAL_TIM_PWM_Start+0xfa>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa8:	d009      	beq.n	8002fbe <HAL_TIM_PWM_Start+0xfa>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a14      	ldr	r2, [pc, #80]	; (8003000 <HAL_TIM_PWM_Start+0x13c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d004      	beq.n	8002fbe <HAL_TIM_PWM_Start+0xfa>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a12      	ldr	r2, [pc, #72]	; (8003004 <HAL_TIM_PWM_Start+0x140>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d111      	bne.n	8002fe2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2b06      	cmp	r3, #6
 8002fce:	d010      	beq.n	8002ff2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe0:	e007      	b.n	8002ff2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40012c00 	.word	0x40012c00
 8003000:	40000400 	.word	0x40000400
 8003004:	40000800 	.word	0x40000800

08003008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b02      	cmp	r3, #2
 800301c:	d122      	bne.n	8003064 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b02      	cmp	r3, #2
 800302a:	d11b      	bne.n	8003064 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0202 	mvn.w	r2, #2
 8003034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fa6f 	bl	800352e <HAL_TIM_IC_CaptureCallback>
 8003050:	e005      	b.n	800305e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fa62 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fa71 	bl	8003540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b04      	cmp	r3, #4
 8003070:	d122      	bne.n	80030b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b04      	cmp	r3, #4
 800307e:	d11b      	bne.n	80030b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0204 	mvn.w	r2, #4
 8003088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2202      	movs	r2, #2
 800308e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fa45 	bl	800352e <HAL_TIM_IC_CaptureCallback>
 80030a4:	e005      	b.n	80030b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fa38 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fa47 	bl	8003540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d122      	bne.n	800310c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d11b      	bne.n	800310c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0208 	mvn.w	r2, #8
 80030dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2204      	movs	r2, #4
 80030e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fa1b 	bl	800352e <HAL_TIM_IC_CaptureCallback>
 80030f8:	e005      	b.n	8003106 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fa0e 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 fa1d 	bl	8003540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b10      	cmp	r3, #16
 8003118:	d122      	bne.n	8003160 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b10      	cmp	r3, #16
 8003126:	d11b      	bne.n	8003160 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0210 	mvn.w	r2, #16
 8003130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2208      	movs	r2, #8
 8003136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f9f1 	bl	800352e <HAL_TIM_IC_CaptureCallback>
 800314c:	e005      	b.n	800315a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f9e4 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f9f3 	bl	8003540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b01      	cmp	r3, #1
 800316c:	d10e      	bne.n	800318c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b01      	cmp	r3, #1
 800317a:	d107      	bne.n	800318c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0201 	mvn.w	r2, #1
 8003184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fd feea 	bl	8000f60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003196:	2b80      	cmp	r3, #128	; 0x80
 8003198:	d10e      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a4:	2b80      	cmp	r3, #128	; 0x80
 80031a6:	d107      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fce1 	bl	8003b7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c2:	2b40      	cmp	r3, #64	; 0x40
 80031c4:	d10e      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d0:	2b40      	cmp	r3, #64	; 0x40
 80031d2:	d107      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f9b7 	bl	8003552 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	d10e      	bne.n	8003210 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b20      	cmp	r3, #32
 80031fe:	d107      	bne.n	8003210 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f06f 0220 	mvn.w	r2, #32
 8003208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fcac 	bl	8003b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003210:	bf00      	nop
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800322e:	2302      	movs	r3, #2
 8003230:	e0ac      	b.n	800338c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b0c      	cmp	r3, #12
 800323e:	f200 809f 	bhi.w	8003380 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003242:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003248:	0800327d 	.word	0x0800327d
 800324c:	08003381 	.word	0x08003381
 8003250:	08003381 	.word	0x08003381
 8003254:	08003381 	.word	0x08003381
 8003258:	080032bd 	.word	0x080032bd
 800325c:	08003381 	.word	0x08003381
 8003260:	08003381 	.word	0x08003381
 8003264:	08003381 	.word	0x08003381
 8003268:	080032ff 	.word	0x080032ff
 800326c:	08003381 	.word	0x08003381
 8003270:	08003381 	.word	0x08003381
 8003274:	08003381 	.word	0x08003381
 8003278:	0800333f 	.word	0x0800333f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	4618      	mov	r0, r3
 8003284:	f000 f9d0 	bl	8003628 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0208 	orr.w	r2, r2, #8
 8003296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699a      	ldr	r2, [r3, #24]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0204 	bic.w	r2, r2, #4
 80032a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6999      	ldr	r1, [r3, #24]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	691a      	ldr	r2, [r3, #16]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	619a      	str	r2, [r3, #24]
      break;
 80032ba:	e062      	b.n	8003382 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68b9      	ldr	r1, [r7, #8]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fa16 	bl	80036f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6999      	ldr	r1, [r3, #24]
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	021a      	lsls	r2, r3, #8
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	619a      	str	r2, [r3, #24]
      break;
 80032fc:	e041      	b.n	8003382 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fa5f 	bl	80037c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69da      	ldr	r2, [r3, #28]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 0208 	orr.w	r2, r2, #8
 8003318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69da      	ldr	r2, [r3, #28]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0204 	bic.w	r2, r2, #4
 8003328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69d9      	ldr	r1, [r3, #28]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	61da      	str	r2, [r3, #28]
      break;
 800333c:	e021      	b.n	8003382 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	4618      	mov	r0, r3
 8003346:	f000 faa9 	bl	800389c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69da      	ldr	r2, [r3, #28]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69d9      	ldr	r1, [r3, #28]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	021a      	lsls	r2, r3, #8
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	61da      	str	r2, [r3, #28]
      break;
 800337e:	e000      	b.n	8003382 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003380:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_TIM_ConfigClockSource+0x18>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e0b3      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x180>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033e4:	d03e      	beq.n	8003464 <HAL_TIM_ConfigClockSource+0xd0>
 80033e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ea:	f200 8087 	bhi.w	80034fc <HAL_TIM_ConfigClockSource+0x168>
 80033ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f2:	f000 8085 	beq.w	8003500 <HAL_TIM_ConfigClockSource+0x16c>
 80033f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033fa:	d87f      	bhi.n	80034fc <HAL_TIM_ConfigClockSource+0x168>
 80033fc:	2b70      	cmp	r3, #112	; 0x70
 80033fe:	d01a      	beq.n	8003436 <HAL_TIM_ConfigClockSource+0xa2>
 8003400:	2b70      	cmp	r3, #112	; 0x70
 8003402:	d87b      	bhi.n	80034fc <HAL_TIM_ConfigClockSource+0x168>
 8003404:	2b60      	cmp	r3, #96	; 0x60
 8003406:	d050      	beq.n	80034aa <HAL_TIM_ConfigClockSource+0x116>
 8003408:	2b60      	cmp	r3, #96	; 0x60
 800340a:	d877      	bhi.n	80034fc <HAL_TIM_ConfigClockSource+0x168>
 800340c:	2b50      	cmp	r3, #80	; 0x50
 800340e:	d03c      	beq.n	800348a <HAL_TIM_ConfigClockSource+0xf6>
 8003410:	2b50      	cmp	r3, #80	; 0x50
 8003412:	d873      	bhi.n	80034fc <HAL_TIM_ConfigClockSource+0x168>
 8003414:	2b40      	cmp	r3, #64	; 0x40
 8003416:	d058      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0x136>
 8003418:	2b40      	cmp	r3, #64	; 0x40
 800341a:	d86f      	bhi.n	80034fc <HAL_TIM_ConfigClockSource+0x168>
 800341c:	2b30      	cmp	r3, #48	; 0x30
 800341e:	d064      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x156>
 8003420:	2b30      	cmp	r3, #48	; 0x30
 8003422:	d86b      	bhi.n	80034fc <HAL_TIM_ConfigClockSource+0x168>
 8003424:	2b20      	cmp	r3, #32
 8003426:	d060      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x156>
 8003428:	2b20      	cmp	r3, #32
 800342a:	d867      	bhi.n	80034fc <HAL_TIM_ConfigClockSource+0x168>
 800342c:	2b00      	cmp	r3, #0
 800342e:	d05c      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x156>
 8003430:	2b10      	cmp	r3, #16
 8003432:	d05a      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003434:	e062      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	6899      	ldr	r1, [r3, #8]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f000 faee 	bl	8003a26 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003458:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	609a      	str	r2, [r3, #8]
      break;
 8003462:	e04e      	b.n	8003502 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	6899      	ldr	r1, [r3, #8]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f000 fad7 	bl	8003a26 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003486:	609a      	str	r2, [r3, #8]
      break;
 8003488:	e03b      	b.n	8003502 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	6859      	ldr	r1, [r3, #4]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	461a      	mov	r2, r3
 8003498:	f000 fa4e 	bl	8003938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2150      	movs	r1, #80	; 0x50
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 faa5 	bl	80039f2 <TIM_ITRx_SetConfig>
      break;
 80034a8:	e02b      	b.n	8003502 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6859      	ldr	r1, [r3, #4]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	461a      	mov	r2, r3
 80034b8:	f000 fa6c 	bl	8003994 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2160      	movs	r1, #96	; 0x60
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fa95 	bl	80039f2 <TIM_ITRx_SetConfig>
      break;
 80034c8:	e01b      	b.n	8003502 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6859      	ldr	r1, [r3, #4]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	461a      	mov	r2, r3
 80034d8:	f000 fa2e 	bl	8003938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2140      	movs	r1, #64	; 0x40
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fa85 	bl	80039f2 <TIM_ITRx_SetConfig>
      break;
 80034e8:	e00b      	b.n	8003502 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4619      	mov	r1, r3
 80034f4:	4610      	mov	r0, r2
 80034f6:	f000 fa7c 	bl	80039f2 <TIM_ITRx_SetConfig>
        break;
 80034fa:	e002      	b.n	8003502 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034fc:	bf00      	nop
 80034fe:	e000      	b.n	8003502 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003500:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr

0800352e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr

08003552 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr

08003564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a29      	ldr	r2, [pc, #164]	; (800361c <TIM_Base_SetConfig+0xb8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00b      	beq.n	8003594 <TIM_Base_SetConfig+0x30>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003582:	d007      	beq.n	8003594 <TIM_Base_SetConfig+0x30>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a26      	ldr	r2, [pc, #152]	; (8003620 <TIM_Base_SetConfig+0xbc>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d003      	beq.n	8003594 <TIM_Base_SetConfig+0x30>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a25      	ldr	r2, [pc, #148]	; (8003624 <TIM_Base_SetConfig+0xc0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d108      	bne.n	80035a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a1c      	ldr	r2, [pc, #112]	; (800361c <TIM_Base_SetConfig+0xb8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00b      	beq.n	80035c6 <TIM_Base_SetConfig+0x62>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b4:	d007      	beq.n	80035c6 <TIM_Base_SetConfig+0x62>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a19      	ldr	r2, [pc, #100]	; (8003620 <TIM_Base_SetConfig+0xbc>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d003      	beq.n	80035c6 <TIM_Base_SetConfig+0x62>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a18      	ldr	r2, [pc, #96]	; (8003624 <TIM_Base_SetConfig+0xc0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d108      	bne.n	80035d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a07      	ldr	r2, [pc, #28]	; (800361c <TIM_Base_SetConfig+0xb8>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d103      	bne.n	800360c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	615a      	str	r2, [r3, #20]
}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	40012c00 	.word	0x40012c00
 8003620:	40000400 	.word	0x40000400
 8003624:	40000800 	.word	0x40000800

08003628 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	f023 0201 	bic.w	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0303 	bic.w	r3, r3, #3
 800365e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f023 0302 	bic.w	r3, r3, #2
 8003670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <TIM_OC1_SetConfig+0xc8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d10c      	bne.n	800369e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f023 0308 	bic.w	r3, r3, #8
 800368a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f023 0304 	bic.w	r3, r3, #4
 800369c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a13      	ldr	r2, [pc, #76]	; (80036f0 <TIM_OC1_SetConfig+0xc8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d111      	bne.n	80036ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	621a      	str	r2, [r3, #32]
}
 80036e4:	bf00      	nop
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40012c00 	.word	0x40012c00

080036f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	f023 0210 	bic.w	r2, r3, #16
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800372a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	021b      	lsls	r3, r3, #8
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4313      	orrs	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f023 0320 	bic.w	r3, r3, #32
 800373e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a1d      	ldr	r2, [pc, #116]	; (80037c4 <TIM_OC2_SetConfig+0xd0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d10d      	bne.n	8003770 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800375a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800376e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a14      	ldr	r2, [pc, #80]	; (80037c4 <TIM_OC2_SetConfig+0xd0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d113      	bne.n	80037a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800377e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003786:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	621a      	str	r2, [r3, #32]
}
 80037ba:	bf00      	nop
 80037bc:	371c      	adds	r7, #28
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr
 80037c4:	40012c00 	.word	0x40012c00

080037c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 0303 	bic.w	r3, r3, #3
 80037fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	021b      	lsls	r3, r3, #8
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a1d      	ldr	r2, [pc, #116]	; (8003898 <TIM_OC3_SetConfig+0xd0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d10d      	bne.n	8003842 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800382c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	021b      	lsls	r3, r3, #8
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a14      	ldr	r2, [pc, #80]	; (8003898 <TIM_OC3_SetConfig+0xd0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d113      	bne.n	8003872 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	621a      	str	r2, [r3, #32]
}
 800388c:	bf00      	nop
 800388e:	371c      	adds	r7, #28
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40012c00 	.word	0x40012c00

0800389c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	4313      	orrs	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	031b      	lsls	r3, r3, #12
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a0f      	ldr	r2, [pc, #60]	; (8003934 <TIM_OC4_SetConfig+0x98>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d109      	bne.n	8003910 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003902:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	019b      	lsls	r3, r3, #6
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	621a      	str	r2, [r3, #32]
}
 800392a:	bf00      	nop
 800392c:	371c      	adds	r7, #28
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr
 8003934:	40012c00 	.word	0x40012c00

08003938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	f023 0201 	bic.w	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f023 030a 	bic.w	r3, r3, #10
 8003974:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	621a      	str	r2, [r3, #32]
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	f023 0210 	bic.w	r2, r3, #16
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	031b      	lsls	r3, r3, #12
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	621a      	str	r2, [r3, #32]
}
 80039e8:	bf00      	nop
 80039ea:	371c      	adds	r7, #28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr

080039f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b085      	sub	sp, #20
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f043 0307 	orr.w	r3, r3, #7
 8003a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	609a      	str	r2, [r3, #8]
}
 8003a1c:	bf00      	nop
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr

08003a26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b087      	sub	sp, #28
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	607a      	str	r2, [r7, #4]
 8003a32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	021a      	lsls	r2, r3, #8
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	609a      	str	r2, [r3, #8]
}
 8003a5a:	bf00      	nop
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr

08003a64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	2201      	movs	r2, #1
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a1a      	ldr	r2, [r3, #32]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	401a      	ands	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a1a      	ldr	r2, [r3, #32]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f003 031f 	and.w	r3, r3, #31
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	621a      	str	r2, [r3, #32]
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e046      	b.n	8003b52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a16      	ldr	r2, [pc, #88]	; (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00e      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b10:	d009      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a12      	ldr	r2, [pc, #72]	; (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d004      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a10      	ldr	r2, [pc, #64]	; (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d10c      	bne.n	8003b40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr
 8003b5c:	40012c00 	.word	0x40012c00
 8003b60:	40000400 	.word	0x40000400
 8003b64:	40000800 	.word	0x40000800

08003b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr

08003b7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr

08003b8c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b92:	f3ef 8305 	mrs	r3, IPSR
 8003b96:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10f      	bne.n	8003bbe <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003ba2:	607b      	str	r3, [r7, #4]
  return(result);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <osKernelInitialize+0x32>
 8003baa:	4b10      	ldr	r3, [pc, #64]	; (8003bec <osKernelInitialize+0x60>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d109      	bne.n	8003bc6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003bb2:	f3ef 8311 	mrs	r3, BASEPRI
 8003bb6:	603b      	str	r3, [r7, #0]
  return(result);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003bbe:	f06f 0305 	mvn.w	r3, #5
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	e00c      	b.n	8003be0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003bc6:	4b09      	ldr	r3, [pc, #36]	; (8003bec <osKernelInitialize+0x60>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d105      	bne.n	8003bda <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003bce:	4b07      	ldr	r3, [pc, #28]	; (8003bec <osKernelInitialize+0x60>)
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	e002      	b.n	8003be0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003bda:	f04f 33ff 	mov.w	r3, #4294967295
 8003bde:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003be0:	68fb      	ldr	r3, [r7, #12]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr
 8003bec:	200001ec 	.word	0x200001ec

08003bf0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bf6:	f3ef 8305 	mrs	r3, IPSR
 8003bfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bfc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10f      	bne.n	8003c22 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c02:	f3ef 8310 	mrs	r3, PRIMASK
 8003c06:	607b      	str	r3, [r7, #4]
  return(result);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d109      	bne.n	8003c22 <osKernelStart+0x32>
 8003c0e:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <osKernelStart+0x64>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d109      	bne.n	8003c2a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c16:	f3ef 8311 	mrs	r3, BASEPRI
 8003c1a:	603b      	str	r3, [r7, #0]
  return(result);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003c22:	f06f 0305 	mvn.w	r3, #5
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	e00e      	b.n	8003c48 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <osKernelStart+0x64>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d107      	bne.n	8003c42 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003c32:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <osKernelStart+0x64>)
 8003c34:	2202      	movs	r2, #2
 8003c36:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003c38:	f001 faa2 	bl	8005180 <vTaskStartScheduler>
      stat = osOK;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	e002      	b.n	8003c48 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003c42:	f04f 33ff 	mov.w	r3, #4294967295
 8003c46:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003c48:	68fb      	ldr	r3, [r7, #12]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	200001ec 	.word	0x200001ec

08003c58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b092      	sub	sp, #72	; 0x48
 8003c5c:	af04      	add	r7, sp, #16
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c68:	f3ef 8305 	mrs	r3, IPSR
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f040 8094 	bne.w	8003d9e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c76:	f3ef 8310 	mrs	r3, PRIMASK
 8003c7a:	623b      	str	r3, [r7, #32]
  return(result);
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f040 808d 	bne.w	8003d9e <osThreadNew+0x146>
 8003c84:	4b48      	ldr	r3, [pc, #288]	; (8003da8 <osThreadNew+0x150>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d106      	bne.n	8003c9a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c8c:	f3ef 8311 	mrs	r3, BASEPRI
 8003c90:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f040 8082 	bne.w	8003d9e <osThreadNew+0x146>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d07e      	beq.n	8003d9e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003ca4:	2318      	movs	r3, #24
 8003ca6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003ca8:	2300      	movs	r3, #0
 8003caa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003cac:	f107 031b 	add.w	r3, r7, #27
 8003cb0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d045      	beq.n	8003d4a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <osThreadNew+0x74>
        name = attr->name;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <osThreadNew+0x9a>
 8003ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce2:	2b38      	cmp	r3, #56	; 0x38
 8003ce4:	d805      	bhi.n	8003cf2 <osThreadNew+0x9a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <osThreadNew+0x9e>
        return (NULL);
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	e054      	b.n	8003da0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	089b      	lsrs	r3, r3, #2
 8003d04:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00e      	beq.n	8003d2c <osThreadNew+0xd4>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	2b5b      	cmp	r3, #91	; 0x5b
 8003d14:	d90a      	bls.n	8003d2c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d006      	beq.n	8003d2c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <osThreadNew+0xd4>
        mem = 1;
 8003d26:	2301      	movs	r3, #1
 8003d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d2a:	e010      	b.n	8003d4e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10c      	bne.n	8003d4e <osThreadNew+0xf6>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d108      	bne.n	8003d4e <osThreadNew+0xf6>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d104      	bne.n	8003d4e <osThreadNew+0xf6>
          mem = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d48:	e001      	b.n	8003d4e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d110      	bne.n	8003d76 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d5c:	9202      	str	r2, [sp, #8]
 8003d5e:	9301      	str	r3, [sp, #4]
 8003d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f001 f83c 	bl	8004de8 <xTaskCreateStatic>
 8003d70:	4603      	mov	r3, r0
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	e013      	b.n	8003d9e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d110      	bne.n	8003d9e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	f107 0314 	add.w	r3, r7, #20
 8003d84:	9301      	str	r3, [sp, #4]
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f001 f886 	bl	8004ea0 <xTaskCreate>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d001      	beq.n	8003d9e <osThreadNew+0x146>
          hTask = NULL;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003d9e:	697b      	ldr	r3, [r7, #20]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3738      	adds	r7, #56	; 0x38
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	200001ec 	.word	0x200001ec

08003dac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003db4:	f3ef 8305 	mrs	r3, IPSR
 8003db8:	613b      	str	r3, [r7, #16]
  return(result);
 8003dba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10f      	bne.n	8003de0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8003dc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d109      	bne.n	8003de0 <osDelay+0x34>
 8003dcc:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <osDelay+0x58>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d109      	bne.n	8003de8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003dd4:	f3ef 8311 	mrs	r3, BASEPRI
 8003dd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <osDelay+0x3c>
    stat = osErrorISR;
 8003de0:	f06f 0305 	mvn.w	r3, #5
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	e007      	b.n	8003df8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f001 f990 	bl	8005118 <vTaskDelay>
    }
  }

  return (stat);
 8003df8:	697b      	ldr	r3, [r7, #20]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	200001ec 	.word	0x200001ec

08003e08 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08c      	sub	sp, #48	; 0x30
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003e14:	2300      	movs	r3, #0
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e18:	f3ef 8305 	mrs	r3, IPSR
 8003e1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e1e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d16f      	bne.n	8003f04 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e24:	f3ef 8310 	mrs	r3, PRIMASK
 8003e28:	617b      	str	r3, [r7, #20]
  return(result);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d169      	bne.n	8003f04 <osMessageQueueNew+0xfc>
 8003e30:	4b37      	ldr	r3, [pc, #220]	; (8003f10 <osMessageQueueNew+0x108>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d105      	bne.n	8003e44 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e38:	f3ef 8311 	mrs	r3, BASEPRI
 8003e3c:	613b      	str	r3, [r7, #16]
  return(result);
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d15f      	bne.n	8003f04 <osMessageQueueNew+0xfc>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d05c      	beq.n	8003f04 <osMessageQueueNew+0xfc>
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d059      	beq.n	8003f04 <osMessageQueueNew+0xfc>
    mem = -1;
 8003e50:	f04f 33ff 	mov.w	r3, #4294967295
 8003e54:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d029      	beq.n	8003eb0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d012      	beq.n	8003e8a <osMessageQueueNew+0x82>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2b4f      	cmp	r3, #79	; 0x4f
 8003e6a:	d90e      	bls.n	8003e8a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	695a      	ldr	r2, [r3, #20]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	68b9      	ldr	r1, [r7, #8]
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d302      	bcc.n	8003e8a <osMessageQueueNew+0x82>
        mem = 1;
 8003e84:	2301      	movs	r3, #1
 8003e86:	623b      	str	r3, [r7, #32]
 8003e88:	e014      	b.n	8003eb4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d110      	bne.n	8003eb4 <osMessageQueueNew+0xac>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10c      	bne.n	8003eb4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d108      	bne.n	8003eb4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d104      	bne.n	8003eb4 <osMessageQueueNew+0xac>
          mem = 0;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	623b      	str	r3, [r7, #32]
 8003eae:	e001      	b.n	8003eb4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d10b      	bne.n	8003ed2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691a      	ldr	r2, [r3, #16]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	9100      	str	r1, [sp, #0]
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 fa53 	bl	8004374 <xQueueGenericCreateStatic>
 8003ece:	6278      	str	r0, [r7, #36]	; 0x24
 8003ed0:	e008      	b.n	8003ee4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d105      	bne.n	8003ee4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003ed8:	2200      	movs	r2, #0
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 fac0 	bl	8004462 <xQueueGenericCreate>
 8003ee2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00c      	beq.n	8003f04 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <osMessageQueueNew+0xf0>
        name = attr->name;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	e001      	b.n	8003efc <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003efc:	69f9      	ldr	r1, [r7, #28]
 8003efe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f00:	f000 ff16 	bl	8004d30 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3728      	adds	r7, #40	; 0x28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	200001ec 	.word	0x200001ec

08003f14 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08a      	sub	sp, #40	; 0x28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	4613      	mov	r3, r2
 8003f22:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f2c:	f3ef 8305 	mrs	r3, IPSR
 8003f30:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f32:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10f      	bne.n	8003f58 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f38:	f3ef 8310 	mrs	r3, PRIMASK
 8003f3c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d109      	bne.n	8003f58 <osMessageQueuePut+0x44>
 8003f44:	4b2b      	ldr	r3, [pc, #172]	; (8003ff4 <osMessageQueuePut+0xe0>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d12e      	bne.n	8003faa <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f4c:	f3ef 8311 	mrs	r3, BASEPRI
 8003f50:	617b      	str	r3, [r7, #20]
  return(result);
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d028      	beq.n	8003faa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <osMessageQueuePut+0x56>
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <osMessageQueuePut+0x56>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8003f6a:	f06f 0303 	mvn.w	r3, #3
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f70:	e039      	b.n	8003fe6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003f76:	f107 0210 	add.w	r2, r7, #16
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	68b9      	ldr	r1, [r7, #8]
 8003f7e:	6a38      	ldr	r0, [r7, #32]
 8003f80:	f000 fbce 	bl	8004720 <xQueueGenericSendFromISR>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d003      	beq.n	8003f92 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8003f8a:	f06f 0302 	mvn.w	r3, #2
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f90:	e029      	b.n	8003fe6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d026      	beq.n	8003fe6 <osMessageQueuePut+0xd2>
 8003f98:	4b17      	ldr	r3, [pc, #92]	; (8003ff8 <osMessageQueuePut+0xe4>)
 8003f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003fa8:	e01d      	b.n	8003fe6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <osMessageQueuePut+0xa2>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d103      	bne.n	8003fbe <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8003fb6:	f06f 0303 	mvn.w	r3, #3
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
 8003fbc:	e014      	b.n	8003fe8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	6a38      	ldr	r0, [r7, #32]
 8003fc6:	f000 faad 	bl	8004524 <xQueueGenericSend>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d00b      	beq.n	8003fe8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8003fd6:	f06f 0301 	mvn.w	r3, #1
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24
 8003fdc:	e004      	b.n	8003fe8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8003fde:	f06f 0302 	mvn.w	r3, #2
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe4:	e000      	b.n	8003fe8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003fe6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3728      	adds	r7, #40	; 0x28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	200001ec 	.word	0x200001ec
 8003ff8:	e000ed04 	.word	0xe000ed04

08003ffc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08a      	sub	sp, #40	; 0x28
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800400e:	2300      	movs	r3, #0
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004012:	f3ef 8305 	mrs	r3, IPSR
 8004016:	61fb      	str	r3, [r7, #28]
  return(result);
 8004018:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10f      	bne.n	800403e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800401e:	f3ef 8310 	mrs	r3, PRIMASK
 8004022:	61bb      	str	r3, [r7, #24]
  return(result);
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d109      	bne.n	800403e <osMessageQueueGet+0x42>
 800402a:	4b2b      	ldr	r3, [pc, #172]	; (80040d8 <osMessageQueueGet+0xdc>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d12e      	bne.n	8004090 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004032:	f3ef 8311 	mrs	r3, BASEPRI
 8004036:	617b      	str	r3, [r7, #20]
  return(result);
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d028      	beq.n	8004090 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <osMessageQueueGet+0x54>
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <osMessageQueueGet+0x54>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004050:	f06f 0303 	mvn.w	r3, #3
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004056:	e038      	b.n	80040ca <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004058:	2300      	movs	r3, #0
 800405a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800405c:	f107 0310 	add.w	r3, r7, #16
 8004060:	461a      	mov	r2, r3
 8004062:	68b9      	ldr	r1, [r7, #8]
 8004064:	6a38      	ldr	r0, [r7, #32]
 8004066:	f000 fcd3 	bl	8004a10 <xQueueReceiveFromISR>
 800406a:	4603      	mov	r3, r0
 800406c:	2b01      	cmp	r3, #1
 800406e:	d003      	beq.n	8004078 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004070:	f06f 0302 	mvn.w	r3, #2
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004076:	e028      	b.n	80040ca <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d025      	beq.n	80040ca <osMessageQueueGet+0xce>
 800407e:	4b17      	ldr	r3, [pc, #92]	; (80040dc <osMessageQueueGet+0xe0>)
 8004080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800408e:	e01c      	b.n	80040ca <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <osMessageQueueGet+0xa0>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d103      	bne.n	80040a4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800409c:	f06f 0303 	mvn.w	r3, #3
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
 80040a2:	e013      	b.n	80040cc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	6a38      	ldr	r0, [r7, #32]
 80040aa:	f000 fbd1 	bl	8004850 <xQueueReceive>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d00b      	beq.n	80040cc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80040ba:	f06f 0301 	mvn.w	r3, #1
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
 80040c0:	e004      	b.n	80040cc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80040c2:	f06f 0302 	mvn.w	r3, #2
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
 80040c8:	e000      	b.n	80040cc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80040ca:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3728      	adds	r7, #40	; 0x28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	200001ec 	.word	0x200001ec
 80040dc:	e000ed04 	.word	0xe000ed04

080040e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4a06      	ldr	r2, [pc, #24]	; (8004108 <vApplicationGetIdleTaskMemory+0x28>)
 80040f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	4a05      	ldr	r2, [pc, #20]	; (800410c <vApplicationGetIdleTaskMemory+0x2c>)
 80040f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2280      	movs	r2, #128	; 0x80
 80040fc:	601a      	str	r2, [r3, #0]
}
 80040fe:	bf00      	nop
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr
 8004108:	200001f0 	.word	0x200001f0
 800410c:	2000024c 	.word	0x2000024c

08004110 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4a07      	ldr	r2, [pc, #28]	; (800413c <vApplicationGetTimerTaskMemory+0x2c>)
 8004120:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	4a06      	ldr	r2, [pc, #24]	; (8004140 <vApplicationGetTimerTaskMemory+0x30>)
 8004126:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800412e:	601a      	str	r2, [r3, #0]
}
 8004130:	bf00      	nop
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	2000044c 	.word	0x2000044c
 8004140:	200004a8 	.word	0x200004a8

08004144 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f103 0208 	add.w	r2, r3, #8
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f04f 32ff 	mov.w	r2, #4294967295
 800415c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f103 0208 	add.w	r2, r3, #8
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f103 0208 	add.w	r2, r3, #8
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr

0800419a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800419a:	b480      	push	{r7}
 800419c:	b085      	sub	sp, #20
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	601a      	str	r2, [r3, #0]
}
 80041d6:	bf00      	nop
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr

080041e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f6:	d103      	bne.n	8004200 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	e00c      	b.n	800421a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3308      	adds	r3, #8
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	e002      	b.n	800420e <vListInsert+0x2e>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	429a      	cmp	r2, r3
 8004218:	d2f6      	bcs.n	8004208 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	601a      	str	r2, [r3, #0]
}
 8004246:	bf00      	nop
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr

08004250 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6892      	ldr	r2, [r2, #8]
 8004266:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6852      	ldr	r2, [r2, #4]
 8004270:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	429a      	cmp	r2, r3
 800427a:	d103      	bne.n	8004284 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	1e5a      	subs	r2, r3, #1
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr
	...

080042a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10a      	bne.n	80042ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80042ca:	bf00      	nop
 80042cc:	e7fe      	b.n	80042cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80042ce:	f002 f885 	bl	80063dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042da:	68f9      	ldr	r1, [r7, #12]
 80042dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042de:	fb01 f303 	mul.w	r3, r1, r3
 80042e2:	441a      	add	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fe:	3b01      	subs	r3, #1
 8004300:	68f9      	ldr	r1, [r7, #12]
 8004302:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004304:	fb01 f303 	mul.w	r3, r1, r3
 8004308:	441a      	add	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	22ff      	movs	r2, #255	; 0xff
 8004312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	22ff      	movs	r2, #255	; 0xff
 800431a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d114      	bne.n	800434e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01a      	beq.n	8004362 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3310      	adds	r3, #16
 8004330:	4618      	mov	r0, r3
 8004332:	f001 f9af 	bl	8005694 <xTaskRemoveFromEventList>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d012      	beq.n	8004362 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800433c:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <xQueueGenericReset+0xcc>)
 800433e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	e009      	b.n	8004362 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	3310      	adds	r3, #16
 8004352:	4618      	mov	r0, r3
 8004354:	f7ff fef6 	bl	8004144 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3324      	adds	r3, #36	; 0x24
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff fef1 	bl	8004144 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004362:	f002 f86b 	bl	800643c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004366:	2301      	movs	r3, #1
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	e000ed04 	.word	0xe000ed04

08004374 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08e      	sub	sp, #56	; 0x38
 8004378:	af02      	add	r7, sp, #8
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10a      	bne.n	800439e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438c:	f383 8811 	msr	BASEPRI, r3
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800439a:	bf00      	nop
 800439c:	e7fe      	b.n	800439c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10a      	bne.n	80043ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043b6:	bf00      	nop
 80043b8:	e7fe      	b.n	80043b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <xQueueGenericCreateStatic+0x52>
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <xQueueGenericCreateStatic+0x56>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <xQueueGenericCreateStatic+0x58>
 80043ca:	2300      	movs	r3, #0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80043d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	623b      	str	r3, [r7, #32]
}
 80043e2:	bf00      	nop
 80043e4:	e7fe      	b.n	80043e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d102      	bne.n	80043f2 <xQueueGenericCreateStatic+0x7e>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <xQueueGenericCreateStatic+0x82>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <xQueueGenericCreateStatic+0x84>
 80043f6:	2300      	movs	r3, #0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	61fb      	str	r3, [r7, #28]
}
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004412:	2350      	movs	r3, #80	; 0x50
 8004414:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2b50      	cmp	r3, #80	; 0x50
 800441a:	d00a      	beq.n	8004432 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	61bb      	str	r3, [r7, #24]
}
 800442e:	bf00      	nop
 8004430:	e7fe      	b.n	8004430 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00d      	beq.n	8004458 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800443c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004444:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	4613      	mov	r3, r2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	68b9      	ldr	r1, [r7, #8]
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 f843 	bl	80044de <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800445a:	4618      	mov	r0, r3
 800445c:	3730      	adds	r7, #48	; 0x30
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004462:	b580      	push	{r7, lr}
 8004464:	b08a      	sub	sp, #40	; 0x28
 8004466:	af02      	add	r7, sp, #8
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	4613      	mov	r3, r2
 800446e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <xQueueGenericCreate+0x2a>
	__asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	613b      	str	r3, [r7, #16]
}
 8004488:	bf00      	nop
 800448a:	e7fe      	b.n	800448a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d102      	bne.n	8004498 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004492:	2300      	movs	r3, #0
 8004494:	61fb      	str	r3, [r7, #28]
 8004496:	e004      	b.n	80044a2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	fb02 f303 	mul.w	r3, r2, r3
 80044a0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	3350      	adds	r3, #80	; 0x50
 80044a6:	4618      	mov	r0, r3
 80044a8:	f002 f898 	bl	80065dc <pvPortMalloc>
 80044ac:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00f      	beq.n	80044d4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	3350      	adds	r3, #80	; 0x50
 80044b8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044c2:	79fa      	ldrb	r2, [r7, #7]
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	4613      	mov	r3, r2
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	68b9      	ldr	r1, [r7, #8]
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 f805 	bl	80044de <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80044d4:	69bb      	ldr	r3, [r7, #24]
	}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3720      	adds	r7, #32
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
 80044ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d103      	bne.n	80044fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	e002      	b.n	8004500 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800450c:	2101      	movs	r1, #1
 800450e:	69b8      	ldr	r0, [r7, #24]
 8004510:	f7ff fec8 	bl	80042a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	78fa      	ldrb	r2, [r7, #3]
 8004518:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800451c:	bf00      	nop
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08e      	sub	sp, #56	; 0x38
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004532:	2300      	movs	r3, #0
 8004534:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800453a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10a      	bne.n	8004556 <xQueueGenericSend+0x32>
	__asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004552:	bf00      	nop
 8004554:	e7fe      	b.n	8004554 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d103      	bne.n	8004564 <xQueueGenericSend+0x40>
 800455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <xQueueGenericSend+0x44>
 8004564:	2301      	movs	r3, #1
 8004566:	e000      	b.n	800456a <xQueueGenericSend+0x46>
 8004568:	2300      	movs	r3, #0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <xQueueGenericSend+0x60>
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004580:	bf00      	nop
 8004582:	e7fe      	b.n	8004582 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d103      	bne.n	8004592 <xQueueGenericSend+0x6e>
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <xQueueGenericSend+0x72>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <xQueueGenericSend+0x74>
 8004596:	2300      	movs	r3, #0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800459c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	623b      	str	r3, [r7, #32]
}
 80045ae:	bf00      	nop
 80045b0:	e7fe      	b.n	80045b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045b2:	f001 fa31 	bl	8005a18 <xTaskGetSchedulerState>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d102      	bne.n	80045c2 <xQueueGenericSend+0x9e>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <xQueueGenericSend+0xa2>
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <xQueueGenericSend+0xa4>
 80045c6:	2300      	movs	r3, #0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	61fb      	str	r3, [r7, #28]
}
 80045de:	bf00      	nop
 80045e0:	e7fe      	b.n	80045e0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045e2:	f001 fefb 	bl	80063dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d302      	bcc.n	80045f8 <xQueueGenericSend+0xd4>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d129      	bne.n	800464c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	68b9      	ldr	r1, [r7, #8]
 80045fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045fe:	f000 fa87 	bl	8004b10 <prvCopyDataToQueue>
 8004602:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	2b00      	cmp	r3, #0
 800460a:	d010      	beq.n	800462e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	3324      	adds	r3, #36	; 0x24
 8004610:	4618      	mov	r0, r3
 8004612:	f001 f83f 	bl	8005694 <xTaskRemoveFromEventList>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d013      	beq.n	8004644 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800461c:	4b3f      	ldr	r3, [pc, #252]	; (800471c <xQueueGenericSend+0x1f8>)
 800461e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	e00a      	b.n	8004644 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800462e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004630:	2b00      	cmp	r3, #0
 8004632:	d007      	beq.n	8004644 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004634:	4b39      	ldr	r3, [pc, #228]	; (800471c <xQueueGenericSend+0x1f8>)
 8004636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004644:	f001 fefa 	bl	800643c <vPortExitCritical>
				return pdPASS;
 8004648:	2301      	movs	r3, #1
 800464a:	e063      	b.n	8004714 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004652:	f001 fef3 	bl	800643c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004656:	2300      	movs	r3, #0
 8004658:	e05c      	b.n	8004714 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800465a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004660:	f107 0314 	add.w	r3, r7, #20
 8004664:	4618      	mov	r0, r3
 8004666:	f001 f879 	bl	800575c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800466a:	2301      	movs	r3, #1
 800466c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800466e:	f001 fee5 	bl	800643c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004672:	f000 fdeb 	bl	800524c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004676:	f001 feb1 	bl	80063dc <vPortEnterCritical>
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004680:	b25b      	sxtb	r3, r3
 8004682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004686:	d103      	bne.n	8004690 <xQueueGenericSend+0x16c>
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004696:	b25b      	sxtb	r3, r3
 8004698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469c:	d103      	bne.n	80046a6 <xQueueGenericSend+0x182>
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046a6:	f001 fec9 	bl	800643c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046aa:	1d3a      	adds	r2, r7, #4
 80046ac:	f107 0314 	add.w	r3, r7, #20
 80046b0:	4611      	mov	r1, r2
 80046b2:	4618      	mov	r0, r3
 80046b4:	f001 f868 	bl	8005788 <xTaskCheckForTimeOut>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d124      	bne.n	8004708 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046c0:	f000 fb1e 	bl	8004d00 <prvIsQueueFull>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d018      	beq.n	80046fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046cc:	3310      	adds	r3, #16
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	4611      	mov	r1, r2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 ff8e 	bl	80055f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046da:	f000 faa9 	bl	8004c30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046de:	f000 fdc3 	bl	8005268 <xTaskResumeAll>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f47f af7c 	bne.w	80045e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80046ea:	4b0c      	ldr	r3, [pc, #48]	; (800471c <xQueueGenericSend+0x1f8>)
 80046ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	e772      	b.n	80045e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046fe:	f000 fa97 	bl	8004c30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004702:	f000 fdb1 	bl	8005268 <xTaskResumeAll>
 8004706:	e76c      	b.n	80045e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800470a:	f000 fa91 	bl	8004c30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800470e:	f000 fdab 	bl	8005268 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004712:	2300      	movs	r3, #0
		}
	}
}
 8004714:	4618      	mov	r0, r3
 8004716:	3738      	adds	r7, #56	; 0x38
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	e000ed04 	.word	0xe000ed04

08004720 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08e      	sub	sp, #56	; 0x38
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	627b      	str	r3, [r7, #36]	; 0x24
}
 800474a:	bf00      	nop
 800474c:	e7fe      	b.n	800474c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d103      	bne.n	800475c <xQueueGenericSendFromISR+0x3c>
 8004754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <xQueueGenericSendFromISR+0x40>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <xQueueGenericSendFromISR+0x42>
 8004760:	2300      	movs	r3, #0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10a      	bne.n	800477c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	623b      	str	r3, [r7, #32]
}
 8004778:	bf00      	nop
 800477a:	e7fe      	b.n	800477a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2b02      	cmp	r3, #2
 8004780:	d103      	bne.n	800478a <xQueueGenericSendFromISR+0x6a>
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004786:	2b01      	cmp	r3, #1
 8004788:	d101      	bne.n	800478e <xQueueGenericSendFromISR+0x6e>
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <xQueueGenericSendFromISR+0x70>
 800478e:	2300      	movs	r3, #0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10a      	bne.n	80047aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	61fb      	str	r3, [r7, #28]
}
 80047a6:	bf00      	nop
 80047a8:	e7fe      	b.n	80047a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047aa:	f001 fed9 	bl	8006560 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047ae:	f3ef 8211 	mrs	r2, BASEPRI
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	61ba      	str	r2, [r7, #24]
 80047c4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80047c6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d302      	bcc.n	80047dc <xQueueGenericSendFromISR+0xbc>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d12c      	bne.n	8004836 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ec:	f000 f990 	bl	8004b10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047f0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f8:	d112      	bne.n	8004820 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d016      	beq.n	8004830 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	3324      	adds	r3, #36	; 0x24
 8004806:	4618      	mov	r0, r3
 8004808:	f000 ff44 	bl	8005694 <xTaskRemoveFromEventList>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00e      	beq.n	8004830 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00b      	beq.n	8004830 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	e007      	b.n	8004830 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004820:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004824:	3301      	adds	r3, #1
 8004826:	b2db      	uxtb	r3, r3
 8004828:	b25a      	sxtb	r2, r3
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004830:	2301      	movs	r3, #1
 8004832:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004834:	e001      	b.n	800483a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004836:	2300      	movs	r3, #0
 8004838:	637b      	str	r3, [r7, #52]	; 0x34
 800483a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004844:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004848:	4618      	mov	r0, r3
 800484a:	3738      	adds	r7, #56	; 0x38
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08c      	sub	sp, #48	; 0x30
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800485c:	2300      	movs	r3, #0
 800485e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10a      	bne.n	8004880 <xQueueReceive+0x30>
	__asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	623b      	str	r3, [r7, #32]
}
 800487c:	bf00      	nop
 800487e:	e7fe      	b.n	800487e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d103      	bne.n	800488e <xQueueReceive+0x3e>
 8004886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <xQueueReceive+0x42>
 800488e:	2301      	movs	r3, #1
 8004890:	e000      	b.n	8004894 <xQueueReceive+0x44>
 8004892:	2300      	movs	r3, #0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <xQueueReceive+0x5e>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	61fb      	str	r3, [r7, #28]
}
 80048aa:	bf00      	nop
 80048ac:	e7fe      	b.n	80048ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048ae:	f001 f8b3 	bl	8005a18 <xTaskGetSchedulerState>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d102      	bne.n	80048be <xQueueReceive+0x6e>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <xQueueReceive+0x72>
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <xQueueReceive+0x74>
 80048c2:	2300      	movs	r3, #0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10a      	bne.n	80048de <xQueueReceive+0x8e>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	61bb      	str	r3, [r7, #24]
}
 80048da:	bf00      	nop
 80048dc:	e7fe      	b.n	80048dc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80048de:	f001 fd7d 	bl	80063dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d01f      	beq.n	800492e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048ee:	68b9      	ldr	r1, [r7, #8]
 80048f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048f2:	f000 f977 	bl	8004be4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	1e5a      	subs	r2, r3, #1
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00f      	beq.n	8004926 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	3310      	adds	r3, #16
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fec2 	bl	8005694 <xTaskRemoveFromEventList>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d007      	beq.n	8004926 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004916:	4b3d      	ldr	r3, [pc, #244]	; (8004a0c <xQueueReceive+0x1bc>)
 8004918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004926:	f001 fd89 	bl	800643c <vPortExitCritical>
				return pdPASS;
 800492a:	2301      	movs	r3, #1
 800492c:	e069      	b.n	8004a02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d103      	bne.n	800493c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004934:	f001 fd82 	bl	800643c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004938:	2300      	movs	r3, #0
 800493a:	e062      	b.n	8004a02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800493c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004942:	f107 0310 	add.w	r3, r7, #16
 8004946:	4618      	mov	r0, r3
 8004948:	f000 ff08 	bl	800575c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800494c:	2301      	movs	r3, #1
 800494e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004950:	f001 fd74 	bl	800643c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004954:	f000 fc7a 	bl	800524c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004958:	f001 fd40 	bl	80063dc <vPortEnterCritical>
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004962:	b25b      	sxtb	r3, r3
 8004964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004968:	d103      	bne.n	8004972 <xQueueReceive+0x122>
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004978:	b25b      	sxtb	r3, r3
 800497a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497e:	d103      	bne.n	8004988 <xQueueReceive+0x138>
 8004980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004988:	f001 fd58 	bl	800643c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800498c:	1d3a      	adds	r2, r7, #4
 800498e:	f107 0310 	add.w	r3, r7, #16
 8004992:	4611      	mov	r1, r2
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fef7 	bl	8005788 <xTaskCheckForTimeOut>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d123      	bne.n	80049e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049a2:	f000 f997 	bl	8004cd4 <prvIsQueueEmpty>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d017      	beq.n	80049dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	3324      	adds	r3, #36	; 0x24
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	4611      	mov	r1, r2
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 fe1d 	bl	80055f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049bc:	f000 f938 	bl	8004c30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049c0:	f000 fc52 	bl	8005268 <xTaskResumeAll>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d189      	bne.n	80048de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80049ca:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <xQueueReceive+0x1bc>)
 80049cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	e780      	b.n	80048de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80049dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049de:	f000 f927 	bl	8004c30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049e2:	f000 fc41 	bl	8005268 <xTaskResumeAll>
 80049e6:	e77a      	b.n	80048de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80049e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ea:	f000 f921 	bl	8004c30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049ee:	f000 fc3b 	bl	8005268 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049f4:	f000 f96e 	bl	8004cd4 <prvIsQueueEmpty>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f43f af6f 	beq.w	80048de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3730      	adds	r7, #48	; 0x30
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	e000ed04 	.word	0xe000ed04

08004a10 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08e      	sub	sp, #56	; 0x38
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10a      	bne.n	8004a3c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	623b      	str	r3, [r7, #32]
}
 8004a38:	bf00      	nop
 8004a3a:	e7fe      	b.n	8004a3a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d103      	bne.n	8004a4a <xQueueReceiveFromISR+0x3a>
 8004a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <xQueueReceiveFromISR+0x3e>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e000      	b.n	8004a50 <xQueueReceiveFromISR+0x40>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10a      	bne.n	8004a6a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	61fb      	str	r3, [r7, #28]
}
 8004a66:	bf00      	nop
 8004a68:	e7fe      	b.n	8004a68 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a6a:	f001 fd79 	bl	8006560 <vPortValidateInterruptPriority>
	__asm volatile
 8004a6e:	f3ef 8211 	mrs	r2, BASEPRI
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	61ba      	str	r2, [r7, #24]
 8004a84:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004a86:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d02f      	beq.n	8004af6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aa4:	f000 f89e 	bl	8004be4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	1e5a      	subs	r2, r3, #1
 8004aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004ab0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab8:	d112      	bne.n	8004ae0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d016      	beq.n	8004af0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac4:	3310      	adds	r3, #16
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fde4 	bl	8005694 <xTaskRemoveFromEventList>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00e      	beq.n	8004af0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00b      	beq.n	8004af0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	e007      	b.n	8004af0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	b25a      	sxtb	r2, r3
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004af0:	2301      	movs	r3, #1
 8004af2:	637b      	str	r3, [r7, #52]	; 0x34
 8004af4:	e001      	b.n	8004afa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	637b      	str	r3, [r7, #52]	; 0x34
 8004afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f383 8811 	msr	BASEPRI, r3
}
 8004b04:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3738      	adds	r7, #56	; 0x38
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10d      	bne.n	8004b4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d14d      	bne.n	8004bd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 ff8a 	bl	8005a54 <xTaskPriorityDisinherit>
 8004b40:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	605a      	str	r2, [r3, #4]
 8004b48:	e043      	b.n	8004bd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d119      	bne.n	8004b84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6898      	ldr	r0, [r3, #8]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	461a      	mov	r2, r3
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	f001 ff40 	bl	80069e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	441a      	add	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d32b      	bcc.n	8004bd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	609a      	str	r2, [r3, #8]
 8004b82:	e026      	b.n	8004bd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	68d8      	ldr	r0, [r3, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	68b9      	ldr	r1, [r7, #8]
 8004b90:	f001 ff26 	bl	80069e0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	425b      	negs	r3, r3
 8004b9e:	441a      	add	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d207      	bcs.n	8004bc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	425b      	negs	r3, r3
 8004bba:	441a      	add	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d105      	bne.n	8004bd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004bda:	697b      	ldr	r3, [r7, #20]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d018      	beq.n	8004c28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	441a      	add	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68da      	ldr	r2, [r3, #12]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d303      	bcc.n	8004c18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68d9      	ldr	r1, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c20:	461a      	mov	r2, r3
 8004c22:	6838      	ldr	r0, [r7, #0]
 8004c24:	f001 fedc 	bl	80069e0 <memcpy>
	}
}
 8004c28:	bf00      	nop
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c38:	f001 fbd0 	bl	80063dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c44:	e011      	b.n	8004c6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d012      	beq.n	8004c74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	3324      	adds	r3, #36	; 0x24
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fd1e 	bl	8005694 <xTaskRemoveFromEventList>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c5e:	f000 fdf5 	bl	800584c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	dce9      	bgt.n	8004c46 <prvUnlockQueue+0x16>
 8004c72:	e000      	b.n	8004c76 <prvUnlockQueue+0x46>
					break;
 8004c74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	22ff      	movs	r2, #255	; 0xff
 8004c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c7e:	f001 fbdd 	bl	800643c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c82:	f001 fbab 	bl	80063dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c8e:	e011      	b.n	8004cb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d012      	beq.n	8004cbe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3310      	adds	r3, #16
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 fcf9 	bl	8005694 <xTaskRemoveFromEventList>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d001      	beq.n	8004cac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ca8:	f000 fdd0 	bl	800584c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004cac:	7bbb      	ldrb	r3, [r7, #14]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	dce9      	bgt.n	8004c90 <prvUnlockQueue+0x60>
 8004cbc:	e000      	b.n	8004cc0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004cbe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	22ff      	movs	r2, #255	; 0xff
 8004cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004cc8:	f001 fbb8 	bl	800643c <vPortExitCritical>
}
 8004ccc:	bf00      	nop
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cdc:	f001 fb7e 	bl	80063dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d102      	bne.n	8004cee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	e001      	b.n	8004cf2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cf2:	f001 fba3 	bl	800643c <vPortExitCritical>

	return xReturn;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d08:	f001 fb68 	bl	80063dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d102      	bne.n	8004d1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	e001      	b.n	8004d22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d22:	f001 fb8b 	bl	800643c <vPortExitCritical>

	return xReturn;
 8004d26:	68fb      	ldr	r3, [r7, #12]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	e014      	b.n	8004d6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d40:	4a0e      	ldr	r2, [pc, #56]	; (8004d7c <vQueueAddToRegistry+0x4c>)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10b      	bne.n	8004d64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d4c:	490b      	ldr	r1, [pc, #44]	; (8004d7c <vQueueAddToRegistry+0x4c>)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004d56:	4a09      	ldr	r2, [pc, #36]	; (8004d7c <vQueueAddToRegistry+0x4c>)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d62:	e006      	b.n	8004d72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3301      	adds	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b07      	cmp	r3, #7
 8004d6e:	d9e7      	bls.n	8004d40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bc80      	pop	{r7}
 8004d7a:	4770      	bx	lr
 8004d7c:	200008a8 	.word	0x200008a8

08004d80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d90:	f001 fb24 	bl	80063dc <vPortEnterCritical>
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d9a:	b25b      	sxtb	r3, r3
 8004d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da0:	d103      	bne.n	8004daa <vQueueWaitForMessageRestricted+0x2a>
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004db0:	b25b      	sxtb	r3, r3
 8004db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db6:	d103      	bne.n	8004dc0 <vQueueWaitForMessageRestricted+0x40>
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dc0:	f001 fb3c 	bl	800643c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d106      	bne.n	8004dda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	3324      	adds	r3, #36	; 0x24
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	68b9      	ldr	r1, [r7, #8]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fc31 	bl	800563c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004dda:	6978      	ldr	r0, [r7, #20]
 8004ddc:	f7ff ff28 	bl	8004c30 <prvUnlockQueue>
	}
 8004de0:	bf00      	nop
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08e      	sub	sp, #56	; 0x38
 8004dec:	af04      	add	r7, sp, #16
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10a      	bne.n	8004e12 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	623b      	str	r3, [r7, #32]
}
 8004e0e:	bf00      	nop
 8004e10:	e7fe      	b.n	8004e10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10a      	bne.n	8004e2e <xTaskCreateStatic+0x46>
	__asm volatile
 8004e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	61fb      	str	r3, [r7, #28]
}
 8004e2a:	bf00      	nop
 8004e2c:	e7fe      	b.n	8004e2c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e2e:	235c      	movs	r3, #92	; 0x5c
 8004e30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	2b5c      	cmp	r3, #92	; 0x5c
 8004e36:	d00a      	beq.n	8004e4e <xTaskCreateStatic+0x66>
	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	61bb      	str	r3, [r7, #24]
}
 8004e4a:	bf00      	nop
 8004e4c:	e7fe      	b.n	8004e4c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d01e      	beq.n	8004e92 <xTaskCreateStatic+0xaa>
 8004e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d01b      	beq.n	8004e92 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e62:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	9303      	str	r3, [sp, #12]
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	9302      	str	r3, [sp, #8]
 8004e74:	f107 0314 	add.w	r3, r7, #20
 8004e78:	9301      	str	r3, [sp, #4]
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f850 	bl	8004f2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e8c:	f000 f8d4 	bl	8005038 <prvAddNewTaskToReadyList>
 8004e90:	e001      	b.n	8004e96 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e96:	697b      	ldr	r3, [r7, #20]
	}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3728      	adds	r7, #40	; 0x28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08c      	sub	sp, #48	; 0x30
 8004ea4:	af04      	add	r7, sp, #16
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	603b      	str	r3, [r7, #0]
 8004eac:	4613      	mov	r3, r2
 8004eae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eb0:	88fb      	ldrh	r3, [r7, #6]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f001 fb91 	bl	80065dc <pvPortMalloc>
 8004eba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00e      	beq.n	8004ee0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004ec2:	205c      	movs	r0, #92	; 0x5c
 8004ec4:	f001 fb8a 	bl	80065dc <pvPortMalloc>
 8004ec8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	631a      	str	r2, [r3, #48]	; 0x30
 8004ed6:	e005      	b.n	8004ee4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ed8:	6978      	ldr	r0, [r7, #20]
 8004eda:	f001 fc43 	bl	8006764 <vPortFree>
 8004ede:	e001      	b.n	8004ee4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d017      	beq.n	8004f1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ef2:	88fa      	ldrh	r2, [r7, #6]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	9303      	str	r3, [sp, #12]
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	9302      	str	r3, [sp, #8]
 8004efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efe:	9301      	str	r3, [sp, #4]
 8004f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 f80e 	bl	8004f2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f0e:	69f8      	ldr	r0, [r7, #28]
 8004f10:	f000 f892 	bl	8005038 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f14:	2301      	movs	r3, #1
 8004f16:	61bb      	str	r3, [r7, #24]
 8004f18:	e002      	b.n	8004f20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f20:	69bb      	ldr	r3, [r7, #24]
	}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b088      	sub	sp, #32
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
 8004f36:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	461a      	mov	r2, r3
 8004f42:	21a5      	movs	r1, #165	; 0xa5
 8004f44:	f001 fd5a 	bl	80069fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f52:	3b01      	subs	r3, #1
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	f023 0307 	bic.w	r3, r3, #7
 8004f60:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	617b      	str	r3, [r7, #20]
}
 8004f7e:	bf00      	nop
 8004f80:	e7fe      	b.n	8004f80 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f82:	2300      	movs	r3, #0
 8004f84:	61fb      	str	r3, [r7, #28]
 8004f86:	e012      	b.n	8004fae <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	7819      	ldrb	r1, [r3, #0]
 8004f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	4413      	add	r3, r2
 8004f96:	3334      	adds	r3, #52	; 0x34
 8004f98:	460a      	mov	r2, r1
 8004f9a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d006      	beq.n	8004fb6 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	3301      	adds	r3, #1
 8004fac:	61fb      	str	r3, [r7, #28]
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	2b0f      	cmp	r3, #15
 8004fb2:	d9e9      	bls.n	8004f88 <prvInitialiseNewTask+0x5e>
 8004fb4:	e000      	b.n	8004fb8 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004fb6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc2:	2b37      	cmp	r3, #55	; 0x37
 8004fc4:	d901      	bls.n	8004fca <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004fc6:	2337      	movs	r3, #55	; 0x37
 8004fc8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fd4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd8:	2200      	movs	r2, #0
 8004fda:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	3304      	adds	r3, #4
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7ff f8ce 	bl	8004182 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe8:	3318      	adds	r3, #24
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff f8c9 	bl	8004182 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005004:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	2200      	movs	r2, #0
 800500a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800500c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	68f9      	ldr	r1, [r7, #12]
 8005018:	69b8      	ldr	r0, [r7, #24]
 800501a:	f001 f8ef 	bl	80061fc <pxPortInitialiseStack>
 800501e:	4602      	mov	r2, r0
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800502e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005030:	bf00      	nop
 8005032:	3720      	adds	r7, #32
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005040:	f001 f9cc 	bl	80063dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005044:	4b2d      	ldr	r3, [pc, #180]	; (80050fc <prvAddNewTaskToReadyList+0xc4>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3301      	adds	r3, #1
 800504a:	4a2c      	ldr	r2, [pc, #176]	; (80050fc <prvAddNewTaskToReadyList+0xc4>)
 800504c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800504e:	4b2c      	ldr	r3, [pc, #176]	; (8005100 <prvAddNewTaskToReadyList+0xc8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d109      	bne.n	800506a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005056:	4a2a      	ldr	r2, [pc, #168]	; (8005100 <prvAddNewTaskToReadyList+0xc8>)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800505c:	4b27      	ldr	r3, [pc, #156]	; (80050fc <prvAddNewTaskToReadyList+0xc4>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d110      	bne.n	8005086 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005064:	f000 fc16 	bl	8005894 <prvInitialiseTaskLists>
 8005068:	e00d      	b.n	8005086 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800506a:	4b26      	ldr	r3, [pc, #152]	; (8005104 <prvAddNewTaskToReadyList+0xcc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005072:	4b23      	ldr	r3, [pc, #140]	; (8005100 <prvAddNewTaskToReadyList+0xc8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507c:	429a      	cmp	r2, r3
 800507e:	d802      	bhi.n	8005086 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005080:	4a1f      	ldr	r2, [pc, #124]	; (8005100 <prvAddNewTaskToReadyList+0xc8>)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005086:	4b20      	ldr	r3, [pc, #128]	; (8005108 <prvAddNewTaskToReadyList+0xd0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3301      	adds	r3, #1
 800508c:	4a1e      	ldr	r2, [pc, #120]	; (8005108 <prvAddNewTaskToReadyList+0xd0>)
 800508e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005090:	4b1d      	ldr	r3, [pc, #116]	; (8005108 <prvAddNewTaskToReadyList+0xd0>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509c:	4b1b      	ldr	r3, [pc, #108]	; (800510c <prvAddNewTaskToReadyList+0xd4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d903      	bls.n	80050ac <prvAddNewTaskToReadyList+0x74>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	4a18      	ldr	r2, [pc, #96]	; (800510c <prvAddNewTaskToReadyList+0xd4>)
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b0:	4613      	mov	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4a15      	ldr	r2, [pc, #84]	; (8005110 <prvAddNewTaskToReadyList+0xd8>)
 80050ba:	441a      	add	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3304      	adds	r3, #4
 80050c0:	4619      	mov	r1, r3
 80050c2:	4610      	mov	r0, r2
 80050c4:	f7ff f869 	bl	800419a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050c8:	f001 f9b8 	bl	800643c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050cc:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <prvAddNewTaskToReadyList+0xcc>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00e      	beq.n	80050f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050d4:	4b0a      	ldr	r3, [pc, #40]	; (8005100 <prvAddNewTaskToReadyList+0xc8>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	429a      	cmp	r2, r3
 80050e0:	d207      	bcs.n	80050f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050e2:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <prvAddNewTaskToReadyList+0xdc>)
 80050e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050f2:	bf00      	nop
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000dbc 	.word	0x20000dbc
 8005100:	200008e8 	.word	0x200008e8
 8005104:	20000dc8 	.word	0x20000dc8
 8005108:	20000dd8 	.word	0x20000dd8
 800510c:	20000dc4 	.word	0x20000dc4
 8005110:	200008ec 	.word	0x200008ec
 8005114:	e000ed04 	.word	0xe000ed04

08005118 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d017      	beq.n	800515a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800512a:	4b13      	ldr	r3, [pc, #76]	; (8005178 <vTaskDelay+0x60>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <vTaskDelay+0x30>
	__asm volatile
 8005132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	60bb      	str	r3, [r7, #8]
}
 8005144:	bf00      	nop
 8005146:	e7fe      	b.n	8005146 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005148:	f000 f880 	bl	800524c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800514c:	2100      	movs	r1, #0
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fcee 	bl	8005b30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005154:	f000 f888 	bl	8005268 <xTaskResumeAll>
 8005158:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d107      	bne.n	8005170 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005160:	4b06      	ldr	r3, [pc, #24]	; (800517c <vTaskDelay+0x64>)
 8005162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005170:	bf00      	nop
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20000de4 	.word	0x20000de4
 800517c:	e000ed04 	.word	0xe000ed04

08005180 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b08a      	sub	sp, #40	; 0x28
 8005184:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005186:	2300      	movs	r3, #0
 8005188:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800518a:	2300      	movs	r3, #0
 800518c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800518e:	463a      	mov	r2, r7
 8005190:	1d39      	adds	r1, r7, #4
 8005192:	f107 0308 	add.w	r3, r7, #8
 8005196:	4618      	mov	r0, r3
 8005198:	f7fe ffa2 	bl	80040e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800519c:	6839      	ldr	r1, [r7, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	9202      	str	r2, [sp, #8]
 80051a4:	9301      	str	r3, [sp, #4]
 80051a6:	2300      	movs	r3, #0
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	2300      	movs	r3, #0
 80051ac:	460a      	mov	r2, r1
 80051ae:	4921      	ldr	r1, [pc, #132]	; (8005234 <vTaskStartScheduler+0xb4>)
 80051b0:	4821      	ldr	r0, [pc, #132]	; (8005238 <vTaskStartScheduler+0xb8>)
 80051b2:	f7ff fe19 	bl	8004de8 <xTaskCreateStatic>
 80051b6:	4603      	mov	r3, r0
 80051b8:	4a20      	ldr	r2, [pc, #128]	; (800523c <vTaskStartScheduler+0xbc>)
 80051ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051bc:	4b1f      	ldr	r3, [pc, #124]	; (800523c <vTaskStartScheduler+0xbc>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80051c4:	2301      	movs	r3, #1
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	e001      	b.n	80051ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d102      	bne.n	80051da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80051d4:	f000 fd00 	bl	8005bd8 <xTimerCreateTimerTask>
 80051d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d116      	bne.n	800520e <vTaskStartScheduler+0x8e>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	613b      	str	r3, [r7, #16]
}
 80051f2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051f4:	4b12      	ldr	r3, [pc, #72]	; (8005240 <vTaskStartScheduler+0xc0>)
 80051f6:	f04f 32ff 	mov.w	r2, #4294967295
 80051fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051fc:	4b11      	ldr	r3, [pc, #68]	; (8005244 <vTaskStartScheduler+0xc4>)
 80051fe:	2201      	movs	r2, #1
 8005200:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005202:	4b11      	ldr	r3, [pc, #68]	; (8005248 <vTaskStartScheduler+0xc8>)
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005208:	f001 f876 	bl	80062f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800520c:	e00e      	b.n	800522c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005214:	d10a      	bne.n	800522c <vTaskStartScheduler+0xac>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	60fb      	str	r3, [r7, #12]
}
 8005228:	bf00      	nop
 800522a:	e7fe      	b.n	800522a <vTaskStartScheduler+0xaa>
}
 800522c:	bf00      	nop
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	080073b4 	.word	0x080073b4
 8005238:	08005865 	.word	0x08005865
 800523c:	20000de0 	.word	0x20000de0
 8005240:	20000ddc 	.word	0x20000ddc
 8005244:	20000dc8 	.word	0x20000dc8
 8005248:	20000dc0 	.word	0x20000dc0

0800524c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005250:	4b04      	ldr	r3, [pc, #16]	; (8005264 <vTaskSuspendAll+0x18>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3301      	adds	r3, #1
 8005256:	4a03      	ldr	r2, [pc, #12]	; (8005264 <vTaskSuspendAll+0x18>)
 8005258:	6013      	str	r3, [r2, #0]
}
 800525a:	bf00      	nop
 800525c:	46bd      	mov	sp, r7
 800525e:	bc80      	pop	{r7}
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	20000de4 	.word	0x20000de4

08005268 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005272:	2300      	movs	r3, #0
 8005274:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005276:	4b42      	ldr	r3, [pc, #264]	; (8005380 <xTaskResumeAll+0x118>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10a      	bne.n	8005294 <xTaskResumeAll+0x2c>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	603b      	str	r3, [r7, #0]
}
 8005290:	bf00      	nop
 8005292:	e7fe      	b.n	8005292 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005294:	f001 f8a2 	bl	80063dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005298:	4b39      	ldr	r3, [pc, #228]	; (8005380 <xTaskResumeAll+0x118>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3b01      	subs	r3, #1
 800529e:	4a38      	ldr	r2, [pc, #224]	; (8005380 <xTaskResumeAll+0x118>)
 80052a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052a2:	4b37      	ldr	r3, [pc, #220]	; (8005380 <xTaskResumeAll+0x118>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d162      	bne.n	8005370 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052aa:	4b36      	ldr	r3, [pc, #216]	; (8005384 <xTaskResumeAll+0x11c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d05e      	beq.n	8005370 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052b2:	e02f      	b.n	8005314 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80052b4:	4b34      	ldr	r3, [pc, #208]	; (8005388 <xTaskResumeAll+0x120>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	3318      	adds	r3, #24
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fe ffc5 	bl	8004250 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	3304      	adds	r3, #4
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fe ffc0 	bl	8004250 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d4:	4b2d      	ldr	r3, [pc, #180]	; (800538c <xTaskResumeAll+0x124>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d903      	bls.n	80052e4 <xTaskResumeAll+0x7c>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	4a2a      	ldr	r2, [pc, #168]	; (800538c <xTaskResumeAll+0x124>)
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e8:	4613      	mov	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4a27      	ldr	r2, [pc, #156]	; (8005390 <xTaskResumeAll+0x128>)
 80052f2:	441a      	add	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3304      	adds	r3, #4
 80052f8:	4619      	mov	r1, r3
 80052fa:	4610      	mov	r0, r2
 80052fc:	f7fe ff4d 	bl	800419a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005304:	4b23      	ldr	r3, [pc, #140]	; (8005394 <xTaskResumeAll+0x12c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530a:	429a      	cmp	r2, r3
 800530c:	d302      	bcc.n	8005314 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800530e:	4b22      	ldr	r3, [pc, #136]	; (8005398 <xTaskResumeAll+0x130>)
 8005310:	2201      	movs	r2, #1
 8005312:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005314:	4b1c      	ldr	r3, [pc, #112]	; (8005388 <xTaskResumeAll+0x120>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1cb      	bne.n	80052b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005322:	f000 fb55 	bl	80059d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005326:	4b1d      	ldr	r3, [pc, #116]	; (800539c <xTaskResumeAll+0x134>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d010      	beq.n	8005354 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005332:	f000 f845 	bl	80053c0 <xTaskIncrementTick>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800533c:	4b16      	ldr	r3, [pc, #88]	; (8005398 <xTaskResumeAll+0x130>)
 800533e:	2201      	movs	r2, #1
 8005340:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	3b01      	subs	r3, #1
 8005346:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1f1      	bne.n	8005332 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800534e:	4b13      	ldr	r3, [pc, #76]	; (800539c <xTaskResumeAll+0x134>)
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005354:	4b10      	ldr	r3, [pc, #64]	; (8005398 <xTaskResumeAll+0x130>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d009      	beq.n	8005370 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800535c:	2301      	movs	r3, #1
 800535e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005360:	4b0f      	ldr	r3, [pc, #60]	; (80053a0 <xTaskResumeAll+0x138>)
 8005362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005370:	f001 f864 	bl	800643c <vPortExitCritical>

	return xAlreadyYielded;
 8005374:	68bb      	ldr	r3, [r7, #8]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	20000de4 	.word	0x20000de4
 8005384:	20000dbc 	.word	0x20000dbc
 8005388:	20000d7c 	.word	0x20000d7c
 800538c:	20000dc4 	.word	0x20000dc4
 8005390:	200008ec 	.word	0x200008ec
 8005394:	200008e8 	.word	0x200008e8
 8005398:	20000dd0 	.word	0x20000dd0
 800539c:	20000dcc 	.word	0x20000dcc
 80053a0:	e000ed04 	.word	0xe000ed04

080053a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80053aa:	4b04      	ldr	r3, [pc, #16]	; (80053bc <xTaskGetTickCount+0x18>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80053b0:	687b      	ldr	r3, [r7, #4]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr
 80053bc:	20000dc0 	.word	0x20000dc0

080053c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053ca:	4b51      	ldr	r3, [pc, #324]	; (8005510 <xTaskIncrementTick+0x150>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f040 808e 	bne.w	80054f0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053d4:	4b4f      	ldr	r3, [pc, #316]	; (8005514 <xTaskIncrementTick+0x154>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3301      	adds	r3, #1
 80053da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053dc:	4a4d      	ldr	r2, [pc, #308]	; (8005514 <xTaskIncrementTick+0x154>)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d120      	bne.n	800542a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80053e8:	4b4b      	ldr	r3, [pc, #300]	; (8005518 <xTaskIncrementTick+0x158>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <xTaskIncrementTick+0x48>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	603b      	str	r3, [r7, #0]
}
 8005404:	bf00      	nop
 8005406:	e7fe      	b.n	8005406 <xTaskIncrementTick+0x46>
 8005408:	4b43      	ldr	r3, [pc, #268]	; (8005518 <xTaskIncrementTick+0x158>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	4b43      	ldr	r3, [pc, #268]	; (800551c <xTaskIncrementTick+0x15c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a41      	ldr	r2, [pc, #260]	; (8005518 <xTaskIncrementTick+0x158>)
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	4a41      	ldr	r2, [pc, #260]	; (800551c <xTaskIncrementTick+0x15c>)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	4b40      	ldr	r3, [pc, #256]	; (8005520 <xTaskIncrementTick+0x160>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3301      	adds	r3, #1
 8005422:	4a3f      	ldr	r2, [pc, #252]	; (8005520 <xTaskIncrementTick+0x160>)
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	f000 fad3 	bl	80059d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800542a:	4b3e      	ldr	r3, [pc, #248]	; (8005524 <xTaskIncrementTick+0x164>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	429a      	cmp	r2, r3
 8005432:	d34e      	bcc.n	80054d2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005434:	4b38      	ldr	r3, [pc, #224]	; (8005518 <xTaskIncrementTick+0x158>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <xTaskIncrementTick+0x82>
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <xTaskIncrementTick+0x84>
 8005442:	2300      	movs	r3, #0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d004      	beq.n	8005452 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005448:	4b36      	ldr	r3, [pc, #216]	; (8005524 <xTaskIncrementTick+0x164>)
 800544a:	f04f 32ff 	mov.w	r2, #4294967295
 800544e:	601a      	str	r2, [r3, #0]
					break;
 8005450:	e03f      	b.n	80054d2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005452:	4b31      	ldr	r3, [pc, #196]	; (8005518 <xTaskIncrementTick+0x158>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	429a      	cmp	r2, r3
 8005468:	d203      	bcs.n	8005472 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800546a:	4a2e      	ldr	r2, [pc, #184]	; (8005524 <xTaskIncrementTick+0x164>)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6013      	str	r3, [r2, #0]
						break;
 8005470:	e02f      	b.n	80054d2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	3304      	adds	r3, #4
 8005476:	4618      	mov	r0, r3
 8005478:	f7fe feea 	bl	8004250 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	2b00      	cmp	r3, #0
 8005482:	d004      	beq.n	800548e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	3318      	adds	r3, #24
 8005488:	4618      	mov	r0, r3
 800548a:	f7fe fee1 	bl	8004250 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005492:	4b25      	ldr	r3, [pc, #148]	; (8005528 <xTaskIncrementTick+0x168>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d903      	bls.n	80054a2 <xTaskIncrementTick+0xe2>
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549e:	4a22      	ldr	r2, [pc, #136]	; (8005528 <xTaskIncrementTick+0x168>)
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4a1f      	ldr	r2, [pc, #124]	; (800552c <xTaskIncrementTick+0x16c>)
 80054b0:	441a      	add	r2, r3
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	3304      	adds	r3, #4
 80054b6:	4619      	mov	r1, r3
 80054b8:	4610      	mov	r0, r2
 80054ba:	f7fe fe6e 	bl	800419a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c2:	4b1b      	ldr	r3, [pc, #108]	; (8005530 <xTaskIncrementTick+0x170>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d3b3      	bcc.n	8005434 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80054cc:	2301      	movs	r3, #1
 80054ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054d0:	e7b0      	b.n	8005434 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054d2:	4b17      	ldr	r3, [pc, #92]	; (8005530 <xTaskIncrementTick+0x170>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d8:	4914      	ldr	r1, [pc, #80]	; (800552c <xTaskIncrementTick+0x16c>)
 80054da:	4613      	mov	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	440b      	add	r3, r1
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d907      	bls.n	80054fa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80054ea:	2301      	movs	r3, #1
 80054ec:	617b      	str	r3, [r7, #20]
 80054ee:	e004      	b.n	80054fa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80054f0:	4b10      	ldr	r3, [pc, #64]	; (8005534 <xTaskIncrementTick+0x174>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3301      	adds	r3, #1
 80054f6:	4a0f      	ldr	r2, [pc, #60]	; (8005534 <xTaskIncrementTick+0x174>)
 80054f8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80054fa:	4b0f      	ldr	r3, [pc, #60]	; (8005538 <xTaskIncrementTick+0x178>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005502:	2301      	movs	r3, #1
 8005504:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005506:	697b      	ldr	r3, [r7, #20]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	20000de4 	.word	0x20000de4
 8005514:	20000dc0 	.word	0x20000dc0
 8005518:	20000d74 	.word	0x20000d74
 800551c:	20000d78 	.word	0x20000d78
 8005520:	20000dd4 	.word	0x20000dd4
 8005524:	20000ddc 	.word	0x20000ddc
 8005528:	20000dc4 	.word	0x20000dc4
 800552c:	200008ec 	.word	0x200008ec
 8005530:	200008e8 	.word	0x200008e8
 8005534:	20000dcc 	.word	0x20000dcc
 8005538:	20000dd0 	.word	0x20000dd0

0800553c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005542:	4b27      	ldr	r3, [pc, #156]	; (80055e0 <vTaskSwitchContext+0xa4>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800554a:	4b26      	ldr	r3, [pc, #152]	; (80055e4 <vTaskSwitchContext+0xa8>)
 800554c:	2201      	movs	r2, #1
 800554e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005550:	e041      	b.n	80055d6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005552:	4b24      	ldr	r3, [pc, #144]	; (80055e4 <vTaskSwitchContext+0xa8>)
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005558:	4b23      	ldr	r3, [pc, #140]	; (80055e8 <vTaskSwitchContext+0xac>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	e010      	b.n	8005582 <vTaskSwitchContext+0x46>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10a      	bne.n	800557c <vTaskSwitchContext+0x40>
	__asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	607b      	str	r3, [r7, #4]
}
 8005578:	bf00      	nop
 800557a:	e7fe      	b.n	800557a <vTaskSwitchContext+0x3e>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3b01      	subs	r3, #1
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	491a      	ldr	r1, [pc, #104]	; (80055ec <vTaskSwitchContext+0xb0>)
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4613      	mov	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	440b      	add	r3, r1
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0e4      	beq.n	8005560 <vTaskSwitchContext+0x24>
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4a12      	ldr	r2, [pc, #72]	; (80055ec <vTaskSwitchContext+0xb0>)
 80055a2:	4413      	add	r3, r2
 80055a4:	60bb      	str	r3, [r7, #8]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	605a      	str	r2, [r3, #4]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	3308      	adds	r3, #8
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d104      	bne.n	80055c6 <vTaskSwitchContext+0x8a>
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	605a      	str	r2, [r3, #4]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	4a08      	ldr	r2, [pc, #32]	; (80055f0 <vTaskSwitchContext+0xb4>)
 80055ce:	6013      	str	r3, [r2, #0]
 80055d0:	4a05      	ldr	r2, [pc, #20]	; (80055e8 <vTaskSwitchContext+0xac>)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6013      	str	r3, [r2, #0]
}
 80055d6:	bf00      	nop
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr
 80055e0:	20000de4 	.word	0x20000de4
 80055e4:	20000dd0 	.word	0x20000dd0
 80055e8:	20000dc4 	.word	0x20000dc4
 80055ec:	200008ec 	.word	0x200008ec
 80055f0:	200008e8 	.word	0x200008e8

080055f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	60fb      	str	r3, [r7, #12]
}
 8005616:	bf00      	nop
 8005618:	e7fe      	b.n	8005618 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800561a:	4b07      	ldr	r3, [pc, #28]	; (8005638 <vTaskPlaceOnEventList+0x44>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3318      	adds	r3, #24
 8005620:	4619      	mov	r1, r3
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7fe fddc 	bl	80041e0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005628:	2101      	movs	r1, #1
 800562a:	6838      	ldr	r0, [r7, #0]
 800562c:	f000 fa80 	bl	8005b30 <prvAddCurrentTaskToDelayedList>
}
 8005630:	bf00      	nop
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	200008e8 	.word	0x200008e8

0800563c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10a      	bne.n	8005664 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	617b      	str	r3, [r7, #20]
}
 8005660:	bf00      	nop
 8005662:	e7fe      	b.n	8005662 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005664:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <vTaskPlaceOnEventListRestricted+0x54>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3318      	adds	r3, #24
 800566a:	4619      	mov	r1, r3
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7fe fd94 	bl	800419a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005678:	f04f 33ff 	mov.w	r3, #4294967295
 800567c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	68b8      	ldr	r0, [r7, #8]
 8005682:	f000 fa55 	bl	8005b30 <prvAddCurrentTaskToDelayedList>
	}
 8005686:	bf00      	nop
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	200008e8 	.word	0x200008e8

08005694 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	60fb      	str	r3, [r7, #12]
}
 80056bc:	bf00      	nop
 80056be:	e7fe      	b.n	80056be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	3318      	adds	r3, #24
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fe fdc3 	bl	8004250 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ca:	4b1e      	ldr	r3, [pc, #120]	; (8005744 <xTaskRemoveFromEventList+0xb0>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d11d      	bne.n	800570e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	3304      	adds	r3, #4
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fe fdba 	bl	8004250 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e0:	4b19      	ldr	r3, [pc, #100]	; (8005748 <xTaskRemoveFromEventList+0xb4>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d903      	bls.n	80056f0 <xTaskRemoveFromEventList+0x5c>
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ec:	4a16      	ldr	r2, [pc, #88]	; (8005748 <xTaskRemoveFromEventList+0xb4>)
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4a13      	ldr	r2, [pc, #76]	; (800574c <xTaskRemoveFromEventList+0xb8>)
 80056fe:	441a      	add	r2, r3
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	3304      	adds	r3, #4
 8005704:	4619      	mov	r1, r3
 8005706:	4610      	mov	r0, r2
 8005708:	f7fe fd47 	bl	800419a <vListInsertEnd>
 800570c:	e005      	b.n	800571a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	3318      	adds	r3, #24
 8005712:	4619      	mov	r1, r3
 8005714:	480e      	ldr	r0, [pc, #56]	; (8005750 <xTaskRemoveFromEventList+0xbc>)
 8005716:	f7fe fd40 	bl	800419a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571e:	4b0d      	ldr	r3, [pc, #52]	; (8005754 <xTaskRemoveFromEventList+0xc0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005724:	429a      	cmp	r2, r3
 8005726:	d905      	bls.n	8005734 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005728:	2301      	movs	r3, #1
 800572a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800572c:	4b0a      	ldr	r3, [pc, #40]	; (8005758 <xTaskRemoveFromEventList+0xc4>)
 800572e:	2201      	movs	r2, #1
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	e001      	b.n	8005738 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005734:	2300      	movs	r3, #0
 8005736:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005738:	697b      	ldr	r3, [r7, #20]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000de4 	.word	0x20000de4
 8005748:	20000dc4 	.word	0x20000dc4
 800574c:	200008ec 	.word	0x200008ec
 8005750:	20000d7c 	.word	0x20000d7c
 8005754:	200008e8 	.word	0x200008e8
 8005758:	20000dd0 	.word	0x20000dd0

0800575c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005764:	4b06      	ldr	r3, [pc, #24]	; (8005780 <vTaskInternalSetTimeOutState+0x24>)
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800576c:	4b05      	ldr	r3, [pc, #20]	; (8005784 <vTaskInternalSetTimeOutState+0x28>)
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	605a      	str	r2, [r3, #4]
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	bc80      	pop	{r7}
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	20000dd4 	.word	0x20000dd4
 8005784:	20000dc0 	.word	0x20000dc0

08005788 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10a      	bne.n	80057ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	613b      	str	r3, [r7, #16]
}
 80057aa:	bf00      	nop
 80057ac:	e7fe      	b.n	80057ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10a      	bne.n	80057ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	60fb      	str	r3, [r7, #12]
}
 80057c6:	bf00      	nop
 80057c8:	e7fe      	b.n	80057c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80057ca:	f000 fe07 	bl	80063dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80057ce:	4b1d      	ldr	r3, [pc, #116]	; (8005844 <xTaskCheckForTimeOut+0xbc>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e6:	d102      	bne.n	80057ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80057e8:	2300      	movs	r3, #0
 80057ea:	61fb      	str	r3, [r7, #28]
 80057ec:	e023      	b.n	8005836 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4b15      	ldr	r3, [pc, #84]	; (8005848 <xTaskCheckForTimeOut+0xc0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d007      	beq.n	800580a <xTaskCheckForTimeOut+0x82>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	429a      	cmp	r2, r3
 8005802:	d302      	bcc.n	800580a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005804:	2301      	movs	r3, #1
 8005806:	61fb      	str	r3, [r7, #28]
 8005808:	e015      	b.n	8005836 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	429a      	cmp	r2, r3
 8005812:	d20b      	bcs.n	800582c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	1ad2      	subs	r2, r2, r3
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff ff9b 	bl	800575c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005826:	2300      	movs	r3, #0
 8005828:	61fb      	str	r3, [r7, #28]
 800582a:	e004      	b.n	8005836 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005832:	2301      	movs	r3, #1
 8005834:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005836:	f000 fe01 	bl	800643c <vPortExitCritical>

	return xReturn;
 800583a:	69fb      	ldr	r3, [r7, #28]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3720      	adds	r7, #32
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	20000dc0 	.word	0x20000dc0
 8005848:	20000dd4 	.word	0x20000dd4

0800584c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005850:	4b03      	ldr	r3, [pc, #12]	; (8005860 <vTaskMissedYield+0x14>)
 8005852:	2201      	movs	r2, #1
 8005854:	601a      	str	r2, [r3, #0]
}
 8005856:	bf00      	nop
 8005858:	46bd      	mov	sp, r7
 800585a:	bc80      	pop	{r7}
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	20000dd0 	.word	0x20000dd0

08005864 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800586c:	f000 f852 	bl	8005914 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005870:	4b06      	ldr	r3, [pc, #24]	; (800588c <prvIdleTask+0x28>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d9f9      	bls.n	800586c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005878:	4b05      	ldr	r3, [pc, #20]	; (8005890 <prvIdleTask+0x2c>)
 800587a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005888:	e7f0      	b.n	800586c <prvIdleTask+0x8>
 800588a:	bf00      	nop
 800588c:	200008ec 	.word	0x200008ec
 8005890:	e000ed04 	.word	0xe000ed04

08005894 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800589a:	2300      	movs	r3, #0
 800589c:	607b      	str	r3, [r7, #4]
 800589e:	e00c      	b.n	80058ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4a12      	ldr	r2, [pc, #72]	; (80058f4 <prvInitialiseTaskLists+0x60>)
 80058ac:	4413      	add	r3, r2
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fe fc48 	bl	8004144 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3301      	adds	r3, #1
 80058b8:	607b      	str	r3, [r7, #4]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b37      	cmp	r3, #55	; 0x37
 80058be:	d9ef      	bls.n	80058a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058c0:	480d      	ldr	r0, [pc, #52]	; (80058f8 <prvInitialiseTaskLists+0x64>)
 80058c2:	f7fe fc3f 	bl	8004144 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058c6:	480d      	ldr	r0, [pc, #52]	; (80058fc <prvInitialiseTaskLists+0x68>)
 80058c8:	f7fe fc3c 	bl	8004144 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058cc:	480c      	ldr	r0, [pc, #48]	; (8005900 <prvInitialiseTaskLists+0x6c>)
 80058ce:	f7fe fc39 	bl	8004144 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058d2:	480c      	ldr	r0, [pc, #48]	; (8005904 <prvInitialiseTaskLists+0x70>)
 80058d4:	f7fe fc36 	bl	8004144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058d8:	480b      	ldr	r0, [pc, #44]	; (8005908 <prvInitialiseTaskLists+0x74>)
 80058da:	f7fe fc33 	bl	8004144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058de:	4b0b      	ldr	r3, [pc, #44]	; (800590c <prvInitialiseTaskLists+0x78>)
 80058e0:	4a05      	ldr	r2, [pc, #20]	; (80058f8 <prvInitialiseTaskLists+0x64>)
 80058e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058e4:	4b0a      	ldr	r3, [pc, #40]	; (8005910 <prvInitialiseTaskLists+0x7c>)
 80058e6:	4a05      	ldr	r2, [pc, #20]	; (80058fc <prvInitialiseTaskLists+0x68>)
 80058e8:	601a      	str	r2, [r3, #0]
}
 80058ea:	bf00      	nop
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	200008ec 	.word	0x200008ec
 80058f8:	20000d4c 	.word	0x20000d4c
 80058fc:	20000d60 	.word	0x20000d60
 8005900:	20000d7c 	.word	0x20000d7c
 8005904:	20000d90 	.word	0x20000d90
 8005908:	20000da8 	.word	0x20000da8
 800590c:	20000d74 	.word	0x20000d74
 8005910:	20000d78 	.word	0x20000d78

08005914 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800591a:	e019      	b.n	8005950 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800591c:	f000 fd5e 	bl	80063dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005920:	4b10      	ldr	r3, [pc, #64]	; (8005964 <prvCheckTasksWaitingTermination+0x50>)
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3304      	adds	r3, #4
 800592c:	4618      	mov	r0, r3
 800592e:	f7fe fc8f 	bl	8004250 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005932:	4b0d      	ldr	r3, [pc, #52]	; (8005968 <prvCheckTasksWaitingTermination+0x54>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3b01      	subs	r3, #1
 8005938:	4a0b      	ldr	r2, [pc, #44]	; (8005968 <prvCheckTasksWaitingTermination+0x54>)
 800593a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800593c:	4b0b      	ldr	r3, [pc, #44]	; (800596c <prvCheckTasksWaitingTermination+0x58>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3b01      	subs	r3, #1
 8005942:	4a0a      	ldr	r2, [pc, #40]	; (800596c <prvCheckTasksWaitingTermination+0x58>)
 8005944:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005946:	f000 fd79 	bl	800643c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f810 	bl	8005970 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005950:	4b06      	ldr	r3, [pc, #24]	; (800596c <prvCheckTasksWaitingTermination+0x58>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1e1      	bne.n	800591c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005958:	bf00      	nop
 800595a:	bf00      	nop
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	20000d90 	.word	0x20000d90
 8005968:	20000dbc 	.word	0x20000dbc
 800596c:	20000da4 	.word	0x20000da4

08005970 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800597e:	2b00      	cmp	r3, #0
 8005980:	d108      	bne.n	8005994 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005986:	4618      	mov	r0, r3
 8005988:	f000 feec 	bl	8006764 <vPortFree>
				vPortFree( pxTCB );
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fee9 	bl	8006764 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005992:	e018      	b.n	80059c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800599a:	2b01      	cmp	r3, #1
 800599c:	d103      	bne.n	80059a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fee0 	bl	8006764 <vPortFree>
	}
 80059a4:	e00f      	b.n	80059c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d00a      	beq.n	80059c6 <prvDeleteTCB+0x56>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	60fb      	str	r3, [r7, #12]
}
 80059c2:	bf00      	nop
 80059c4:	e7fe      	b.n	80059c4 <prvDeleteTCB+0x54>
	}
 80059c6:	bf00      	nop
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059d6:	4b0e      	ldr	r3, [pc, #56]	; (8005a10 <prvResetNextTaskUnblockTime+0x40>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <prvResetNextTaskUnblockTime+0x14>
 80059e0:	2301      	movs	r3, #1
 80059e2:	e000      	b.n	80059e6 <prvResetNextTaskUnblockTime+0x16>
 80059e4:	2300      	movs	r3, #0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d004      	beq.n	80059f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80059ea:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <prvResetNextTaskUnblockTime+0x44>)
 80059ec:	f04f 32ff 	mov.w	r2, #4294967295
 80059f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80059f2:	e008      	b.n	8005a06 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80059f4:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <prvResetNextTaskUnblockTime+0x40>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	4a04      	ldr	r2, [pc, #16]	; (8005a14 <prvResetNextTaskUnblockTime+0x44>)
 8005a04:	6013      	str	r3, [r2, #0]
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bc80      	pop	{r7}
 8005a0e:	4770      	bx	lr
 8005a10:	20000d74 	.word	0x20000d74
 8005a14:	20000ddc 	.word	0x20000ddc

08005a18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a1e:	4b0b      	ldr	r3, [pc, #44]	; (8005a4c <xTaskGetSchedulerState+0x34>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d102      	bne.n	8005a2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a26:	2301      	movs	r3, #1
 8005a28:	607b      	str	r3, [r7, #4]
 8005a2a:	e008      	b.n	8005a3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a2c:	4b08      	ldr	r3, [pc, #32]	; (8005a50 <xTaskGetSchedulerState+0x38>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d102      	bne.n	8005a3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a34:	2302      	movs	r3, #2
 8005a36:	607b      	str	r3, [r7, #4]
 8005a38:	e001      	b.n	8005a3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a3e:	687b      	ldr	r3, [r7, #4]
	}
 8005a40:	4618      	mov	r0, r3
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bc80      	pop	{r7}
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	20000dc8 	.word	0x20000dc8
 8005a50:	20000de4 	.word	0x20000de4

08005a54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a60:	2300      	movs	r3, #0
 8005a62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d056      	beq.n	8005b18 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a6a:	4b2e      	ldr	r3, [pc, #184]	; (8005b24 <xTaskPriorityDisinherit+0xd0>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d00a      	beq.n	8005a8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	60fb      	str	r3, [r7, #12]
}
 8005a86:	bf00      	nop
 8005a88:	e7fe      	b.n	8005a88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10a      	bne.n	8005aa8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	60bb      	str	r3, [r7, #8]
}
 8005aa4:	bf00      	nop
 8005aa6:	e7fe      	b.n	8005aa6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aac:	1e5a      	subs	r2, r3, #1
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d02c      	beq.n	8005b18 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d128      	bne.n	8005b18 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fe fbc0 	bl	8004250 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005adc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae8:	4b0f      	ldr	r3, [pc, #60]	; (8005b28 <xTaskPriorityDisinherit+0xd4>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d903      	bls.n	8005af8 <xTaskPriorityDisinherit+0xa4>
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	4a0c      	ldr	r2, [pc, #48]	; (8005b28 <xTaskPriorityDisinherit+0xd4>)
 8005af6:	6013      	str	r3, [r2, #0]
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afc:	4613      	mov	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4a09      	ldr	r2, [pc, #36]	; (8005b2c <xTaskPriorityDisinherit+0xd8>)
 8005b06:	441a      	add	r2, r3
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f7fe fb43 	bl	800419a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b14:	2301      	movs	r3, #1
 8005b16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b18:	697b      	ldr	r3, [r7, #20]
	}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	200008e8 	.word	0x200008e8
 8005b28:	20000dc4 	.word	0x20000dc4
 8005b2c:	200008ec 	.word	0x200008ec

08005b30 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b3a:	4b21      	ldr	r3, [pc, #132]	; (8005bc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b40:	4b20      	ldr	r3, [pc, #128]	; (8005bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3304      	adds	r3, #4
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fe fb82 	bl	8004250 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b52:	d10a      	bne.n	8005b6a <prvAddCurrentTaskToDelayedList+0x3a>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b5a:	4b1a      	ldr	r3, [pc, #104]	; (8005bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3304      	adds	r3, #4
 8005b60:	4619      	mov	r1, r3
 8005b62:	4819      	ldr	r0, [pc, #100]	; (8005bc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b64:	f7fe fb19 	bl	800419a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b68:	e026      	b.n	8005bb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4413      	add	r3, r2
 8005b70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b72:	4b14      	ldr	r3, [pc, #80]	; (8005bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d209      	bcs.n	8005b96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b82:	4b12      	ldr	r3, [pc, #72]	; (8005bcc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	4b0f      	ldr	r3, [pc, #60]	; (8005bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4610      	mov	r0, r2
 8005b90:	f7fe fb26 	bl	80041e0 <vListInsert>
}
 8005b94:	e010      	b.n	8005bb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b96:	4b0e      	ldr	r3, [pc, #56]	; (8005bd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	4610      	mov	r0, r2
 8005ba4:	f7fe fb1c 	bl	80041e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ba8:	4b0a      	ldr	r3, [pc, #40]	; (8005bd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d202      	bcs.n	8005bb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005bb2:	4a08      	ldr	r2, [pc, #32]	; (8005bd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	6013      	str	r3, [r2, #0]
}
 8005bb8:	bf00      	nop
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	20000dc0 	.word	0x20000dc0
 8005bc4:	200008e8 	.word	0x200008e8
 8005bc8:	20000da8 	.word	0x20000da8
 8005bcc:	20000d78 	.word	0x20000d78
 8005bd0:	20000d74 	.word	0x20000d74
 8005bd4:	20000ddc 	.word	0x20000ddc

08005bd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b08a      	sub	sp, #40	; 0x28
 8005bdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005bde:	2300      	movs	r3, #0
 8005be0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005be2:	f000 facb 	bl	800617c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005be6:	4b1c      	ldr	r3, [pc, #112]	; (8005c58 <xTimerCreateTimerTask+0x80>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d021      	beq.n	8005c32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005bf6:	1d3a      	adds	r2, r7, #4
 8005bf8:	f107 0108 	add.w	r1, r7, #8
 8005bfc:	f107 030c 	add.w	r3, r7, #12
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7fe fa85 	bl	8004110 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	9202      	str	r2, [sp, #8]
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	2302      	movs	r3, #2
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	2300      	movs	r3, #0
 8005c16:	460a      	mov	r2, r1
 8005c18:	4910      	ldr	r1, [pc, #64]	; (8005c5c <xTimerCreateTimerTask+0x84>)
 8005c1a:	4811      	ldr	r0, [pc, #68]	; (8005c60 <xTimerCreateTimerTask+0x88>)
 8005c1c:	f7ff f8e4 	bl	8004de8 <xTaskCreateStatic>
 8005c20:	4603      	mov	r3, r0
 8005c22:	4a10      	ldr	r2, [pc, #64]	; (8005c64 <xTimerCreateTimerTask+0x8c>)
 8005c24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c26:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <xTimerCreateTimerTask+0x8c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10a      	bne.n	8005c4e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	613b      	str	r3, [r7, #16]
}
 8005c4a:	bf00      	nop
 8005c4c:	e7fe      	b.n	8005c4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005c4e:	697b      	ldr	r3, [r7, #20]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	20000e18 	.word	0x20000e18
 8005c5c:	080073bc 	.word	0x080073bc
 8005c60:	08005d85 	.word	0x08005d85
 8005c64:	20000e1c 	.word	0x20000e1c

08005c68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08a      	sub	sp, #40	; 0x28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c76:	2300      	movs	r3, #0
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10a      	bne.n	8005c96 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	623b      	str	r3, [r7, #32]
}
 8005c92:	bf00      	nop
 8005c94:	e7fe      	b.n	8005c94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c96:	4b1a      	ldr	r3, [pc, #104]	; (8005d00 <xTimerGenericCommand+0x98>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d02a      	beq.n	8005cf4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b05      	cmp	r3, #5
 8005cae:	dc18      	bgt.n	8005ce2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005cb0:	f7ff feb2 	bl	8005a18 <xTaskGetSchedulerState>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d109      	bne.n	8005cce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005cba:	4b11      	ldr	r3, [pc, #68]	; (8005d00 <xTimerGenericCommand+0x98>)
 8005cbc:	6818      	ldr	r0, [r3, #0]
 8005cbe:	f107 0110 	add.w	r1, r7, #16
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cc6:	f7fe fc2d 	bl	8004524 <xQueueGenericSend>
 8005cca:	6278      	str	r0, [r7, #36]	; 0x24
 8005ccc:	e012      	b.n	8005cf4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005cce:	4b0c      	ldr	r3, [pc, #48]	; (8005d00 <xTimerGenericCommand+0x98>)
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	f107 0110 	add.w	r1, r7, #16
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f7fe fc23 	bl	8004524 <xQueueGenericSend>
 8005cde:	6278      	str	r0, [r7, #36]	; 0x24
 8005ce0:	e008      	b.n	8005cf4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ce2:	4b07      	ldr	r3, [pc, #28]	; (8005d00 <xTimerGenericCommand+0x98>)
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	f107 0110 	add.w	r1, r7, #16
 8005cea:	2300      	movs	r3, #0
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	f7fe fd17 	bl	8004720 <xQueueGenericSendFromISR>
 8005cf2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3728      	adds	r7, #40	; 0x28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	20000e18 	.word	0x20000e18

08005d04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af02      	add	r7, sp, #8
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d0e:	4b1c      	ldr	r3, [pc, #112]	; (8005d80 <prvProcessExpiredTimer+0x7c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fe fa97 	bl	8004250 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d122      	bne.n	8005d70 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	699a      	ldr	r2, [r3, #24]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	18d1      	adds	r1, r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	6978      	ldr	r0, [r7, #20]
 8005d38:	f000 f8c8 	bl	8005ecc <prvInsertTimerInActiveList>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d016      	beq.n	8005d70 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d42:	2300      	movs	r3, #0
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	2300      	movs	r3, #0
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	6978      	ldr	r0, [r7, #20]
 8005d4e:	f7ff ff8b 	bl	8005c68 <xTimerGenericCommand>
 8005d52:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10a      	bne.n	8005d70 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	60fb      	str	r3, [r7, #12]
}
 8005d6c:	bf00      	nop
 8005d6e:	e7fe      	b.n	8005d6e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	6978      	ldr	r0, [r7, #20]
 8005d76:	4798      	blx	r3
}
 8005d78:	bf00      	nop
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20000e10 	.word	0x20000e10

08005d84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d8c:	f107 0308 	add.w	r3, r7, #8
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 f857 	bl	8005e44 <prvGetNextExpireTime>
 8005d96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 f803 	bl	8005da8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005da2:	f000 f8d5 	bl	8005f50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005da6:	e7f1      	b.n	8005d8c <prvTimerTask+0x8>

08005da8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005db2:	f7ff fa4b 	bl	800524c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005db6:	f107 0308 	add.w	r3, r7, #8
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 f866 	bl	8005e8c <prvSampleTimeNow>
 8005dc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d130      	bne.n	8005e2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10a      	bne.n	8005de4 <prvProcessTimerOrBlockTask+0x3c>
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d806      	bhi.n	8005de4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005dd6:	f7ff fa47 	bl	8005268 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005dda:	68f9      	ldr	r1, [r7, #12]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff ff91 	bl	8005d04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005de2:	e024      	b.n	8005e2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d008      	beq.n	8005dfc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005dea:	4b13      	ldr	r3, [pc, #76]	; (8005e38 <prvProcessTimerOrBlockTask+0x90>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	bf0c      	ite	eq
 8005df4:	2301      	moveq	r3, #1
 8005df6:	2300      	movne	r3, #0
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005dfc:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <prvProcessTimerOrBlockTask+0x94>)
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	4619      	mov	r1, r3
 8005e0a:	f7fe ffb9 	bl	8004d80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e0e:	f7ff fa2b 	bl	8005268 <xTaskResumeAll>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e18:	4b09      	ldr	r3, [pc, #36]	; (8005e40 <prvProcessTimerOrBlockTask+0x98>)
 8005e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	f3bf 8f6f 	isb	sy
}
 8005e28:	e001      	b.n	8005e2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e2a:	f7ff fa1d 	bl	8005268 <xTaskResumeAll>
}
 8005e2e:	bf00      	nop
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000e14 	.word	0x20000e14
 8005e3c:	20000e18 	.word	0x20000e18
 8005e40:	e000ed04 	.word	0xe000ed04

08005e44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e4c:	4b0e      	ldr	r3, [pc, #56]	; (8005e88 <prvGetNextExpireTime+0x44>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	bf0c      	ite	eq
 8005e56:	2301      	moveq	r3, #1
 8005e58:	2300      	movne	r3, #0
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d105      	bne.n	8005e76 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e6a:	4b07      	ldr	r3, [pc, #28]	; (8005e88 <prvGetNextExpireTime+0x44>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	e001      	b.n	8005e7a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bc80      	pop	{r7}
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	20000e10 	.word	0x20000e10

08005e8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e94:	f7ff fa86 	bl	80053a4 <xTaskGetTickCount>
 8005e98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ec8 <prvSampleTimeNow+0x3c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d205      	bcs.n	8005eb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ea4:	f000 f908 	bl	80060b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	e002      	b.n	8005eb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005eb6:	4a04      	ldr	r2, [pc, #16]	; (8005ec8 <prvSampleTimeNow+0x3c>)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20000e20 	.word	0x20000e20

08005ecc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d812      	bhi.n	8005f18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	1ad2      	subs	r2, r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d302      	bcc.n	8005f06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f00:	2301      	movs	r3, #1
 8005f02:	617b      	str	r3, [r7, #20]
 8005f04:	e01b      	b.n	8005f3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f06:	4b10      	ldr	r3, [pc, #64]	; (8005f48 <prvInsertTimerInActiveList+0x7c>)
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4610      	mov	r0, r2
 8005f12:	f7fe f965 	bl	80041e0 <vListInsert>
 8005f16:	e012      	b.n	8005f3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d206      	bcs.n	8005f2e <prvInsertTimerInActiveList+0x62>
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d302      	bcc.n	8005f2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	e007      	b.n	8005f3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f2e:	4b07      	ldr	r3, [pc, #28]	; (8005f4c <prvInsertTimerInActiveList+0x80>)
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3304      	adds	r3, #4
 8005f36:	4619      	mov	r1, r3
 8005f38:	4610      	mov	r0, r2
 8005f3a:	f7fe f951 	bl	80041e0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f3e:	697b      	ldr	r3, [r7, #20]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	20000e14 	.word	0x20000e14
 8005f4c:	20000e10 	.word	0x20000e10

08005f50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08e      	sub	sp, #56	; 0x38
 8005f54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f56:	e09d      	b.n	8006094 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	da18      	bge.n	8005f90 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f5e:	1d3b      	adds	r3, r7, #4
 8005f60:	3304      	adds	r3, #4
 8005f62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10a      	bne.n	8005f80 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6e:	f383 8811 	msr	BASEPRI, r3
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	61fb      	str	r3, [r7, #28]
}
 8005f7c:	bf00      	nop
 8005f7e:	e7fe      	b.n	8005f7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f86:	6850      	ldr	r0, [r2, #4]
 8005f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f8a:	6892      	ldr	r2, [r2, #8]
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	db7d      	blt.n	8006092 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d004      	beq.n	8005fac <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fe f952 	bl	8004250 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fac:	463b      	mov	r3, r7
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7ff ff6c 	bl	8005e8c <prvSampleTimeNow>
 8005fb4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b09      	cmp	r3, #9
 8005fba:	d86b      	bhi.n	8006094 <prvProcessReceivedCommands+0x144>
 8005fbc:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <prvProcessReceivedCommands+0x74>)
 8005fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc2:	bf00      	nop
 8005fc4:	08005fed 	.word	0x08005fed
 8005fc8:	08005fed 	.word	0x08005fed
 8005fcc:	08005fed 	.word	0x08005fed
 8005fd0:	08006095 	.word	0x08006095
 8005fd4:	08006049 	.word	0x08006049
 8005fd8:	08006081 	.word	0x08006081
 8005fdc:	08005fed 	.word	0x08005fed
 8005fe0:	08005fed 	.word	0x08005fed
 8005fe4:	08006095 	.word	0x08006095
 8005fe8:	08006049 	.word	0x08006049
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	18d1      	adds	r1, r2, r3
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ffa:	f7ff ff67 	bl	8005ecc <prvInsertTimerInActiveList>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d047      	beq.n	8006094 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800600a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d13f      	bne.n	8006094 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	441a      	add	r2, r3
 800601c:	2300      	movs	r3, #0
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	2300      	movs	r3, #0
 8006022:	2100      	movs	r1, #0
 8006024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006026:	f7ff fe1f 	bl	8005c68 <xTimerGenericCommand>
 800602a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d130      	bne.n	8006094 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	61bb      	str	r3, [r7, #24]
}
 8006044:	bf00      	nop
 8006046:	e7fe      	b.n	8006046 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800604e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10a      	bne.n	800606c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	617b      	str	r3, [r7, #20]
}
 8006068:	bf00      	nop
 800606a:	e7fe      	b.n	800606a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	699a      	ldr	r2, [r3, #24]
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	18d1      	adds	r1, r2, r3
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800607a:	f7ff ff27 	bl	8005ecc <prvInsertTimerInActiveList>
					break;
 800607e:	e009      	b.n	8006094 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006086:	2b00      	cmp	r3, #0
 8006088:	d104      	bne.n	8006094 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800608a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800608c:	f000 fb6a 	bl	8006764 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006090:	e000      	b.n	8006094 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006092:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006094:	4b07      	ldr	r3, [pc, #28]	; (80060b4 <prvProcessReceivedCommands+0x164>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	1d39      	adds	r1, r7, #4
 800609a:	2200      	movs	r2, #0
 800609c:	4618      	mov	r0, r3
 800609e:	f7fe fbd7 	bl	8004850 <xQueueReceive>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f47f af57 	bne.w	8005f58 <prvProcessReceivedCommands+0x8>
	}
}
 80060aa:	bf00      	nop
 80060ac:	bf00      	nop
 80060ae:	3730      	adds	r7, #48	; 0x30
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	20000e18 	.word	0x20000e18

080060b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060be:	e045      	b.n	800614c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060c0:	4b2c      	ldr	r3, [pc, #176]	; (8006174 <prvSwitchTimerLists+0xbc>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060ca:	4b2a      	ldr	r3, [pc, #168]	; (8006174 <prvSwitchTimerLists+0xbc>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	3304      	adds	r3, #4
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fe f8b9 	bl	8004250 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d12e      	bne.n	800614c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	4413      	add	r3, r2
 80060f6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d90e      	bls.n	800611e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800610c:	4b19      	ldr	r3, [pc, #100]	; (8006174 <prvSwitchTimerLists+0xbc>)
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	3304      	adds	r3, #4
 8006114:	4619      	mov	r1, r3
 8006116:	4610      	mov	r0, r2
 8006118:	f7fe f862 	bl	80041e0 <vListInsert>
 800611c:	e016      	b.n	800614c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800611e:	2300      	movs	r3, #0
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	2300      	movs	r3, #0
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	2100      	movs	r1, #0
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f7ff fd9d 	bl	8005c68 <xTimerGenericCommand>
 800612e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10a      	bne.n	800614c <prvSwitchTimerLists+0x94>
	__asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	603b      	str	r3, [r7, #0]
}
 8006148:	bf00      	nop
 800614a:	e7fe      	b.n	800614a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800614c:	4b09      	ldr	r3, [pc, #36]	; (8006174 <prvSwitchTimerLists+0xbc>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1b4      	bne.n	80060c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006156:	4b07      	ldr	r3, [pc, #28]	; (8006174 <prvSwitchTimerLists+0xbc>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <prvSwitchTimerLists+0xc0>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a04      	ldr	r2, [pc, #16]	; (8006174 <prvSwitchTimerLists+0xbc>)
 8006162:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006164:	4a04      	ldr	r2, [pc, #16]	; (8006178 <prvSwitchTimerLists+0xc0>)
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	6013      	str	r3, [r2, #0]
}
 800616a:	bf00      	nop
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20000e10 	.word	0x20000e10
 8006178:	20000e14 	.word	0x20000e14

0800617c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006182:	f000 f92b 	bl	80063dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006186:	4b15      	ldr	r3, [pc, #84]	; (80061dc <prvCheckForValidListAndQueue+0x60>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d120      	bne.n	80061d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800618e:	4814      	ldr	r0, [pc, #80]	; (80061e0 <prvCheckForValidListAndQueue+0x64>)
 8006190:	f7fd ffd8 	bl	8004144 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006194:	4813      	ldr	r0, [pc, #76]	; (80061e4 <prvCheckForValidListAndQueue+0x68>)
 8006196:	f7fd ffd5 	bl	8004144 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800619a:	4b13      	ldr	r3, [pc, #76]	; (80061e8 <prvCheckForValidListAndQueue+0x6c>)
 800619c:	4a10      	ldr	r2, [pc, #64]	; (80061e0 <prvCheckForValidListAndQueue+0x64>)
 800619e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80061a0:	4b12      	ldr	r3, [pc, #72]	; (80061ec <prvCheckForValidListAndQueue+0x70>)
 80061a2:	4a10      	ldr	r2, [pc, #64]	; (80061e4 <prvCheckForValidListAndQueue+0x68>)
 80061a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80061a6:	2300      	movs	r3, #0
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	4b11      	ldr	r3, [pc, #68]	; (80061f0 <prvCheckForValidListAndQueue+0x74>)
 80061ac:	4a11      	ldr	r2, [pc, #68]	; (80061f4 <prvCheckForValidListAndQueue+0x78>)
 80061ae:	2110      	movs	r1, #16
 80061b0:	200a      	movs	r0, #10
 80061b2:	f7fe f8df 	bl	8004374 <xQueueGenericCreateStatic>
 80061b6:	4603      	mov	r3, r0
 80061b8:	4a08      	ldr	r2, [pc, #32]	; (80061dc <prvCheckForValidListAndQueue+0x60>)
 80061ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061bc:	4b07      	ldr	r3, [pc, #28]	; (80061dc <prvCheckForValidListAndQueue+0x60>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d005      	beq.n	80061d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061c4:	4b05      	ldr	r3, [pc, #20]	; (80061dc <prvCheckForValidListAndQueue+0x60>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	490b      	ldr	r1, [pc, #44]	; (80061f8 <prvCheckForValidListAndQueue+0x7c>)
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe fdb0 	bl	8004d30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061d0:	f000 f934 	bl	800643c <vPortExitCritical>
}
 80061d4:	bf00      	nop
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	20000e18 	.word	0x20000e18
 80061e0:	20000de8 	.word	0x20000de8
 80061e4:	20000dfc 	.word	0x20000dfc
 80061e8:	20000e10 	.word	0x20000e10
 80061ec:	20000e14 	.word	0x20000e14
 80061f0:	20000ec4 	.word	0x20000ec4
 80061f4:	20000e24 	.word	0x20000e24
 80061f8:	080073c4 	.word	0x080073c4

080061fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	3b04      	subs	r3, #4
 800620c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006214:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	3b04      	subs	r3, #4
 800621a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f023 0201 	bic.w	r2, r3, #1
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3b04      	subs	r3, #4
 800622a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800622c:	4a08      	ldr	r2, [pc, #32]	; (8006250 <pxPortInitialiseStack+0x54>)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3b14      	subs	r3, #20
 8006236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3b20      	subs	r3, #32
 8006242:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006244:	68fb      	ldr	r3, [r7, #12]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	bc80      	pop	{r7}
 800624e:	4770      	bx	lr
 8006250:	08006255 	.word	0x08006255

08006254 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800625a:	2300      	movs	r3, #0
 800625c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800625e:	4b12      	ldr	r3, [pc, #72]	; (80062a8 <prvTaskExitError+0x54>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006266:	d00a      	beq.n	800627e <prvTaskExitError+0x2a>
	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	60fb      	str	r3, [r7, #12]
}
 800627a:	bf00      	nop
 800627c:	e7fe      	b.n	800627c <prvTaskExitError+0x28>
	__asm volatile
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	60bb      	str	r3, [r7, #8]
}
 8006290:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006292:	bf00      	nop
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0fc      	beq.n	8006294 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800629a:	bf00      	nop
 800629c:	bf00      	nop
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bc80      	pop	{r7}
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	20000010 	.word	0x20000010
 80062ac:	00000000 	.word	0x00000000

080062b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062b0:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <pxCurrentTCBConst2>)
 80062b2:	6819      	ldr	r1, [r3, #0]
 80062b4:	6808      	ldr	r0, [r1, #0]
 80062b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80062ba:	f380 8809 	msr	PSP, r0
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f04f 0000 	mov.w	r0, #0
 80062c6:	f380 8811 	msr	BASEPRI, r0
 80062ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80062ce:	4770      	bx	lr

080062d0 <pxCurrentTCBConst2>:
 80062d0:	200008e8 	.word	0x200008e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop

080062d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80062d8:	4806      	ldr	r0, [pc, #24]	; (80062f4 <prvPortStartFirstTask+0x1c>)
 80062da:	6800      	ldr	r0, [r0, #0]
 80062dc:	6800      	ldr	r0, [r0, #0]
 80062de:	f380 8808 	msr	MSP, r0
 80062e2:	b662      	cpsie	i
 80062e4:	b661      	cpsie	f
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	df00      	svc	0
 80062f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062f2:	bf00      	nop
 80062f4:	e000ed08 	.word	0xe000ed08

080062f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80062fe:	4b32      	ldr	r3, [pc, #200]	; (80063c8 <xPortStartScheduler+0xd0>)
 8006300:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	b2db      	uxtb	r3, r3
 8006308:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	22ff      	movs	r2, #255	; 0xff
 800630e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	b2db      	uxtb	r3, r3
 8006316:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006318:	78fb      	ldrb	r3, [r7, #3]
 800631a:	b2db      	uxtb	r3, r3
 800631c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006320:	b2da      	uxtb	r2, r3
 8006322:	4b2a      	ldr	r3, [pc, #168]	; (80063cc <xPortStartScheduler+0xd4>)
 8006324:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006326:	4b2a      	ldr	r3, [pc, #168]	; (80063d0 <xPortStartScheduler+0xd8>)
 8006328:	2207      	movs	r2, #7
 800632a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800632c:	e009      	b.n	8006342 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800632e:	4b28      	ldr	r3, [pc, #160]	; (80063d0 <xPortStartScheduler+0xd8>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3b01      	subs	r3, #1
 8006334:	4a26      	ldr	r2, [pc, #152]	; (80063d0 <xPortStartScheduler+0xd8>)
 8006336:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	b2db      	uxtb	r3, r3
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	b2db      	uxtb	r3, r3
 8006340:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006342:	78fb      	ldrb	r3, [r7, #3]
 8006344:	b2db      	uxtb	r3, r3
 8006346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634a:	2b80      	cmp	r3, #128	; 0x80
 800634c:	d0ef      	beq.n	800632e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800634e:	4b20      	ldr	r3, [pc, #128]	; (80063d0 <xPortStartScheduler+0xd8>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f1c3 0307 	rsb	r3, r3, #7
 8006356:	2b04      	cmp	r3, #4
 8006358:	d00a      	beq.n	8006370 <xPortStartScheduler+0x78>
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	60bb      	str	r3, [r7, #8]
}
 800636c:	bf00      	nop
 800636e:	e7fe      	b.n	800636e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006370:	4b17      	ldr	r3, [pc, #92]	; (80063d0 <xPortStartScheduler+0xd8>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	021b      	lsls	r3, r3, #8
 8006376:	4a16      	ldr	r2, [pc, #88]	; (80063d0 <xPortStartScheduler+0xd8>)
 8006378:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800637a:	4b15      	ldr	r3, [pc, #84]	; (80063d0 <xPortStartScheduler+0xd8>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006382:	4a13      	ldr	r2, [pc, #76]	; (80063d0 <xPortStartScheduler+0xd8>)
 8006384:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	b2da      	uxtb	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800638e:	4b11      	ldr	r3, [pc, #68]	; (80063d4 <xPortStartScheduler+0xdc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a10      	ldr	r2, [pc, #64]	; (80063d4 <xPortStartScheduler+0xdc>)
 8006394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006398:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800639a:	4b0e      	ldr	r3, [pc, #56]	; (80063d4 <xPortStartScheduler+0xdc>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a0d      	ldr	r2, [pc, #52]	; (80063d4 <xPortStartScheduler+0xdc>)
 80063a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063a6:	f000 f8b9 	bl	800651c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063aa:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <xPortStartScheduler+0xe0>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063b0:	f7ff ff92 	bl	80062d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063b4:	f7ff f8c2 	bl	800553c <vTaskSwitchContext>
	prvTaskExitError();
 80063b8:	f7ff ff4c 	bl	8006254 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	e000e400 	.word	0xe000e400
 80063cc:	20000f14 	.word	0x20000f14
 80063d0:	20000f18 	.word	0x20000f18
 80063d4:	e000ed20 	.word	0xe000ed20
 80063d8:	20000010 	.word	0x20000010

080063dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	607b      	str	r3, [r7, #4]
}
 80063f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80063f6:	4b0f      	ldr	r3, [pc, #60]	; (8006434 <vPortEnterCritical+0x58>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3301      	adds	r3, #1
 80063fc:	4a0d      	ldr	r2, [pc, #52]	; (8006434 <vPortEnterCritical+0x58>)
 80063fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006400:	4b0c      	ldr	r3, [pc, #48]	; (8006434 <vPortEnterCritical+0x58>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d10f      	bne.n	8006428 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006408:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <vPortEnterCritical+0x5c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <vPortEnterCritical+0x4c>
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	603b      	str	r3, [r7, #0]
}
 8006424:	bf00      	nop
 8006426:	e7fe      	b.n	8006426 <vPortEnterCritical+0x4a>
	}
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	bc80      	pop	{r7}
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	20000010 	.word	0x20000010
 8006438:	e000ed04 	.word	0xe000ed04

0800643c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006442:	4b11      	ldr	r3, [pc, #68]	; (8006488 <vPortExitCritical+0x4c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10a      	bne.n	8006460 <vPortExitCritical+0x24>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	607b      	str	r3, [r7, #4]
}
 800645c:	bf00      	nop
 800645e:	e7fe      	b.n	800645e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006460:	4b09      	ldr	r3, [pc, #36]	; (8006488 <vPortExitCritical+0x4c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	3b01      	subs	r3, #1
 8006466:	4a08      	ldr	r2, [pc, #32]	; (8006488 <vPortExitCritical+0x4c>)
 8006468:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800646a:	4b07      	ldr	r3, [pc, #28]	; (8006488 <vPortExitCritical+0x4c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d105      	bne.n	800647e <vPortExitCritical+0x42>
 8006472:	2300      	movs	r3, #0
 8006474:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	f383 8811 	msr	BASEPRI, r3
}
 800647c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800647e:	bf00      	nop
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	bc80      	pop	{r7}
 8006486:	4770      	bx	lr
 8006488:	20000010 	.word	0x20000010
 800648c:	00000000 	.word	0x00000000

08006490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006490:	f3ef 8009 	mrs	r0, PSP
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <pxCurrentTCBConst>)
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064a0:	6010      	str	r0, [r2, #0]
 80064a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80064a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80064aa:	f380 8811 	msr	BASEPRI, r0
 80064ae:	f7ff f845 	bl	800553c <vTaskSwitchContext>
 80064b2:	f04f 0000 	mov.w	r0, #0
 80064b6:	f380 8811 	msr	BASEPRI, r0
 80064ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80064be:	6819      	ldr	r1, [r3, #0]
 80064c0:	6808      	ldr	r0, [r1, #0]
 80064c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064c6:	f380 8809 	msr	PSP, r0
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	4770      	bx	lr

080064d0 <pxCurrentTCBConst>:
 80064d0:	200008e8 	.word	0x200008e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80064d4:	bf00      	nop
 80064d6:	bf00      	nop

080064d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	607b      	str	r3, [r7, #4]
}
 80064f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80064f2:	f7fe ff65 	bl	80053c0 <xTaskIncrementTick>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80064fc:	4b06      	ldr	r3, [pc, #24]	; (8006518 <SysTick_Handler+0x40>)
 80064fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	2300      	movs	r3, #0
 8006506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	f383 8811 	msr	BASEPRI, r3
}
 800650e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006510:	bf00      	nop
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	e000ed04 	.word	0xe000ed04

0800651c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800651c:	b480      	push	{r7}
 800651e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006520:	4b0a      	ldr	r3, [pc, #40]	; (800654c <vPortSetupTimerInterrupt+0x30>)
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006526:	4b0a      	ldr	r3, [pc, #40]	; (8006550 <vPortSetupTimerInterrupt+0x34>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800652c:	4b09      	ldr	r3, [pc, #36]	; (8006554 <vPortSetupTimerInterrupt+0x38>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a09      	ldr	r2, [pc, #36]	; (8006558 <vPortSetupTimerInterrupt+0x3c>)
 8006532:	fba2 2303 	umull	r2, r3, r2, r3
 8006536:	099b      	lsrs	r3, r3, #6
 8006538:	4a08      	ldr	r2, [pc, #32]	; (800655c <vPortSetupTimerInterrupt+0x40>)
 800653a:	3b01      	subs	r3, #1
 800653c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800653e:	4b03      	ldr	r3, [pc, #12]	; (800654c <vPortSetupTimerInterrupt+0x30>)
 8006540:	2207      	movs	r2, #7
 8006542:	601a      	str	r2, [r3, #0]
}
 8006544:	bf00      	nop
 8006546:	46bd      	mov	sp, r7
 8006548:	bc80      	pop	{r7}
 800654a:	4770      	bx	lr
 800654c:	e000e010 	.word	0xe000e010
 8006550:	e000e018 	.word	0xe000e018
 8006554:	20000004 	.word	0x20000004
 8006558:	10624dd3 	.word	0x10624dd3
 800655c:	e000e014 	.word	0xe000e014

08006560 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006566:	f3ef 8305 	mrs	r3, IPSR
 800656a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2b0f      	cmp	r3, #15
 8006570:	d914      	bls.n	800659c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006572:	4a16      	ldr	r2, [pc, #88]	; (80065cc <vPortValidateInterruptPriority+0x6c>)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4413      	add	r3, r2
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800657c:	4b14      	ldr	r3, [pc, #80]	; (80065d0 <vPortValidateInterruptPriority+0x70>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	7afa      	ldrb	r2, [r7, #11]
 8006582:	429a      	cmp	r2, r3
 8006584:	d20a      	bcs.n	800659c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	607b      	str	r3, [r7, #4]
}
 8006598:	bf00      	nop
 800659a:	e7fe      	b.n	800659a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800659c:	4b0d      	ldr	r3, [pc, #52]	; (80065d4 <vPortValidateInterruptPriority+0x74>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80065a4:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <vPortValidateInterruptPriority+0x78>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d90a      	bls.n	80065c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	603b      	str	r3, [r7, #0]
}
 80065be:	bf00      	nop
 80065c0:	e7fe      	b.n	80065c0 <vPortValidateInterruptPriority+0x60>
	}
 80065c2:	bf00      	nop
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bc80      	pop	{r7}
 80065ca:	4770      	bx	lr
 80065cc:	e000e3f0 	.word	0xe000e3f0
 80065d0:	20000f14 	.word	0x20000f14
 80065d4:	e000ed0c 	.word	0xe000ed0c
 80065d8:	20000f18 	.word	0x20000f18

080065dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08a      	sub	sp, #40	; 0x28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80065e4:	2300      	movs	r3, #0
 80065e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80065e8:	f7fe fe30 	bl	800524c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80065ec:	4b58      	ldr	r3, [pc, #352]	; (8006750 <pvPortMalloc+0x174>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80065f4:	f000 f910 	bl	8006818 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065f8:	4b56      	ldr	r3, [pc, #344]	; (8006754 <pvPortMalloc+0x178>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4013      	ands	r3, r2
 8006600:	2b00      	cmp	r3, #0
 8006602:	f040 808e 	bne.w	8006722 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d01d      	beq.n	8006648 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800660c:	2208      	movs	r2, #8
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4413      	add	r3, r2
 8006612:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f003 0307 	and.w	r3, r3, #7
 800661a:	2b00      	cmp	r3, #0
 800661c:	d014      	beq.n	8006648 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f023 0307 	bic.w	r3, r3, #7
 8006624:	3308      	adds	r3, #8
 8006626:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f003 0307 	and.w	r3, r3, #7
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00a      	beq.n	8006648 <pvPortMalloc+0x6c>
	__asm volatile
 8006632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	617b      	str	r3, [r7, #20]
}
 8006644:	bf00      	nop
 8006646:	e7fe      	b.n	8006646 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d069      	beq.n	8006722 <pvPortMalloc+0x146>
 800664e:	4b42      	ldr	r3, [pc, #264]	; (8006758 <pvPortMalloc+0x17c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	429a      	cmp	r2, r3
 8006656:	d864      	bhi.n	8006722 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006658:	4b40      	ldr	r3, [pc, #256]	; (800675c <pvPortMalloc+0x180>)
 800665a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800665c:	4b3f      	ldr	r3, [pc, #252]	; (800675c <pvPortMalloc+0x180>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006662:	e004      	b.n	800666e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	429a      	cmp	r2, r3
 8006676:	d903      	bls.n	8006680 <pvPortMalloc+0xa4>
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1f1      	bne.n	8006664 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006680:	4b33      	ldr	r3, [pc, #204]	; (8006750 <pvPortMalloc+0x174>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006686:	429a      	cmp	r2, r3
 8006688:	d04b      	beq.n	8006722 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2208      	movs	r2, #8
 8006690:	4413      	add	r3, r2
 8006692:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	1ad2      	subs	r2, r2, r3
 80066a4:	2308      	movs	r3, #8
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d91f      	bls.n	80066ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4413      	add	r3, r2
 80066b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00a      	beq.n	80066d4 <pvPortMalloc+0xf8>
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	613b      	str	r3, [r7, #16]
}
 80066d0:	bf00      	nop
 80066d2:	e7fe      	b.n	80066d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	1ad2      	subs	r2, r2, r3
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80066e6:	69b8      	ldr	r0, [r7, #24]
 80066e8:	f000 f8f8 	bl	80068dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066ec:	4b1a      	ldr	r3, [pc, #104]	; (8006758 <pvPortMalloc+0x17c>)
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	4a18      	ldr	r2, [pc, #96]	; (8006758 <pvPortMalloc+0x17c>)
 80066f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066fa:	4b17      	ldr	r3, [pc, #92]	; (8006758 <pvPortMalloc+0x17c>)
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	4b18      	ldr	r3, [pc, #96]	; (8006760 <pvPortMalloc+0x184>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	429a      	cmp	r2, r3
 8006704:	d203      	bcs.n	800670e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006706:	4b14      	ldr	r3, [pc, #80]	; (8006758 <pvPortMalloc+0x17c>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a15      	ldr	r2, [pc, #84]	; (8006760 <pvPortMalloc+0x184>)
 800670c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	4b10      	ldr	r3, [pc, #64]	; (8006754 <pvPortMalloc+0x178>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	431a      	orrs	r2, r3
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006722:	f7fe fda1 	bl	8005268 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	f003 0307 	and.w	r3, r3, #7
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00a      	beq.n	8006746 <pvPortMalloc+0x16a>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	60fb      	str	r3, [r7, #12]
}
 8006742:	bf00      	nop
 8006744:	e7fe      	b.n	8006744 <pvPortMalloc+0x168>
	return pvReturn;
 8006746:	69fb      	ldr	r3, [r7, #28]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3728      	adds	r7, #40	; 0x28
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	20001f24 	.word	0x20001f24
 8006754:	20001f30 	.word	0x20001f30
 8006758:	20001f28 	.word	0x20001f28
 800675c:	20001f1c 	.word	0x20001f1c
 8006760:	20001f2c 	.word	0x20001f2c

08006764 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d048      	beq.n	8006808 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006776:	2308      	movs	r3, #8
 8006778:	425b      	negs	r3, r3
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	4413      	add	r3, r2
 800677e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	4b21      	ldr	r3, [pc, #132]	; (8006810 <vPortFree+0xac>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4013      	ands	r3, r2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10a      	bne.n	80067a8 <vPortFree+0x44>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	60fb      	str	r3, [r7, #12]
}
 80067a4:	bf00      	nop
 80067a6:	e7fe      	b.n	80067a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00a      	beq.n	80067c6 <vPortFree+0x62>
	__asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	60bb      	str	r3, [r7, #8]
}
 80067c2:	bf00      	nop
 80067c4:	e7fe      	b.n	80067c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	4b11      	ldr	r3, [pc, #68]	; (8006810 <vPortFree+0xac>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4013      	ands	r3, r2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d019      	beq.n	8006808 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d115      	bne.n	8006808 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <vPortFree+0xac>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	43db      	mvns	r3, r3
 80067e6:	401a      	ands	r2, r3
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80067ec:	f7fe fd2e 	bl	800524c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	4b07      	ldr	r3, [pc, #28]	; (8006814 <vPortFree+0xb0>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4413      	add	r3, r2
 80067fa:	4a06      	ldr	r2, [pc, #24]	; (8006814 <vPortFree+0xb0>)
 80067fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80067fe:	6938      	ldr	r0, [r7, #16]
 8006800:	f000 f86c 	bl	80068dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006804:	f7fe fd30 	bl	8005268 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006808:	bf00      	nop
 800680a:	3718      	adds	r7, #24
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	20001f30 	.word	0x20001f30
 8006814:	20001f28 	.word	0x20001f28

08006818 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800681e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006822:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006824:	4b27      	ldr	r3, [pc, #156]	; (80068c4 <prvHeapInit+0xac>)
 8006826:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00c      	beq.n	800684c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	3307      	adds	r3, #7
 8006836:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 0307 	bic.w	r3, r3, #7
 800683e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	4a1f      	ldr	r2, [pc, #124]	; (80068c4 <prvHeapInit+0xac>)
 8006848:	4413      	add	r3, r2
 800684a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006850:	4a1d      	ldr	r2, [pc, #116]	; (80068c8 <prvHeapInit+0xb0>)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006856:	4b1c      	ldr	r3, [pc, #112]	; (80068c8 <prvHeapInit+0xb0>)
 8006858:	2200      	movs	r2, #0
 800685a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	4413      	add	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006864:	2208      	movs	r2, #8
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	1a9b      	subs	r3, r3, r2
 800686a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 0307 	bic.w	r3, r3, #7
 8006872:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4a15      	ldr	r2, [pc, #84]	; (80068cc <prvHeapInit+0xb4>)
 8006878:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800687a:	4b14      	ldr	r3, [pc, #80]	; (80068cc <prvHeapInit+0xb4>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2200      	movs	r2, #0
 8006880:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006882:	4b12      	ldr	r3, [pc, #72]	; (80068cc <prvHeapInit+0xb4>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2200      	movs	r2, #0
 8006888:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	1ad2      	subs	r2, r2, r3
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006898:	4b0c      	ldr	r3, [pc, #48]	; (80068cc <prvHeapInit+0xb4>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	4a0a      	ldr	r2, [pc, #40]	; (80068d0 <prvHeapInit+0xb8>)
 80068a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	4a09      	ldr	r2, [pc, #36]	; (80068d4 <prvHeapInit+0xbc>)
 80068ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80068b0:	4b09      	ldr	r3, [pc, #36]	; (80068d8 <prvHeapInit+0xc0>)
 80068b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80068b6:	601a      	str	r2, [r3, #0]
}
 80068b8:	bf00      	nop
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	bc80      	pop	{r7}
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	20000f1c 	.word	0x20000f1c
 80068c8:	20001f1c 	.word	0x20001f1c
 80068cc:	20001f24 	.word	0x20001f24
 80068d0:	20001f2c 	.word	0x20001f2c
 80068d4:	20001f28 	.word	0x20001f28
 80068d8:	20001f30 	.word	0x20001f30

080068dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80068e4:	4b27      	ldr	r3, [pc, #156]	; (8006984 <prvInsertBlockIntoFreeList+0xa8>)
 80068e6:	60fb      	str	r3, [r7, #12]
 80068e8:	e002      	b.n	80068f0 <prvInsertBlockIntoFreeList+0x14>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d8f7      	bhi.n	80068ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	4413      	add	r3, r2
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	429a      	cmp	r2, r3
 800690a:	d108      	bne.n	800691e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	441a      	add	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	441a      	add	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d118      	bne.n	8006964 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	4b14      	ldr	r3, [pc, #80]	; (8006988 <prvInsertBlockIntoFreeList+0xac>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	429a      	cmp	r2, r3
 800693c:	d00d      	beq.n	800695a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	441a      	add	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	e008      	b.n	800696c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800695a:	4b0b      	ldr	r3, [pc, #44]	; (8006988 <prvInsertBlockIntoFreeList+0xac>)
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	e003      	b.n	800696c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	429a      	cmp	r2, r3
 8006972:	d002      	beq.n	800697a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800697a:	bf00      	nop
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	bc80      	pop	{r7}
 8006982:	4770      	bx	lr
 8006984:	20001f1c 	.word	0x20001f1c
 8006988:	20001f24 	.word	0x20001f24

0800698c <__errno>:
 800698c:	4b01      	ldr	r3, [pc, #4]	; (8006994 <__errno+0x8>)
 800698e:	6818      	ldr	r0, [r3, #0]
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	20000014 	.word	0x20000014

08006998 <__libc_init_array>:
 8006998:	b570      	push	{r4, r5, r6, lr}
 800699a:	2600      	movs	r6, #0
 800699c:	4d0c      	ldr	r5, [pc, #48]	; (80069d0 <__libc_init_array+0x38>)
 800699e:	4c0d      	ldr	r4, [pc, #52]	; (80069d4 <__libc_init_array+0x3c>)
 80069a0:	1b64      	subs	r4, r4, r5
 80069a2:	10a4      	asrs	r4, r4, #2
 80069a4:	42a6      	cmp	r6, r4
 80069a6:	d109      	bne.n	80069bc <__libc_init_array+0x24>
 80069a8:	f000 fc9c 	bl	80072e4 <_init>
 80069ac:	2600      	movs	r6, #0
 80069ae:	4d0a      	ldr	r5, [pc, #40]	; (80069d8 <__libc_init_array+0x40>)
 80069b0:	4c0a      	ldr	r4, [pc, #40]	; (80069dc <__libc_init_array+0x44>)
 80069b2:	1b64      	subs	r4, r4, r5
 80069b4:	10a4      	asrs	r4, r4, #2
 80069b6:	42a6      	cmp	r6, r4
 80069b8:	d105      	bne.n	80069c6 <__libc_init_array+0x2e>
 80069ba:	bd70      	pop	{r4, r5, r6, pc}
 80069bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80069c0:	4798      	blx	r3
 80069c2:	3601      	adds	r6, #1
 80069c4:	e7ee      	b.n	80069a4 <__libc_init_array+0xc>
 80069c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ca:	4798      	blx	r3
 80069cc:	3601      	adds	r6, #1
 80069ce:	e7f2      	b.n	80069b6 <__libc_init_array+0x1e>
 80069d0:	08007530 	.word	0x08007530
 80069d4:	08007530 	.word	0x08007530
 80069d8:	08007530 	.word	0x08007530
 80069dc:	08007534 	.word	0x08007534

080069e0 <memcpy>:
 80069e0:	440a      	add	r2, r1
 80069e2:	4291      	cmp	r1, r2
 80069e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80069e8:	d100      	bne.n	80069ec <memcpy+0xc>
 80069ea:	4770      	bx	lr
 80069ec:	b510      	push	{r4, lr}
 80069ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069f2:	4291      	cmp	r1, r2
 80069f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069f8:	d1f9      	bne.n	80069ee <memcpy+0xe>
 80069fa:	bd10      	pop	{r4, pc}

080069fc <memset>:
 80069fc:	4603      	mov	r3, r0
 80069fe:	4402      	add	r2, r0
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d100      	bne.n	8006a06 <memset+0xa>
 8006a04:	4770      	bx	lr
 8006a06:	f803 1b01 	strb.w	r1, [r3], #1
 8006a0a:	e7f9      	b.n	8006a00 <memset+0x4>

08006a0c <siprintf>:
 8006a0c:	b40e      	push	{r1, r2, r3}
 8006a0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a12:	b500      	push	{lr}
 8006a14:	b09c      	sub	sp, #112	; 0x70
 8006a16:	ab1d      	add	r3, sp, #116	; 0x74
 8006a18:	9002      	str	r0, [sp, #8]
 8006a1a:	9006      	str	r0, [sp, #24]
 8006a1c:	9107      	str	r1, [sp, #28]
 8006a1e:	9104      	str	r1, [sp, #16]
 8006a20:	4808      	ldr	r0, [pc, #32]	; (8006a44 <siprintf+0x38>)
 8006a22:	4909      	ldr	r1, [pc, #36]	; (8006a48 <siprintf+0x3c>)
 8006a24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a28:	9105      	str	r1, [sp, #20]
 8006a2a:	6800      	ldr	r0, [r0, #0]
 8006a2c:	a902      	add	r1, sp, #8
 8006a2e:	9301      	str	r3, [sp, #4]
 8006a30:	f000 f868 	bl	8006b04 <_svfiprintf_r>
 8006a34:	2200      	movs	r2, #0
 8006a36:	9b02      	ldr	r3, [sp, #8]
 8006a38:	701a      	strb	r2, [r3, #0]
 8006a3a:	b01c      	add	sp, #112	; 0x70
 8006a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a40:	b003      	add	sp, #12
 8006a42:	4770      	bx	lr
 8006a44:	20000014 	.word	0x20000014
 8006a48:	ffff0208 	.word	0xffff0208

08006a4c <__ssputs_r>:
 8006a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a50:	688e      	ldr	r6, [r1, #8]
 8006a52:	4682      	mov	sl, r0
 8006a54:	429e      	cmp	r6, r3
 8006a56:	460c      	mov	r4, r1
 8006a58:	4690      	mov	r8, r2
 8006a5a:	461f      	mov	r7, r3
 8006a5c:	d838      	bhi.n	8006ad0 <__ssputs_r+0x84>
 8006a5e:	898a      	ldrh	r2, [r1, #12]
 8006a60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a64:	d032      	beq.n	8006acc <__ssputs_r+0x80>
 8006a66:	6825      	ldr	r5, [r4, #0]
 8006a68:	6909      	ldr	r1, [r1, #16]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	eba5 0901 	sub.w	r9, r5, r1
 8006a70:	6965      	ldr	r5, [r4, #20]
 8006a72:	444b      	add	r3, r9
 8006a74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a7c:	106d      	asrs	r5, r5, #1
 8006a7e:	429d      	cmp	r5, r3
 8006a80:	bf38      	it	cc
 8006a82:	461d      	movcc	r5, r3
 8006a84:	0553      	lsls	r3, r2, #21
 8006a86:	d531      	bpl.n	8006aec <__ssputs_r+0xa0>
 8006a88:	4629      	mov	r1, r5
 8006a8a:	f000 fb61 	bl	8007150 <_malloc_r>
 8006a8e:	4606      	mov	r6, r0
 8006a90:	b950      	cbnz	r0, 8006aa8 <__ssputs_r+0x5c>
 8006a92:	230c      	movs	r3, #12
 8006a94:	f04f 30ff 	mov.w	r0, #4294967295
 8006a98:	f8ca 3000 	str.w	r3, [sl]
 8006a9c:	89a3      	ldrh	r3, [r4, #12]
 8006a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aa2:	81a3      	strh	r3, [r4, #12]
 8006aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa8:	464a      	mov	r2, r9
 8006aaa:	6921      	ldr	r1, [r4, #16]
 8006aac:	f7ff ff98 	bl	80069e0 <memcpy>
 8006ab0:	89a3      	ldrh	r3, [r4, #12]
 8006ab2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aba:	81a3      	strh	r3, [r4, #12]
 8006abc:	6126      	str	r6, [r4, #16]
 8006abe:	444e      	add	r6, r9
 8006ac0:	6026      	str	r6, [r4, #0]
 8006ac2:	463e      	mov	r6, r7
 8006ac4:	6165      	str	r5, [r4, #20]
 8006ac6:	eba5 0509 	sub.w	r5, r5, r9
 8006aca:	60a5      	str	r5, [r4, #8]
 8006acc:	42be      	cmp	r6, r7
 8006ace:	d900      	bls.n	8006ad2 <__ssputs_r+0x86>
 8006ad0:	463e      	mov	r6, r7
 8006ad2:	4632      	mov	r2, r6
 8006ad4:	4641      	mov	r1, r8
 8006ad6:	6820      	ldr	r0, [r4, #0]
 8006ad8:	f000 fab8 	bl	800704c <memmove>
 8006adc:	68a3      	ldr	r3, [r4, #8]
 8006ade:	2000      	movs	r0, #0
 8006ae0:	1b9b      	subs	r3, r3, r6
 8006ae2:	60a3      	str	r3, [r4, #8]
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	4433      	add	r3, r6
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	e7db      	b.n	8006aa4 <__ssputs_r+0x58>
 8006aec:	462a      	mov	r2, r5
 8006aee:	f000 fba3 	bl	8007238 <_realloc_r>
 8006af2:	4606      	mov	r6, r0
 8006af4:	2800      	cmp	r0, #0
 8006af6:	d1e1      	bne.n	8006abc <__ssputs_r+0x70>
 8006af8:	4650      	mov	r0, sl
 8006afa:	6921      	ldr	r1, [r4, #16]
 8006afc:	f000 fac0 	bl	8007080 <_free_r>
 8006b00:	e7c7      	b.n	8006a92 <__ssputs_r+0x46>
	...

08006b04 <_svfiprintf_r>:
 8006b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b08:	4698      	mov	r8, r3
 8006b0a:	898b      	ldrh	r3, [r1, #12]
 8006b0c:	4607      	mov	r7, r0
 8006b0e:	061b      	lsls	r3, r3, #24
 8006b10:	460d      	mov	r5, r1
 8006b12:	4614      	mov	r4, r2
 8006b14:	b09d      	sub	sp, #116	; 0x74
 8006b16:	d50e      	bpl.n	8006b36 <_svfiprintf_r+0x32>
 8006b18:	690b      	ldr	r3, [r1, #16]
 8006b1a:	b963      	cbnz	r3, 8006b36 <_svfiprintf_r+0x32>
 8006b1c:	2140      	movs	r1, #64	; 0x40
 8006b1e:	f000 fb17 	bl	8007150 <_malloc_r>
 8006b22:	6028      	str	r0, [r5, #0]
 8006b24:	6128      	str	r0, [r5, #16]
 8006b26:	b920      	cbnz	r0, 8006b32 <_svfiprintf_r+0x2e>
 8006b28:	230c      	movs	r3, #12
 8006b2a:	603b      	str	r3, [r7, #0]
 8006b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b30:	e0d1      	b.n	8006cd6 <_svfiprintf_r+0x1d2>
 8006b32:	2340      	movs	r3, #64	; 0x40
 8006b34:	616b      	str	r3, [r5, #20]
 8006b36:	2300      	movs	r3, #0
 8006b38:	9309      	str	r3, [sp, #36]	; 0x24
 8006b3a:	2320      	movs	r3, #32
 8006b3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b40:	2330      	movs	r3, #48	; 0x30
 8006b42:	f04f 0901 	mov.w	r9, #1
 8006b46:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006cf0 <_svfiprintf_r+0x1ec>
 8006b4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b52:	4623      	mov	r3, r4
 8006b54:	469a      	mov	sl, r3
 8006b56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b5a:	b10a      	cbz	r2, 8006b60 <_svfiprintf_r+0x5c>
 8006b5c:	2a25      	cmp	r2, #37	; 0x25
 8006b5e:	d1f9      	bne.n	8006b54 <_svfiprintf_r+0x50>
 8006b60:	ebba 0b04 	subs.w	fp, sl, r4
 8006b64:	d00b      	beq.n	8006b7e <_svfiprintf_r+0x7a>
 8006b66:	465b      	mov	r3, fp
 8006b68:	4622      	mov	r2, r4
 8006b6a:	4629      	mov	r1, r5
 8006b6c:	4638      	mov	r0, r7
 8006b6e:	f7ff ff6d 	bl	8006a4c <__ssputs_r>
 8006b72:	3001      	adds	r0, #1
 8006b74:	f000 80aa 	beq.w	8006ccc <_svfiprintf_r+0x1c8>
 8006b78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b7a:	445a      	add	r2, fp
 8006b7c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 80a2 	beq.w	8006ccc <_svfiprintf_r+0x1c8>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b92:	f10a 0a01 	add.w	sl, sl, #1
 8006b96:	9304      	str	r3, [sp, #16]
 8006b98:	9307      	str	r3, [sp, #28]
 8006b9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b9e:	931a      	str	r3, [sp, #104]	; 0x68
 8006ba0:	4654      	mov	r4, sl
 8006ba2:	2205      	movs	r2, #5
 8006ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ba8:	4851      	ldr	r0, [pc, #324]	; (8006cf0 <_svfiprintf_r+0x1ec>)
 8006baa:	f000 fa41 	bl	8007030 <memchr>
 8006bae:	9a04      	ldr	r2, [sp, #16]
 8006bb0:	b9d8      	cbnz	r0, 8006bea <_svfiprintf_r+0xe6>
 8006bb2:	06d0      	lsls	r0, r2, #27
 8006bb4:	bf44      	itt	mi
 8006bb6:	2320      	movmi	r3, #32
 8006bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bbc:	0711      	lsls	r1, r2, #28
 8006bbe:	bf44      	itt	mi
 8006bc0:	232b      	movmi	r3, #43	; 0x2b
 8006bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8006bca:	2b2a      	cmp	r3, #42	; 0x2a
 8006bcc:	d015      	beq.n	8006bfa <_svfiprintf_r+0xf6>
 8006bce:	4654      	mov	r4, sl
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	f04f 0c0a 	mov.w	ip, #10
 8006bd6:	9a07      	ldr	r2, [sp, #28]
 8006bd8:	4621      	mov	r1, r4
 8006bda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bde:	3b30      	subs	r3, #48	; 0x30
 8006be0:	2b09      	cmp	r3, #9
 8006be2:	d94e      	bls.n	8006c82 <_svfiprintf_r+0x17e>
 8006be4:	b1b0      	cbz	r0, 8006c14 <_svfiprintf_r+0x110>
 8006be6:	9207      	str	r2, [sp, #28]
 8006be8:	e014      	b.n	8006c14 <_svfiprintf_r+0x110>
 8006bea:	eba0 0308 	sub.w	r3, r0, r8
 8006bee:	fa09 f303 	lsl.w	r3, r9, r3
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	46a2      	mov	sl, r4
 8006bf6:	9304      	str	r3, [sp, #16]
 8006bf8:	e7d2      	b.n	8006ba0 <_svfiprintf_r+0x9c>
 8006bfa:	9b03      	ldr	r3, [sp, #12]
 8006bfc:	1d19      	adds	r1, r3, #4
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	9103      	str	r1, [sp, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	bfbb      	ittet	lt
 8006c06:	425b      	neglt	r3, r3
 8006c08:	f042 0202 	orrlt.w	r2, r2, #2
 8006c0c:	9307      	strge	r3, [sp, #28]
 8006c0e:	9307      	strlt	r3, [sp, #28]
 8006c10:	bfb8      	it	lt
 8006c12:	9204      	strlt	r2, [sp, #16]
 8006c14:	7823      	ldrb	r3, [r4, #0]
 8006c16:	2b2e      	cmp	r3, #46	; 0x2e
 8006c18:	d10c      	bne.n	8006c34 <_svfiprintf_r+0x130>
 8006c1a:	7863      	ldrb	r3, [r4, #1]
 8006c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8006c1e:	d135      	bne.n	8006c8c <_svfiprintf_r+0x188>
 8006c20:	9b03      	ldr	r3, [sp, #12]
 8006c22:	3402      	adds	r4, #2
 8006c24:	1d1a      	adds	r2, r3, #4
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	9203      	str	r2, [sp, #12]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	bfb8      	it	lt
 8006c2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c32:	9305      	str	r3, [sp, #20]
 8006c34:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006cf4 <_svfiprintf_r+0x1f0>
 8006c38:	2203      	movs	r2, #3
 8006c3a:	4650      	mov	r0, sl
 8006c3c:	7821      	ldrb	r1, [r4, #0]
 8006c3e:	f000 f9f7 	bl	8007030 <memchr>
 8006c42:	b140      	cbz	r0, 8006c56 <_svfiprintf_r+0x152>
 8006c44:	2340      	movs	r3, #64	; 0x40
 8006c46:	eba0 000a 	sub.w	r0, r0, sl
 8006c4a:	fa03 f000 	lsl.w	r0, r3, r0
 8006c4e:	9b04      	ldr	r3, [sp, #16]
 8006c50:	3401      	adds	r4, #1
 8006c52:	4303      	orrs	r3, r0
 8006c54:	9304      	str	r3, [sp, #16]
 8006c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c5a:	2206      	movs	r2, #6
 8006c5c:	4826      	ldr	r0, [pc, #152]	; (8006cf8 <_svfiprintf_r+0x1f4>)
 8006c5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c62:	f000 f9e5 	bl	8007030 <memchr>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d038      	beq.n	8006cdc <_svfiprintf_r+0x1d8>
 8006c6a:	4b24      	ldr	r3, [pc, #144]	; (8006cfc <_svfiprintf_r+0x1f8>)
 8006c6c:	bb1b      	cbnz	r3, 8006cb6 <_svfiprintf_r+0x1b2>
 8006c6e:	9b03      	ldr	r3, [sp, #12]
 8006c70:	3307      	adds	r3, #7
 8006c72:	f023 0307 	bic.w	r3, r3, #7
 8006c76:	3308      	adds	r3, #8
 8006c78:	9303      	str	r3, [sp, #12]
 8006c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c7c:	4433      	add	r3, r6
 8006c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c80:	e767      	b.n	8006b52 <_svfiprintf_r+0x4e>
 8006c82:	460c      	mov	r4, r1
 8006c84:	2001      	movs	r0, #1
 8006c86:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c8a:	e7a5      	b.n	8006bd8 <_svfiprintf_r+0xd4>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	f04f 0c0a 	mov.w	ip, #10
 8006c92:	4619      	mov	r1, r3
 8006c94:	3401      	adds	r4, #1
 8006c96:	9305      	str	r3, [sp, #20]
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c9e:	3a30      	subs	r2, #48	; 0x30
 8006ca0:	2a09      	cmp	r2, #9
 8006ca2:	d903      	bls.n	8006cac <_svfiprintf_r+0x1a8>
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d0c5      	beq.n	8006c34 <_svfiprintf_r+0x130>
 8006ca8:	9105      	str	r1, [sp, #20]
 8006caa:	e7c3      	b.n	8006c34 <_svfiprintf_r+0x130>
 8006cac:	4604      	mov	r4, r0
 8006cae:	2301      	movs	r3, #1
 8006cb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cb4:	e7f0      	b.n	8006c98 <_svfiprintf_r+0x194>
 8006cb6:	ab03      	add	r3, sp, #12
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	462a      	mov	r2, r5
 8006cbc:	4638      	mov	r0, r7
 8006cbe:	4b10      	ldr	r3, [pc, #64]	; (8006d00 <_svfiprintf_r+0x1fc>)
 8006cc0:	a904      	add	r1, sp, #16
 8006cc2:	f3af 8000 	nop.w
 8006cc6:	1c42      	adds	r2, r0, #1
 8006cc8:	4606      	mov	r6, r0
 8006cca:	d1d6      	bne.n	8006c7a <_svfiprintf_r+0x176>
 8006ccc:	89ab      	ldrh	r3, [r5, #12]
 8006cce:	065b      	lsls	r3, r3, #25
 8006cd0:	f53f af2c 	bmi.w	8006b2c <_svfiprintf_r+0x28>
 8006cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cd6:	b01d      	add	sp, #116	; 0x74
 8006cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cdc:	ab03      	add	r3, sp, #12
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	462a      	mov	r2, r5
 8006ce2:	4638      	mov	r0, r7
 8006ce4:	4b06      	ldr	r3, [pc, #24]	; (8006d00 <_svfiprintf_r+0x1fc>)
 8006ce6:	a904      	add	r1, sp, #16
 8006ce8:	f000 f87c 	bl	8006de4 <_printf_i>
 8006cec:	e7eb      	b.n	8006cc6 <_svfiprintf_r+0x1c2>
 8006cee:	bf00      	nop
 8006cf0:	080074fc 	.word	0x080074fc
 8006cf4:	08007502 	.word	0x08007502
 8006cf8:	08007506 	.word	0x08007506
 8006cfc:	00000000 	.word	0x00000000
 8006d00:	08006a4d 	.word	0x08006a4d

08006d04 <_printf_common>:
 8006d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d08:	4616      	mov	r6, r2
 8006d0a:	4699      	mov	r9, r3
 8006d0c:	688a      	ldr	r2, [r1, #8]
 8006d0e:	690b      	ldr	r3, [r1, #16]
 8006d10:	4607      	mov	r7, r0
 8006d12:	4293      	cmp	r3, r2
 8006d14:	bfb8      	it	lt
 8006d16:	4613      	movlt	r3, r2
 8006d18:	6033      	str	r3, [r6, #0]
 8006d1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d1e:	460c      	mov	r4, r1
 8006d20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d24:	b10a      	cbz	r2, 8006d2a <_printf_common+0x26>
 8006d26:	3301      	adds	r3, #1
 8006d28:	6033      	str	r3, [r6, #0]
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	0699      	lsls	r1, r3, #26
 8006d2e:	bf42      	ittt	mi
 8006d30:	6833      	ldrmi	r3, [r6, #0]
 8006d32:	3302      	addmi	r3, #2
 8006d34:	6033      	strmi	r3, [r6, #0]
 8006d36:	6825      	ldr	r5, [r4, #0]
 8006d38:	f015 0506 	ands.w	r5, r5, #6
 8006d3c:	d106      	bne.n	8006d4c <_printf_common+0x48>
 8006d3e:	f104 0a19 	add.w	sl, r4, #25
 8006d42:	68e3      	ldr	r3, [r4, #12]
 8006d44:	6832      	ldr	r2, [r6, #0]
 8006d46:	1a9b      	subs	r3, r3, r2
 8006d48:	42ab      	cmp	r3, r5
 8006d4a:	dc28      	bgt.n	8006d9e <_printf_common+0x9a>
 8006d4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d50:	1e13      	subs	r3, r2, #0
 8006d52:	6822      	ldr	r2, [r4, #0]
 8006d54:	bf18      	it	ne
 8006d56:	2301      	movne	r3, #1
 8006d58:	0692      	lsls	r2, r2, #26
 8006d5a:	d42d      	bmi.n	8006db8 <_printf_common+0xb4>
 8006d5c:	4649      	mov	r1, r9
 8006d5e:	4638      	mov	r0, r7
 8006d60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d64:	47c0      	blx	r8
 8006d66:	3001      	adds	r0, #1
 8006d68:	d020      	beq.n	8006dac <_printf_common+0xa8>
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	68e5      	ldr	r5, [r4, #12]
 8006d6e:	f003 0306 	and.w	r3, r3, #6
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	bf18      	it	ne
 8006d76:	2500      	movne	r5, #0
 8006d78:	6832      	ldr	r2, [r6, #0]
 8006d7a:	f04f 0600 	mov.w	r6, #0
 8006d7e:	68a3      	ldr	r3, [r4, #8]
 8006d80:	bf08      	it	eq
 8006d82:	1aad      	subeq	r5, r5, r2
 8006d84:	6922      	ldr	r2, [r4, #16]
 8006d86:	bf08      	it	eq
 8006d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	bfc4      	itt	gt
 8006d90:	1a9b      	subgt	r3, r3, r2
 8006d92:	18ed      	addgt	r5, r5, r3
 8006d94:	341a      	adds	r4, #26
 8006d96:	42b5      	cmp	r5, r6
 8006d98:	d11a      	bne.n	8006dd0 <_printf_common+0xcc>
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	e008      	b.n	8006db0 <_printf_common+0xac>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	4652      	mov	r2, sl
 8006da2:	4649      	mov	r1, r9
 8006da4:	4638      	mov	r0, r7
 8006da6:	47c0      	blx	r8
 8006da8:	3001      	adds	r0, #1
 8006daa:	d103      	bne.n	8006db4 <_printf_common+0xb0>
 8006dac:	f04f 30ff 	mov.w	r0, #4294967295
 8006db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db4:	3501      	adds	r5, #1
 8006db6:	e7c4      	b.n	8006d42 <_printf_common+0x3e>
 8006db8:	2030      	movs	r0, #48	; 0x30
 8006dba:	18e1      	adds	r1, r4, r3
 8006dbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dc0:	1c5a      	adds	r2, r3, #1
 8006dc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dc6:	4422      	add	r2, r4
 8006dc8:	3302      	adds	r3, #2
 8006dca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dce:	e7c5      	b.n	8006d5c <_printf_common+0x58>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	4622      	mov	r2, r4
 8006dd4:	4649      	mov	r1, r9
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	47c0      	blx	r8
 8006dda:	3001      	adds	r0, #1
 8006ddc:	d0e6      	beq.n	8006dac <_printf_common+0xa8>
 8006dde:	3601      	adds	r6, #1
 8006de0:	e7d9      	b.n	8006d96 <_printf_common+0x92>
	...

08006de4 <_printf_i>:
 8006de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006de8:	7e0f      	ldrb	r7, [r1, #24]
 8006dea:	4691      	mov	r9, r2
 8006dec:	2f78      	cmp	r7, #120	; 0x78
 8006dee:	4680      	mov	r8, r0
 8006df0:	460c      	mov	r4, r1
 8006df2:	469a      	mov	sl, r3
 8006df4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006df6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006dfa:	d807      	bhi.n	8006e0c <_printf_i+0x28>
 8006dfc:	2f62      	cmp	r7, #98	; 0x62
 8006dfe:	d80a      	bhi.n	8006e16 <_printf_i+0x32>
 8006e00:	2f00      	cmp	r7, #0
 8006e02:	f000 80d9 	beq.w	8006fb8 <_printf_i+0x1d4>
 8006e06:	2f58      	cmp	r7, #88	; 0x58
 8006e08:	f000 80a4 	beq.w	8006f54 <_printf_i+0x170>
 8006e0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e14:	e03a      	b.n	8006e8c <_printf_i+0xa8>
 8006e16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e1a:	2b15      	cmp	r3, #21
 8006e1c:	d8f6      	bhi.n	8006e0c <_printf_i+0x28>
 8006e1e:	a101      	add	r1, pc, #4	; (adr r1, 8006e24 <_printf_i+0x40>)
 8006e20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e24:	08006e7d 	.word	0x08006e7d
 8006e28:	08006e91 	.word	0x08006e91
 8006e2c:	08006e0d 	.word	0x08006e0d
 8006e30:	08006e0d 	.word	0x08006e0d
 8006e34:	08006e0d 	.word	0x08006e0d
 8006e38:	08006e0d 	.word	0x08006e0d
 8006e3c:	08006e91 	.word	0x08006e91
 8006e40:	08006e0d 	.word	0x08006e0d
 8006e44:	08006e0d 	.word	0x08006e0d
 8006e48:	08006e0d 	.word	0x08006e0d
 8006e4c:	08006e0d 	.word	0x08006e0d
 8006e50:	08006f9f 	.word	0x08006f9f
 8006e54:	08006ec1 	.word	0x08006ec1
 8006e58:	08006f81 	.word	0x08006f81
 8006e5c:	08006e0d 	.word	0x08006e0d
 8006e60:	08006e0d 	.word	0x08006e0d
 8006e64:	08006fc1 	.word	0x08006fc1
 8006e68:	08006e0d 	.word	0x08006e0d
 8006e6c:	08006ec1 	.word	0x08006ec1
 8006e70:	08006e0d 	.word	0x08006e0d
 8006e74:	08006e0d 	.word	0x08006e0d
 8006e78:	08006f89 	.word	0x08006f89
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	1d1a      	adds	r2, r3, #4
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	602a      	str	r2, [r5, #0]
 8006e84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e0a4      	b.n	8006fda <_printf_i+0x1f6>
 8006e90:	6820      	ldr	r0, [r4, #0]
 8006e92:	6829      	ldr	r1, [r5, #0]
 8006e94:	0606      	lsls	r6, r0, #24
 8006e96:	f101 0304 	add.w	r3, r1, #4
 8006e9a:	d50a      	bpl.n	8006eb2 <_printf_i+0xce>
 8006e9c:	680e      	ldr	r6, [r1, #0]
 8006e9e:	602b      	str	r3, [r5, #0]
 8006ea0:	2e00      	cmp	r6, #0
 8006ea2:	da03      	bge.n	8006eac <_printf_i+0xc8>
 8006ea4:	232d      	movs	r3, #45	; 0x2d
 8006ea6:	4276      	negs	r6, r6
 8006ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eac:	230a      	movs	r3, #10
 8006eae:	485e      	ldr	r0, [pc, #376]	; (8007028 <_printf_i+0x244>)
 8006eb0:	e019      	b.n	8006ee6 <_printf_i+0x102>
 8006eb2:	680e      	ldr	r6, [r1, #0]
 8006eb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006eb8:	602b      	str	r3, [r5, #0]
 8006eba:	bf18      	it	ne
 8006ebc:	b236      	sxthne	r6, r6
 8006ebe:	e7ef      	b.n	8006ea0 <_printf_i+0xbc>
 8006ec0:	682b      	ldr	r3, [r5, #0]
 8006ec2:	6820      	ldr	r0, [r4, #0]
 8006ec4:	1d19      	adds	r1, r3, #4
 8006ec6:	6029      	str	r1, [r5, #0]
 8006ec8:	0601      	lsls	r1, r0, #24
 8006eca:	d501      	bpl.n	8006ed0 <_printf_i+0xec>
 8006ecc:	681e      	ldr	r6, [r3, #0]
 8006ece:	e002      	b.n	8006ed6 <_printf_i+0xf2>
 8006ed0:	0646      	lsls	r6, r0, #25
 8006ed2:	d5fb      	bpl.n	8006ecc <_printf_i+0xe8>
 8006ed4:	881e      	ldrh	r6, [r3, #0]
 8006ed6:	2f6f      	cmp	r7, #111	; 0x6f
 8006ed8:	bf0c      	ite	eq
 8006eda:	2308      	moveq	r3, #8
 8006edc:	230a      	movne	r3, #10
 8006ede:	4852      	ldr	r0, [pc, #328]	; (8007028 <_printf_i+0x244>)
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ee6:	6865      	ldr	r5, [r4, #4]
 8006ee8:	2d00      	cmp	r5, #0
 8006eea:	bfa8      	it	ge
 8006eec:	6821      	ldrge	r1, [r4, #0]
 8006eee:	60a5      	str	r5, [r4, #8]
 8006ef0:	bfa4      	itt	ge
 8006ef2:	f021 0104 	bicge.w	r1, r1, #4
 8006ef6:	6021      	strge	r1, [r4, #0]
 8006ef8:	b90e      	cbnz	r6, 8006efe <_printf_i+0x11a>
 8006efa:	2d00      	cmp	r5, #0
 8006efc:	d04d      	beq.n	8006f9a <_printf_i+0x1b6>
 8006efe:	4615      	mov	r5, r2
 8006f00:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f04:	fb03 6711 	mls	r7, r3, r1, r6
 8006f08:	5dc7      	ldrb	r7, [r0, r7]
 8006f0a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f0e:	4637      	mov	r7, r6
 8006f10:	42bb      	cmp	r3, r7
 8006f12:	460e      	mov	r6, r1
 8006f14:	d9f4      	bls.n	8006f00 <_printf_i+0x11c>
 8006f16:	2b08      	cmp	r3, #8
 8006f18:	d10b      	bne.n	8006f32 <_printf_i+0x14e>
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	07de      	lsls	r6, r3, #31
 8006f1e:	d508      	bpl.n	8006f32 <_printf_i+0x14e>
 8006f20:	6923      	ldr	r3, [r4, #16]
 8006f22:	6861      	ldr	r1, [r4, #4]
 8006f24:	4299      	cmp	r1, r3
 8006f26:	bfde      	ittt	le
 8006f28:	2330      	movle	r3, #48	; 0x30
 8006f2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f32:	1b52      	subs	r2, r2, r5
 8006f34:	6122      	str	r2, [r4, #16]
 8006f36:	464b      	mov	r3, r9
 8006f38:	4621      	mov	r1, r4
 8006f3a:	4640      	mov	r0, r8
 8006f3c:	f8cd a000 	str.w	sl, [sp]
 8006f40:	aa03      	add	r2, sp, #12
 8006f42:	f7ff fedf 	bl	8006d04 <_printf_common>
 8006f46:	3001      	adds	r0, #1
 8006f48:	d14c      	bne.n	8006fe4 <_printf_i+0x200>
 8006f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4e:	b004      	add	sp, #16
 8006f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f54:	4834      	ldr	r0, [pc, #208]	; (8007028 <_printf_i+0x244>)
 8006f56:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f5a:	6829      	ldr	r1, [r5, #0]
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f62:	6029      	str	r1, [r5, #0]
 8006f64:	061d      	lsls	r5, r3, #24
 8006f66:	d514      	bpl.n	8006f92 <_printf_i+0x1ae>
 8006f68:	07df      	lsls	r7, r3, #31
 8006f6a:	bf44      	itt	mi
 8006f6c:	f043 0320 	orrmi.w	r3, r3, #32
 8006f70:	6023      	strmi	r3, [r4, #0]
 8006f72:	b91e      	cbnz	r6, 8006f7c <_printf_i+0x198>
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	f023 0320 	bic.w	r3, r3, #32
 8006f7a:	6023      	str	r3, [r4, #0]
 8006f7c:	2310      	movs	r3, #16
 8006f7e:	e7af      	b.n	8006ee0 <_printf_i+0xfc>
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	f043 0320 	orr.w	r3, r3, #32
 8006f86:	6023      	str	r3, [r4, #0]
 8006f88:	2378      	movs	r3, #120	; 0x78
 8006f8a:	4828      	ldr	r0, [pc, #160]	; (800702c <_printf_i+0x248>)
 8006f8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f90:	e7e3      	b.n	8006f5a <_printf_i+0x176>
 8006f92:	0659      	lsls	r1, r3, #25
 8006f94:	bf48      	it	mi
 8006f96:	b2b6      	uxthmi	r6, r6
 8006f98:	e7e6      	b.n	8006f68 <_printf_i+0x184>
 8006f9a:	4615      	mov	r5, r2
 8006f9c:	e7bb      	b.n	8006f16 <_printf_i+0x132>
 8006f9e:	682b      	ldr	r3, [r5, #0]
 8006fa0:	6826      	ldr	r6, [r4, #0]
 8006fa2:	1d18      	adds	r0, r3, #4
 8006fa4:	6961      	ldr	r1, [r4, #20]
 8006fa6:	6028      	str	r0, [r5, #0]
 8006fa8:	0635      	lsls	r5, r6, #24
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	d501      	bpl.n	8006fb2 <_printf_i+0x1ce>
 8006fae:	6019      	str	r1, [r3, #0]
 8006fb0:	e002      	b.n	8006fb8 <_printf_i+0x1d4>
 8006fb2:	0670      	lsls	r0, r6, #25
 8006fb4:	d5fb      	bpl.n	8006fae <_printf_i+0x1ca>
 8006fb6:	8019      	strh	r1, [r3, #0]
 8006fb8:	2300      	movs	r3, #0
 8006fba:	4615      	mov	r5, r2
 8006fbc:	6123      	str	r3, [r4, #16]
 8006fbe:	e7ba      	b.n	8006f36 <_printf_i+0x152>
 8006fc0:	682b      	ldr	r3, [r5, #0]
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	1d1a      	adds	r2, r3, #4
 8006fc6:	602a      	str	r2, [r5, #0]
 8006fc8:	681d      	ldr	r5, [r3, #0]
 8006fca:	6862      	ldr	r2, [r4, #4]
 8006fcc:	4628      	mov	r0, r5
 8006fce:	f000 f82f 	bl	8007030 <memchr>
 8006fd2:	b108      	cbz	r0, 8006fd8 <_printf_i+0x1f4>
 8006fd4:	1b40      	subs	r0, r0, r5
 8006fd6:	6060      	str	r0, [r4, #4]
 8006fd8:	6863      	ldr	r3, [r4, #4]
 8006fda:	6123      	str	r3, [r4, #16]
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fe2:	e7a8      	b.n	8006f36 <_printf_i+0x152>
 8006fe4:	462a      	mov	r2, r5
 8006fe6:	4649      	mov	r1, r9
 8006fe8:	4640      	mov	r0, r8
 8006fea:	6923      	ldr	r3, [r4, #16]
 8006fec:	47d0      	blx	sl
 8006fee:	3001      	adds	r0, #1
 8006ff0:	d0ab      	beq.n	8006f4a <_printf_i+0x166>
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	079b      	lsls	r3, r3, #30
 8006ff6:	d413      	bmi.n	8007020 <_printf_i+0x23c>
 8006ff8:	68e0      	ldr	r0, [r4, #12]
 8006ffa:	9b03      	ldr	r3, [sp, #12]
 8006ffc:	4298      	cmp	r0, r3
 8006ffe:	bfb8      	it	lt
 8007000:	4618      	movlt	r0, r3
 8007002:	e7a4      	b.n	8006f4e <_printf_i+0x16a>
 8007004:	2301      	movs	r3, #1
 8007006:	4632      	mov	r2, r6
 8007008:	4649      	mov	r1, r9
 800700a:	4640      	mov	r0, r8
 800700c:	47d0      	blx	sl
 800700e:	3001      	adds	r0, #1
 8007010:	d09b      	beq.n	8006f4a <_printf_i+0x166>
 8007012:	3501      	adds	r5, #1
 8007014:	68e3      	ldr	r3, [r4, #12]
 8007016:	9903      	ldr	r1, [sp, #12]
 8007018:	1a5b      	subs	r3, r3, r1
 800701a:	42ab      	cmp	r3, r5
 800701c:	dcf2      	bgt.n	8007004 <_printf_i+0x220>
 800701e:	e7eb      	b.n	8006ff8 <_printf_i+0x214>
 8007020:	2500      	movs	r5, #0
 8007022:	f104 0619 	add.w	r6, r4, #25
 8007026:	e7f5      	b.n	8007014 <_printf_i+0x230>
 8007028:	0800750d 	.word	0x0800750d
 800702c:	0800751e 	.word	0x0800751e

08007030 <memchr>:
 8007030:	4603      	mov	r3, r0
 8007032:	b510      	push	{r4, lr}
 8007034:	b2c9      	uxtb	r1, r1
 8007036:	4402      	add	r2, r0
 8007038:	4293      	cmp	r3, r2
 800703a:	4618      	mov	r0, r3
 800703c:	d101      	bne.n	8007042 <memchr+0x12>
 800703e:	2000      	movs	r0, #0
 8007040:	e003      	b.n	800704a <memchr+0x1a>
 8007042:	7804      	ldrb	r4, [r0, #0]
 8007044:	3301      	adds	r3, #1
 8007046:	428c      	cmp	r4, r1
 8007048:	d1f6      	bne.n	8007038 <memchr+0x8>
 800704a:	bd10      	pop	{r4, pc}

0800704c <memmove>:
 800704c:	4288      	cmp	r0, r1
 800704e:	b510      	push	{r4, lr}
 8007050:	eb01 0402 	add.w	r4, r1, r2
 8007054:	d902      	bls.n	800705c <memmove+0x10>
 8007056:	4284      	cmp	r4, r0
 8007058:	4623      	mov	r3, r4
 800705a:	d807      	bhi.n	800706c <memmove+0x20>
 800705c:	1e43      	subs	r3, r0, #1
 800705e:	42a1      	cmp	r1, r4
 8007060:	d008      	beq.n	8007074 <memmove+0x28>
 8007062:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800706a:	e7f8      	b.n	800705e <memmove+0x12>
 800706c:	4601      	mov	r1, r0
 800706e:	4402      	add	r2, r0
 8007070:	428a      	cmp	r2, r1
 8007072:	d100      	bne.n	8007076 <memmove+0x2a>
 8007074:	bd10      	pop	{r4, pc}
 8007076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800707a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800707e:	e7f7      	b.n	8007070 <memmove+0x24>

08007080 <_free_r>:
 8007080:	b538      	push	{r3, r4, r5, lr}
 8007082:	4605      	mov	r5, r0
 8007084:	2900      	cmp	r1, #0
 8007086:	d040      	beq.n	800710a <_free_r+0x8a>
 8007088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800708c:	1f0c      	subs	r4, r1, #4
 800708e:	2b00      	cmp	r3, #0
 8007090:	bfb8      	it	lt
 8007092:	18e4      	addlt	r4, r4, r3
 8007094:	f000 f910 	bl	80072b8 <__malloc_lock>
 8007098:	4a1c      	ldr	r2, [pc, #112]	; (800710c <_free_r+0x8c>)
 800709a:	6813      	ldr	r3, [r2, #0]
 800709c:	b933      	cbnz	r3, 80070ac <_free_r+0x2c>
 800709e:	6063      	str	r3, [r4, #4]
 80070a0:	6014      	str	r4, [r2, #0]
 80070a2:	4628      	mov	r0, r5
 80070a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070a8:	f000 b90c 	b.w	80072c4 <__malloc_unlock>
 80070ac:	42a3      	cmp	r3, r4
 80070ae:	d908      	bls.n	80070c2 <_free_r+0x42>
 80070b0:	6820      	ldr	r0, [r4, #0]
 80070b2:	1821      	adds	r1, r4, r0
 80070b4:	428b      	cmp	r3, r1
 80070b6:	bf01      	itttt	eq
 80070b8:	6819      	ldreq	r1, [r3, #0]
 80070ba:	685b      	ldreq	r3, [r3, #4]
 80070bc:	1809      	addeq	r1, r1, r0
 80070be:	6021      	streq	r1, [r4, #0]
 80070c0:	e7ed      	b.n	800709e <_free_r+0x1e>
 80070c2:	461a      	mov	r2, r3
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	b10b      	cbz	r3, 80070cc <_free_r+0x4c>
 80070c8:	42a3      	cmp	r3, r4
 80070ca:	d9fa      	bls.n	80070c2 <_free_r+0x42>
 80070cc:	6811      	ldr	r1, [r2, #0]
 80070ce:	1850      	adds	r0, r2, r1
 80070d0:	42a0      	cmp	r0, r4
 80070d2:	d10b      	bne.n	80070ec <_free_r+0x6c>
 80070d4:	6820      	ldr	r0, [r4, #0]
 80070d6:	4401      	add	r1, r0
 80070d8:	1850      	adds	r0, r2, r1
 80070da:	4283      	cmp	r3, r0
 80070dc:	6011      	str	r1, [r2, #0]
 80070de:	d1e0      	bne.n	80070a2 <_free_r+0x22>
 80070e0:	6818      	ldr	r0, [r3, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	4401      	add	r1, r0
 80070e6:	6011      	str	r1, [r2, #0]
 80070e8:	6053      	str	r3, [r2, #4]
 80070ea:	e7da      	b.n	80070a2 <_free_r+0x22>
 80070ec:	d902      	bls.n	80070f4 <_free_r+0x74>
 80070ee:	230c      	movs	r3, #12
 80070f0:	602b      	str	r3, [r5, #0]
 80070f2:	e7d6      	b.n	80070a2 <_free_r+0x22>
 80070f4:	6820      	ldr	r0, [r4, #0]
 80070f6:	1821      	adds	r1, r4, r0
 80070f8:	428b      	cmp	r3, r1
 80070fa:	bf01      	itttt	eq
 80070fc:	6819      	ldreq	r1, [r3, #0]
 80070fe:	685b      	ldreq	r3, [r3, #4]
 8007100:	1809      	addeq	r1, r1, r0
 8007102:	6021      	streq	r1, [r4, #0]
 8007104:	6063      	str	r3, [r4, #4]
 8007106:	6054      	str	r4, [r2, #4]
 8007108:	e7cb      	b.n	80070a2 <_free_r+0x22>
 800710a:	bd38      	pop	{r3, r4, r5, pc}
 800710c:	20001f34 	.word	0x20001f34

08007110 <sbrk_aligned>:
 8007110:	b570      	push	{r4, r5, r6, lr}
 8007112:	4e0e      	ldr	r6, [pc, #56]	; (800714c <sbrk_aligned+0x3c>)
 8007114:	460c      	mov	r4, r1
 8007116:	6831      	ldr	r1, [r6, #0]
 8007118:	4605      	mov	r5, r0
 800711a:	b911      	cbnz	r1, 8007122 <sbrk_aligned+0x12>
 800711c:	f000 f8bc 	bl	8007298 <_sbrk_r>
 8007120:	6030      	str	r0, [r6, #0]
 8007122:	4621      	mov	r1, r4
 8007124:	4628      	mov	r0, r5
 8007126:	f000 f8b7 	bl	8007298 <_sbrk_r>
 800712a:	1c43      	adds	r3, r0, #1
 800712c:	d00a      	beq.n	8007144 <sbrk_aligned+0x34>
 800712e:	1cc4      	adds	r4, r0, #3
 8007130:	f024 0403 	bic.w	r4, r4, #3
 8007134:	42a0      	cmp	r0, r4
 8007136:	d007      	beq.n	8007148 <sbrk_aligned+0x38>
 8007138:	1a21      	subs	r1, r4, r0
 800713a:	4628      	mov	r0, r5
 800713c:	f000 f8ac 	bl	8007298 <_sbrk_r>
 8007140:	3001      	adds	r0, #1
 8007142:	d101      	bne.n	8007148 <sbrk_aligned+0x38>
 8007144:	f04f 34ff 	mov.w	r4, #4294967295
 8007148:	4620      	mov	r0, r4
 800714a:	bd70      	pop	{r4, r5, r6, pc}
 800714c:	20001f38 	.word	0x20001f38

08007150 <_malloc_r>:
 8007150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007154:	1ccd      	adds	r5, r1, #3
 8007156:	f025 0503 	bic.w	r5, r5, #3
 800715a:	3508      	adds	r5, #8
 800715c:	2d0c      	cmp	r5, #12
 800715e:	bf38      	it	cc
 8007160:	250c      	movcc	r5, #12
 8007162:	2d00      	cmp	r5, #0
 8007164:	4607      	mov	r7, r0
 8007166:	db01      	blt.n	800716c <_malloc_r+0x1c>
 8007168:	42a9      	cmp	r1, r5
 800716a:	d905      	bls.n	8007178 <_malloc_r+0x28>
 800716c:	230c      	movs	r3, #12
 800716e:	2600      	movs	r6, #0
 8007170:	603b      	str	r3, [r7, #0]
 8007172:	4630      	mov	r0, r6
 8007174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007178:	4e2e      	ldr	r6, [pc, #184]	; (8007234 <_malloc_r+0xe4>)
 800717a:	f000 f89d 	bl	80072b8 <__malloc_lock>
 800717e:	6833      	ldr	r3, [r6, #0]
 8007180:	461c      	mov	r4, r3
 8007182:	bb34      	cbnz	r4, 80071d2 <_malloc_r+0x82>
 8007184:	4629      	mov	r1, r5
 8007186:	4638      	mov	r0, r7
 8007188:	f7ff ffc2 	bl	8007110 <sbrk_aligned>
 800718c:	1c43      	adds	r3, r0, #1
 800718e:	4604      	mov	r4, r0
 8007190:	d14d      	bne.n	800722e <_malloc_r+0xde>
 8007192:	6834      	ldr	r4, [r6, #0]
 8007194:	4626      	mov	r6, r4
 8007196:	2e00      	cmp	r6, #0
 8007198:	d140      	bne.n	800721c <_malloc_r+0xcc>
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	4631      	mov	r1, r6
 800719e:	4638      	mov	r0, r7
 80071a0:	eb04 0803 	add.w	r8, r4, r3
 80071a4:	f000 f878 	bl	8007298 <_sbrk_r>
 80071a8:	4580      	cmp	r8, r0
 80071aa:	d13a      	bne.n	8007222 <_malloc_r+0xd2>
 80071ac:	6821      	ldr	r1, [r4, #0]
 80071ae:	3503      	adds	r5, #3
 80071b0:	1a6d      	subs	r5, r5, r1
 80071b2:	f025 0503 	bic.w	r5, r5, #3
 80071b6:	3508      	adds	r5, #8
 80071b8:	2d0c      	cmp	r5, #12
 80071ba:	bf38      	it	cc
 80071bc:	250c      	movcc	r5, #12
 80071be:	4638      	mov	r0, r7
 80071c0:	4629      	mov	r1, r5
 80071c2:	f7ff ffa5 	bl	8007110 <sbrk_aligned>
 80071c6:	3001      	adds	r0, #1
 80071c8:	d02b      	beq.n	8007222 <_malloc_r+0xd2>
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	442b      	add	r3, r5
 80071ce:	6023      	str	r3, [r4, #0]
 80071d0:	e00e      	b.n	80071f0 <_malloc_r+0xa0>
 80071d2:	6822      	ldr	r2, [r4, #0]
 80071d4:	1b52      	subs	r2, r2, r5
 80071d6:	d41e      	bmi.n	8007216 <_malloc_r+0xc6>
 80071d8:	2a0b      	cmp	r2, #11
 80071da:	d916      	bls.n	800720a <_malloc_r+0xba>
 80071dc:	1961      	adds	r1, r4, r5
 80071de:	42a3      	cmp	r3, r4
 80071e0:	6025      	str	r5, [r4, #0]
 80071e2:	bf18      	it	ne
 80071e4:	6059      	strne	r1, [r3, #4]
 80071e6:	6863      	ldr	r3, [r4, #4]
 80071e8:	bf08      	it	eq
 80071ea:	6031      	streq	r1, [r6, #0]
 80071ec:	5162      	str	r2, [r4, r5]
 80071ee:	604b      	str	r3, [r1, #4]
 80071f0:	4638      	mov	r0, r7
 80071f2:	f104 060b 	add.w	r6, r4, #11
 80071f6:	f000 f865 	bl	80072c4 <__malloc_unlock>
 80071fa:	f026 0607 	bic.w	r6, r6, #7
 80071fe:	1d23      	adds	r3, r4, #4
 8007200:	1af2      	subs	r2, r6, r3
 8007202:	d0b6      	beq.n	8007172 <_malloc_r+0x22>
 8007204:	1b9b      	subs	r3, r3, r6
 8007206:	50a3      	str	r3, [r4, r2]
 8007208:	e7b3      	b.n	8007172 <_malloc_r+0x22>
 800720a:	6862      	ldr	r2, [r4, #4]
 800720c:	42a3      	cmp	r3, r4
 800720e:	bf0c      	ite	eq
 8007210:	6032      	streq	r2, [r6, #0]
 8007212:	605a      	strne	r2, [r3, #4]
 8007214:	e7ec      	b.n	80071f0 <_malloc_r+0xa0>
 8007216:	4623      	mov	r3, r4
 8007218:	6864      	ldr	r4, [r4, #4]
 800721a:	e7b2      	b.n	8007182 <_malloc_r+0x32>
 800721c:	4634      	mov	r4, r6
 800721e:	6876      	ldr	r6, [r6, #4]
 8007220:	e7b9      	b.n	8007196 <_malloc_r+0x46>
 8007222:	230c      	movs	r3, #12
 8007224:	4638      	mov	r0, r7
 8007226:	603b      	str	r3, [r7, #0]
 8007228:	f000 f84c 	bl	80072c4 <__malloc_unlock>
 800722c:	e7a1      	b.n	8007172 <_malloc_r+0x22>
 800722e:	6025      	str	r5, [r4, #0]
 8007230:	e7de      	b.n	80071f0 <_malloc_r+0xa0>
 8007232:	bf00      	nop
 8007234:	20001f34 	.word	0x20001f34

08007238 <_realloc_r>:
 8007238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800723c:	4680      	mov	r8, r0
 800723e:	4614      	mov	r4, r2
 8007240:	460e      	mov	r6, r1
 8007242:	b921      	cbnz	r1, 800724e <_realloc_r+0x16>
 8007244:	4611      	mov	r1, r2
 8007246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800724a:	f7ff bf81 	b.w	8007150 <_malloc_r>
 800724e:	b92a      	cbnz	r2, 800725c <_realloc_r+0x24>
 8007250:	f7ff ff16 	bl	8007080 <_free_r>
 8007254:	4625      	mov	r5, r4
 8007256:	4628      	mov	r0, r5
 8007258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800725c:	f000 f838 	bl	80072d0 <_malloc_usable_size_r>
 8007260:	4284      	cmp	r4, r0
 8007262:	4607      	mov	r7, r0
 8007264:	d802      	bhi.n	800726c <_realloc_r+0x34>
 8007266:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800726a:	d812      	bhi.n	8007292 <_realloc_r+0x5a>
 800726c:	4621      	mov	r1, r4
 800726e:	4640      	mov	r0, r8
 8007270:	f7ff ff6e 	bl	8007150 <_malloc_r>
 8007274:	4605      	mov	r5, r0
 8007276:	2800      	cmp	r0, #0
 8007278:	d0ed      	beq.n	8007256 <_realloc_r+0x1e>
 800727a:	42bc      	cmp	r4, r7
 800727c:	4622      	mov	r2, r4
 800727e:	4631      	mov	r1, r6
 8007280:	bf28      	it	cs
 8007282:	463a      	movcs	r2, r7
 8007284:	f7ff fbac 	bl	80069e0 <memcpy>
 8007288:	4631      	mov	r1, r6
 800728a:	4640      	mov	r0, r8
 800728c:	f7ff fef8 	bl	8007080 <_free_r>
 8007290:	e7e1      	b.n	8007256 <_realloc_r+0x1e>
 8007292:	4635      	mov	r5, r6
 8007294:	e7df      	b.n	8007256 <_realloc_r+0x1e>
	...

08007298 <_sbrk_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	2300      	movs	r3, #0
 800729c:	4d05      	ldr	r5, [pc, #20]	; (80072b4 <_sbrk_r+0x1c>)
 800729e:	4604      	mov	r4, r0
 80072a0:	4608      	mov	r0, r1
 80072a2:	602b      	str	r3, [r5, #0]
 80072a4:	f7f9 fff0 	bl	8001288 <_sbrk>
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	d102      	bne.n	80072b2 <_sbrk_r+0x1a>
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	b103      	cbz	r3, 80072b2 <_sbrk_r+0x1a>
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	bd38      	pop	{r3, r4, r5, pc}
 80072b4:	20001f3c 	.word	0x20001f3c

080072b8 <__malloc_lock>:
 80072b8:	4801      	ldr	r0, [pc, #4]	; (80072c0 <__malloc_lock+0x8>)
 80072ba:	f000 b811 	b.w	80072e0 <__retarget_lock_acquire_recursive>
 80072be:	bf00      	nop
 80072c0:	20001f40 	.word	0x20001f40

080072c4 <__malloc_unlock>:
 80072c4:	4801      	ldr	r0, [pc, #4]	; (80072cc <__malloc_unlock+0x8>)
 80072c6:	f000 b80c 	b.w	80072e2 <__retarget_lock_release_recursive>
 80072ca:	bf00      	nop
 80072cc:	20001f40 	.word	0x20001f40

080072d0 <_malloc_usable_size_r>:
 80072d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d4:	1f18      	subs	r0, r3, #4
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	bfbc      	itt	lt
 80072da:	580b      	ldrlt	r3, [r1, r0]
 80072dc:	18c0      	addlt	r0, r0, r3
 80072de:	4770      	bx	lr

080072e0 <__retarget_lock_acquire_recursive>:
 80072e0:	4770      	bx	lr

080072e2 <__retarget_lock_release_recursive>:
 80072e2:	4770      	bx	lr

080072e4 <_init>:
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e6:	bf00      	nop
 80072e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ea:	bc08      	pop	{r3}
 80072ec:	469e      	mov	lr, r3
 80072ee:	4770      	bx	lr

080072f0 <_fini>:
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	bf00      	nop
 80072f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f6:	bc08      	pop	{r3}
 80072f8:	469e      	mov	lr, r3
 80072fa:	4770      	bx	lr
