
FreeRTOS_V6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054e8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  080055f8  080055f8  000155f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057ac  080057ac  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080057ac  080057ac  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057ac  080057ac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057ac  080057ac  000157ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057b0  080057b0  000157b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080057b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e7c  20000010  080057c4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e8c  080057c4  00021e8c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140ff  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ea4  00000000  00000000  00034138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00036fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d0  00000000  00000000  000381f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002a17  00000000  00000000  000392c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013211  00000000  00000000  0003bcdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095bd2  00000000  00000000  0004eef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4ac2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b34  00000000  00000000  000e4b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080055e0 	.word	0x080055e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080055e0 	.word	0x080055e0

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fc2a 	bl	80009ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f884 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f9d0 	bl	8000500 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000160:	f000 f8dc 	bl	800031c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000164:	f000 f918 	bl	8000398 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000168:	f000 f954 	bl	8000414 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800016c:	f002 fc62 	bl	8002a34 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of ThrottleQueue */
  ThrottleQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &ThrottleQueue_attributes);
 8000170:	4a25      	ldr	r2, [pc, #148]	; (8000208 <main+0xb8>)
 8000172:	2102      	movs	r1, #2
 8000174:	2010      	movs	r0, #16
 8000176:	f002 fd9b 	bl	8002cb0 <osMessageQueueNew>
 800017a:	4603      	mov	r3, r0
 800017c:	4a23      	ldr	r2, [pc, #140]	; (800020c <main+0xbc>)
 800017e:	6013      	str	r3, [r2, #0]

  /* creation of BrakeQueue */
  BrakeQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &BrakeQueue_attributes);
 8000180:	4a23      	ldr	r2, [pc, #140]	; (8000210 <main+0xc0>)
 8000182:	2102      	movs	r1, #2
 8000184:	2010      	movs	r0, #16
 8000186:	f002 fd93 	bl	8002cb0 <osMessageQueueNew>
 800018a:	4603      	mov	r3, r0
 800018c:	4a21      	ldr	r2, [pc, #132]	; (8000214 <main+0xc4>)
 800018e:	6013      	str	r3, [r2, #0]

  /* creation of GearQueue */
  GearQueueHandle = osMessageQueueNew (16, sizeof(char), &GearQueue_attributes);
 8000190:	4a21      	ldr	r2, [pc, #132]	; (8000218 <main+0xc8>)
 8000192:	2101      	movs	r1, #1
 8000194:	2010      	movs	r0, #16
 8000196:	f002 fd8b 	bl	8002cb0 <osMessageQueueNew>
 800019a:	4603      	mov	r3, r0
 800019c:	4a1f      	ldr	r2, [pc, #124]	; (800021c <main+0xcc>)
 800019e:	6013      	str	r3, [r2, #0]

  /* creation of SpeedQueue */
  SpeedQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &SpeedQueue_attributes);
 80001a0:	4a1f      	ldr	r2, [pc, #124]	; (8000220 <main+0xd0>)
 80001a2:	2102      	movs	r1, #2
 80001a4:	2010      	movs	r0, #16
 80001a6:	f002 fd83 	bl	8002cb0 <osMessageQueueNew>
 80001aa:	4603      	mov	r3, r0
 80001ac:	4a1d      	ldr	r2, [pc, #116]	; (8000224 <main+0xd4>)
 80001ae:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Throttle */
  ThrottleHandle = osThreadNew(ThrottleInput, NULL, &Throttle_attributes);
 80001b0:	4a1d      	ldr	r2, [pc, #116]	; (8000228 <main+0xd8>)
 80001b2:	2100      	movs	r1, #0
 80001b4:	481d      	ldr	r0, [pc, #116]	; (800022c <main+0xdc>)
 80001b6:	f002 fca3 	bl	8002b00 <osThreadNew>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4a1c      	ldr	r2, [pc, #112]	; (8000230 <main+0xe0>)
 80001be:	6013      	str	r3, [r2, #0]

  /* creation of Brake */
  BrakeHandle = osThreadNew(BrakeInput, NULL, &Brake_attributes);
 80001c0:	4a1c      	ldr	r2, [pc, #112]	; (8000234 <main+0xe4>)
 80001c2:	2100      	movs	r1, #0
 80001c4:	481c      	ldr	r0, [pc, #112]	; (8000238 <main+0xe8>)
 80001c6:	f002 fc9b 	bl	8002b00 <osThreadNew>
 80001ca:	4603      	mov	r3, r0
 80001cc:	4a1b      	ldr	r2, [pc, #108]	; (800023c <main+0xec>)
 80001ce:	6013      	str	r3, [r2, #0]

  /* creation of Gear */
  GearHandle = osThreadNew(GearSelection, NULL, &Gear_attributes);
 80001d0:	4a1b      	ldr	r2, [pc, #108]	; (8000240 <main+0xf0>)
 80001d2:	2100      	movs	r1, #0
 80001d4:	481b      	ldr	r0, [pc, #108]	; (8000244 <main+0xf4>)
 80001d6:	f002 fc93 	bl	8002b00 <osThreadNew>
 80001da:	4603      	mov	r3, r0
 80001dc:	4a1a      	ldr	r2, [pc, #104]	; (8000248 <main+0xf8>)
 80001de:	6013      	str	r3, [r2, #0]

  /* creation of Data */
  DataHandle = osThreadNew(DataProcessing, NULL, &Data_attributes);
 80001e0:	4a1a      	ldr	r2, [pc, #104]	; (800024c <main+0xfc>)
 80001e2:	2100      	movs	r1, #0
 80001e4:	481a      	ldr	r0, [pc, #104]	; (8000250 <main+0x100>)
 80001e6:	f002 fc8b 	bl	8002b00 <osThreadNew>
 80001ea:	4603      	mov	r3, r0
 80001ec:	4a19      	ldr	r2, [pc, #100]	; (8000254 <main+0x104>)
 80001ee:	6013      	str	r3, [r2, #0]

  /* creation of Display */
  DisplayHandle = osThreadNew(OutputDisplay, NULL, &Display_attributes);
 80001f0:	4a19      	ldr	r2, [pc, #100]	; (8000258 <main+0x108>)
 80001f2:	2100      	movs	r1, #0
 80001f4:	4819      	ldr	r0, [pc, #100]	; (800025c <main+0x10c>)
 80001f6:	f002 fc83 	bl	8002b00 <osThreadNew>
 80001fa:	4603      	mov	r3, r0
 80001fc:	4a18      	ldr	r2, [pc, #96]	; (8000260 <main+0x110>)
 80001fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000200:	f002 fc4a 	bl	8002a98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000204:	e7fe      	b.n	8000204 <main+0xb4>
 8000206:	bf00      	nop
 8000208:	08005734 	.word	0x08005734
 800020c:	200000e8 	.word	0x200000e8
 8000210:	0800574c 	.word	0x0800574c
 8000214:	200000ec 	.word	0x200000ec
 8000218:	08005764 	.word	0x08005764
 800021c:	200000f0 	.word	0x200000f0
 8000220:	0800577c 	.word	0x0800577c
 8000224:	200000f4 	.word	0x200000f4
 8000228:	08005680 	.word	0x08005680
 800022c:	080005dd 	.word	0x080005dd
 8000230:	200000d4 	.word	0x200000d4
 8000234:	080056a4 	.word	0x080056a4
 8000238:	080005ed 	.word	0x080005ed
 800023c:	200000d8 	.word	0x200000d8
 8000240:	080056c8 	.word	0x080056c8
 8000244:	080005fd 	.word	0x080005fd
 8000248:	200000dc 	.word	0x200000dc
 800024c:	080056ec 	.word	0x080056ec
 8000250:	0800060d 	.word	0x0800060d
 8000254:	200000e0 	.word	0x200000e0
 8000258:	08005710 	.word	0x08005710
 800025c:	0800061d 	.word	0x0800061d
 8000260:	200000e4 	.word	0x200000e4

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b094      	sub	sp, #80	; 0x50
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800026e:	2228      	movs	r2, #40	; 0x28
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f005 f9ac 	bl	80055d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	f107 0314 	add.w	r3, r7, #20
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]
 8000284:	60da      	str	r2, [r3, #12]
 8000286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000294:	2301      	movs	r3, #1
 8000296:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800029c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a2:	2301      	movs	r3, #1
 80002a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a6:	2302      	movs	r3, #2
 80002a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 f836 	bl	800132c <HAL_RCC_OscConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002c6:	f000 f9c3 	bl	8000650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ca:	230f      	movs	r3, #15
 80002cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ce:	2302      	movs	r3, #2
 80002d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e0:	f107 0314 	add.w	r3, r7, #20
 80002e4:	2102      	movs	r1, #2
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 faa2 	bl	8001830 <HAL_RCC_ClockConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002f2:	f000 f9ad 	bl	8000650 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002f6:	2302      	movs	r3, #2
 80002f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002fe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	4618      	mov	r0, r3
 8000304:	f001 fc48 	bl	8001b98 <HAL_RCCEx_PeriphCLKConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800030e:	f000 f99f 	bl	8000650 <Error_Handler>
  }
}
 8000312:	bf00      	nop
 8000314:	3750      	adds	r7, #80	; 0x50
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	605a      	str	r2, [r3, #4]
 800032a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800032c:	4b18      	ldr	r3, [pc, #96]	; (8000390 <MX_ADC1_Init+0x74>)
 800032e:	4a19      	ldr	r2, [pc, #100]	; (8000394 <MX_ADC1_Init+0x78>)
 8000330:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000332:	4b17      	ldr	r3, [pc, #92]	; (8000390 <MX_ADC1_Init+0x74>)
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <MX_ADC1_Init+0x74>)
 800033a:	2200      	movs	r2, #0
 800033c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800033e:	4b14      	ldr	r3, [pc, #80]	; (8000390 <MX_ADC1_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000344:	4b12      	ldr	r3, [pc, #72]	; (8000390 <MX_ADC1_Init+0x74>)
 8000346:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800034a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800034c:	4b10      	ldr	r3, [pc, #64]	; (8000390 <MX_ADC1_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000352:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <MX_ADC1_Init+0x74>)
 8000354:	2201      	movs	r2, #1
 8000356:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000358:	480d      	ldr	r0, [pc, #52]	; (8000390 <MX_ADC1_Init+0x74>)
 800035a:	f000 fb59 	bl	8000a10 <HAL_ADC_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000364:	f000 f974 	bl	8000650 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000368:	2304      	movs	r3, #4
 800036a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800036c:	2301      	movs	r3, #1
 800036e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	4619      	mov	r1, r3
 8000378:	4805      	ldr	r0, [pc, #20]	; (8000390 <MX_ADC1_Init+0x74>)
 800037a:	f000 fc21 	bl	8000bc0 <HAL_ADC_ConfigChannel>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000384:	f000 f964 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000388:	bf00      	nop
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	2000002c 	.word	0x2000002c
 8000394:	40012400 	.word	0x40012400

08000398 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80003a8:	4b18      	ldr	r3, [pc, #96]	; (800040c <MX_ADC2_Init+0x74>)
 80003aa:	4a19      	ldr	r2, [pc, #100]	; (8000410 <MX_ADC2_Init+0x78>)
 80003ac:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ae:	4b17      	ldr	r3, [pc, #92]	; (800040c <MX_ADC2_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80003b4:	4b15      	ldr	r3, [pc, #84]	; (800040c <MX_ADC2_Init+0x74>)
 80003b6:	2201      	movs	r2, #1
 80003b8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003ba:	4b14      	ldr	r3, [pc, #80]	; (800040c <MX_ADC2_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003c0:	4b12      	ldr	r3, [pc, #72]	; (800040c <MX_ADC2_Init+0x74>)
 80003c2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003c6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003c8:	4b10      	ldr	r3, [pc, #64]	; (800040c <MX_ADC2_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80003ce:	4b0f      	ldr	r3, [pc, #60]	; (800040c <MX_ADC2_Init+0x74>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003d4:	480d      	ldr	r0, [pc, #52]	; (800040c <MX_ADC2_Init+0x74>)
 80003d6:	f000 fb1b 	bl	8000a10 <HAL_ADC_Init>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80003e0:	f000 f936 	bl	8000650 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003e4:	2305      	movs	r3, #5
 80003e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003e8:	2301      	movs	r3, #1
 80003ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	4619      	mov	r1, r3
 80003f4:	4805      	ldr	r0, [pc, #20]	; (800040c <MX_ADC2_Init+0x74>)
 80003f6:	f000 fbe3 	bl	8000bc0 <HAL_ADC_ConfigChannel>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000400:	f000 f926 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000404:	bf00      	nop
 8000406:	3710      	adds	r7, #16
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	2000005c 	.word	0x2000005c
 8000410:	40012800 	.word	0x40012800

08000414 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b08e      	sub	sp, #56	; 0x38
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800041a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000428:	f107 0320 	add.w	r3, r7, #32
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
 800043c:	60da      	str	r2, [r3, #12]
 800043e:	611a      	str	r2, [r3, #16]
 8000440:	615a      	str	r2, [r3, #20]
 8000442:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000444:	4b2d      	ldr	r3, [pc, #180]	; (80004fc <MX_TIM2_Init+0xe8>)
 8000446:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800044a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800044c:	4b2b      	ldr	r3, [pc, #172]	; (80004fc <MX_TIM2_Init+0xe8>)
 800044e:	2200      	movs	r2, #0
 8000450:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000452:	4b2a      	ldr	r3, [pc, #168]	; (80004fc <MX_TIM2_Init+0xe8>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000458:	4b28      	ldr	r3, [pc, #160]	; (80004fc <MX_TIM2_Init+0xe8>)
 800045a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800045e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000460:	4b26      	ldr	r3, [pc, #152]	; (80004fc <MX_TIM2_Init+0xe8>)
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000466:	4b25      	ldr	r3, [pc, #148]	; (80004fc <MX_TIM2_Init+0xe8>)
 8000468:	2200      	movs	r2, #0
 800046a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800046c:	4823      	ldr	r0, [pc, #140]	; (80004fc <MX_TIM2_Init+0xe8>)
 800046e:	f001 fc49 	bl	8001d04 <HAL_TIM_Base_Init>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000478:	f000 f8ea 	bl	8000650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800047c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000480:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000482:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000486:	4619      	mov	r1, r3
 8000488:	481c      	ldr	r0, [pc, #112]	; (80004fc <MX_TIM2_Init+0xe8>)
 800048a:	f001 fefb 	bl	8002284 <HAL_TIM_ConfigClockSource>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000494:	f000 f8dc 	bl	8000650 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000498:	4818      	ldr	r0, [pc, #96]	; (80004fc <MX_TIM2_Init+0xe8>)
 800049a:	f001 fcd5 	bl	8001e48 <HAL_TIM_PWM_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80004a4:	f000 f8d4 	bl	8000650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a8:	2300      	movs	r3, #0
 80004aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ac:	2300      	movs	r3, #0
 80004ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004b0:	f107 0320 	add.w	r3, r7, #32
 80004b4:	4619      	mov	r1, r3
 80004b6:	4811      	ldr	r0, [pc, #68]	; (80004fc <MX_TIM2_Init+0xe8>)
 80004b8:	f002 fa4c 	bl	8002954 <HAL_TIMEx_MasterConfigSynchronization>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80004c2:	f000 f8c5 	bl	8000650 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004c6:	2360      	movs	r3, #96	; 0x60
 80004c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ce:	2300      	movs	r3, #0
 80004d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	2200      	movs	r2, #0
 80004da:	4619      	mov	r1, r3
 80004dc:	4807      	ldr	r0, [pc, #28]	; (80004fc <MX_TIM2_Init+0xe8>)
 80004de:	f001 fe13 	bl	8002108 <HAL_TIM_PWM_ConfigChannel>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80004e8:	f000 f8b2 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004ec:	4803      	ldr	r0, [pc, #12]	; (80004fc <MX_TIM2_Init+0xe8>)
 80004ee:	f000 f96f 	bl	80007d0 <HAL_TIM_MspPostInit>

}
 80004f2:	bf00      	nop
 80004f4:	3738      	adds	r7, #56	; 0x38
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	2000008c 	.word	0x2000008c

08000500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000514:	4b2e      	ldr	r3, [pc, #184]	; (80005d0 <MX_GPIO_Init+0xd0>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a2d      	ldr	r2, [pc, #180]	; (80005d0 <MX_GPIO_Init+0xd0>)
 800051a:	f043 0320 	orr.w	r3, r3, #32
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b2b      	ldr	r3, [pc, #172]	; (80005d0 <MX_GPIO_Init+0xd0>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0320 	and.w	r3, r3, #32
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052c:	4b28      	ldr	r3, [pc, #160]	; (80005d0 <MX_GPIO_Init+0xd0>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a27      	ldr	r2, [pc, #156]	; (80005d0 <MX_GPIO_Init+0xd0>)
 8000532:	f043 0304 	orr.w	r3, r3, #4
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <MX_GPIO_Init+0xd0>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0304 	and.w	r3, r3, #4
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000544:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <MX_GPIO_Init+0xd0>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a21      	ldr	r2, [pc, #132]	; (80005d0 <MX_GPIO_Init+0xd0>)
 800054a:	f043 0308 	orr.w	r3, r3, #8
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <MX_GPIO_Init+0xd0>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f003 0308 	and.w	r3, r3, #8
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	210a      	movs	r1, #10
 8000560:	481c      	ldr	r0, [pc, #112]	; (80005d4 <MX_GPIO_Init+0xd4>)
 8000562:	f000 fecb 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f640 4103 	movw	r1, #3075	; 0xc03
 800056c:	481a      	ldr	r0, [pc, #104]	; (80005d8 <MX_GPIO_Init+0xd8>)
 800056e:	f000 fec5 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000572:	230a      	movs	r3, #10
 8000574:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000576:	2301      	movs	r3, #1
 8000578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057e:	2302      	movs	r3, #2
 8000580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	4619      	mov	r1, r3
 8000588:	4812      	ldr	r0, [pc, #72]	; (80005d4 <MX_GPIO_Init+0xd4>)
 800058a:	f000 fd33 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 800058e:	f640 4303 	movw	r3, #3075	; 0xc03
 8000592:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000594:	2301      	movs	r3, #1
 8000596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059c:	2302      	movs	r3, #2
 800059e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4619      	mov	r1, r3
 80005a6:	480c      	ldr	r0, [pc, #48]	; (80005d8 <MX_GPIO_Init+0xd8>)
 80005a8:	f000 fd24 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	4619      	mov	r1, r3
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <MX_GPIO_Init+0xd4>)
 80005c2:	f000 fd17 	bl	8000ff4 <HAL_GPIO_Init>

}
 80005c6:	bf00      	nop
 80005c8:	3720      	adds	r7, #32
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40010800 	.word	0x40010800
 80005d8:	40010c00 	.word	0x40010c00

080005dc <ThrottleInput>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ThrottleInput */
void ThrottleInput(void *argument)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f002 fb35 	bl	8002c54 <osDelay>
 80005ea:	e7fb      	b.n	80005e4 <ThrottleInput+0x8>

080005ec <BrakeInput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BrakeInput */
void BrakeInput(void *argument)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BrakeInput */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f002 fb2d 	bl	8002c54 <osDelay>
 80005fa:	e7fb      	b.n	80005f4 <BrakeInput+0x8>

080005fc <GearSelection>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GearSelection */
void GearSelection(void *argument)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GearSelection */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000604:	2001      	movs	r0, #1
 8000606:	f002 fb25 	bl	8002c54 <osDelay>
 800060a:	e7fb      	b.n	8000604 <GearSelection+0x8>

0800060c <DataProcessing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DataProcessing */
void DataProcessing(void *argument)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DataProcessing */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000614:	2001      	movs	r0, #1
 8000616:	f002 fb1d 	bl	8002c54 <osDelay>
 800061a:	e7fb      	b.n	8000614 <DataProcessing+0x8>

0800061c <OutputDisplay>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OutputDisplay */
void OutputDisplay(void *argument)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OutputDisplay */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000624:	2001      	movs	r0, #1
 8000626:	f002 fb15 	bl	8002c54 <osDelay>
 800062a:	e7fb      	b.n	8000624 <OutputDisplay+0x8>

0800062c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d101      	bne.n	8000642 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800063e:	f000 f9cb 	bl	80009d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40012c00 	.word	0x40012c00

08000650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000654:	b672      	cpsid	i
}
 8000656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000658:	e7fe      	b.n	8000658 <Error_Handler+0x8>
	...

0800065c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000662:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <HAL_MspInit+0x68>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <HAL_MspInit+0x68>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6193      	str	r3, [r2, #24]
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_MspInit+0x68>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_MspInit+0x68>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	4a11      	ldr	r2, [pc, #68]	; (80006c4 <HAL_MspInit+0x68>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000684:	61d3      	str	r3, [r2, #28]
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <HAL_MspInit+0x68>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	210f      	movs	r1, #15
 8000696:	f06f 0001 	mvn.w	r0, #1
 800069a:	f000 fc80 	bl	8000f9e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <HAL_MspInit+0x6c>)
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <HAL_MspInit+0x6c>)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010000 	.word	0x40010000

080006cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 0318 	add.w	r3, r7, #24
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a28      	ldr	r2, [pc, #160]	; (8000788 <HAL_ADC_MspInit+0xbc>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d122      	bne.n	8000732 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <HAL_ADC_MspInit+0xc0>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a26      	ldr	r2, [pc, #152]	; (800078c <HAL_ADC_MspInit+0xc0>)
 80006f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b24      	ldr	r3, [pc, #144]	; (800078c <HAL_ADC_MspInit+0xc0>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000700:	617b      	str	r3, [r7, #20]
 8000702:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b21      	ldr	r3, [pc, #132]	; (800078c <HAL_ADC_MspInit+0xc0>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a20      	ldr	r2, [pc, #128]	; (800078c <HAL_ADC_MspInit+0xc0>)
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <HAL_ADC_MspInit+0xc0>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800071c:	2310      	movs	r3, #16
 800071e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000720:	2303      	movs	r3, #3
 8000722:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000724:	f107 0318 	add.w	r3, r7, #24
 8000728:	4619      	mov	r1, r3
 800072a:	4819      	ldr	r0, [pc, #100]	; (8000790 <HAL_ADC_MspInit+0xc4>)
 800072c:	f000 fc62 	bl	8000ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000730:	e026      	b.n	8000780 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <HAL_ADC_MspInit+0xc8>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d121      	bne.n	8000780 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <HAL_ADC_MspInit+0xc0>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a12      	ldr	r2, [pc, #72]	; (800078c <HAL_ADC_MspInit+0xc0>)
 8000742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <HAL_ADC_MspInit+0xc0>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000754:	4b0d      	ldr	r3, [pc, #52]	; (800078c <HAL_ADC_MspInit+0xc0>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a0c      	ldr	r2, [pc, #48]	; (800078c <HAL_ADC_MspInit+0xc0>)
 800075a:	f043 0304 	orr.w	r3, r3, #4
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <HAL_ADC_MspInit+0xc0>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0304 	and.w	r3, r3, #4
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800076c:	2320      	movs	r3, #32
 800076e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000770:	2303      	movs	r3, #3
 8000772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 0318 	add.w	r3, r7, #24
 8000778:	4619      	mov	r1, r3
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <HAL_ADC_MspInit+0xc4>)
 800077c:	f000 fc3a 	bl	8000ff4 <HAL_GPIO_Init>
}
 8000780:	bf00      	nop
 8000782:	3728      	adds	r7, #40	; 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40012400 	.word	0x40012400
 800078c:	40021000 	.word	0x40021000
 8000790:	40010800 	.word	0x40010800
 8000794:	40012800 	.word	0x40012800

08000798 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007a8:	d10b      	bne.n	80007c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <HAL_TIM_Base_MspInit+0x34>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	4a07      	ldr	r2, [pc, #28]	; (80007cc <HAL_TIM_Base_MspInit+0x34>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	61d3      	str	r3, [r2, #28]
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <HAL_TIM_Base_MspInit+0x34>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007c2:	bf00      	nop
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	40021000 	.word	0x40021000

080007d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007ee:	d117      	bne.n	8000820 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <HAL_TIM_MspPostInit+0x58>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <HAL_TIM_MspPostInit+0x58>)
 80007f6:	f043 0304 	orr.w	r3, r3, #4
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <HAL_TIM_MspPostInit+0x58>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000808:	2301      	movs	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2302      	movs	r3, #2
 8000812:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	4619      	mov	r1, r3
 800081a:	4804      	ldr	r0, [pc, #16]	; (800082c <HAL_TIM_MspPostInit+0x5c>)
 800081c:	f000 fbea 	bl	8000ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000820:	bf00      	nop
 8000822:	3720      	adds	r7, #32
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40021000 	.word	0x40021000
 800082c:	40010800 	.word	0x40010800

08000830 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000840:	2300      	movs	r3, #0
 8000842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000846:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <HAL_InitTick+0xd0>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	4a2d      	ldr	r2, [pc, #180]	; (8000900 <HAL_InitTick+0xd0>)
 800084c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000850:	6193      	str	r3, [r2, #24]
 8000852:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <HAL_InitTick+0xd0>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800085e:	f107 020c 	add.w	r2, r7, #12
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	4611      	mov	r1, r2
 8000868:	4618      	mov	r0, r3
 800086a:	f001 f947 	bl	8001afc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800086e:	f001 f931 	bl	8001ad4 <HAL_RCC_GetPCLK2Freq>
 8000872:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000876:	4a23      	ldr	r2, [pc, #140]	; (8000904 <HAL_InitTick+0xd4>)
 8000878:	fba2 2303 	umull	r2, r3, r2, r3
 800087c:	0c9b      	lsrs	r3, r3, #18
 800087e:	3b01      	subs	r3, #1
 8000880:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000882:	4b21      	ldr	r3, [pc, #132]	; (8000908 <HAL_InitTick+0xd8>)
 8000884:	4a21      	ldr	r2, [pc, #132]	; (800090c <HAL_InitTick+0xdc>)
 8000886:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000888:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <HAL_InitTick+0xd8>)
 800088a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800088e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000890:	4a1d      	ldr	r2, [pc, #116]	; (8000908 <HAL_InitTick+0xd8>)
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000894:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <HAL_InitTick+0xd8>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <HAL_InitTick+0xd8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <HAL_InitTick+0xd8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80008a8:	4817      	ldr	r0, [pc, #92]	; (8000908 <HAL_InitTick+0xd8>)
 80008aa:	f001 fa2b 	bl	8001d04 <HAL_TIM_Base_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80008b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d11b      	bne.n	80008f4 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80008bc:	4812      	ldr	r0, [pc, #72]	; (8000908 <HAL_InitTick+0xd8>)
 80008be:	f001 fa71 	bl	8001da4 <HAL_TIM_Base_Start_IT>
 80008c2:	4603      	mov	r3, r0
 80008c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80008c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d111      	bne.n	80008f4 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80008d0:	2019      	movs	r0, #25
 80008d2:	f000 fb80 	bl	8000fd6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	d808      	bhi.n	80008ee <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80008dc:	2200      	movs	r2, #0
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	2019      	movs	r0, #25
 80008e2:	f000 fb5c 	bl	8000f9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <HAL_InitTick+0xe0>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6013      	str	r3, [r2, #0]
 80008ec:	e002      	b.n	80008f4 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3730      	adds	r7, #48	; 0x30
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40021000 	.word	0x40021000
 8000904:	431bde83 	.word	0x431bde83
 8000908:	200000f8 	.word	0x200000f8
 800090c:	40012c00 	.word	0x40012c00
 8000910:	20000004 	.word	0x20000004

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <NMI_Handler+0x4>

0800091a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <MemManage_Handler+0x4>

08000926 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <BusFault_Handler+0x4>

0800092c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <UsageFault_Handler+0x4>

08000932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
	...

08000940 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <TIM1_UP_IRQHandler+0x10>)
 8000946:	f001 fad7 	bl	8001ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200000f8 	.word	0x200000f8

08000954 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000962:	490d      	ldr	r1, [pc, #52]	; (8000998 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000964:	4a0d      	ldr	r2, [pc, #52]	; (800099c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000978:	4c0a      	ldr	r4, [pc, #40]	; (80009a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000986:	f7ff ffe5 	bl	8000954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800098a:	f004 fdef 	bl	800556c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098e:	f7ff fbdf 	bl	8000150 <main>
  bx lr
 8000992:	4770      	bx	lr
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800099c:	080057b4 	.word	0x080057b4
  ldr r2, =_sbss
 80009a0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009a4:	20001e8c 	.word	0x20001e8c

080009a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC1_2_IRQHandler>
	...

080009ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <HAL_Init+0x28>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <HAL_Init+0x28>)
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009bc:	2003      	movs	r0, #3
 80009be:	f000 fae3 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009c2:	200f      	movs	r0, #15
 80009c4:	f7ff ff34 	bl	8000830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c8:	f7ff fe48 	bl	800065c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40022000 	.word	0x40022000

080009d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x1c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_IncTick+0x20>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4413      	add	r3, r2
 80009e8:	4a03      	ldr	r2, [pc, #12]	; (80009f8 <HAL_IncTick+0x20>)
 80009ea:	6013      	str	r3, [r2, #0]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000140 	.word	0x20000140

080009fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b02      	ldr	r3, [pc, #8]	; (8000a0c <HAL_GetTick+0x10>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	20000140 	.word	0x20000140

08000a10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d101      	bne.n	8000a32 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e0be      	b.n	8000bb0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d109      	bne.n	8000a54 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff fe3c 	bl	80006cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f000 f9ab 	bl	8000db0 <ADC_ConversionStop_Disable>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a62:	f003 0310 	and.w	r3, r3, #16
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f040 8099 	bne.w	8000b9e <HAL_ADC_Init+0x18e>
 8000a6c:	7dfb      	ldrb	r3, [r7, #23]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f040 8095 	bne.w	8000b9e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a7c:	f023 0302 	bic.w	r3, r3, #2
 8000a80:	f043 0202 	orr.w	r2, r3, #2
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a90:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	7b1b      	ldrb	r3, [r3, #12]
 8000a96:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a98:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000aa8:	d003      	beq.n	8000ab2 <HAL_ADC_Init+0xa2>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d102      	bne.n	8000ab8 <HAL_ADC_Init+0xa8>
 8000ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ab6:	e000      	b.n	8000aba <HAL_ADC_Init+0xaa>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	7d1b      	ldrb	r3, [r3, #20]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d119      	bne.n	8000afc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	7b1b      	ldrb	r3, [r3, #12]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d109      	bne.n	8000ae4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	035a      	lsls	r2, r3, #13
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	e00b      	b.n	8000afc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae8:	f043 0220 	orr.w	r2, r3, #32
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af4:	f043 0201 	orr.w	r2, r3, #1
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	689a      	ldr	r2, [r3, #8]
 8000b16:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <HAL_ADC_Init+0x1a8>)
 8000b18:	4013      	ands	r3, r2
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	6812      	ldr	r2, [r2, #0]
 8000b1e:	68b9      	ldr	r1, [r7, #8]
 8000b20:	430b      	orrs	r3, r1
 8000b22:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b2c:	d003      	beq.n	8000b36 <HAL_ADC_Init+0x126>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d104      	bne.n	8000b40 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	691b      	ldr	r3, [r3, #16]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	051b      	lsls	r3, r3, #20
 8000b3e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b46:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	430a      	orrs	r2, r1
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	689a      	ldr	r2, [r3, #8]
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <HAL_ADC_Init+0x1ac>)
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d10b      	bne.n	8000b7c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b6e:	f023 0303 	bic.w	r3, r3, #3
 8000b72:	f043 0201 	orr.w	r2, r3, #1
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b7a:	e018      	b.n	8000bae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b80:	f023 0312 	bic.w	r3, r3, #18
 8000b84:	f043 0210 	orr.w	r2, r3, #16
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b90:	f043 0201 	orr.w	r2, r3, #1
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b9c:	e007      	b.n	8000bae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba2:	f043 0210 	orr.w	r2, r3, #16
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	ffe1f7fd 	.word	0xffe1f7fd
 8000bbc:	ff1f0efe 	.word	0xff1f0efe

08000bc0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d101      	bne.n	8000be0 <HAL_ADC_ConfigChannel+0x20>
 8000bdc:	2302      	movs	r3, #2
 8000bde:	e0dc      	b.n	8000d9a <HAL_ADC_ConfigChannel+0x1da>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2201      	movs	r2, #1
 8000be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2b06      	cmp	r3, #6
 8000bee:	d81c      	bhi.n	8000c2a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	3b05      	subs	r3, #5
 8000c02:	221f      	movs	r2, #31
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	4019      	ands	r1, r3
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	4613      	mov	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	4413      	add	r3, r2
 8000c1a:	3b05      	subs	r3, #5
 8000c1c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	430a      	orrs	r2, r1
 8000c26:	635a      	str	r2, [r3, #52]	; 0x34
 8000c28:	e03c      	b.n	8000ca4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	2b0c      	cmp	r3, #12
 8000c30:	d81c      	bhi.n	8000c6c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	4413      	add	r3, r2
 8000c42:	3b23      	subs	r3, #35	; 0x23
 8000c44:	221f      	movs	r2, #31
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	4019      	ands	r1, r3
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	6818      	ldr	r0, [r3, #0]
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	4413      	add	r3, r2
 8000c5c:	3b23      	subs	r3, #35	; 0x23
 8000c5e:	fa00 f203 	lsl.w	r2, r0, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	430a      	orrs	r2, r1
 8000c68:	631a      	str	r2, [r3, #48]	; 0x30
 8000c6a:	e01b      	b.n	8000ca4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	4613      	mov	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4413      	add	r3, r2
 8000c7c:	3b41      	subs	r3, #65	; 0x41
 8000c7e:	221f      	movs	r2, #31
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	4019      	ands	r1, r3
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	6818      	ldr	r0, [r3, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685a      	ldr	r2, [r3, #4]
 8000c90:	4613      	mov	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4413      	add	r3, r2
 8000c96:	3b41      	subs	r3, #65	; 0x41
 8000c98:	fa00 f203 	lsl.w	r2, r0, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b09      	cmp	r3, #9
 8000caa:	d91c      	bls.n	8000ce6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	68d9      	ldr	r1, [r3, #12]
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	4413      	add	r3, r2
 8000cbc:	3b1e      	subs	r3, #30
 8000cbe:	2207      	movs	r2, #7
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	4019      	ands	r1, r3
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	6898      	ldr	r0, [r3, #8]
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	3b1e      	subs	r3, #30
 8000cd8:	fa00 f203 	lsl.w	r2, r0, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	e019      	b.n	8000d1a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	6919      	ldr	r1, [r3, #16]
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4413      	add	r3, r2
 8000cf6:	2207      	movs	r2, #7
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	4019      	ands	r1, r3
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	6898      	ldr	r0, [r3, #8]
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	430a      	orrs	r2, r1
 8000d18:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b10      	cmp	r3, #16
 8000d20:	d003      	beq.n	8000d2a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d26:	2b11      	cmp	r3, #17
 8000d28:	d132      	bne.n	8000d90 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a1d      	ldr	r2, [pc, #116]	; (8000da4 <HAL_ADC_ConfigChannel+0x1e4>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d125      	bne.n	8000d80 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d126      	bne.n	8000d90 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d50:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b10      	cmp	r3, #16
 8000d58:	d11a      	bne.n	8000d90 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <HAL_ADC_ConfigChannel+0x1e8>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a13      	ldr	r2, [pc, #76]	; (8000dac <HAL_ADC_ConfigChannel+0x1ec>)
 8000d60:	fba2 2303 	umull	r2, r3, r2, r3
 8000d64:	0c9a      	lsrs	r2, r3, #18
 8000d66:	4613      	mov	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d70:	e002      	b.n	8000d78 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d1f9      	bne.n	8000d72 <HAL_ADC_ConfigChannel+0x1b2>
 8000d7e:	e007      	b.n	8000d90 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d84:	f043 0220 	orr.w	r2, r3, #32
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	40012400 	.word	0x40012400
 8000da8:	20000000 	.word	0x20000000
 8000dac:	431bde83 	.word	0x431bde83

08000db0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d12e      	bne.n	8000e28 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f022 0201 	bic.w	r2, r2, #1
 8000dd8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000dda:	f7ff fe0f 	bl	80009fc <HAL_GetTick>
 8000dde:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000de0:	e01b      	b.n	8000e1a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000de2:	f7ff fe0b 	bl	80009fc <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d914      	bls.n	8000e1a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d10d      	bne.n	8000e1a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e02:	f043 0210 	orr.w	r2, r3, #16
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0e:	f043 0201 	orr.w	r2, r3, #1
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e007      	b.n	8000e2a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d0dc      	beq.n	8000de2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db0b      	blt.n	8000ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4906      	ldr	r1, [pc, #24]	; (8000ecc <__NVIC_EnableIRQ+0x34>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	; (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff4f 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb0:	f7ff ff64 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8000fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	6978      	ldr	r0, [r7, #20]
 8000fbc:	f7ff ffb2 	bl	8000f24 <NVIC_EncodePriority>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff81 	bl	8000ed0 <__NVIC_SetPriority>
}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff57 	bl	8000e98 <__NVIC_EnableIRQ>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b08b      	sub	sp, #44	; 0x2c
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001006:	e169      	b.n	80012dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001008:	2201      	movs	r2, #1
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	69fa      	ldr	r2, [r7, #28]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	429a      	cmp	r2, r3
 8001022:	f040 8158 	bne.w	80012d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	4a9a      	ldr	r2, [pc, #616]	; (8001294 <HAL_GPIO_Init+0x2a0>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d05e      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
 8001030:	4a98      	ldr	r2, [pc, #608]	; (8001294 <HAL_GPIO_Init+0x2a0>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d875      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 8001036:	4a98      	ldr	r2, [pc, #608]	; (8001298 <HAL_GPIO_Init+0x2a4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d058      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
 800103c:	4a96      	ldr	r2, [pc, #600]	; (8001298 <HAL_GPIO_Init+0x2a4>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d86f      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 8001042:	4a96      	ldr	r2, [pc, #600]	; (800129c <HAL_GPIO_Init+0x2a8>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d052      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
 8001048:	4a94      	ldr	r2, [pc, #592]	; (800129c <HAL_GPIO_Init+0x2a8>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d869      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 800104e:	4a94      	ldr	r2, [pc, #592]	; (80012a0 <HAL_GPIO_Init+0x2ac>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d04c      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
 8001054:	4a92      	ldr	r2, [pc, #584]	; (80012a0 <HAL_GPIO_Init+0x2ac>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d863      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 800105a:	4a92      	ldr	r2, [pc, #584]	; (80012a4 <HAL_GPIO_Init+0x2b0>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d046      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
 8001060:	4a90      	ldr	r2, [pc, #576]	; (80012a4 <HAL_GPIO_Init+0x2b0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d85d      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 8001066:	2b12      	cmp	r3, #18
 8001068:	d82a      	bhi.n	80010c0 <HAL_GPIO_Init+0xcc>
 800106a:	2b12      	cmp	r3, #18
 800106c:	d859      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 800106e:	a201      	add	r2, pc, #4	; (adr r2, 8001074 <HAL_GPIO_Init+0x80>)
 8001070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001074:	080010ef 	.word	0x080010ef
 8001078:	080010c9 	.word	0x080010c9
 800107c:	080010db 	.word	0x080010db
 8001080:	0800111d 	.word	0x0800111d
 8001084:	08001123 	.word	0x08001123
 8001088:	08001123 	.word	0x08001123
 800108c:	08001123 	.word	0x08001123
 8001090:	08001123 	.word	0x08001123
 8001094:	08001123 	.word	0x08001123
 8001098:	08001123 	.word	0x08001123
 800109c:	08001123 	.word	0x08001123
 80010a0:	08001123 	.word	0x08001123
 80010a4:	08001123 	.word	0x08001123
 80010a8:	08001123 	.word	0x08001123
 80010ac:	08001123 	.word	0x08001123
 80010b0:	08001123 	.word	0x08001123
 80010b4:	08001123 	.word	0x08001123
 80010b8:	080010d1 	.word	0x080010d1
 80010bc:	080010e5 	.word	0x080010e5
 80010c0:	4a79      	ldr	r2, [pc, #484]	; (80012a8 <HAL_GPIO_Init+0x2b4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d013      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010c6:	e02c      	b.n	8001122 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	623b      	str	r3, [r7, #32]
          break;
 80010ce:	e029      	b.n	8001124 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	3304      	adds	r3, #4
 80010d6:	623b      	str	r3, [r7, #32]
          break;
 80010d8:	e024      	b.n	8001124 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	3308      	adds	r3, #8
 80010e0:	623b      	str	r3, [r7, #32]
          break;
 80010e2:	e01f      	b.n	8001124 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	330c      	adds	r3, #12
 80010ea:	623b      	str	r3, [r7, #32]
          break;
 80010ec:	e01a      	b.n	8001124 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d102      	bne.n	80010fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010f6:	2304      	movs	r3, #4
 80010f8:	623b      	str	r3, [r7, #32]
          break;
 80010fa:	e013      	b.n	8001124 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d105      	bne.n	8001110 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001104:	2308      	movs	r3, #8
 8001106:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69fa      	ldr	r2, [r7, #28]
 800110c:	611a      	str	r2, [r3, #16]
          break;
 800110e:	e009      	b.n	8001124 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001110:	2308      	movs	r3, #8
 8001112:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	615a      	str	r2, [r3, #20]
          break;
 800111a:	e003      	b.n	8001124 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
          break;
 8001120:	e000      	b.n	8001124 <HAL_GPIO_Init+0x130>
          break;
 8001122:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	2bff      	cmp	r3, #255	; 0xff
 8001128:	d801      	bhi.n	800112e <HAL_GPIO_Init+0x13a>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	e001      	b.n	8001132 <HAL_GPIO_Init+0x13e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3304      	adds	r3, #4
 8001132:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	2bff      	cmp	r3, #255	; 0xff
 8001138:	d802      	bhi.n	8001140 <HAL_GPIO_Init+0x14c>
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	e002      	b.n	8001146 <HAL_GPIO_Init+0x152>
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	3b08      	subs	r3, #8
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	210f      	movs	r1, #15
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	401a      	ands	r2, r3
 8001158:	6a39      	ldr	r1, [r7, #32]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	431a      	orrs	r2, r3
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 80b1 	beq.w	80012d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001174:	4b4d      	ldr	r3, [pc, #308]	; (80012ac <HAL_GPIO_Init+0x2b8>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a4c      	ldr	r2, [pc, #304]	; (80012ac <HAL_GPIO_Init+0x2b8>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b4a      	ldr	r3, [pc, #296]	; (80012ac <HAL_GPIO_Init+0x2b8>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800118c:	4a48      	ldr	r2, [pc, #288]	; (80012b0 <HAL_GPIO_Init+0x2bc>)
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	3302      	adds	r3, #2
 8001194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001198:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	4013      	ands	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a40      	ldr	r2, [pc, #256]	; (80012b4 <HAL_GPIO_Init+0x2c0>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d013      	beq.n	80011e0 <HAL_GPIO_Init+0x1ec>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a3f      	ldr	r2, [pc, #252]	; (80012b8 <HAL_GPIO_Init+0x2c4>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d00d      	beq.n	80011dc <HAL_GPIO_Init+0x1e8>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a3e      	ldr	r2, [pc, #248]	; (80012bc <HAL_GPIO_Init+0x2c8>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d007      	beq.n	80011d8 <HAL_GPIO_Init+0x1e4>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a3d      	ldr	r2, [pc, #244]	; (80012c0 <HAL_GPIO_Init+0x2cc>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d101      	bne.n	80011d4 <HAL_GPIO_Init+0x1e0>
 80011d0:	2303      	movs	r3, #3
 80011d2:	e006      	b.n	80011e2 <HAL_GPIO_Init+0x1ee>
 80011d4:	2304      	movs	r3, #4
 80011d6:	e004      	b.n	80011e2 <HAL_GPIO_Init+0x1ee>
 80011d8:	2302      	movs	r3, #2
 80011da:	e002      	b.n	80011e2 <HAL_GPIO_Init+0x1ee>
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <HAL_GPIO_Init+0x1ee>
 80011e0:	2300      	movs	r3, #0
 80011e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e4:	f002 0203 	and.w	r2, r2, #3
 80011e8:	0092      	lsls	r2, r2, #2
 80011ea:	4093      	lsls	r3, r2
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011f2:	492f      	ldr	r1, [pc, #188]	; (80012b0 <HAL_GPIO_Init+0x2bc>)
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800120c:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	492c      	ldr	r1, [pc, #176]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	600b      	str	r3, [r1, #0]
 8001218:	e006      	b.n	8001228 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800121a:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	43db      	mvns	r3, r3
 8001222:	4928      	ldr	r1, [pc, #160]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001224:	4013      	ands	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d006      	beq.n	8001242 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	4922      	ldr	r1, [pc, #136]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	604b      	str	r3, [r1, #4]
 8001240:	e006      	b.n	8001250 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001242:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	43db      	mvns	r3, r3
 800124a:	491e      	ldr	r1, [pc, #120]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800124c:	4013      	ands	r3, r2
 800124e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d006      	beq.n	800126a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	4918      	ldr	r1, [pc, #96]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	608b      	str	r3, [r1, #8]
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	43db      	mvns	r3, r3
 8001272:	4914      	ldr	r1, [pc, #80]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001274:	4013      	ands	r3, r2
 8001276:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d021      	beq.n	80012c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	490e      	ldr	r1, [pc, #56]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	60cb      	str	r3, [r1, #12]
 8001290:	e021      	b.n	80012d6 <HAL_GPIO_Init+0x2e2>
 8001292:	bf00      	nop
 8001294:	10320000 	.word	0x10320000
 8001298:	10310000 	.word	0x10310000
 800129c:	10220000 	.word	0x10220000
 80012a0:	10210000 	.word	0x10210000
 80012a4:	10120000 	.word	0x10120000
 80012a8:	10110000 	.word	0x10110000
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010000 	.word	0x40010000
 80012b4:	40010800 	.word	0x40010800
 80012b8:	40010c00 	.word	0x40010c00
 80012bc:	40011000 	.word	0x40011000
 80012c0:	40011400 	.word	0x40011400
 80012c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_GPIO_Init+0x304>)
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	4909      	ldr	r1, [pc, #36]	; (80012f8 <HAL_GPIO_Init+0x304>)
 80012d2:	4013      	ands	r3, r2
 80012d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	3301      	adds	r3, #1
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	fa22 f303 	lsr.w	r3, r2, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f47f ae8e 	bne.w	8001008 <HAL_GPIO_Init+0x14>
  }
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	372c      	adds	r7, #44	; 0x2c
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	40010400 	.word	0x40010400

080012fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
 8001308:	4613      	mov	r3, r2
 800130a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800130c:	787b      	ldrb	r3, [r7, #1]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001318:	e003      	b.n	8001322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800131a:	887b      	ldrh	r3, [r7, #2]
 800131c:	041a      	lsls	r2, r3, #16
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	611a      	str	r2, [r3, #16]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e272      	b.n	8001824 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 8087 	beq.w	800145a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800134c:	4b92      	ldr	r3, [pc, #584]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 030c 	and.w	r3, r3, #12
 8001354:	2b04      	cmp	r3, #4
 8001356:	d00c      	beq.n	8001372 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001358:	4b8f      	ldr	r3, [pc, #572]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 030c 	and.w	r3, r3, #12
 8001360:	2b08      	cmp	r3, #8
 8001362:	d112      	bne.n	800138a <HAL_RCC_OscConfig+0x5e>
 8001364:	4b8c      	ldr	r3, [pc, #560]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001370:	d10b      	bne.n	800138a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001372:	4b89      	ldr	r3, [pc, #548]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d06c      	beq.n	8001458 <HAL_RCC_OscConfig+0x12c>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d168      	bne.n	8001458 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e24c      	b.n	8001824 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001392:	d106      	bne.n	80013a2 <HAL_RCC_OscConfig+0x76>
 8001394:	4b80      	ldr	r3, [pc, #512]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a7f      	ldr	r2, [pc, #508]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 800139a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	e02e      	b.n	8001400 <HAL_RCC_OscConfig+0xd4>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10c      	bne.n	80013c4 <HAL_RCC_OscConfig+0x98>
 80013aa:	4b7b      	ldr	r3, [pc, #492]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a7a      	ldr	r2, [pc, #488]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	4b78      	ldr	r3, [pc, #480]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a77      	ldr	r2, [pc, #476]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	e01d      	b.n	8001400 <HAL_RCC_OscConfig+0xd4>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013cc:	d10c      	bne.n	80013e8 <HAL_RCC_OscConfig+0xbc>
 80013ce:	4b72      	ldr	r3, [pc, #456]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a71      	ldr	r2, [pc, #452]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	4b6f      	ldr	r3, [pc, #444]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a6e      	ldr	r2, [pc, #440]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	e00b      	b.n	8001400 <HAL_RCC_OscConfig+0xd4>
 80013e8:	4b6b      	ldr	r3, [pc, #428]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a6a      	ldr	r2, [pc, #424]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 80013ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	4b68      	ldr	r3, [pc, #416]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a67      	ldr	r2, [pc, #412]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 80013fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d013      	beq.n	8001430 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff faf8 	bl	80009fc <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001410:	f7ff faf4 	bl	80009fc <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	; 0x64
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e200      	b.n	8001824 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001422:	4b5d      	ldr	r3, [pc, #372]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0xe4>
 800142e:	e014      	b.n	800145a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f7ff fae4 	bl	80009fc <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001438:	f7ff fae0 	bl	80009fc <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b64      	cmp	r3, #100	; 0x64
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e1ec      	b.n	8001824 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144a:	4b53      	ldr	r3, [pc, #332]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f0      	bne.n	8001438 <HAL_RCC_OscConfig+0x10c>
 8001456:	e000      	b.n	800145a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d063      	beq.n	800152e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001466:	4b4c      	ldr	r3, [pc, #304]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00b      	beq.n	800148a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001472:	4b49      	ldr	r3, [pc, #292]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b08      	cmp	r3, #8
 800147c:	d11c      	bne.n	80014b8 <HAL_RCC_OscConfig+0x18c>
 800147e:	4b46      	ldr	r3, [pc, #280]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d116      	bne.n	80014b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800148a:	4b43      	ldr	r3, [pc, #268]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d005      	beq.n	80014a2 <HAL_RCC_OscConfig+0x176>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d001      	beq.n	80014a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e1c0      	b.n	8001824 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a2:	4b3d      	ldr	r3, [pc, #244]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	4939      	ldr	r1, [pc, #228]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b6:	e03a      	b.n	800152e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d020      	beq.n	8001502 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c0:	4b36      	ldr	r3, [pc, #216]	; (800159c <HAL_RCC_OscConfig+0x270>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c6:	f7ff fa99 	bl	80009fc <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ce:	f7ff fa95 	bl	80009fc <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e1a1      	b.n	8001824 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e0:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ec:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	4927      	ldr	r1, [pc, #156]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	600b      	str	r3, [r1, #0]
 8001500:	e015      	b.n	800152e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001502:	4b26      	ldr	r3, [pc, #152]	; (800159c <HAL_RCC_OscConfig+0x270>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fa78 	bl	80009fc <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001510:	f7ff fa74 	bl	80009fc <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e180      	b.n	8001824 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001522:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	2b00      	cmp	r3, #0
 8001538:	d03a      	beq.n	80015b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d019      	beq.n	8001576 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_RCC_OscConfig+0x274>)
 8001544:	2201      	movs	r2, #1
 8001546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001548:	f7ff fa58 	bl	80009fc <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001550:	f7ff fa54 	bl	80009fc <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e160      	b.n	8001824 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001562:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <HAL_RCC_OscConfig+0x26c>)
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800156e:	2001      	movs	r0, #1
 8001570:	f000 faf4 	bl	8001b5c <RCC_Delay>
 8001574:	e01c      	b.n	80015b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <HAL_RCC_OscConfig+0x274>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157c:	f7ff fa3e 	bl	80009fc <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001582:	e00f      	b.n	80015a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001584:	f7ff fa3a 	bl	80009fc <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d908      	bls.n	80015a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e146      	b.n	8001824 <HAL_RCC_OscConfig+0x4f8>
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000
 800159c:	42420000 	.word	0x42420000
 80015a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a4:	4b92      	ldr	r3, [pc, #584]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1e9      	bne.n	8001584 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 80a6 	beq.w	800170a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c2:	4b8b      	ldr	r3, [pc, #556]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10d      	bne.n	80015ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	4b88      	ldr	r3, [pc, #544]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	4a87      	ldr	r2, [pc, #540]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d8:	61d3      	str	r3, [r2, #28]
 80015da:	4b85      	ldr	r3, [pc, #532]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015e6:	2301      	movs	r3, #1
 80015e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ea:	4b82      	ldr	r3, [pc, #520]	; (80017f4 <HAL_RCC_OscConfig+0x4c8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d118      	bne.n	8001628 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f6:	4b7f      	ldr	r3, [pc, #508]	; (80017f4 <HAL_RCC_OscConfig+0x4c8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a7e      	ldr	r2, [pc, #504]	; (80017f4 <HAL_RCC_OscConfig+0x4c8>)
 80015fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001602:	f7ff f9fb 	bl	80009fc <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800160a:	f7ff f9f7 	bl	80009fc <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b64      	cmp	r3, #100	; 0x64
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e103      	b.n	8001824 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161c:	4b75      	ldr	r3, [pc, #468]	; (80017f4 <HAL_RCC_OscConfig+0x4c8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f0      	beq.n	800160a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d106      	bne.n	800163e <HAL_RCC_OscConfig+0x312>
 8001630:	4b6f      	ldr	r3, [pc, #444]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4a6e      	ldr	r2, [pc, #440]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6213      	str	r3, [r2, #32]
 800163c:	e02d      	b.n	800169a <HAL_RCC_OscConfig+0x36e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10c      	bne.n	8001660 <HAL_RCC_OscConfig+0x334>
 8001646:	4b6a      	ldr	r3, [pc, #424]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	4a69      	ldr	r2, [pc, #420]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	f023 0301 	bic.w	r3, r3, #1
 8001650:	6213      	str	r3, [r2, #32]
 8001652:	4b67      	ldr	r3, [pc, #412]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	4a66      	ldr	r2, [pc, #408]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	f023 0304 	bic.w	r3, r3, #4
 800165c:	6213      	str	r3, [r2, #32]
 800165e:	e01c      	b.n	800169a <HAL_RCC_OscConfig+0x36e>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b05      	cmp	r3, #5
 8001666:	d10c      	bne.n	8001682 <HAL_RCC_OscConfig+0x356>
 8001668:	4b61      	ldr	r3, [pc, #388]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4a60      	ldr	r2, [pc, #384]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 800166e:	f043 0304 	orr.w	r3, r3, #4
 8001672:	6213      	str	r3, [r2, #32]
 8001674:	4b5e      	ldr	r3, [pc, #376]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4a5d      	ldr	r2, [pc, #372]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6213      	str	r3, [r2, #32]
 8001680:	e00b      	b.n	800169a <HAL_RCC_OscConfig+0x36e>
 8001682:	4b5b      	ldr	r3, [pc, #364]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	4a5a      	ldr	r2, [pc, #360]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001688:	f023 0301 	bic.w	r3, r3, #1
 800168c:	6213      	str	r3, [r2, #32]
 800168e:	4b58      	ldr	r3, [pc, #352]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	4a57      	ldr	r2, [pc, #348]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001694:	f023 0304 	bic.w	r3, r3, #4
 8001698:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d015      	beq.n	80016ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a2:	f7ff f9ab 	bl	80009fc <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a8:	e00a      	b.n	80016c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016aa:	f7ff f9a7 	bl	80009fc <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e0b1      	b.n	8001824 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c0:	4b4b      	ldr	r3, [pc, #300]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0ee      	beq.n	80016aa <HAL_RCC_OscConfig+0x37e>
 80016cc:	e014      	b.n	80016f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ce:	f7ff f995 	bl	80009fc <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d4:	e00a      	b.n	80016ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d6:	f7ff f991 	bl	80009fc <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e09b      	b.n	8001824 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ec:	4b40      	ldr	r3, [pc, #256]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1ee      	bne.n	80016d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d105      	bne.n	800170a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016fe:	4b3c      	ldr	r3, [pc, #240]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	4a3b      	ldr	r2, [pc, #236]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001708:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 8087 	beq.w	8001822 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001714:	4b36      	ldr	r3, [pc, #216]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 030c 	and.w	r3, r3, #12
 800171c:	2b08      	cmp	r3, #8
 800171e:	d061      	beq.n	80017e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d146      	bne.n	80017b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001728:	4b33      	ldr	r3, [pc, #204]	; (80017f8 <HAL_RCC_OscConfig+0x4cc>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172e:	f7ff f965 	bl	80009fc <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001736:	f7ff f961 	bl	80009fc <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e06d      	b.n	8001824 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001748:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1f0      	bne.n	8001736 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800175c:	d108      	bne.n	8001770 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800175e:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	4921      	ldr	r1, [pc, #132]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a19      	ldr	r1, [r3, #32]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	430b      	orrs	r3, r1
 8001782:	491b      	ldr	r1, [pc, #108]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_RCC_OscConfig+0x4cc>)
 800178a:	2201      	movs	r2, #1
 800178c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178e:	f7ff f935 	bl	80009fc <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001796:	f7ff f931 	bl	80009fc <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e03d      	b.n	8001824 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0f0      	beq.n	8001796 <HAL_RCC_OscConfig+0x46a>
 80017b4:	e035      	b.n	8001822 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <HAL_RCC_OscConfig+0x4cc>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff f91e 	bl	80009fc <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c4:	f7ff f91a 	bl	80009fc <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e026      	b.n	8001824 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x498>
 80017e2:	e01e      	b.n	8001822 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d107      	bne.n	80017fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e019      	b.n	8001824 <HAL_RCC_OscConfig+0x4f8>
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40007000 	.word	0x40007000
 80017f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_RCC_OscConfig+0x500>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	429a      	cmp	r2, r3
 800180e:	d106      	bne.n	800181e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181a:	429a      	cmp	r2, r3
 800181c:	d001      	beq.n	8001822 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40021000 	.word	0x40021000

08001830 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0d0      	b.n	80019e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001844:	4b6a      	ldr	r3, [pc, #424]	; (80019f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d910      	bls.n	8001874 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b67      	ldr	r3, [pc, #412]	; (80019f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 0207 	bic.w	r2, r3, #7
 800185a:	4965      	ldr	r1, [pc, #404]	; (80019f0 <HAL_RCC_ClockConfig+0x1c0>)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	4313      	orrs	r3, r2
 8001860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001862:	4b63      	ldr	r3, [pc, #396]	; (80019f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d001      	beq.n	8001874 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0b8      	b.n	80019e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d020      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800188c:	4b59      	ldr	r3, [pc, #356]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	4a58      	ldr	r2, [pc, #352]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001892:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001896:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0308 	and.w	r3, r3, #8
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018a4:	4b53      	ldr	r3, [pc, #332]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	4a52      	ldr	r2, [pc, #328]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b0:	4b50      	ldr	r3, [pc, #320]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	494d      	ldr	r1, [pc, #308]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d040      	beq.n	8001950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d107      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d6:	4b47      	ldr	r3, [pc, #284]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d115      	bne.n	800190e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e07f      	b.n	80019e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ee:	4b41      	ldr	r3, [pc, #260]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d109      	bne.n	800190e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e073      	b.n	80019e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fe:	4b3d      	ldr	r3, [pc, #244]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e06b      	b.n	80019e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800190e:	4b39      	ldr	r3, [pc, #228]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f023 0203 	bic.w	r2, r3, #3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	4936      	ldr	r1, [pc, #216]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001920:	f7ff f86c 	bl	80009fc <HAL_GetTick>
 8001924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001926:	e00a      	b.n	800193e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001928:	f7ff f868 	bl	80009fc <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	; 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e053      	b.n	80019e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193e:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 020c 	and.w	r2, r3, #12
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	429a      	cmp	r2, r3
 800194e:	d1eb      	bne.n	8001928 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001950:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d210      	bcs.n	8001980 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195e:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f023 0207 	bic.w	r2, r3, #7
 8001966:	4922      	ldr	r1, [pc, #136]	; (80019f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	4313      	orrs	r3, r2
 800196c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800196e:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e032      	b.n	80019e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	d008      	beq.n	800199e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800198c:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	4916      	ldr	r1, [pc, #88]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	4313      	orrs	r3, r2
 800199c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d009      	beq.n	80019be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	490e      	ldr	r1, [pc, #56]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019be:	f000 f821 	bl	8001a04 <HAL_RCC_GetSysClockFreq>
 80019c2:	4602      	mov	r2, r0
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	490a      	ldr	r1, [pc, #40]	; (80019f8 <HAL_RCC_ClockConfig+0x1c8>)
 80019d0:	5ccb      	ldrb	r3, [r1, r3]
 80019d2:	fa22 f303 	lsr.w	r3, r2, r3
 80019d6:	4a09      	ldr	r2, [pc, #36]	; (80019fc <HAL_RCC_ClockConfig+0x1cc>)
 80019d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_RCC_ClockConfig+0x1d0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe ff26 	bl	8000830 <HAL_InitTick>

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40022000 	.word	0x40022000
 80019f4:	40021000 	.word	0x40021000
 80019f8:	08005794 	.word	0x08005794
 80019fc:	20000000 	.word	0x20000000
 8001a00:	20000004 	.word	0x20000004

08001a04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a04:	b490      	push	{r4, r7}
 8001a06:	b08a      	sub	sp, #40	; 0x28
 8001a08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a0a:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001a0c:	1d3c      	adds	r4, r7, #4
 8001a0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a14:	f240 2301 	movw	r3, #513	; 0x201
 8001a18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a2e:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 030c 	and.w	r3, r3, #12
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d002      	beq.n	8001a44 <HAL_RCC_GetSysClockFreq+0x40>
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d003      	beq.n	8001a4a <HAL_RCC_GetSysClockFreq+0x46>
 8001a42:	e02b      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a44:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a46:	623b      	str	r3, [r7, #32]
      break;
 8001a48:	e02b      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	0c9b      	lsrs	r3, r3, #18
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	3328      	adds	r3, #40	; 0x28
 8001a54:	443b      	add	r3, r7
 8001a56:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a5a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d012      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a66:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	0c5b      	lsrs	r3, r3, #17
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	3328      	adds	r3, #40	; 0x28
 8001a72:	443b      	add	r3, r7
 8001a74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	4a0e      	ldr	r2, [pc, #56]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a7e:	fb03 f202 	mul.w	r2, r3, r2
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8a:	e004      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	4a0b      	ldr	r2, [pc, #44]	; (8001abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a90:	fb02 f303 	mul.w	r3, r2, r3
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	623b      	str	r3, [r7, #32]
      break;
 8001a9a:	e002      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a9e:	623b      	str	r3, [r7, #32]
      break;
 8001aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3728      	adds	r7, #40	; 0x28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc90      	pop	{r4, r7}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	08005658 	.word	0x08005658
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	007a1200 	.word	0x007a1200
 8001abc:	003d0900 	.word	0x003d0900

08001ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac4:	4b02      	ldr	r3, [pc, #8]	; (8001ad0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	20000000 	.word	0x20000000

08001ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ad8:	f7ff fff2 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	0adb      	lsrs	r3, r3, #11
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	4903      	ldr	r1, [pc, #12]	; (8001af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aea:	5ccb      	ldrb	r3, [r1, r3]
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40021000 	.word	0x40021000
 8001af8:	080057a4 	.word	0x080057a4

08001afc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	220f      	movs	r2, #15
 8001b0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_RCC_GetClockConfig+0x58>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0203 	and.w	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b18:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_RCC_GetClockConfig+0x58>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_RCC_GetClockConfig+0x58>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_RCC_GetClockConfig+0x58>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	08db      	lsrs	r3, r3, #3
 8001b36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_RCC_GetClockConfig+0x5c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0207 	and.w	r2, r3, #7
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40022000 	.word	0x40022000

08001b5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <RCC_Delay+0x34>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <RCC_Delay+0x38>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0a5b      	lsrs	r3, r3, #9
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b78:	bf00      	nop
  }
  while (Delay --);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1e5a      	subs	r2, r3, #1
 8001b7e:	60fa      	str	r2, [r7, #12]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f9      	bne.n	8001b78 <RCC_Delay+0x1c>
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	20000000 	.word	0x20000000
 8001b94:	10624dd3 	.word	0x10624dd3

08001b98 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d07d      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bb8:	4b4f      	ldr	r3, [pc, #316]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10d      	bne.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc4:	4b4c      	ldr	r3, [pc, #304]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	4a4b      	ldr	r2, [pc, #300]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bce:	61d3      	str	r3, [r2, #28]
 8001bd0:	4b49      	ldr	r3, [pc, #292]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be0:	4b46      	ldr	r3, [pc, #280]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d118      	bne.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bec:	4b43      	ldr	r3, [pc, #268]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a42      	ldr	r2, [pc, #264]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf8:	f7fe ff00 	bl	80009fc <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfe:	e008      	b.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c00:	f7fe fefc 	bl	80009fc <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	; 0x64
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e06d      	b.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c12:	4b3a      	ldr	r3, [pc, #232]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c1e:	4b36      	ldr	r3, [pc, #216]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c26:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d02e      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d027      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c3c:	4b2e      	ldr	r3, [pc, #184]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c44:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c46:	4b2e      	ldr	r3, [pc, #184]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c4c:	4b2c      	ldr	r3, [pc, #176]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c52:	4a29      	ldr	r2, [pc, #164]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d014      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7fe fecb 	bl	80009fc <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c68:	e00a      	b.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6a:	f7fe fec7 	bl	80009fc <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e036      	b.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0ee      	beq.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	4917      	ldr	r1, [pc, #92]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d105      	bne.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d008      	beq.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	490b      	ldr	r1, [pc, #44]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d008      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	4904      	ldr	r1, [pc, #16]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40007000 	.word	0x40007000
 8001d00:	42420440 	.word	0x42420440

08001d04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e041      	b.n	8001d9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d106      	bne.n	8001d30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7fe fd34 	bl	8000798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2202      	movs	r2, #2
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3304      	adds	r3, #4
 8001d40:	4619      	mov	r1, r3
 8001d42:	4610      	mov	r0, r2
 8001d44:	f000 fb86 	bl	8002454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d001      	beq.n	8001dbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e03a      	b.n	8001e32 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a18      	ldr	r2, [pc, #96]	; (8001e3c <HAL_TIM_Base_Start_IT+0x98>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00e      	beq.n	8001dfc <HAL_TIM_Base_Start_IT+0x58>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de6:	d009      	beq.n	8001dfc <HAL_TIM_Base_Start_IT+0x58>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a14      	ldr	r2, [pc, #80]	; (8001e40 <HAL_TIM_Base_Start_IT+0x9c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d004      	beq.n	8001dfc <HAL_TIM_Base_Start_IT+0x58>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a13      	ldr	r2, [pc, #76]	; (8001e44 <HAL_TIM_Base_Start_IT+0xa0>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d111      	bne.n	8001e20 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d010      	beq.n	8001e30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0201 	orr.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e1e:	e007      	b.n	8001e30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0201 	orr.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	40012c00 	.word	0x40012c00
 8001e40:	40000400 	.word	0x40000400
 8001e44:	40000800 	.word	0x40000800

08001e48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e041      	b.n	8001ede <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d106      	bne.n	8001e74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f839 	bl	8001ee6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2202      	movs	r2, #2
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3304      	adds	r3, #4
 8001e84:	4619      	mov	r1, r3
 8001e86:	4610      	mov	r0, r2
 8001e88:	f000 fae4 	bl	8002454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d122      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d11b      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0202 	mvn.w	r2, #2
 8001f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fa6f 	bl	800241e <HAL_TIM_IC_CaptureCallback>
 8001f40:	e005      	b.n	8001f4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fa62 	bl	800240c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 fa71 	bl	8002430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d122      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d11b      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0204 	mvn.w	r2, #4
 8001f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fa45 	bl	800241e <HAL_TIM_IC_CaptureCallback>
 8001f94:	e005      	b.n	8001fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 fa38 	bl	800240c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 fa47 	bl	8002430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d122      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d11b      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0208 	mvn.w	r2, #8
 8001fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fa1b 	bl	800241e <HAL_TIM_IC_CaptureCallback>
 8001fe8:	e005      	b.n	8001ff6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 fa0e 	bl	800240c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 fa1d 	bl	8002430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b10      	cmp	r3, #16
 8002008:	d122      	bne.n	8002050 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	2b10      	cmp	r3, #16
 8002016:	d11b      	bne.n	8002050 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0210 	mvn.w	r2, #16
 8002020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2208      	movs	r2, #8
 8002026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f9f1 	bl	800241e <HAL_TIM_IC_CaptureCallback>
 800203c:	e005      	b.n	800204a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f9e4 	bl	800240c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f9f3 	bl	8002430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b01      	cmp	r3, #1
 800205c:	d10e      	bne.n	800207c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d107      	bne.n	800207c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0201 	mvn.w	r2, #1
 8002074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe fad8 	bl	800062c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002086:	2b80      	cmp	r3, #128	; 0x80
 8002088:	d10e      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002094:	2b80      	cmp	r3, #128	; 0x80
 8002096:	d107      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 fcbd 	bl	8002a22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b2:	2b40      	cmp	r3, #64	; 0x40
 80020b4:	d10e      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c0:	2b40      	cmp	r3, #64	; 0x40
 80020c2:	d107      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f9b7 	bl	8002442 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	2b20      	cmp	r3, #32
 80020e0:	d10e      	bne.n	8002100 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	2b20      	cmp	r3, #32
 80020ee:	d107      	bne.n	8002100 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0220 	mvn.w	r2, #32
 80020f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fc88 	bl	8002a10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800211e:	2302      	movs	r3, #2
 8002120:	e0ac      	b.n	800227c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b0c      	cmp	r3, #12
 800212e:	f200 809f 	bhi.w	8002270 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002132:	a201      	add	r2, pc, #4	; (adr r2, 8002138 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002138:	0800216d 	.word	0x0800216d
 800213c:	08002271 	.word	0x08002271
 8002140:	08002271 	.word	0x08002271
 8002144:	08002271 	.word	0x08002271
 8002148:	080021ad 	.word	0x080021ad
 800214c:	08002271 	.word	0x08002271
 8002150:	08002271 	.word	0x08002271
 8002154:	08002271 	.word	0x08002271
 8002158:	080021ef 	.word	0x080021ef
 800215c:	08002271 	.word	0x08002271
 8002160:	08002271 	.word	0x08002271
 8002164:	08002271 	.word	0x08002271
 8002168:	0800222f 	.word	0x0800222f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f9d0 	bl	8002518 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0208 	orr.w	r2, r2, #8
 8002186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0204 	bic.w	r2, r2, #4
 8002196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6999      	ldr	r1, [r3, #24]
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	691a      	ldr	r2, [r3, #16]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	619a      	str	r2, [r3, #24]
      break;
 80021aa:	e062      	b.n	8002272 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fa16 	bl	80025e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6999      	ldr	r1, [r3, #24]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	021a      	lsls	r2, r3, #8
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	619a      	str	r2, [r3, #24]
      break;
 80021ec:	e041      	b.n	8002272 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68b9      	ldr	r1, [r7, #8]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 fa5f 	bl	80026b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	69da      	ldr	r2, [r3, #28]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0208 	orr.w	r2, r2, #8
 8002208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	69da      	ldr	r2, [r3, #28]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0204 	bic.w	r2, r2, #4
 8002218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	69d9      	ldr	r1, [r3, #28]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	61da      	str	r2, [r3, #28]
      break;
 800222c:	e021      	b.n	8002272 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68b9      	ldr	r1, [r7, #8]
 8002234:	4618      	mov	r0, r3
 8002236:	f000 faa9 	bl	800278c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69da      	ldr	r2, [r3, #28]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	69da      	ldr	r2, [r3, #28]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69d9      	ldr	r1, [r3, #28]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	021a      	lsls	r2, r3, #8
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	61da      	str	r2, [r3, #28]
      break;
 800226e:	e000      	b.n	8002272 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002270:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_TIM_ConfigClockSource+0x18>
 8002298:	2302      	movs	r3, #2
 800229a:	e0b3      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x180>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022d4:	d03e      	beq.n	8002354 <HAL_TIM_ConfigClockSource+0xd0>
 80022d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022da:	f200 8087 	bhi.w	80023ec <HAL_TIM_ConfigClockSource+0x168>
 80022de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022e2:	f000 8085 	beq.w	80023f0 <HAL_TIM_ConfigClockSource+0x16c>
 80022e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ea:	d87f      	bhi.n	80023ec <HAL_TIM_ConfigClockSource+0x168>
 80022ec:	2b70      	cmp	r3, #112	; 0x70
 80022ee:	d01a      	beq.n	8002326 <HAL_TIM_ConfigClockSource+0xa2>
 80022f0:	2b70      	cmp	r3, #112	; 0x70
 80022f2:	d87b      	bhi.n	80023ec <HAL_TIM_ConfigClockSource+0x168>
 80022f4:	2b60      	cmp	r3, #96	; 0x60
 80022f6:	d050      	beq.n	800239a <HAL_TIM_ConfigClockSource+0x116>
 80022f8:	2b60      	cmp	r3, #96	; 0x60
 80022fa:	d877      	bhi.n	80023ec <HAL_TIM_ConfigClockSource+0x168>
 80022fc:	2b50      	cmp	r3, #80	; 0x50
 80022fe:	d03c      	beq.n	800237a <HAL_TIM_ConfigClockSource+0xf6>
 8002300:	2b50      	cmp	r3, #80	; 0x50
 8002302:	d873      	bhi.n	80023ec <HAL_TIM_ConfigClockSource+0x168>
 8002304:	2b40      	cmp	r3, #64	; 0x40
 8002306:	d058      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0x136>
 8002308:	2b40      	cmp	r3, #64	; 0x40
 800230a:	d86f      	bhi.n	80023ec <HAL_TIM_ConfigClockSource+0x168>
 800230c:	2b30      	cmp	r3, #48	; 0x30
 800230e:	d064      	beq.n	80023da <HAL_TIM_ConfigClockSource+0x156>
 8002310:	2b30      	cmp	r3, #48	; 0x30
 8002312:	d86b      	bhi.n	80023ec <HAL_TIM_ConfigClockSource+0x168>
 8002314:	2b20      	cmp	r3, #32
 8002316:	d060      	beq.n	80023da <HAL_TIM_ConfigClockSource+0x156>
 8002318:	2b20      	cmp	r3, #32
 800231a:	d867      	bhi.n	80023ec <HAL_TIM_ConfigClockSource+0x168>
 800231c:	2b00      	cmp	r3, #0
 800231e:	d05c      	beq.n	80023da <HAL_TIM_ConfigClockSource+0x156>
 8002320:	2b10      	cmp	r3, #16
 8002322:	d05a      	beq.n	80023da <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002324:	e062      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	6899      	ldr	r1, [r3, #8]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f000 faee 	bl	8002916 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002348:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	609a      	str	r2, [r3, #8]
      break;
 8002352:	e04e      	b.n	80023f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	6899      	ldr	r1, [r3, #8]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f000 fad7 	bl	8002916 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002376:	609a      	str	r2, [r3, #8]
      break;
 8002378:	e03b      	b.n	80023f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6859      	ldr	r1, [r3, #4]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	461a      	mov	r2, r3
 8002388:	f000 fa4e 	bl	8002828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2150      	movs	r1, #80	; 0x50
 8002392:	4618      	mov	r0, r3
 8002394:	f000 faa5 	bl	80028e2 <TIM_ITRx_SetConfig>
      break;
 8002398:	e02b      	b.n	80023f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	6859      	ldr	r1, [r3, #4]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	461a      	mov	r2, r3
 80023a8:	f000 fa6c 	bl	8002884 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2160      	movs	r1, #96	; 0x60
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fa95 	bl	80028e2 <TIM_ITRx_SetConfig>
      break;
 80023b8:	e01b      	b.n	80023f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6859      	ldr	r1, [r3, #4]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	461a      	mov	r2, r3
 80023c8:	f000 fa2e 	bl	8002828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2140      	movs	r1, #64	; 0x40
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 fa85 	bl	80028e2 <TIM_ITRx_SetConfig>
      break;
 80023d8:	e00b      	b.n	80023f2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4619      	mov	r1, r3
 80023e4:	4610      	mov	r0, r2
 80023e6:	f000 fa7c 	bl	80028e2 <TIM_ITRx_SetConfig>
        break;
 80023ea:	e002      	b.n	80023f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80023ec:	bf00      	nop
 80023ee:	e000      	b.n	80023f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80023f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr

0800241e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr

08002442 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a29      	ldr	r2, [pc, #164]	; (800250c <TIM_Base_SetConfig+0xb8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00b      	beq.n	8002484 <TIM_Base_SetConfig+0x30>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002472:	d007      	beq.n	8002484 <TIM_Base_SetConfig+0x30>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a26      	ldr	r2, [pc, #152]	; (8002510 <TIM_Base_SetConfig+0xbc>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d003      	beq.n	8002484 <TIM_Base_SetConfig+0x30>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a25      	ldr	r2, [pc, #148]	; (8002514 <TIM_Base_SetConfig+0xc0>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d108      	bne.n	8002496 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a1c      	ldr	r2, [pc, #112]	; (800250c <TIM_Base_SetConfig+0xb8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00b      	beq.n	80024b6 <TIM_Base_SetConfig+0x62>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a4:	d007      	beq.n	80024b6 <TIM_Base_SetConfig+0x62>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a19      	ldr	r2, [pc, #100]	; (8002510 <TIM_Base_SetConfig+0xbc>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d003      	beq.n	80024b6 <TIM_Base_SetConfig+0x62>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a18      	ldr	r2, [pc, #96]	; (8002514 <TIM_Base_SetConfig+0xc0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d108      	bne.n	80024c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a07      	ldr	r2, [pc, #28]	; (800250c <TIM_Base_SetConfig+0xb8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d103      	bne.n	80024fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	615a      	str	r2, [r3, #20]
}
 8002502:	bf00      	nop
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr
 800250c:	40012c00 	.word	0x40012c00
 8002510:	40000400 	.word	0x40000400
 8002514:	40000800 	.word	0x40000800

08002518 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	f023 0201 	bic.w	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 0303 	bic.w	r3, r3, #3
 800254e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f023 0302 	bic.w	r3, r3, #2
 8002560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4313      	orrs	r3, r2
 800256a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a1c      	ldr	r2, [pc, #112]	; (80025e0 <TIM_OC1_SetConfig+0xc8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d10c      	bne.n	800258e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f023 0308 	bic.w	r3, r3, #8
 800257a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	4313      	orrs	r3, r2
 8002584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f023 0304 	bic.w	r3, r3, #4
 800258c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a13      	ldr	r2, [pc, #76]	; (80025e0 <TIM_OC1_SetConfig+0xc8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d111      	bne.n	80025ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800259c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	621a      	str	r2, [r3, #32]
}
 80025d4:	bf00      	nop
 80025d6:	371c      	adds	r7, #28
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40012c00 	.word	0x40012c00

080025e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	f023 0210 	bic.w	r2, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800261a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4313      	orrs	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f023 0320 	bic.w	r3, r3, #32
 800262e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	4313      	orrs	r3, r2
 800263a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a1d      	ldr	r2, [pc, #116]	; (80026b4 <TIM_OC2_SetConfig+0xd0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d10d      	bne.n	8002660 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800264a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800265e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a14      	ldr	r2, [pc, #80]	; (80026b4 <TIM_OC2_SetConfig+0xd0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d113      	bne.n	8002690 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800266e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002676:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	621a      	str	r2, [r3, #32]
}
 80026aa:	bf00      	nop
 80026ac:	371c      	adds	r7, #28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr
 80026b4:	40012c00 	.word	0x40012c00

080026b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f023 0303 	bic.w	r3, r3, #3
 80026ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	021b      	lsls	r3, r3, #8
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	4313      	orrs	r3, r2
 800270c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a1d      	ldr	r2, [pc, #116]	; (8002788 <TIM_OC3_SetConfig+0xd0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d10d      	bne.n	8002732 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800271c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	4313      	orrs	r3, r2
 8002728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a14      	ldr	r2, [pc, #80]	; (8002788 <TIM_OC3_SetConfig+0xd0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d113      	bne.n	8002762 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	621a      	str	r2, [r3, #32]
}
 800277c:	bf00      	nop
 800277e:	371c      	adds	r7, #28
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40012c00 	.word	0x40012c00

0800278c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	031b      	lsls	r3, r3, #12
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a0f      	ldr	r2, [pc, #60]	; (8002824 <TIM_OC4_SetConfig+0x98>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d109      	bne.n	8002800 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	019b      	lsls	r3, r3, #6
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	621a      	str	r2, [r3, #32]
}
 800281a:	bf00      	nop
 800281c:	371c      	adds	r7, #28
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	40012c00 	.word	0x40012c00

08002828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	f023 0201 	bic.w	r2, r3, #1
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f023 030a 	bic.w	r3, r3, #10
 8002864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	4313      	orrs	r3, r2
 800286c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	621a      	str	r2, [r3, #32]
}
 800287a:	bf00      	nop
 800287c:	371c      	adds	r7, #28
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	f023 0210 	bic.w	r2, r3, #16
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	031b      	lsls	r3, r3, #12
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	621a      	str	r2, [r3, #32]
}
 80028d8:	bf00      	nop
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	f043 0307 	orr.w	r3, r3, #7
 8002904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	609a      	str	r2, [r3, #8]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr

08002916 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002916:	b480      	push	{r7}
 8002918:	b087      	sub	sp, #28
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002930:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	021a      	lsls	r2, r3, #8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	431a      	orrs	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	4313      	orrs	r3, r2
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	609a      	str	r2, [r3, #8]
}
 800294a:	bf00      	nop
 800294c:	371c      	adds	r7, #28
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002968:	2302      	movs	r3, #2
 800296a:	e046      	b.n	80029fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002992:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a16      	ldr	r2, [pc, #88]	; (8002a04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d00e      	beq.n	80029ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b8:	d009      	beq.n	80029ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d004      	beq.n	80029ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a10      	ldr	r2, [pc, #64]	; (8002a0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d10c      	bne.n	80029e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	4313      	orrs	r3, r2
 80029de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	40012c00 	.word	0x40012c00
 8002a08:	40000400 	.word	0x40000400
 8002a0c:	40000800 	.word	0x40000800

08002a10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a3a:	f3ef 8305 	mrs	r3, IPSR
 8002a3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a40:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10f      	bne.n	8002a66 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a46:	f3ef 8310 	mrs	r3, PRIMASK
 8002a4a:	607b      	str	r3, [r7, #4]
  return(result);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d109      	bne.n	8002a66 <osKernelInitialize+0x32>
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <osKernelInitialize+0x60>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d109      	bne.n	8002a6e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a5a:	f3ef 8311 	mrs	r3, BASEPRI
 8002a5e:	603b      	str	r3, [r7, #0]
  return(result);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002a66:	f06f 0305 	mvn.w	r3, #5
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e00c      	b.n	8002a88 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <osKernelInitialize+0x60>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002a76:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <osKernelInitialize+0x60>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	e002      	b.n	8002a88 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002a82:	f04f 33ff 	mov.w	r3, #4294967295
 8002a86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002a88:	68fb      	ldr	r3, [r7, #12]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	20000144 	.word	0x20000144

08002a98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a9e:	f3ef 8305 	mrs	r3, IPSR
 8002aa2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10f      	bne.n	8002aca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8002aae:	607b      	str	r3, [r7, #4]
  return(result);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d109      	bne.n	8002aca <osKernelStart+0x32>
 8002ab6:	4b11      	ldr	r3, [pc, #68]	; (8002afc <osKernelStart+0x64>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d109      	bne.n	8002ad2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002abe:	f3ef 8311 	mrs	r3, BASEPRI
 8002ac2:	603b      	str	r3, [r7, #0]
  return(result);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002aca:	f06f 0305 	mvn.w	r3, #5
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	e00e      	b.n	8002af0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <osKernelStart+0x64>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d107      	bne.n	8002aea <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <osKernelStart+0x64>)
 8002adc:	2202      	movs	r2, #2
 8002ade:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002ae0:	f001 f93c 	bl	8003d5c <vTaskStartScheduler>
      stat = osOK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	e002      	b.n	8002af0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002aea:	f04f 33ff 	mov.w	r3, #4294967295
 8002aee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002af0:	68fb      	ldr	r3, [r7, #12]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000144 	.word	0x20000144

08002b00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b092      	sub	sp, #72	; 0x48
 8002b04:	af04      	add	r7, sp, #16
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b10:	f3ef 8305 	mrs	r3, IPSR
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f040 8094 	bne.w	8002c46 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b22:	623b      	str	r3, [r7, #32]
  return(result);
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f040 808d 	bne.w	8002c46 <osThreadNew+0x146>
 8002b2c:	4b48      	ldr	r3, [pc, #288]	; (8002c50 <osThreadNew+0x150>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d106      	bne.n	8002b42 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b34:	f3ef 8311 	mrs	r3, BASEPRI
 8002b38:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f040 8082 	bne.w	8002c46 <osThreadNew+0x146>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d07e      	beq.n	8002c46 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002b4c:	2318      	movs	r3, #24
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002b50:	2300      	movs	r3, #0
 8002b52:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002b54:	f107 031b 	add.w	r3, r7, #27
 8002b58:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d045      	beq.n	8002bf2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <osThreadNew+0x74>
        name = attr->name;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <osThreadNew+0x9a>
 8002b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8a:	2b38      	cmp	r3, #56	; 0x38
 8002b8c:	d805      	bhi.n	8002b9a <osThreadNew+0x9a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <osThreadNew+0x9e>
        return (NULL);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e054      	b.n	8002c48 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	089b      	lsrs	r3, r3, #2
 8002bac:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00e      	beq.n	8002bd4 <osThreadNew+0xd4>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	2b5b      	cmp	r3, #91	; 0x5b
 8002bbc:	d90a      	bls.n	8002bd4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d006      	beq.n	8002bd4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <osThreadNew+0xd4>
        mem = 1;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd2:	e010      	b.n	8002bf6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10c      	bne.n	8002bf6 <osThreadNew+0xf6>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d108      	bne.n	8002bf6 <osThreadNew+0xf6>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d104      	bne.n	8002bf6 <osThreadNew+0xf6>
          mem = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bf0:	e001      	b.n	8002bf6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d110      	bne.n	8002c1e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c04:	9202      	str	r2, [sp, #8]
 8002c06:	9301      	str	r3, [sp, #4]
 8002c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 fed6 	bl	80039c4 <xTaskCreateStatic>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	e013      	b.n	8002c46 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d110      	bne.n	8002c46 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	f107 0314 	add.w	r3, r7, #20
 8002c2c:	9301      	str	r3, [sp, #4]
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 ff20 	bl	8003a7c <xTaskCreate>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d001      	beq.n	8002c46 <osThreadNew+0x146>
          hTask = NULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002c46:	697b      	ldr	r3, [r7, #20]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3738      	adds	r7, #56	; 0x38
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000144 	.word	0x20000144

08002c54 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c5c:	f3ef 8305 	mrs	r3, IPSR
 8002c60:	613b      	str	r3, [r7, #16]
  return(result);
 8002c62:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10f      	bne.n	8002c88 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c68:	f3ef 8310 	mrs	r3, PRIMASK
 8002c6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d109      	bne.n	8002c88 <osDelay+0x34>
 8002c74:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <osDelay+0x58>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d109      	bne.n	8002c90 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c7c:	f3ef 8311 	mrs	r3, BASEPRI
 8002c80:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <osDelay+0x3c>
    stat = osErrorISR;
 8002c88:	f06f 0305 	mvn.w	r3, #5
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	e007      	b.n	8002ca0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f001 f82a 	bl	8003cf4 <vTaskDelay>
    }
  }

  return (stat);
 8002ca0:	697b      	ldr	r3, [r7, #20]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000144 	.word	0x20000144

08002cb0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08c      	sub	sp, #48	; 0x30
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cc0:	f3ef 8305 	mrs	r3, IPSR
 8002cc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8002cc6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d16f      	bne.n	8002dac <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd0:	617b      	str	r3, [r7, #20]
  return(result);
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d169      	bne.n	8002dac <osMessageQueueNew+0xfc>
 8002cd8:	4b37      	ldr	r3, [pc, #220]	; (8002db8 <osMessageQueueNew+0x108>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d105      	bne.n	8002cec <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ce0:	f3ef 8311 	mrs	r3, BASEPRI
 8002ce4:	613b      	str	r3, [r7, #16]
  return(result);
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d15f      	bne.n	8002dac <osMessageQueueNew+0xfc>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d05c      	beq.n	8002dac <osMessageQueueNew+0xfc>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d059      	beq.n	8002dac <osMessageQueueNew+0xfc>
    mem = -1;
 8002cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d029      	beq.n	8002d58 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d012      	beq.n	8002d32 <osMessageQueueNew+0x82>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b4f      	cmp	r3, #79	; 0x4f
 8002d12:	d90e      	bls.n	8002d32 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	695a      	ldr	r2, [r3, #20]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	68b9      	ldr	r1, [r7, #8]
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d302      	bcc.n	8002d32 <osMessageQueueNew+0x82>
        mem = 1;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	623b      	str	r3, [r7, #32]
 8002d30:	e014      	b.n	8002d5c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d110      	bne.n	8002d5c <osMessageQueueNew+0xac>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10c      	bne.n	8002d5c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d108      	bne.n	8002d5c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d104      	bne.n	8002d5c <osMessageQueueNew+0xac>
          mem = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	623b      	str	r3, [r7, #32]
 8002d56:	e001      	b.n	8002d5c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d10b      	bne.n	8002d7a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	9100      	str	r1, [sp, #0]
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f96d 	bl	8003050 <xQueueGenericCreateStatic>
 8002d76:	6278      	str	r0, [r7, #36]	; 0x24
 8002d78:	e008      	b.n	8002d8c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d105      	bne.n	8002d8c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002d80:	2200      	movs	r2, #0
 8002d82:	68b9      	ldr	r1, [r7, #8]
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f9da 	bl	800313e <xQueueGenericCreate>
 8002d8a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00c      	beq.n	8002dac <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <osMessageQueueNew+0xf0>
        name = attr->name;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	61fb      	str	r3, [r7, #28]
 8002d9e:	e001      	b.n	8002da4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002da4:	69f9      	ldr	r1, [r7, #28]
 8002da6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002da8:	f000 fdb0 	bl	800390c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3728      	adds	r7, #40	; 0x28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000144 	.word	0x20000144

08002dbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4a06      	ldr	r2, [pc, #24]	; (8002de4 <vApplicationGetIdleTaskMemory+0x28>)
 8002dcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	4a05      	ldr	r2, [pc, #20]	; (8002de8 <vApplicationGetIdleTaskMemory+0x2c>)
 8002dd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2280      	movs	r2, #128	; 0x80
 8002dd8:	601a      	str	r2, [r3, #0]
}
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr
 8002de4:	20000148 	.word	0x20000148
 8002de8:	200001a4 	.word	0x200001a4

08002dec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4a07      	ldr	r2, [pc, #28]	; (8002e18 <vApplicationGetTimerTaskMemory+0x2c>)
 8002dfc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	4a06      	ldr	r2, [pc, #24]	; (8002e1c <vApplicationGetTimerTaskMemory+0x30>)
 8002e02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e0a:	601a      	str	r2, [r3, #0]
}
 8002e0c:	bf00      	nop
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	200003a4 	.word	0x200003a4
 8002e1c:	20000400 	.word	0x20000400

08002e20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f103 0208 	add.w	r2, r3, #8
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f04f 32ff 	mov.w	r2, #4294967295
 8002e38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f103 0208 	add.w	r2, r3, #8
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f103 0208 	add.w	r2, r3, #8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr

08002e76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e76:	b480      	push	{r7}
 8002e78:	b085      	sub	sp, #20
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	601a      	str	r2, [r3, #0]
}
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed2:	d103      	bne.n	8002edc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	e00c      	b.n	8002ef6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3308      	adds	r3, #8
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	e002      	b.n	8002eea <vListInsert+0x2e>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d2f6      	bcs.n	8002ee4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	601a      	str	r2, [r3, #0]
}
 8002f22:	bf00      	nop
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6892      	ldr	r2, [r2, #8]
 8002f42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6852      	ldr	r2, [r2, #4]
 8002f4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d103      	bne.n	8002f60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	1e5a      	subs	r2, r3, #1
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr
	...

08002f80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10a      	bne.n	8002faa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002fa6:	bf00      	nop
 8002fa8:	e7fe      	b.n	8002fa8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002faa:	f002 f807 	bl	8004fbc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb6:	68f9      	ldr	r1, [r7, #12]
 8002fb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	441a      	add	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	68f9      	ldr	r1, [r7, #12]
 8002fde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fe0:	fb01 f303 	mul.w	r3, r1, r3
 8002fe4:	441a      	add	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	22ff      	movs	r2, #255	; 0xff
 8002fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	22ff      	movs	r2, #255	; 0xff
 8002ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d114      	bne.n	800302a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d01a      	beq.n	800303e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3310      	adds	r3, #16
 800300c:	4618      	mov	r0, r3
 800300e:	f001 f92f 	bl	8004270 <xTaskRemoveFromEventList>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d012      	beq.n	800303e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <xQueueGenericReset+0xcc>)
 800301a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	e009      	b.n	800303e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3310      	adds	r3, #16
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fef6 	bl	8002e20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3324      	adds	r3, #36	; 0x24
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fef1 	bl	8002e20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800303e:	f001 ffed 	bl	800501c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003042:	2301      	movs	r3, #1
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	e000ed04 	.word	0xe000ed04

08003050 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08e      	sub	sp, #56	; 0x38
 8003054:	af02      	add	r7, sp, #8
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10a      	bne.n	800307a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003076:	bf00      	nop
 8003078:	e7fe      	b.n	8003078 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10a      	bne.n	8003096 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003092:	bf00      	nop
 8003094:	e7fe      	b.n	8003094 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <xQueueGenericCreateStatic+0x52>
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <xQueueGenericCreateStatic+0x56>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <xQueueGenericCreateStatic+0x58>
 80030a6:	2300      	movs	r3, #0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10a      	bne.n	80030c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80030ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b0:	f383 8811 	msr	BASEPRI, r3
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	623b      	str	r3, [r7, #32]
}
 80030be:	bf00      	nop
 80030c0:	e7fe      	b.n	80030c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d102      	bne.n	80030ce <xQueueGenericCreateStatic+0x7e>
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <xQueueGenericCreateStatic+0x82>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <xQueueGenericCreateStatic+0x84>
 80030d2:	2300      	movs	r3, #0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10a      	bne.n	80030ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80030d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	61fb      	str	r3, [r7, #28]
}
 80030ea:	bf00      	nop
 80030ec:	e7fe      	b.n	80030ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80030ee:	2350      	movs	r3, #80	; 0x50
 80030f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2b50      	cmp	r3, #80	; 0x50
 80030f6:	d00a      	beq.n	800310e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80030f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fc:	f383 8811 	msr	BASEPRI, r3
 8003100:	f3bf 8f6f 	isb	sy
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	61bb      	str	r3, [r7, #24]
}
 800310a:	bf00      	nop
 800310c:	e7fe      	b.n	800310c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00d      	beq.n	8003134 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003120:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	4613      	mov	r3, r2
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 f843 	bl	80031ba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003136:	4618      	mov	r0, r3
 8003138:	3730      	adds	r7, #48	; 0x30
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800313e:	b580      	push	{r7, lr}
 8003140:	b08a      	sub	sp, #40	; 0x28
 8003142:	af02      	add	r7, sp, #8
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	4613      	mov	r3, r2
 800314a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10a      	bne.n	8003168 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003156:	f383 8811 	msr	BASEPRI, r3
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	613b      	str	r3, [r7, #16]
}
 8003164:	bf00      	nop
 8003166:	e7fe      	b.n	8003166 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d102      	bne.n	8003174 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	e004      	b.n	800317e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	fb02 f303 	mul.w	r3, r2, r3
 800317c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3350      	adds	r3, #80	; 0x50
 8003182:	4618      	mov	r0, r3
 8003184:	f002 f81a 	bl	80051bc <pvPortMalloc>
 8003188:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00f      	beq.n	80031b0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	3350      	adds	r3, #80	; 0x50
 8003194:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800319e:	79fa      	ldrb	r2, [r7, #7]
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	4613      	mov	r3, r2
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f805 	bl	80031ba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80031b0:	69bb      	ldr	r3, [r7, #24]
	}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d103      	bne.n	80031d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	e002      	b.n	80031dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80031e8:	2101      	movs	r1, #1
 80031ea:	69b8      	ldr	r0, [r7, #24]
 80031ec:	f7ff fec8 	bl	8002f80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80031f8:	bf00      	nop
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08e      	sub	sp, #56	; 0x38
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800320e:	2300      	movs	r3, #0
 8003210:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10a      	bne.n	8003232 <xQueueGenericSend+0x32>
	__asm volatile
 800321c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800322e:	bf00      	nop
 8003230:	e7fe      	b.n	8003230 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d103      	bne.n	8003240 <xQueueGenericSend+0x40>
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <xQueueGenericSend+0x44>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <xQueueGenericSend+0x46>
 8003244:	2300      	movs	r3, #0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10a      	bne.n	8003260 <xQueueGenericSend+0x60>
	__asm volatile
 800324a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324e:	f383 8811 	msr	BASEPRI, r3
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800325c:	bf00      	nop
 800325e:	e7fe      	b.n	800325e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d103      	bne.n	800326e <xQueueGenericSend+0x6e>
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <xQueueGenericSend+0x72>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <xQueueGenericSend+0x74>
 8003272:	2300      	movs	r3, #0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10a      	bne.n	800328e <xQueueGenericSend+0x8e>
	__asm volatile
 8003278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	623b      	str	r3, [r7, #32]
}
 800328a:	bf00      	nop
 800328c:	e7fe      	b.n	800328c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800328e:	f001 f9b1 	bl	80045f4 <xTaskGetSchedulerState>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d102      	bne.n	800329e <xQueueGenericSend+0x9e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <xQueueGenericSend+0xa2>
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <xQueueGenericSend+0xa4>
 80032a2:	2300      	movs	r3, #0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10a      	bne.n	80032be <xQueueGenericSend+0xbe>
	__asm volatile
 80032a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	61fb      	str	r3, [r7, #28]
}
 80032ba:	bf00      	nop
 80032bc:	e7fe      	b.n	80032bc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032be:	f001 fe7d 	bl	8004fbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d302      	bcc.n	80032d4 <xQueueGenericSend+0xd4>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d129      	bne.n	8003328 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	68b9      	ldr	r1, [r7, #8]
 80032d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032da:	f000 fa07 	bl	80036ec <prvCopyDataToQueue>
 80032de:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d010      	beq.n	800330a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ea:	3324      	adds	r3, #36	; 0x24
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 ffbf 	bl	8004270 <xTaskRemoveFromEventList>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d013      	beq.n	8003320 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80032f8:	4b3f      	ldr	r3, [pc, #252]	; (80033f8 <xQueueGenericSend+0x1f8>)
 80032fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	e00a      	b.n	8003320 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800330a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330c:	2b00      	cmp	r3, #0
 800330e:	d007      	beq.n	8003320 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003310:	4b39      	ldr	r3, [pc, #228]	; (80033f8 <xQueueGenericSend+0x1f8>)
 8003312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003320:	f001 fe7c 	bl	800501c <vPortExitCritical>
				return pdPASS;
 8003324:	2301      	movs	r3, #1
 8003326:	e063      	b.n	80033f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d103      	bne.n	8003336 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800332e:	f001 fe75 	bl	800501c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003332:	2300      	movs	r3, #0
 8003334:	e05c      	b.n	80033f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003338:	2b00      	cmp	r3, #0
 800333a:	d106      	bne.n	800334a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800333c:	f107 0314 	add.w	r3, r7, #20
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fff9 	bl	8004338 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003346:	2301      	movs	r3, #1
 8003348:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800334a:	f001 fe67 	bl	800501c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800334e:	f000 fd6b 	bl	8003e28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003352:	f001 fe33 	bl	8004fbc <vPortEnterCritical>
 8003356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003358:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800335c:	b25b      	sxtb	r3, r3
 800335e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003362:	d103      	bne.n	800336c <xQueueGenericSend+0x16c>
 8003364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003372:	b25b      	sxtb	r3, r3
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003378:	d103      	bne.n	8003382 <xQueueGenericSend+0x182>
 800337a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003382:	f001 fe4b 	bl	800501c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003386:	1d3a      	adds	r2, r7, #4
 8003388:	f107 0314 	add.w	r3, r7, #20
 800338c:	4611      	mov	r1, r2
 800338e:	4618      	mov	r0, r3
 8003390:	f000 ffe8 	bl	8004364 <xTaskCheckForTimeOut>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d124      	bne.n	80033e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800339a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800339c:	f000 fa9e 	bl	80038dc <prvIsQueueFull>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d018      	beq.n	80033d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80033a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a8:	3310      	adds	r3, #16
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	4611      	mov	r1, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 ff0e 	bl	80041d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80033b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033b6:	f000 fa29 	bl	800380c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80033ba:	f000 fd43 	bl	8003e44 <xTaskResumeAll>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f47f af7c 	bne.w	80032be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80033c6:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <xQueueGenericSend+0x1f8>)
 80033c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	e772      	b.n	80032be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80033d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033da:	f000 fa17 	bl	800380c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033de:	f000 fd31 	bl	8003e44 <xTaskResumeAll>
 80033e2:	e76c      	b.n	80032be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80033e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033e6:	f000 fa11 	bl	800380c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033ea:	f000 fd2b 	bl	8003e44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80033ee:	2300      	movs	r3, #0
		}
	}
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3738      	adds	r7, #56	; 0x38
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	e000ed04 	.word	0xe000ed04

080033fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08e      	sub	sp, #56	; 0x38
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10a      	bne.n	800342a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003426:	bf00      	nop
 8003428:	e7fe      	b.n	8003428 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d103      	bne.n	8003438 <xQueueGenericSendFromISR+0x3c>
 8003430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <xQueueGenericSendFromISR+0x40>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <xQueueGenericSendFromISR+0x42>
 800343c:	2300      	movs	r3, #0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10a      	bne.n	8003458 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	623b      	str	r3, [r7, #32]
}
 8003454:	bf00      	nop
 8003456:	e7fe      	b.n	8003456 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d103      	bne.n	8003466 <xQueueGenericSendFromISR+0x6a>
 800345e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <xQueueGenericSendFromISR+0x6e>
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <xQueueGenericSendFromISR+0x70>
 800346a:	2300      	movs	r3, #0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10a      	bne.n	8003486 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	61fb      	str	r3, [r7, #28]
}
 8003482:	bf00      	nop
 8003484:	e7fe      	b.n	8003484 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003486:	f001 fe5b 	bl	8005140 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800348a:	f3ef 8211 	mrs	r2, BASEPRI
 800348e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003492:	f383 8811 	msr	BASEPRI, r3
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	61ba      	str	r2, [r7, #24]
 80034a0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80034a2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d302      	bcc.n	80034b8 <xQueueGenericSendFromISR+0xbc>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d12c      	bne.n	8003512 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80034b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034c8:	f000 f910 	bl	80036ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80034cc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80034d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d4:	d112      	bne.n	80034fc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d016      	beq.n	800350c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e0:	3324      	adds	r3, #36	; 0x24
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fec4 	bl	8004270 <xTaskRemoveFromEventList>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00e      	beq.n	800350c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00b      	beq.n	800350c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	e007      	b.n	800350c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80034fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003500:	3301      	adds	r3, #1
 8003502:	b2db      	uxtb	r3, r3
 8003504:	b25a      	sxtb	r2, r3
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800350c:	2301      	movs	r3, #1
 800350e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003510:	e001      	b.n	8003516 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003512:	2300      	movs	r3, #0
 8003514:	637b      	str	r3, [r7, #52]	; 0x34
 8003516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003518:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003520:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003524:	4618      	mov	r0, r3
 8003526:	3738      	adds	r7, #56	; 0x38
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08c      	sub	sp, #48	; 0x30
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003538:	2300      	movs	r3, #0
 800353a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10a      	bne.n	800355c <xQueueReceive+0x30>
	__asm volatile
 8003546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354a:	f383 8811 	msr	BASEPRI, r3
 800354e:	f3bf 8f6f 	isb	sy
 8003552:	f3bf 8f4f 	dsb	sy
 8003556:	623b      	str	r3, [r7, #32]
}
 8003558:	bf00      	nop
 800355a:	e7fe      	b.n	800355a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d103      	bne.n	800356a <xQueueReceive+0x3e>
 8003562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <xQueueReceive+0x42>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <xQueueReceive+0x44>
 800356e:	2300      	movs	r3, #0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <xQueueReceive+0x5e>
	__asm volatile
 8003574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	61fb      	str	r3, [r7, #28]
}
 8003586:	bf00      	nop
 8003588:	e7fe      	b.n	8003588 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800358a:	f001 f833 	bl	80045f4 <xTaskGetSchedulerState>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d102      	bne.n	800359a <xQueueReceive+0x6e>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <xQueueReceive+0x72>
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <xQueueReceive+0x74>
 800359e:	2300      	movs	r3, #0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10a      	bne.n	80035ba <xQueueReceive+0x8e>
	__asm volatile
 80035a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	61bb      	str	r3, [r7, #24]
}
 80035b6:	bf00      	nop
 80035b8:	e7fe      	b.n	80035b8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80035ba:	f001 fcff 	bl	8004fbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d01f      	beq.n	800360a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035ca:	68b9      	ldr	r1, [r7, #8]
 80035cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035ce:	f000 f8f7 	bl	80037c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	1e5a      	subs	r2, r3, #1
 80035d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00f      	beq.n	8003602 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e4:	3310      	adds	r3, #16
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fe42 	bl	8004270 <xTaskRemoveFromEventList>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d007      	beq.n	8003602 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80035f2:	4b3d      	ldr	r3, [pc, #244]	; (80036e8 <xQueueReceive+0x1bc>)
 80035f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003602:	f001 fd0b 	bl	800501c <vPortExitCritical>
				return pdPASS;
 8003606:	2301      	movs	r3, #1
 8003608:	e069      	b.n	80036de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d103      	bne.n	8003618 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003610:	f001 fd04 	bl	800501c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003614:	2300      	movs	r3, #0
 8003616:	e062      	b.n	80036de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361a:	2b00      	cmp	r3, #0
 800361c:	d106      	bne.n	800362c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800361e:	f107 0310 	add.w	r3, r7, #16
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fe88 	bl	8004338 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003628:	2301      	movs	r3, #1
 800362a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800362c:	f001 fcf6 	bl	800501c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003630:	f000 fbfa 	bl	8003e28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003634:	f001 fcc2 	bl	8004fbc <vPortEnterCritical>
 8003638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800363e:	b25b      	sxtb	r3, r3
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003644:	d103      	bne.n	800364e <xQueueReceive+0x122>
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003654:	b25b      	sxtb	r3, r3
 8003656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365a:	d103      	bne.n	8003664 <xQueueReceive+0x138>
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003664:	f001 fcda 	bl	800501c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003668:	1d3a      	adds	r2, r7, #4
 800366a:	f107 0310 	add.w	r3, r7, #16
 800366e:	4611      	mov	r1, r2
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fe77 	bl	8004364 <xTaskCheckForTimeOut>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d123      	bne.n	80036c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800367c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800367e:	f000 f917 	bl	80038b0 <prvIsQueueEmpty>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d017      	beq.n	80036b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368a:	3324      	adds	r3, #36	; 0x24
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	4611      	mov	r1, r2
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fd9d 	bl	80041d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003698:	f000 f8b8 	bl	800380c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800369c:	f000 fbd2 	bl	8003e44 <xTaskResumeAll>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d189      	bne.n	80035ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80036a6:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <xQueueReceive+0x1bc>)
 80036a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	e780      	b.n	80035ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80036b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036ba:	f000 f8a7 	bl	800380c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036be:	f000 fbc1 	bl	8003e44 <xTaskResumeAll>
 80036c2:	e77a      	b.n	80035ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80036c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036c6:	f000 f8a1 	bl	800380c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036ca:	f000 fbbb 	bl	8003e44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036d0:	f000 f8ee 	bl	80038b0 <prvIsQueueEmpty>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f43f af6f 	beq.w	80035ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80036dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3730      	adds	r7, #48	; 0x30
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	e000ed04 	.word	0xe000ed04

080036ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10d      	bne.n	8003726 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d14d      	bne.n	80037ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4618      	mov	r0, r3
 8003718:	f000 ff8a 	bl	8004630 <xTaskPriorityDisinherit>
 800371c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	605a      	str	r2, [r3, #4]
 8003724:	e043      	b.n	80037ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d119      	bne.n	8003760 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6898      	ldr	r0, [r3, #8]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	461a      	mov	r2, r3
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	f001 ff3c 	bl	80055b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	441a      	add	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	429a      	cmp	r2, r3
 8003754:	d32b      	bcc.n	80037ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	609a      	str	r2, [r3, #8]
 800375e:	e026      	b.n	80037ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	68d8      	ldr	r0, [r3, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	461a      	mov	r2, r3
 800376a:	68b9      	ldr	r1, [r7, #8]
 800376c:	f001 ff22 	bl	80055b4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	425b      	negs	r3, r3
 800377a:	441a      	add	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d207      	bcs.n	800379c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	425b      	negs	r3, r3
 8003796:	441a      	add	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d105      	bne.n	80037ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80037b6:	697b      	ldr	r3, [r7, #20]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d018      	beq.n	8003804 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	441a      	add	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d303      	bcc.n	80037f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68d9      	ldr	r1, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	461a      	mov	r2, r3
 80037fe:	6838      	ldr	r0, [r7, #0]
 8003800:	f001 fed8 	bl	80055b4 <memcpy>
	}
}
 8003804:	bf00      	nop
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003814:	f001 fbd2 	bl	8004fbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800381e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003820:	e011      	b.n	8003846 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	2b00      	cmp	r3, #0
 8003828:	d012      	beq.n	8003850 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3324      	adds	r3, #36	; 0x24
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fd1e 	bl	8004270 <xTaskRemoveFromEventList>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800383a:	f000 fdf5 	bl	8004428 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	3b01      	subs	r3, #1
 8003842:	b2db      	uxtb	r3, r3
 8003844:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800384a:	2b00      	cmp	r3, #0
 800384c:	dce9      	bgt.n	8003822 <prvUnlockQueue+0x16>
 800384e:	e000      	b.n	8003852 <prvUnlockQueue+0x46>
					break;
 8003850:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	22ff      	movs	r2, #255	; 0xff
 8003856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800385a:	f001 fbdf 	bl	800501c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800385e:	f001 fbad 	bl	8004fbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003868:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800386a:	e011      	b.n	8003890 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d012      	beq.n	800389a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3310      	adds	r3, #16
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fcf9 	bl	8004270 <xTaskRemoveFromEventList>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003884:	f000 fdd0 	bl	8004428 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003888:	7bbb      	ldrb	r3, [r7, #14]
 800388a:	3b01      	subs	r3, #1
 800388c:	b2db      	uxtb	r3, r3
 800388e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003890:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003894:	2b00      	cmp	r3, #0
 8003896:	dce9      	bgt.n	800386c <prvUnlockQueue+0x60>
 8003898:	e000      	b.n	800389c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800389a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	22ff      	movs	r2, #255	; 0xff
 80038a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80038a4:	f001 fbba 	bl	800501c <vPortExitCritical>
}
 80038a8:	bf00      	nop
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038b8:	f001 fb80 	bl	8004fbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d102      	bne.n	80038ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038c4:	2301      	movs	r3, #1
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	e001      	b.n	80038ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038ce:	f001 fba5 	bl	800501c <vPortExitCritical>

	return xReturn;
 80038d2:	68fb      	ldr	r3, [r7, #12]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038e4:	f001 fb6a 	bl	8004fbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d102      	bne.n	80038fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038f4:	2301      	movs	r3, #1
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	e001      	b.n	80038fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038fe:	f001 fb8d 	bl	800501c <vPortExitCritical>

	return xReturn;
 8003902:	68fb      	ldr	r3, [r7, #12]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	e014      	b.n	8003946 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800391c:	4a0e      	ldr	r2, [pc, #56]	; (8003958 <vQueueAddToRegistry+0x4c>)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10b      	bne.n	8003940 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003928:	490b      	ldr	r1, [pc, #44]	; (8003958 <vQueueAddToRegistry+0x4c>)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003932:	4a09      	ldr	r2, [pc, #36]	; (8003958 <vQueueAddToRegistry+0x4c>)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4413      	add	r3, r2
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800393e:	e006      	b.n	800394e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	3301      	adds	r3, #1
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b07      	cmp	r3, #7
 800394a:	d9e7      	bls.n	800391c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr
 8003958:	20000800 	.word	0x20000800

0800395c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800396c:	f001 fb26 	bl	8004fbc <vPortEnterCritical>
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003976:	b25b      	sxtb	r3, r3
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d103      	bne.n	8003986 <vQueueWaitForMessageRestricted+0x2a>
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800398c:	b25b      	sxtb	r3, r3
 800398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003992:	d103      	bne.n	800399c <vQueueWaitForMessageRestricted+0x40>
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800399c:	f001 fb3e 	bl	800501c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d106      	bne.n	80039b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	3324      	adds	r3, #36	; 0x24
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fc31 	bl	8004218 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80039b6:	6978      	ldr	r0, [r7, #20]
 80039b8:	f7ff ff28 	bl	800380c <prvUnlockQueue>
	}
 80039bc:	bf00      	nop
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08e      	sub	sp, #56	; 0x38
 80039c8:	af04      	add	r7, sp, #16
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80039d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10a      	bne.n	80039ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	623b      	str	r3, [r7, #32]
}
 80039ea:	bf00      	nop
 80039ec:	e7fe      	b.n	80039ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80039ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <xTaskCreateStatic+0x46>
	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	61fb      	str	r3, [r7, #28]
}
 8003a06:	bf00      	nop
 8003a08:	e7fe      	b.n	8003a08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a0a:	235c      	movs	r3, #92	; 0x5c
 8003a0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	2b5c      	cmp	r3, #92	; 0x5c
 8003a12:	d00a      	beq.n	8003a2a <xTaskCreateStatic+0x66>
	__asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	61bb      	str	r3, [r7, #24]
}
 8003a26:	bf00      	nop
 8003a28:	e7fe      	b.n	8003a28 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d01e      	beq.n	8003a6e <xTaskCreateStatic+0xaa>
 8003a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d01b      	beq.n	8003a6e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a48:	2300      	movs	r3, #0
 8003a4a:	9303      	str	r3, [sp, #12]
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	9302      	str	r3, [sp, #8]
 8003a50:	f107 0314 	add.w	r3, r7, #20
 8003a54:	9301      	str	r3, [sp, #4]
 8003a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	68b9      	ldr	r1, [r7, #8]
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 f850 	bl	8003b06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a68:	f000 f8d4 	bl	8003c14 <prvAddNewTaskToReadyList>
 8003a6c:	e001      	b.n	8003a72 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a72:	697b      	ldr	r3, [r7, #20]
	}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3728      	adds	r7, #40	; 0x28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08c      	sub	sp, #48	; 0x30
 8003a80:	af04      	add	r7, sp, #16
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a8c:	88fb      	ldrh	r3, [r7, #6]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4618      	mov	r0, r3
 8003a92:	f001 fb93 	bl	80051bc <pvPortMalloc>
 8003a96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00e      	beq.n	8003abc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a9e:	205c      	movs	r0, #92	; 0x5c
 8003aa0:	f001 fb8c 	bl	80051bc <pvPortMalloc>
 8003aa4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ab2:	e005      	b.n	8003ac0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ab4:	6978      	ldr	r0, [r7, #20]
 8003ab6:	f001 fc45 	bl	8005344 <vPortFree>
 8003aba:	e001      	b.n	8003ac0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003abc:	2300      	movs	r3, #0
 8003abe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d017      	beq.n	8003af6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ace:	88fa      	ldrh	r2, [r7, #6]
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	9303      	str	r3, [sp, #12]
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	9302      	str	r3, [sp, #8]
 8003ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68b9      	ldr	r1, [r7, #8]
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f80e 	bl	8003b06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003aea:	69f8      	ldr	r0, [r7, #28]
 8003aec:	f000 f892 	bl	8003c14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003af0:	2301      	movs	r3, #1
 8003af2:	61bb      	str	r3, [r7, #24]
 8003af4:	e002      	b.n	8003afc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003af6:	f04f 33ff 	mov.w	r3, #4294967295
 8003afa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003afc:	69bb      	ldr	r3, [r7, #24]
	}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3720      	adds	r7, #32
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b088      	sub	sp, #32
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	21a5      	movs	r1, #165	; 0xa5
 8003b20:	f001 fd56 	bl	80055d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	f023 0307 	bic.w	r3, r3, #7
 8003b3c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <prvInitialiseNewTask+0x58>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	617b      	str	r3, [r7, #20]
}
 8003b5a:	bf00      	nop
 8003b5c:	e7fe      	b.n	8003b5c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
 8003b62:	e012      	b.n	8003b8a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	4413      	add	r3, r2
 8003b6a:	7819      	ldrb	r1, [r3, #0]
 8003b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	4413      	add	r3, r2
 8003b72:	3334      	adds	r3, #52	; 0x34
 8003b74:	460a      	mov	r2, r1
 8003b76:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d006      	beq.n	8003b92 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	3301      	adds	r3, #1
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	2b0f      	cmp	r3, #15
 8003b8e:	d9e9      	bls.n	8003b64 <prvInitialiseNewTask+0x5e>
 8003b90:	e000      	b.n	8003b94 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003b92:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9e:	2b37      	cmp	r3, #55	; 0x37
 8003ba0:	d901      	bls.n	8003ba6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ba2:	2337      	movs	r3, #55	; 0x37
 8003ba4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003baa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bb0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bba:	3304      	adds	r3, #4
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff f94e 	bl	8002e5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc4:	3318      	adds	r3, #24
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff f949 	bl	8002e5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bd0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bda:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be4:	2200      	movs	r2, #0
 8003be6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	68f9      	ldr	r1, [r7, #12]
 8003bf4:	69b8      	ldr	r0, [r7, #24]
 8003bf6:	f001 f8ef 	bl	8004dd8 <pxPortInitialiseStack>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c0c:	bf00      	nop
 8003c0e:	3720      	adds	r7, #32
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c1c:	f001 f9ce 	bl	8004fbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c20:	4b2d      	ldr	r3, [pc, #180]	; (8003cd8 <prvAddNewTaskToReadyList+0xc4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3301      	adds	r3, #1
 8003c26:	4a2c      	ldr	r2, [pc, #176]	; (8003cd8 <prvAddNewTaskToReadyList+0xc4>)
 8003c28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c2a:	4b2c      	ldr	r3, [pc, #176]	; (8003cdc <prvAddNewTaskToReadyList+0xc8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c32:	4a2a      	ldr	r2, [pc, #168]	; (8003cdc <prvAddNewTaskToReadyList+0xc8>)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c38:	4b27      	ldr	r3, [pc, #156]	; (8003cd8 <prvAddNewTaskToReadyList+0xc4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d110      	bne.n	8003c62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c40:	f000 fc16 	bl	8004470 <prvInitialiseTaskLists>
 8003c44:	e00d      	b.n	8003c62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c46:	4b26      	ldr	r3, [pc, #152]	; (8003ce0 <prvAddNewTaskToReadyList+0xcc>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d109      	bne.n	8003c62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c4e:	4b23      	ldr	r3, [pc, #140]	; (8003cdc <prvAddNewTaskToReadyList+0xc8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d802      	bhi.n	8003c62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c5c:	4a1f      	ldr	r2, [pc, #124]	; (8003cdc <prvAddNewTaskToReadyList+0xc8>)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c62:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <prvAddNewTaskToReadyList+0xd0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3301      	adds	r3, #1
 8003c68:	4a1e      	ldr	r2, [pc, #120]	; (8003ce4 <prvAddNewTaskToReadyList+0xd0>)
 8003c6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <prvAddNewTaskToReadyList+0xd0>)
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c78:	4b1b      	ldr	r3, [pc, #108]	; (8003ce8 <prvAddNewTaskToReadyList+0xd4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d903      	bls.n	8003c88 <prvAddNewTaskToReadyList+0x74>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	4a18      	ldr	r2, [pc, #96]	; (8003ce8 <prvAddNewTaskToReadyList+0xd4>)
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4a15      	ldr	r2, [pc, #84]	; (8003cec <prvAddNewTaskToReadyList+0xd8>)
 8003c96:	441a      	add	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	f7ff f8e9 	bl	8002e76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ca4:	f001 f9ba 	bl	800501c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ca8:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <prvAddNewTaskToReadyList+0xcc>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00e      	beq.n	8003cce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003cb0:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <prvAddNewTaskToReadyList+0xc8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d207      	bcs.n	8003cce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <prvAddNewTaskToReadyList+0xdc>)
 8003cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000d14 	.word	0x20000d14
 8003cdc:	20000840 	.word	0x20000840
 8003ce0:	20000d20 	.word	0x20000d20
 8003ce4:	20000d30 	.word	0x20000d30
 8003ce8:	20000d1c 	.word	0x20000d1c
 8003cec:	20000844 	.word	0x20000844
 8003cf0:	e000ed04 	.word	0xe000ed04

08003cf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d017      	beq.n	8003d36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d06:	4b13      	ldr	r3, [pc, #76]	; (8003d54 <vTaskDelay+0x60>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <vTaskDelay+0x30>
	__asm volatile
 8003d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d12:	f383 8811 	msr	BASEPRI, r3
 8003d16:	f3bf 8f6f 	isb	sy
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	60bb      	str	r3, [r7, #8]
}
 8003d20:	bf00      	nop
 8003d22:	e7fe      	b.n	8003d22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d24:	f000 f880 	bl	8003e28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d28:	2100      	movs	r1, #0
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fcee 	bl	800470c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d30:	f000 f888 	bl	8003e44 <xTaskResumeAll>
 8003d34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d107      	bne.n	8003d4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003d3c:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <vTaskDelay+0x64>)
 8003d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d4c:	bf00      	nop
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	20000d3c 	.word	0x20000d3c
 8003d58:	e000ed04 	.word	0xe000ed04

08003d5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08a      	sub	sp, #40	; 0x28
 8003d60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d6a:	463a      	mov	r2, r7
 8003d6c:	1d39      	adds	r1, r7, #4
 8003d6e:	f107 0308 	add.w	r3, r7, #8
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff f822 	bl	8002dbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d78:	6839      	ldr	r1, [r7, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	9202      	str	r2, [sp, #8]
 8003d80:	9301      	str	r3, [sp, #4]
 8003d82:	2300      	movs	r3, #0
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	2300      	movs	r3, #0
 8003d88:	460a      	mov	r2, r1
 8003d8a:	4921      	ldr	r1, [pc, #132]	; (8003e10 <vTaskStartScheduler+0xb4>)
 8003d8c:	4821      	ldr	r0, [pc, #132]	; (8003e14 <vTaskStartScheduler+0xb8>)
 8003d8e:	f7ff fe19 	bl	80039c4 <xTaskCreateStatic>
 8003d92:	4603      	mov	r3, r0
 8003d94:	4a20      	ldr	r2, [pc, #128]	; (8003e18 <vTaskStartScheduler+0xbc>)
 8003d96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d98:	4b1f      	ldr	r3, [pc, #124]	; (8003e18 <vTaskStartScheduler+0xbc>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003da0:	2301      	movs	r3, #1
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	e001      	b.n	8003daa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d102      	bne.n	8003db6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003db0:	f000 fd00 	bl	80047b4 <xTimerCreateTimerTask>
 8003db4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d116      	bne.n	8003dea <vTaskStartScheduler+0x8e>
	__asm volatile
 8003dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc0:	f383 8811 	msr	BASEPRI, r3
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	613b      	str	r3, [r7, #16]
}
 8003dce:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003dd0:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <vTaskStartScheduler+0xc0>)
 8003dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003dd8:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <vTaskStartScheduler+0xc4>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003dde:	4b11      	ldr	r3, [pc, #68]	; (8003e24 <vTaskStartScheduler+0xc8>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003de4:	f001 f878 	bl	8004ed8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003de8:	e00e      	b.n	8003e08 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df0:	d10a      	bne.n	8003e08 <vTaskStartScheduler+0xac>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	60fb      	str	r3, [r7, #12]
}
 8003e04:	bf00      	nop
 8003e06:	e7fe      	b.n	8003e06 <vTaskStartScheduler+0xaa>
}
 8003e08:	bf00      	nop
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	08005668 	.word	0x08005668
 8003e14:	08004441 	.word	0x08004441
 8003e18:	20000d38 	.word	0x20000d38
 8003e1c:	20000d34 	.word	0x20000d34
 8003e20:	20000d20 	.word	0x20000d20
 8003e24:	20000d18 	.word	0x20000d18

08003e28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003e2c:	4b04      	ldr	r3, [pc, #16]	; (8003e40 <vTaskSuspendAll+0x18>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3301      	adds	r3, #1
 8003e32:	4a03      	ldr	r2, [pc, #12]	; (8003e40 <vTaskSuspendAll+0x18>)
 8003e34:	6013      	str	r3, [r2, #0]
}
 8003e36:	bf00      	nop
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20000d3c 	.word	0x20000d3c

08003e44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e52:	4b42      	ldr	r3, [pc, #264]	; (8003f5c <xTaskResumeAll+0x118>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10a      	bne.n	8003e70 <xTaskResumeAll+0x2c>
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	603b      	str	r3, [r7, #0]
}
 8003e6c:	bf00      	nop
 8003e6e:	e7fe      	b.n	8003e6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e70:	f001 f8a4 	bl	8004fbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e74:	4b39      	ldr	r3, [pc, #228]	; (8003f5c <xTaskResumeAll+0x118>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	4a38      	ldr	r2, [pc, #224]	; (8003f5c <xTaskResumeAll+0x118>)
 8003e7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e7e:	4b37      	ldr	r3, [pc, #220]	; (8003f5c <xTaskResumeAll+0x118>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d162      	bne.n	8003f4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e86:	4b36      	ldr	r3, [pc, #216]	; (8003f60 <xTaskResumeAll+0x11c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d05e      	beq.n	8003f4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e8e:	e02f      	b.n	8003ef0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e90:	4b34      	ldr	r3, [pc, #208]	; (8003f64 <xTaskResumeAll+0x120>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	3318      	adds	r3, #24
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff f845 	bl	8002f2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff f840 	bl	8002f2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb0:	4b2d      	ldr	r3, [pc, #180]	; (8003f68 <xTaskResumeAll+0x124>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d903      	bls.n	8003ec0 <xTaskResumeAll+0x7c>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	4a2a      	ldr	r2, [pc, #168]	; (8003f68 <xTaskResumeAll+0x124>)
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4a27      	ldr	r2, [pc, #156]	; (8003f6c <xTaskResumeAll+0x128>)
 8003ece:	441a      	add	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	f7fe ffcd 	bl	8002e76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee0:	4b23      	ldr	r3, [pc, #140]	; (8003f70 <xTaskResumeAll+0x12c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d302      	bcc.n	8003ef0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003eea:	4b22      	ldr	r3, [pc, #136]	; (8003f74 <xTaskResumeAll+0x130>)
 8003eec:	2201      	movs	r2, #1
 8003eee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ef0:	4b1c      	ldr	r3, [pc, #112]	; (8003f64 <xTaskResumeAll+0x120>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1cb      	bne.n	8003e90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003efe:	f000 fb55 	bl	80045ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f02:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <xTaskResumeAll+0x134>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d010      	beq.n	8003f30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f0e:	f000 f845 	bl	8003f9c <xTaskIncrementTick>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003f18:	4b16      	ldr	r3, [pc, #88]	; (8003f74 <xTaskResumeAll+0x130>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f1      	bne.n	8003f0e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003f2a:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <xTaskResumeAll+0x134>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f30:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <xTaskResumeAll+0x130>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d009      	beq.n	8003f4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f3c:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <xTaskResumeAll+0x138>)
 8003f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f4c:	f001 f866 	bl	800501c <vPortExitCritical>

	return xAlreadyYielded;
 8003f50:	68bb      	ldr	r3, [r7, #8]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20000d3c 	.word	0x20000d3c
 8003f60:	20000d14 	.word	0x20000d14
 8003f64:	20000cd4 	.word	0x20000cd4
 8003f68:	20000d1c 	.word	0x20000d1c
 8003f6c:	20000844 	.word	0x20000844
 8003f70:	20000840 	.word	0x20000840
 8003f74:	20000d28 	.word	0x20000d28
 8003f78:	20000d24 	.word	0x20000d24
 8003f7c:	e000ed04 	.word	0xe000ed04

08003f80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f86:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <xTaskGetTickCount+0x18>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f8c:	687b      	ldr	r3, [r7, #4]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr
 8003f98:	20000d18 	.word	0x20000d18

08003f9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fa6:	4b51      	ldr	r3, [pc, #324]	; (80040ec <xTaskIncrementTick+0x150>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f040 808e 	bne.w	80040cc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fb0:	4b4f      	ldr	r3, [pc, #316]	; (80040f0 <xTaskIncrementTick+0x154>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fb8:	4a4d      	ldr	r2, [pc, #308]	; (80040f0 <xTaskIncrementTick+0x154>)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d120      	bne.n	8004006 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fc4:	4b4b      	ldr	r3, [pc, #300]	; (80040f4 <xTaskIncrementTick+0x158>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <xTaskIncrementTick+0x48>
	__asm volatile
 8003fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	603b      	str	r3, [r7, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	e7fe      	b.n	8003fe2 <xTaskIncrementTick+0x46>
 8003fe4:	4b43      	ldr	r3, [pc, #268]	; (80040f4 <xTaskIncrementTick+0x158>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	4b43      	ldr	r3, [pc, #268]	; (80040f8 <xTaskIncrementTick+0x15c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a41      	ldr	r2, [pc, #260]	; (80040f4 <xTaskIncrementTick+0x158>)
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	4a41      	ldr	r2, [pc, #260]	; (80040f8 <xTaskIncrementTick+0x15c>)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	4b40      	ldr	r3, [pc, #256]	; (80040fc <xTaskIncrementTick+0x160>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	4a3f      	ldr	r2, [pc, #252]	; (80040fc <xTaskIncrementTick+0x160>)
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	f000 fad3 	bl	80045ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004006:	4b3e      	ldr	r3, [pc, #248]	; (8004100 <xTaskIncrementTick+0x164>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	429a      	cmp	r2, r3
 800400e:	d34e      	bcc.n	80040ae <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004010:	4b38      	ldr	r3, [pc, #224]	; (80040f4 <xTaskIncrementTick+0x158>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <xTaskIncrementTick+0x82>
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <xTaskIncrementTick+0x84>
 800401e:	2300      	movs	r3, #0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d004      	beq.n	800402e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004024:	4b36      	ldr	r3, [pc, #216]	; (8004100 <xTaskIncrementTick+0x164>)
 8004026:	f04f 32ff 	mov.w	r2, #4294967295
 800402a:	601a      	str	r2, [r3, #0]
					break;
 800402c:	e03f      	b.n	80040ae <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800402e:	4b31      	ldr	r3, [pc, #196]	; (80040f4 <xTaskIncrementTick+0x158>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	429a      	cmp	r2, r3
 8004044:	d203      	bcs.n	800404e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004046:	4a2e      	ldr	r2, [pc, #184]	; (8004100 <xTaskIncrementTick+0x164>)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6013      	str	r3, [r2, #0]
						break;
 800404c:	e02f      	b.n	80040ae <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	3304      	adds	r3, #4
 8004052:	4618      	mov	r0, r3
 8004054:	f7fe ff6a 	bl	8002f2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	d004      	beq.n	800406a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	3318      	adds	r3, #24
 8004064:	4618      	mov	r0, r3
 8004066:	f7fe ff61 	bl	8002f2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406e:	4b25      	ldr	r3, [pc, #148]	; (8004104 <xTaskIncrementTick+0x168>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d903      	bls.n	800407e <xTaskIncrementTick+0xe2>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407a:	4a22      	ldr	r2, [pc, #136]	; (8004104 <xTaskIncrementTick+0x168>)
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4a1f      	ldr	r2, [pc, #124]	; (8004108 <xTaskIncrementTick+0x16c>)
 800408c:	441a      	add	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	3304      	adds	r3, #4
 8004092:	4619      	mov	r1, r3
 8004094:	4610      	mov	r0, r2
 8004096:	f7fe feee 	bl	8002e76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409e:	4b1b      	ldr	r3, [pc, #108]	; (800410c <xTaskIncrementTick+0x170>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d3b3      	bcc.n	8004010 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80040a8:	2301      	movs	r3, #1
 80040aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040ac:	e7b0      	b.n	8004010 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040ae:	4b17      	ldr	r3, [pc, #92]	; (800410c <xTaskIncrementTick+0x170>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b4:	4914      	ldr	r1, [pc, #80]	; (8004108 <xTaskIncrementTick+0x16c>)
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	440b      	add	r3, r1
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d907      	bls.n	80040d6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80040c6:	2301      	movs	r3, #1
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	e004      	b.n	80040d6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80040cc:	4b10      	ldr	r3, [pc, #64]	; (8004110 <xTaskIncrementTick+0x174>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3301      	adds	r3, #1
 80040d2:	4a0f      	ldr	r2, [pc, #60]	; (8004110 <xTaskIncrementTick+0x174>)
 80040d4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80040d6:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <xTaskIncrementTick+0x178>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80040de:	2301      	movs	r3, #1
 80040e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80040e2:	697b      	ldr	r3, [r7, #20]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	20000d3c 	.word	0x20000d3c
 80040f0:	20000d18 	.word	0x20000d18
 80040f4:	20000ccc 	.word	0x20000ccc
 80040f8:	20000cd0 	.word	0x20000cd0
 80040fc:	20000d2c 	.word	0x20000d2c
 8004100:	20000d34 	.word	0x20000d34
 8004104:	20000d1c 	.word	0x20000d1c
 8004108:	20000844 	.word	0x20000844
 800410c:	20000840 	.word	0x20000840
 8004110:	20000d24 	.word	0x20000d24
 8004114:	20000d28 	.word	0x20000d28

08004118 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800411e:	4b27      	ldr	r3, [pc, #156]	; (80041bc <vTaskSwitchContext+0xa4>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004126:	4b26      	ldr	r3, [pc, #152]	; (80041c0 <vTaskSwitchContext+0xa8>)
 8004128:	2201      	movs	r2, #1
 800412a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800412c:	e041      	b.n	80041b2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800412e:	4b24      	ldr	r3, [pc, #144]	; (80041c0 <vTaskSwitchContext+0xa8>)
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004134:	4b23      	ldr	r3, [pc, #140]	; (80041c4 <vTaskSwitchContext+0xac>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	e010      	b.n	800415e <vTaskSwitchContext+0x46>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10a      	bne.n	8004158 <vTaskSwitchContext+0x40>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	607b      	str	r3, [r7, #4]
}
 8004154:	bf00      	nop
 8004156:	e7fe      	b.n	8004156 <vTaskSwitchContext+0x3e>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	3b01      	subs	r3, #1
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	491a      	ldr	r1, [pc, #104]	; (80041c8 <vTaskSwitchContext+0xb0>)
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	440b      	add	r3, r1
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0e4      	beq.n	800413c <vTaskSwitchContext+0x24>
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4a12      	ldr	r2, [pc, #72]	; (80041c8 <vTaskSwitchContext+0xb0>)
 800417e:	4413      	add	r3, r2
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	605a      	str	r2, [r3, #4]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	3308      	adds	r3, #8
 8004194:	429a      	cmp	r2, r3
 8004196:	d104      	bne.n	80041a2 <vTaskSwitchContext+0x8a>
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	605a      	str	r2, [r3, #4]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	4a08      	ldr	r2, [pc, #32]	; (80041cc <vTaskSwitchContext+0xb4>)
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	4a05      	ldr	r2, [pc, #20]	; (80041c4 <vTaskSwitchContext+0xac>)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6013      	str	r3, [r2, #0]
}
 80041b2:	bf00      	nop
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr
 80041bc:	20000d3c 	.word	0x20000d3c
 80041c0:	20000d28 	.word	0x20000d28
 80041c4:	20000d1c 	.word	0x20000d1c
 80041c8:	20000844 	.word	0x20000844
 80041cc:	20000840 	.word	0x20000840

080041d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10a      	bne.n	80041f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80041e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	60fb      	str	r3, [r7, #12]
}
 80041f2:	bf00      	nop
 80041f4:	e7fe      	b.n	80041f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041f6:	4b07      	ldr	r3, [pc, #28]	; (8004214 <vTaskPlaceOnEventList+0x44>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3318      	adds	r3, #24
 80041fc:	4619      	mov	r1, r3
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fe fe5c 	bl	8002ebc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004204:	2101      	movs	r1, #1
 8004206:	6838      	ldr	r0, [r7, #0]
 8004208:	f000 fa80 	bl	800470c <prvAddCurrentTaskToDelayedList>
}
 800420c:	bf00      	nop
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	20000840 	.word	0x20000840

08004218 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10a      	bne.n	8004240 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	617b      	str	r3, [r7, #20]
}
 800423c:	bf00      	nop
 800423e:	e7fe      	b.n	800423e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004240:	4b0a      	ldr	r3, [pc, #40]	; (800426c <vTaskPlaceOnEventListRestricted+0x54>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3318      	adds	r3, #24
 8004246:	4619      	mov	r1, r3
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f7fe fe14 	bl	8002e76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004254:	f04f 33ff 	mov.w	r3, #4294967295
 8004258:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	68b8      	ldr	r0, [r7, #8]
 800425e:	f000 fa55 	bl	800470c <prvAddCurrentTaskToDelayedList>
	}
 8004262:	bf00      	nop
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	20000840 	.word	0x20000840

08004270 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10a      	bne.n	800429c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	60fb      	str	r3, [r7, #12]
}
 8004298:	bf00      	nop
 800429a:	e7fe      	b.n	800429a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	3318      	adds	r3, #24
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fe fe43 	bl	8002f2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042a6:	4b1e      	ldr	r3, [pc, #120]	; (8004320 <xTaskRemoveFromEventList+0xb0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d11d      	bne.n	80042ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	3304      	adds	r3, #4
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe fe3a 	bl	8002f2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042bc:	4b19      	ldr	r3, [pc, #100]	; (8004324 <xTaskRemoveFromEventList+0xb4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d903      	bls.n	80042cc <xTaskRemoveFromEventList+0x5c>
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c8:	4a16      	ldr	r2, [pc, #88]	; (8004324 <xTaskRemoveFromEventList+0xb4>)
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d0:	4613      	mov	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4a13      	ldr	r2, [pc, #76]	; (8004328 <xTaskRemoveFromEventList+0xb8>)
 80042da:	441a      	add	r2, r3
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	3304      	adds	r3, #4
 80042e0:	4619      	mov	r1, r3
 80042e2:	4610      	mov	r0, r2
 80042e4:	f7fe fdc7 	bl	8002e76 <vListInsertEnd>
 80042e8:	e005      	b.n	80042f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	3318      	adds	r3, #24
 80042ee:	4619      	mov	r1, r3
 80042f0:	480e      	ldr	r0, [pc, #56]	; (800432c <xTaskRemoveFromEventList+0xbc>)
 80042f2:	f7fe fdc0 	bl	8002e76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fa:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <xTaskRemoveFromEventList+0xc0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	429a      	cmp	r2, r3
 8004302:	d905      	bls.n	8004310 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004304:	2301      	movs	r3, #1
 8004306:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <xTaskRemoveFromEventList+0xc4>)
 800430a:	2201      	movs	r2, #1
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	e001      	b.n	8004314 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004314:	697b      	ldr	r3, [r7, #20]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20000d3c 	.word	0x20000d3c
 8004324:	20000d1c 	.word	0x20000d1c
 8004328:	20000844 	.word	0x20000844
 800432c:	20000cd4 	.word	0x20000cd4
 8004330:	20000840 	.word	0x20000840
 8004334:	20000d28 	.word	0x20000d28

08004338 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <vTaskInternalSetTimeOutState+0x24>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <vTaskInternalSetTimeOutState+0x28>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	605a      	str	r2, [r3, #4]
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	bc80      	pop	{r7}
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	20000d2c 	.word	0x20000d2c
 8004360:	20000d18 	.word	0x20000d18

08004364 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b088      	sub	sp, #32
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10a      	bne.n	800438a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	613b      	str	r3, [r7, #16]
}
 8004386:	bf00      	nop
 8004388:	e7fe      	b.n	8004388 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10a      	bne.n	80043a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	60fb      	str	r3, [r7, #12]
}
 80043a2:	bf00      	nop
 80043a4:	e7fe      	b.n	80043a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80043a6:	f000 fe09 	bl	8004fbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80043aa:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <xTaskCheckForTimeOut+0xbc>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d102      	bne.n	80043ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61fb      	str	r3, [r7, #28]
 80043c8:	e023      	b.n	8004412 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	4b15      	ldr	r3, [pc, #84]	; (8004424 <xTaskCheckForTimeOut+0xc0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d007      	beq.n	80043e6 <xTaskCheckForTimeOut+0x82>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d302      	bcc.n	80043e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80043e0:	2301      	movs	r3, #1
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	e015      	b.n	8004412 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d20b      	bcs.n	8004408 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	1ad2      	subs	r2, r2, r3
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff ff9b 	bl	8004338 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004402:	2300      	movs	r3, #0
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	e004      	b.n	8004412 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800440e:	2301      	movs	r3, #1
 8004410:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004412:	f000 fe03 	bl	800501c <vPortExitCritical>

	return xReturn;
 8004416:	69fb      	ldr	r3, [r7, #28]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3720      	adds	r7, #32
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000d18 	.word	0x20000d18
 8004424:	20000d2c 	.word	0x20000d2c

08004428 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800442c:	4b03      	ldr	r3, [pc, #12]	; (800443c <vTaskMissedYield+0x14>)
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]
}
 8004432:	bf00      	nop
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	20000d28 	.word	0x20000d28

08004440 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004448:	f000 f852 	bl	80044f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800444c:	4b06      	ldr	r3, [pc, #24]	; (8004468 <prvIdleTask+0x28>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d9f9      	bls.n	8004448 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <prvIdleTask+0x2c>)
 8004456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004464:	e7f0      	b.n	8004448 <prvIdleTask+0x8>
 8004466:	bf00      	nop
 8004468:	20000844 	.word	0x20000844
 800446c:	e000ed04 	.word	0xe000ed04

08004470 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004476:	2300      	movs	r3, #0
 8004478:	607b      	str	r3, [r7, #4]
 800447a:	e00c      	b.n	8004496 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4a12      	ldr	r2, [pc, #72]	; (80044d0 <prvInitialiseTaskLists+0x60>)
 8004488:	4413      	add	r3, r2
 800448a:	4618      	mov	r0, r3
 800448c:	f7fe fcc8 	bl	8002e20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3301      	adds	r3, #1
 8004494:	607b      	str	r3, [r7, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b37      	cmp	r3, #55	; 0x37
 800449a:	d9ef      	bls.n	800447c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800449c:	480d      	ldr	r0, [pc, #52]	; (80044d4 <prvInitialiseTaskLists+0x64>)
 800449e:	f7fe fcbf 	bl	8002e20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044a2:	480d      	ldr	r0, [pc, #52]	; (80044d8 <prvInitialiseTaskLists+0x68>)
 80044a4:	f7fe fcbc 	bl	8002e20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044a8:	480c      	ldr	r0, [pc, #48]	; (80044dc <prvInitialiseTaskLists+0x6c>)
 80044aa:	f7fe fcb9 	bl	8002e20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044ae:	480c      	ldr	r0, [pc, #48]	; (80044e0 <prvInitialiseTaskLists+0x70>)
 80044b0:	f7fe fcb6 	bl	8002e20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044b4:	480b      	ldr	r0, [pc, #44]	; (80044e4 <prvInitialiseTaskLists+0x74>)
 80044b6:	f7fe fcb3 	bl	8002e20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <prvInitialiseTaskLists+0x78>)
 80044bc:	4a05      	ldr	r2, [pc, #20]	; (80044d4 <prvInitialiseTaskLists+0x64>)
 80044be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044c0:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <prvInitialiseTaskLists+0x7c>)
 80044c2:	4a05      	ldr	r2, [pc, #20]	; (80044d8 <prvInitialiseTaskLists+0x68>)
 80044c4:	601a      	str	r2, [r3, #0]
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000844 	.word	0x20000844
 80044d4:	20000ca4 	.word	0x20000ca4
 80044d8:	20000cb8 	.word	0x20000cb8
 80044dc:	20000cd4 	.word	0x20000cd4
 80044e0:	20000ce8 	.word	0x20000ce8
 80044e4:	20000d00 	.word	0x20000d00
 80044e8:	20000ccc 	.word	0x20000ccc
 80044ec:	20000cd0 	.word	0x20000cd0

080044f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044f6:	e019      	b.n	800452c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044f8:	f000 fd60 	bl	8004fbc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80044fc:	4b10      	ldr	r3, [pc, #64]	; (8004540 <prvCheckTasksWaitingTermination+0x50>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3304      	adds	r3, #4
 8004508:	4618      	mov	r0, r3
 800450a:	f7fe fd0f 	bl	8002f2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800450e:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <prvCheckTasksWaitingTermination+0x54>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3b01      	subs	r3, #1
 8004514:	4a0b      	ldr	r2, [pc, #44]	; (8004544 <prvCheckTasksWaitingTermination+0x54>)
 8004516:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004518:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <prvCheckTasksWaitingTermination+0x58>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3b01      	subs	r3, #1
 800451e:	4a0a      	ldr	r2, [pc, #40]	; (8004548 <prvCheckTasksWaitingTermination+0x58>)
 8004520:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004522:	f000 fd7b 	bl	800501c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f810 	bl	800454c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800452c:	4b06      	ldr	r3, [pc, #24]	; (8004548 <prvCheckTasksWaitingTermination+0x58>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e1      	bne.n	80044f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20000ce8 	.word	0x20000ce8
 8004544:	20000d14 	.word	0x20000d14
 8004548:	20000cfc 	.word	0x20000cfc

0800454c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800455a:	2b00      	cmp	r3, #0
 800455c:	d108      	bne.n	8004570 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	4618      	mov	r0, r3
 8004564:	f000 feee 	bl	8005344 <vPortFree>
				vPortFree( pxTCB );
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 feeb 	bl	8005344 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800456e:	e018      	b.n	80045a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004576:	2b01      	cmp	r3, #1
 8004578:	d103      	bne.n	8004582 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fee2 	bl	8005344 <vPortFree>
	}
 8004580:	e00f      	b.n	80045a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004588:	2b02      	cmp	r3, #2
 800458a:	d00a      	beq.n	80045a2 <prvDeleteTCB+0x56>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	60fb      	str	r3, [r7, #12]
}
 800459e:	bf00      	nop
 80045a0:	e7fe      	b.n	80045a0 <prvDeleteTCB+0x54>
	}
 80045a2:	bf00      	nop
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045b2:	4b0e      	ldr	r3, [pc, #56]	; (80045ec <prvResetNextTaskUnblockTime+0x40>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <prvResetNextTaskUnblockTime+0x14>
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <prvResetNextTaskUnblockTime+0x16>
 80045c0:	2300      	movs	r3, #0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d004      	beq.n	80045d0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045c6:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <prvResetNextTaskUnblockTime+0x44>)
 80045c8:	f04f 32ff 	mov.w	r2, #4294967295
 80045cc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045ce:	e008      	b.n	80045e2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80045d0:	4b06      	ldr	r3, [pc, #24]	; (80045ec <prvResetNextTaskUnblockTime+0x40>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	4a04      	ldr	r2, [pc, #16]	; (80045f0 <prvResetNextTaskUnblockTime+0x44>)
 80045e0:	6013      	str	r3, [r2, #0]
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr
 80045ec:	20000ccc 	.word	0x20000ccc
 80045f0:	20000d34 	.word	0x20000d34

080045f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045fa:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <xTaskGetSchedulerState+0x34>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d102      	bne.n	8004608 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004602:	2301      	movs	r3, #1
 8004604:	607b      	str	r3, [r7, #4]
 8004606:	e008      	b.n	800461a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004608:	4b08      	ldr	r3, [pc, #32]	; (800462c <xTaskGetSchedulerState+0x38>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d102      	bne.n	8004616 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004610:	2302      	movs	r3, #2
 8004612:	607b      	str	r3, [r7, #4]
 8004614:	e001      	b.n	800461a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004616:	2300      	movs	r3, #0
 8004618:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800461a:	687b      	ldr	r3, [r7, #4]
	}
 800461c:	4618      	mov	r0, r3
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	20000d20 	.word	0x20000d20
 800462c:	20000d3c 	.word	0x20000d3c

08004630 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800463c:	2300      	movs	r3, #0
 800463e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d056      	beq.n	80046f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004646:	4b2e      	ldr	r3, [pc, #184]	; (8004700 <xTaskPriorityDisinherit+0xd0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	429a      	cmp	r2, r3
 800464e:	d00a      	beq.n	8004666 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	60fb      	str	r3, [r7, #12]
}
 8004662:	bf00      	nop
 8004664:	e7fe      	b.n	8004664 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10a      	bne.n	8004684 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	60bb      	str	r3, [r7, #8]
}
 8004680:	bf00      	nop
 8004682:	e7fe      	b.n	8004682 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004688:	1e5a      	subs	r2, r3, #1
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004696:	429a      	cmp	r2, r3
 8004698:	d02c      	beq.n	80046f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d128      	bne.n	80046f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	3304      	adds	r3, #4
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fe fc40 	bl	8002f2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c4:	4b0f      	ldr	r3, [pc, #60]	; (8004704 <xTaskPriorityDisinherit+0xd4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d903      	bls.n	80046d4 <xTaskPriorityDisinherit+0xa4>
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	4a0c      	ldr	r2, [pc, #48]	; (8004704 <xTaskPriorityDisinherit+0xd4>)
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4a09      	ldr	r2, [pc, #36]	; (8004708 <xTaskPriorityDisinherit+0xd8>)
 80046e2:	441a      	add	r2, r3
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	3304      	adds	r3, #4
 80046e8:	4619      	mov	r1, r3
 80046ea:	4610      	mov	r0, r2
 80046ec:	f7fe fbc3 	bl	8002e76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046f0:	2301      	movs	r3, #1
 80046f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046f4:	697b      	ldr	r3, [r7, #20]
	}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20000840 	.word	0x20000840
 8004704:	20000d1c 	.word	0x20000d1c
 8004708:	20000844 	.word	0x20000844

0800470c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004716:	4b21      	ldr	r3, [pc, #132]	; (800479c <prvAddCurrentTaskToDelayedList+0x90>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800471c:	4b20      	ldr	r3, [pc, #128]	; (80047a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3304      	adds	r3, #4
 8004722:	4618      	mov	r0, r3
 8004724:	f7fe fc02 	bl	8002f2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472e:	d10a      	bne.n	8004746 <prvAddCurrentTaskToDelayedList+0x3a>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004736:	4b1a      	ldr	r3, [pc, #104]	; (80047a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3304      	adds	r3, #4
 800473c:	4619      	mov	r1, r3
 800473e:	4819      	ldr	r0, [pc, #100]	; (80047a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004740:	f7fe fb99 	bl	8002e76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004744:	e026      	b.n	8004794 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4413      	add	r3, r2
 800474c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800474e:	4b14      	ldr	r3, [pc, #80]	; (80047a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	429a      	cmp	r2, r3
 800475c:	d209      	bcs.n	8004772 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800475e:	4b12      	ldr	r3, [pc, #72]	; (80047a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	4b0f      	ldr	r3, [pc, #60]	; (80047a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3304      	adds	r3, #4
 8004768:	4619      	mov	r1, r3
 800476a:	4610      	mov	r0, r2
 800476c:	f7fe fba6 	bl	8002ebc <vListInsert>
}
 8004770:	e010      	b.n	8004794 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004772:	4b0e      	ldr	r3, [pc, #56]	; (80047ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3304      	adds	r3, #4
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f7fe fb9c 	bl	8002ebc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004784:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	429a      	cmp	r2, r3
 800478c:	d202      	bcs.n	8004794 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800478e:	4a08      	ldr	r2, [pc, #32]	; (80047b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	6013      	str	r3, [r2, #0]
}
 8004794:	bf00      	nop
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20000d18 	.word	0x20000d18
 80047a0:	20000840 	.word	0x20000840
 80047a4:	20000d00 	.word	0x20000d00
 80047a8:	20000cd0 	.word	0x20000cd0
 80047ac:	20000ccc 	.word	0x20000ccc
 80047b0:	20000d34 	.word	0x20000d34

080047b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08a      	sub	sp, #40	; 0x28
 80047b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80047be:	f000 facb 	bl	8004d58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80047c2:	4b1c      	ldr	r3, [pc, #112]	; (8004834 <xTimerCreateTimerTask+0x80>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d021      	beq.n	800480e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80047d2:	1d3a      	adds	r2, r7, #4
 80047d4:	f107 0108 	add.w	r1, r7, #8
 80047d8:	f107 030c 	add.w	r3, r7, #12
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fe fb05 	bl	8002dec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	9202      	str	r2, [sp, #8]
 80047ea:	9301      	str	r3, [sp, #4]
 80047ec:	2302      	movs	r3, #2
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	2300      	movs	r3, #0
 80047f2:	460a      	mov	r2, r1
 80047f4:	4910      	ldr	r1, [pc, #64]	; (8004838 <xTimerCreateTimerTask+0x84>)
 80047f6:	4811      	ldr	r0, [pc, #68]	; (800483c <xTimerCreateTimerTask+0x88>)
 80047f8:	f7ff f8e4 	bl	80039c4 <xTaskCreateStatic>
 80047fc:	4603      	mov	r3, r0
 80047fe:	4a10      	ldr	r2, [pc, #64]	; (8004840 <xTimerCreateTimerTask+0x8c>)
 8004800:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004802:	4b0f      	ldr	r3, [pc, #60]	; (8004840 <xTimerCreateTimerTask+0x8c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800480a:	2301      	movs	r3, #1
 800480c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10a      	bne.n	800482a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	613b      	str	r3, [r7, #16]
}
 8004826:	bf00      	nop
 8004828:	e7fe      	b.n	8004828 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800482a:	697b      	ldr	r3, [r7, #20]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20000d70 	.word	0x20000d70
 8004838:	08005670 	.word	0x08005670
 800483c:	08004961 	.word	0x08004961
 8004840:	20000d74 	.word	0x20000d74

08004844 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08a      	sub	sp, #40	; 0x28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004852:	2300      	movs	r3, #0
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10a      	bne.n	8004872 <xTimerGenericCommand+0x2e>
	__asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	623b      	str	r3, [r7, #32]
}
 800486e:	bf00      	nop
 8004870:	e7fe      	b.n	8004870 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004872:	4b1a      	ldr	r3, [pc, #104]	; (80048dc <xTimerGenericCommand+0x98>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d02a      	beq.n	80048d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2b05      	cmp	r3, #5
 800488a:	dc18      	bgt.n	80048be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800488c:	f7ff feb2 	bl	80045f4 <xTaskGetSchedulerState>
 8004890:	4603      	mov	r3, r0
 8004892:	2b02      	cmp	r3, #2
 8004894:	d109      	bne.n	80048aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004896:	4b11      	ldr	r3, [pc, #68]	; (80048dc <xTimerGenericCommand+0x98>)
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	f107 0110 	add.w	r1, r7, #16
 800489e:	2300      	movs	r3, #0
 80048a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048a2:	f7fe fcad 	bl	8003200 <xQueueGenericSend>
 80048a6:	6278      	str	r0, [r7, #36]	; 0x24
 80048a8:	e012      	b.n	80048d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80048aa:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <xTimerGenericCommand+0x98>)
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	f107 0110 	add.w	r1, r7, #16
 80048b2:	2300      	movs	r3, #0
 80048b4:	2200      	movs	r2, #0
 80048b6:	f7fe fca3 	bl	8003200 <xQueueGenericSend>
 80048ba:	6278      	str	r0, [r7, #36]	; 0x24
 80048bc:	e008      	b.n	80048d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80048be:	4b07      	ldr	r3, [pc, #28]	; (80048dc <xTimerGenericCommand+0x98>)
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	f107 0110 	add.w	r1, r7, #16
 80048c6:	2300      	movs	r3, #0
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	f7fe fd97 	bl	80033fc <xQueueGenericSendFromISR>
 80048ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3728      	adds	r7, #40	; 0x28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000d70 	.word	0x20000d70

080048e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048ea:	4b1c      	ldr	r3, [pc, #112]	; (800495c <prvProcessExpiredTimer+0x7c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	3304      	adds	r3, #4
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7fe fb17 	bl	8002f2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d122      	bne.n	800494c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	18d1      	adds	r1, r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	6978      	ldr	r0, [r7, #20]
 8004914:	f000 f8c8 	bl	8004aa8 <prvInsertTimerInActiveList>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d016      	beq.n	800494c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800491e:	2300      	movs	r3, #0
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	2300      	movs	r3, #0
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	2100      	movs	r1, #0
 8004928:	6978      	ldr	r0, [r7, #20]
 800492a:	f7ff ff8b 	bl	8004844 <xTimerGenericCommand>
 800492e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10a      	bne.n	800494c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	60fb      	str	r3, [r7, #12]
}
 8004948:	bf00      	nop
 800494a:	e7fe      	b.n	800494a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	6978      	ldr	r0, [r7, #20]
 8004952:	4798      	blx	r3
}
 8004954:	bf00      	nop
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	20000d68 	.word	0x20000d68

08004960 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004968:	f107 0308 	add.w	r3, r7, #8
 800496c:	4618      	mov	r0, r3
 800496e:	f000 f857 	bl	8004a20 <prvGetNextExpireTime>
 8004972:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4619      	mov	r1, r3
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f803 	bl	8004984 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800497e:	f000 f8d5 	bl	8004b2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004982:	e7f1      	b.n	8004968 <prvTimerTask+0x8>

08004984 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800498e:	f7ff fa4b 	bl	8003e28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004992:	f107 0308 	add.w	r3, r7, #8
 8004996:	4618      	mov	r0, r3
 8004998:	f000 f866 	bl	8004a68 <prvSampleTimeNow>
 800499c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d130      	bne.n	8004a06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10a      	bne.n	80049c0 <prvProcessTimerOrBlockTask+0x3c>
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d806      	bhi.n	80049c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80049b2:	f7ff fa47 	bl	8003e44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80049b6:	68f9      	ldr	r1, [r7, #12]
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7ff ff91 	bl	80048e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80049be:	e024      	b.n	8004a0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d008      	beq.n	80049d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80049c6:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <prvProcessTimerOrBlockTask+0x90>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	bf0c      	ite	eq
 80049d0:	2301      	moveq	r3, #1
 80049d2:	2300      	movne	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80049d8:	4b0f      	ldr	r3, [pc, #60]	; (8004a18 <prvProcessTimerOrBlockTask+0x94>)
 80049da:	6818      	ldr	r0, [r3, #0]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	4619      	mov	r1, r3
 80049e6:	f7fe ffb9 	bl	800395c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80049ea:	f7ff fa2b 	bl	8003e44 <xTaskResumeAll>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80049f4:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <prvProcessTimerOrBlockTask+0x98>)
 80049f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	f3bf 8f6f 	isb	sy
}
 8004a04:	e001      	b.n	8004a0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a06:	f7ff fa1d 	bl	8003e44 <xTaskResumeAll>
}
 8004a0a:	bf00      	nop
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000d6c 	.word	0x20000d6c
 8004a18:	20000d70 	.word	0x20000d70
 8004a1c:	e000ed04 	.word	0xe000ed04

08004a20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a28:	4b0e      	ldr	r3, [pc, #56]	; (8004a64 <prvGetNextExpireTime+0x44>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	bf0c      	ite	eq
 8004a32:	2301      	moveq	r3, #1
 8004a34:	2300      	movne	r3, #0
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	461a      	mov	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d105      	bne.n	8004a52 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a46:	4b07      	ldr	r3, [pc, #28]	; (8004a64 <prvGetNextExpireTime+0x44>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	e001      	b.n	8004a56 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a56:	68fb      	ldr	r3, [r7, #12]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20000d68 	.word	0x20000d68

08004a68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a70:	f7ff fa86 	bl	8003f80 <xTaskGetTickCount>
 8004a74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a76:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <prvSampleTimeNow+0x3c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d205      	bcs.n	8004a8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a80:	f000 f908 	bl	8004c94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	e002      	b.n	8004a92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a92:	4a04      	ldr	r2, [pc, #16]	; (8004aa4 <prvSampleTimeNow+0x3c>)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a98:	68fb      	ldr	r3, [r7, #12]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000d78 	.word	0x20000d78

08004aa8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d812      	bhi.n	8004af4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	1ad2      	subs	r2, r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d302      	bcc.n	8004ae2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004adc:	2301      	movs	r3, #1
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	e01b      	b.n	8004b1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ae2:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <prvInsertTimerInActiveList+0x7c>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3304      	adds	r3, #4
 8004aea:	4619      	mov	r1, r3
 8004aec:	4610      	mov	r0, r2
 8004aee:	f7fe f9e5 	bl	8002ebc <vListInsert>
 8004af2:	e012      	b.n	8004b1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d206      	bcs.n	8004b0a <prvInsertTimerInActiveList+0x62>
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d302      	bcc.n	8004b0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004b04:	2301      	movs	r3, #1
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	e007      	b.n	8004b1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b0a:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <prvInsertTimerInActiveList+0x80>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3304      	adds	r3, #4
 8004b12:	4619      	mov	r1, r3
 8004b14:	4610      	mov	r0, r2
 8004b16:	f7fe f9d1 	bl	8002ebc <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b1a:	697b      	ldr	r3, [r7, #20]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20000d6c 	.word	0x20000d6c
 8004b28:	20000d68 	.word	0x20000d68

08004b2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08e      	sub	sp, #56	; 0x38
 8004b30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b32:	e09d      	b.n	8004c70 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	da18      	bge.n	8004b6c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004b3a:	1d3b      	adds	r3, r7, #4
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10a      	bne.n	8004b5c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	61fb      	str	r3, [r7, #28]
}
 8004b58:	bf00      	nop
 8004b5a:	e7fe      	b.n	8004b5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b62:	6850      	ldr	r0, [r2, #4]
 8004b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b66:	6892      	ldr	r2, [r2, #8]
 8004b68:	4611      	mov	r1, r2
 8004b6a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	db7d      	blt.n	8004c6e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d004      	beq.n	8004b88 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b80:	3304      	adds	r3, #4
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe f9d2 	bl	8002f2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b88:	463b      	mov	r3, r7
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff ff6c 	bl	8004a68 <prvSampleTimeNow>
 8004b90:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b09      	cmp	r3, #9
 8004b96:	d86b      	bhi.n	8004c70 <prvProcessReceivedCommands+0x144>
 8004b98:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <prvProcessReceivedCommands+0x74>)
 8004b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9e:	bf00      	nop
 8004ba0:	08004bc9 	.word	0x08004bc9
 8004ba4:	08004bc9 	.word	0x08004bc9
 8004ba8:	08004bc9 	.word	0x08004bc9
 8004bac:	08004c71 	.word	0x08004c71
 8004bb0:	08004c25 	.word	0x08004c25
 8004bb4:	08004c5d 	.word	0x08004c5d
 8004bb8:	08004bc9 	.word	0x08004bc9
 8004bbc:	08004bc9 	.word	0x08004bc9
 8004bc0:	08004c71 	.word	0x08004c71
 8004bc4:	08004c25 	.word	0x08004c25
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	18d1      	adds	r1, r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bd6:	f7ff ff67 	bl	8004aa8 <prvInsertTimerInActiveList>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d047      	beq.n	8004c70 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004be6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d13f      	bne.n	8004c70 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	441a      	add	r2, r3
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	2100      	movs	r1, #0
 8004c00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c02:	f7ff fe1f 	bl	8004844 <xTimerGenericCommand>
 8004c06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d130      	bne.n	8004c70 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	61bb      	str	r3, [r7, #24]
}
 8004c20:	bf00      	nop
 8004c22:	e7fe      	b.n	8004c22 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c28:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10a      	bne.n	8004c48 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	617b      	str	r3, [r7, #20]
}
 8004c44:	bf00      	nop
 8004c46:	e7fe      	b.n	8004c46 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	699a      	ldr	r2, [r3, #24]
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	18d1      	adds	r1, r2, r3
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c56:	f7ff ff27 	bl	8004aa8 <prvInsertTimerInActiveList>
					break;
 8004c5a:	e009      	b.n	8004c70 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d104      	bne.n	8004c70 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004c66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c68:	f000 fb6c 	bl	8005344 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c6c:	e000      	b.n	8004c70 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004c6e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c70:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <prvProcessReceivedCommands+0x164>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	1d39      	adds	r1, r7, #4
 8004c76:	2200      	movs	r2, #0
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7fe fc57 	bl	800352c <xQueueReceive>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f47f af57 	bne.w	8004b34 <prvProcessReceivedCommands+0x8>
	}
}
 8004c86:	bf00      	nop
 8004c88:	bf00      	nop
 8004c8a:	3730      	adds	r7, #48	; 0x30
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	20000d70 	.word	0x20000d70

08004c94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b088      	sub	sp, #32
 8004c98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c9a:	e045      	b.n	8004d28 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c9c:	4b2c      	ldr	r3, [pc, #176]	; (8004d50 <prvSwitchTimerLists+0xbc>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ca6:	4b2a      	ldr	r3, [pc, #168]	; (8004d50 <prvSwitchTimerLists+0xbc>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fe f939 	bl	8002f2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d12e      	bne.n	8004d28 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d90e      	bls.n	8004cfa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ce8:	4b19      	ldr	r3, [pc, #100]	; (8004d50 <prvSwitchTimerLists+0xbc>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f7fe f8e2 	bl	8002ebc <vListInsert>
 8004cf8:	e016      	b.n	8004d28 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	2100      	movs	r1, #0
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f7ff fd9d 	bl	8004844 <xTimerGenericCommand>
 8004d0a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10a      	bne.n	8004d28 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	603b      	str	r3, [r7, #0]
}
 8004d24:	bf00      	nop
 8004d26:	e7fe      	b.n	8004d26 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d28:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <prvSwitchTimerLists+0xbc>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1b4      	bne.n	8004c9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d32:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <prvSwitchTimerLists+0xbc>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d38:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <prvSwitchTimerLists+0xc0>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a04      	ldr	r2, [pc, #16]	; (8004d50 <prvSwitchTimerLists+0xbc>)
 8004d3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d40:	4a04      	ldr	r2, [pc, #16]	; (8004d54 <prvSwitchTimerLists+0xc0>)
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	6013      	str	r3, [r2, #0]
}
 8004d46:	bf00      	nop
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000d68 	.word	0x20000d68
 8004d54:	20000d6c 	.word	0x20000d6c

08004d58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d5e:	f000 f92d 	bl	8004fbc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d62:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <prvCheckForValidListAndQueue+0x60>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d120      	bne.n	8004dac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d6a:	4814      	ldr	r0, [pc, #80]	; (8004dbc <prvCheckForValidListAndQueue+0x64>)
 8004d6c:	f7fe f858 	bl	8002e20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d70:	4813      	ldr	r0, [pc, #76]	; (8004dc0 <prvCheckForValidListAndQueue+0x68>)
 8004d72:	f7fe f855 	bl	8002e20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d76:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <prvCheckForValidListAndQueue+0x6c>)
 8004d78:	4a10      	ldr	r2, [pc, #64]	; (8004dbc <prvCheckForValidListAndQueue+0x64>)
 8004d7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d7c:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <prvCheckForValidListAndQueue+0x70>)
 8004d7e:	4a10      	ldr	r2, [pc, #64]	; (8004dc0 <prvCheckForValidListAndQueue+0x68>)
 8004d80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d82:	2300      	movs	r3, #0
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	4b11      	ldr	r3, [pc, #68]	; (8004dcc <prvCheckForValidListAndQueue+0x74>)
 8004d88:	4a11      	ldr	r2, [pc, #68]	; (8004dd0 <prvCheckForValidListAndQueue+0x78>)
 8004d8a:	2110      	movs	r1, #16
 8004d8c:	200a      	movs	r0, #10
 8004d8e:	f7fe f95f 	bl	8003050 <xQueueGenericCreateStatic>
 8004d92:	4603      	mov	r3, r0
 8004d94:	4a08      	ldr	r2, [pc, #32]	; (8004db8 <prvCheckForValidListAndQueue+0x60>)
 8004d96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d98:	4b07      	ldr	r3, [pc, #28]	; (8004db8 <prvCheckForValidListAndQueue+0x60>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004da0:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <prvCheckForValidListAndQueue+0x60>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	490b      	ldr	r1, [pc, #44]	; (8004dd4 <prvCheckForValidListAndQueue+0x7c>)
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fe fdb0 	bl	800390c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dac:	f000 f936 	bl	800501c <vPortExitCritical>
}
 8004db0:	bf00      	nop
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000d70 	.word	0x20000d70
 8004dbc:	20000d40 	.word	0x20000d40
 8004dc0:	20000d54 	.word	0x20000d54
 8004dc4:	20000d68 	.word	0x20000d68
 8004dc8:	20000d6c 	.word	0x20000d6c
 8004dcc:	20000e1c 	.word	0x20000e1c
 8004dd0:	20000d7c 	.word	0x20000d7c
 8004dd4:	08005678 	.word	0x08005678

08004dd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3b04      	subs	r3, #4
 8004de8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004df0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3b04      	subs	r3, #4
 8004df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f023 0201 	bic.w	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3b04      	subs	r3, #4
 8004e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e08:	4a08      	ldr	r2, [pc, #32]	; (8004e2c <pxPortInitialiseStack+0x54>)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3b14      	subs	r3, #20
 8004e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3b20      	subs	r3, #32
 8004e1e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e20:	68fb      	ldr	r3, [r7, #12]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bc80      	pop	{r7}
 8004e2a:	4770      	bx	lr
 8004e2c:	08004e31 	.word	0x08004e31

08004e30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004e36:	2300      	movs	r3, #0
 8004e38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e3a:	4b12      	ldr	r3, [pc, #72]	; (8004e84 <prvTaskExitError+0x54>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	d00a      	beq.n	8004e5a <prvTaskExitError+0x2a>
	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	60fb      	str	r3, [r7, #12]
}
 8004e56:	bf00      	nop
 8004e58:	e7fe      	b.n	8004e58 <prvTaskExitError+0x28>
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	60bb      	str	r3, [r7, #8]
}
 8004e6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e6e:	bf00      	nop
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0fc      	beq.n	8004e70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e76:	bf00      	nop
 8004e78:	bf00      	nop
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	2000000c 	.word	0x2000000c
	...

08004e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e90:	4b07      	ldr	r3, [pc, #28]	; (8004eb0 <pxCurrentTCBConst2>)
 8004e92:	6819      	ldr	r1, [r3, #0]
 8004e94:	6808      	ldr	r0, [r1, #0]
 8004e96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e9a:	f380 8809 	msr	PSP, r0
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f04f 0000 	mov.w	r0, #0
 8004ea6:	f380 8811 	msr	BASEPRI, r0
 8004eaa:	f04e 0e0d 	orr.w	lr, lr, #13
 8004eae:	4770      	bx	lr

08004eb0 <pxCurrentTCBConst2>:
 8004eb0:	20000840 	.word	0x20000840
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop

08004eb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004eb8:	4806      	ldr	r0, [pc, #24]	; (8004ed4 <prvPortStartFirstTask+0x1c>)
 8004eba:	6800      	ldr	r0, [r0, #0]
 8004ebc:	6800      	ldr	r0, [r0, #0]
 8004ebe:	f380 8808 	msr	MSP, r0
 8004ec2:	b662      	cpsie	i
 8004ec4:	b661      	cpsie	f
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	df00      	svc	0
 8004ed0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004ed2:	bf00      	nop
 8004ed4:	e000ed08 	.word	0xe000ed08

08004ed8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ede:	4b32      	ldr	r3, [pc, #200]	; (8004fa8 <xPortStartScheduler+0xd0>)
 8004ee0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	22ff      	movs	r2, #255	; 0xff
 8004eee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ef8:	78fb      	ldrb	r3, [r7, #3]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	4b2a      	ldr	r3, [pc, #168]	; (8004fac <xPortStartScheduler+0xd4>)
 8004f04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f06:	4b2a      	ldr	r3, [pc, #168]	; (8004fb0 <xPortStartScheduler+0xd8>)
 8004f08:	2207      	movs	r2, #7
 8004f0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f0c:	e009      	b.n	8004f22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004f0e:	4b28      	ldr	r3, [pc, #160]	; (8004fb0 <xPortStartScheduler+0xd8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	4a26      	ldr	r2, [pc, #152]	; (8004fb0 <xPortStartScheduler+0xd8>)
 8004f16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f18:	78fb      	ldrb	r3, [r7, #3]
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f22:	78fb      	ldrb	r3, [r7, #3]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2a:	2b80      	cmp	r3, #128	; 0x80
 8004f2c:	d0ef      	beq.n	8004f0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f2e:	4b20      	ldr	r3, [pc, #128]	; (8004fb0 <xPortStartScheduler+0xd8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f1c3 0307 	rsb	r3, r3, #7
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d00a      	beq.n	8004f50 <xPortStartScheduler+0x78>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	60bb      	str	r3, [r7, #8]
}
 8004f4c:	bf00      	nop
 8004f4e:	e7fe      	b.n	8004f4e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f50:	4b17      	ldr	r3, [pc, #92]	; (8004fb0 <xPortStartScheduler+0xd8>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	021b      	lsls	r3, r3, #8
 8004f56:	4a16      	ldr	r2, [pc, #88]	; (8004fb0 <xPortStartScheduler+0xd8>)
 8004f58:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f5a:	4b15      	ldr	r3, [pc, #84]	; (8004fb0 <xPortStartScheduler+0xd8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f62:	4a13      	ldr	r2, [pc, #76]	; (8004fb0 <xPortStartScheduler+0xd8>)
 8004f64:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f6e:	4b11      	ldr	r3, [pc, #68]	; (8004fb4 <xPortStartScheduler+0xdc>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a10      	ldr	r2, [pc, #64]	; (8004fb4 <xPortStartScheduler+0xdc>)
 8004f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f7a:	4b0e      	ldr	r3, [pc, #56]	; (8004fb4 <xPortStartScheduler+0xdc>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a0d      	ldr	r2, [pc, #52]	; (8004fb4 <xPortStartScheduler+0xdc>)
 8004f80:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f84:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f86:	f000 f8b9 	bl	80050fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <xPortStartScheduler+0xe0>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f90:	f7ff ff92 	bl	8004eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f94:	f7ff f8c0 	bl	8004118 <vTaskSwitchContext>
	prvTaskExitError();
 8004f98:	f7ff ff4a 	bl	8004e30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	e000e400 	.word	0xe000e400
 8004fac:	20000e6c 	.word	0x20000e6c
 8004fb0:	20000e70 	.word	0x20000e70
 8004fb4:	e000ed20 	.word	0xe000ed20
 8004fb8:	2000000c 	.word	0x2000000c

08004fbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	607b      	str	r3, [r7, #4]
}
 8004fd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004fd6:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <vPortEnterCritical+0x58>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	4a0d      	ldr	r2, [pc, #52]	; (8005014 <vPortEnterCritical+0x58>)
 8004fde:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004fe0:	4b0c      	ldr	r3, [pc, #48]	; (8005014 <vPortEnterCritical+0x58>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d10f      	bne.n	8005008 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004fe8:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <vPortEnterCritical+0x5c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <vPortEnterCritical+0x4c>
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	603b      	str	r3, [r7, #0]
}
 8005004:	bf00      	nop
 8005006:	e7fe      	b.n	8005006 <vPortEnterCritical+0x4a>
	}
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	2000000c 	.word	0x2000000c
 8005018:	e000ed04 	.word	0xe000ed04

0800501c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005022:	4b11      	ldr	r3, [pc, #68]	; (8005068 <vPortExitCritical+0x4c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10a      	bne.n	8005040 <vPortExitCritical+0x24>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	607b      	str	r3, [r7, #4]
}
 800503c:	bf00      	nop
 800503e:	e7fe      	b.n	800503e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005040:	4b09      	ldr	r3, [pc, #36]	; (8005068 <vPortExitCritical+0x4c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3b01      	subs	r3, #1
 8005046:	4a08      	ldr	r2, [pc, #32]	; (8005068 <vPortExitCritical+0x4c>)
 8005048:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800504a:	4b07      	ldr	r3, [pc, #28]	; (8005068 <vPortExitCritical+0x4c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d105      	bne.n	800505e <vPortExitCritical+0x42>
 8005052:	2300      	movs	r3, #0
 8005054:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	f383 8811 	msr	BASEPRI, r3
}
 800505c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr
 8005068:	2000000c 	.word	0x2000000c
 800506c:	00000000 	.word	0x00000000

08005070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005070:	f3ef 8009 	mrs	r0, PSP
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	4b0d      	ldr	r3, [pc, #52]	; (80050b0 <pxCurrentTCBConst>)
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005080:	6010      	str	r0, [r2, #0]
 8005082:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005086:	f04f 0050 	mov.w	r0, #80	; 0x50
 800508a:	f380 8811 	msr	BASEPRI, r0
 800508e:	f7ff f843 	bl	8004118 <vTaskSwitchContext>
 8005092:	f04f 0000 	mov.w	r0, #0
 8005096:	f380 8811 	msr	BASEPRI, r0
 800509a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800509e:	6819      	ldr	r1, [r3, #0]
 80050a0:	6808      	ldr	r0, [r1, #0]
 80050a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80050a6:	f380 8809 	msr	PSP, r0
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	4770      	bx	lr

080050b0 <pxCurrentTCBConst>:
 80050b0:	20000840 	.word	0x20000840
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop

080050b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	607b      	str	r3, [r7, #4]
}
 80050d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050d2:	f7fe ff63 	bl	8003f9c <xTaskIncrementTick>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050dc:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <SysTick_Handler+0x40>)
 80050de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	2300      	movs	r3, #0
 80050e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	f383 8811 	msr	BASEPRI, r3
}
 80050ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80050f0:	bf00      	nop
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	e000ed04 	.word	0xe000ed04

080050fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005100:	4b0a      	ldr	r3, [pc, #40]	; (800512c <vPortSetupTimerInterrupt+0x30>)
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005106:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <vPortSetupTimerInterrupt+0x34>)
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800510c:	4b09      	ldr	r3, [pc, #36]	; (8005134 <vPortSetupTimerInterrupt+0x38>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a09      	ldr	r2, [pc, #36]	; (8005138 <vPortSetupTimerInterrupt+0x3c>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	099b      	lsrs	r3, r3, #6
 8005118:	4a08      	ldr	r2, [pc, #32]	; (800513c <vPortSetupTimerInterrupt+0x40>)
 800511a:	3b01      	subs	r3, #1
 800511c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800511e:	4b03      	ldr	r3, [pc, #12]	; (800512c <vPortSetupTimerInterrupt+0x30>)
 8005120:	2207      	movs	r2, #7
 8005122:	601a      	str	r2, [r3, #0]
}
 8005124:	bf00      	nop
 8005126:	46bd      	mov	sp, r7
 8005128:	bc80      	pop	{r7}
 800512a:	4770      	bx	lr
 800512c:	e000e010 	.word	0xe000e010
 8005130:	e000e018 	.word	0xe000e018
 8005134:	20000000 	.word	0x20000000
 8005138:	10624dd3 	.word	0x10624dd3
 800513c:	e000e014 	.word	0xe000e014

08005140 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005146:	f3ef 8305 	mrs	r3, IPSR
 800514a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b0f      	cmp	r3, #15
 8005150:	d914      	bls.n	800517c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005152:	4a16      	ldr	r2, [pc, #88]	; (80051ac <vPortValidateInterruptPriority+0x6c>)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800515c:	4b14      	ldr	r3, [pc, #80]	; (80051b0 <vPortValidateInterruptPriority+0x70>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	7afa      	ldrb	r2, [r7, #11]
 8005162:	429a      	cmp	r2, r3
 8005164:	d20a      	bcs.n	800517c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	607b      	str	r3, [r7, #4]
}
 8005178:	bf00      	nop
 800517a:	e7fe      	b.n	800517a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800517c:	4b0d      	ldr	r3, [pc, #52]	; (80051b4 <vPortValidateInterruptPriority+0x74>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005184:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <vPortValidateInterruptPriority+0x78>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	429a      	cmp	r2, r3
 800518a:	d90a      	bls.n	80051a2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	603b      	str	r3, [r7, #0]
}
 800519e:	bf00      	nop
 80051a0:	e7fe      	b.n	80051a0 <vPortValidateInterruptPriority+0x60>
	}
 80051a2:	bf00      	nop
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr
 80051ac:	e000e3f0 	.word	0xe000e3f0
 80051b0:	20000e6c 	.word	0x20000e6c
 80051b4:	e000ed0c 	.word	0xe000ed0c
 80051b8:	20000e70 	.word	0x20000e70

080051bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08a      	sub	sp, #40	; 0x28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051c8:	f7fe fe2e 	bl	8003e28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051cc:	4b58      	ldr	r3, [pc, #352]	; (8005330 <pvPortMalloc+0x174>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051d4:	f000 f910 	bl	80053f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051d8:	4b56      	ldr	r3, [pc, #344]	; (8005334 <pvPortMalloc+0x178>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4013      	ands	r3, r2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f040 808e 	bne.w	8005302 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01d      	beq.n	8005228 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80051ec:	2208      	movs	r2, #8
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4413      	add	r3, r2
 80051f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d014      	beq.n	8005228 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f023 0307 	bic.w	r3, r3, #7
 8005204:	3308      	adds	r3, #8
 8005206:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <pvPortMalloc+0x6c>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	617b      	str	r3, [r7, #20]
}
 8005224:	bf00      	nop
 8005226:	e7fe      	b.n	8005226 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d069      	beq.n	8005302 <pvPortMalloc+0x146>
 800522e:	4b42      	ldr	r3, [pc, #264]	; (8005338 <pvPortMalloc+0x17c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	429a      	cmp	r2, r3
 8005236:	d864      	bhi.n	8005302 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005238:	4b40      	ldr	r3, [pc, #256]	; (800533c <pvPortMalloc+0x180>)
 800523a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800523c:	4b3f      	ldr	r3, [pc, #252]	; (800533c <pvPortMalloc+0x180>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005242:	e004      	b.n	800524e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	429a      	cmp	r2, r3
 8005256:	d903      	bls.n	8005260 <pvPortMalloc+0xa4>
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1f1      	bne.n	8005244 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005260:	4b33      	ldr	r3, [pc, #204]	; (8005330 <pvPortMalloc+0x174>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005266:	429a      	cmp	r2, r3
 8005268:	d04b      	beq.n	8005302 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2208      	movs	r2, #8
 8005270:	4413      	add	r3, r2
 8005272:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	1ad2      	subs	r2, r2, r3
 8005284:	2308      	movs	r3, #8
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	429a      	cmp	r2, r3
 800528a:	d91f      	bls.n	80052cc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800528c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4413      	add	r3, r2
 8005292:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <pvPortMalloc+0xf8>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	613b      	str	r3, [r7, #16]
}
 80052b0:	bf00      	nop
 80052b2:	e7fe      	b.n	80052b2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	1ad2      	subs	r2, r2, r3
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052c6:	69b8      	ldr	r0, [r7, #24]
 80052c8:	f000 f8f8 	bl	80054bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052cc:	4b1a      	ldr	r3, [pc, #104]	; (8005338 <pvPortMalloc+0x17c>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	4a18      	ldr	r2, [pc, #96]	; (8005338 <pvPortMalloc+0x17c>)
 80052d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052da:	4b17      	ldr	r3, [pc, #92]	; (8005338 <pvPortMalloc+0x17c>)
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4b18      	ldr	r3, [pc, #96]	; (8005340 <pvPortMalloc+0x184>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d203      	bcs.n	80052ee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052e6:	4b14      	ldr	r3, [pc, #80]	; (8005338 <pvPortMalloc+0x17c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a15      	ldr	r2, [pc, #84]	; (8005340 <pvPortMalloc+0x184>)
 80052ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	4b10      	ldr	r3, [pc, #64]	; (8005334 <pvPortMalloc+0x178>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	431a      	orrs	r2, r3
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005302:	f7fe fd9f 	bl	8003e44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	f003 0307 	and.w	r3, r3, #7
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <pvPortMalloc+0x16a>
	__asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	60fb      	str	r3, [r7, #12]
}
 8005322:	bf00      	nop
 8005324:	e7fe      	b.n	8005324 <pvPortMalloc+0x168>
	return pvReturn;
 8005326:	69fb      	ldr	r3, [r7, #28]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3728      	adds	r7, #40	; 0x28
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	20001e7c 	.word	0x20001e7c
 8005334:	20001e88 	.word	0x20001e88
 8005338:	20001e80 	.word	0x20001e80
 800533c:	20001e74 	.word	0x20001e74
 8005340:	20001e84 	.word	0x20001e84

08005344 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d048      	beq.n	80053e8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005356:	2308      	movs	r3, #8
 8005358:	425b      	negs	r3, r3
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4413      	add	r3, r2
 800535e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	4b21      	ldr	r3, [pc, #132]	; (80053f0 <vPortFree+0xac>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4013      	ands	r3, r2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10a      	bne.n	8005388 <vPortFree+0x44>
	__asm volatile
 8005372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	60fb      	str	r3, [r7, #12]
}
 8005384:	bf00      	nop
 8005386:	e7fe      	b.n	8005386 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <vPortFree+0x62>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	60bb      	str	r3, [r7, #8]
}
 80053a2:	bf00      	nop
 80053a4:	e7fe      	b.n	80053a4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	4b11      	ldr	r3, [pc, #68]	; (80053f0 <vPortFree+0xac>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4013      	ands	r3, r2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d019      	beq.n	80053e8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d115      	bne.n	80053e8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <vPortFree+0xac>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	43db      	mvns	r3, r3
 80053c6:	401a      	ands	r2, r3
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053cc:	f7fe fd2c 	bl	8003e28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	4b07      	ldr	r3, [pc, #28]	; (80053f4 <vPortFree+0xb0>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4413      	add	r3, r2
 80053da:	4a06      	ldr	r2, [pc, #24]	; (80053f4 <vPortFree+0xb0>)
 80053dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053de:	6938      	ldr	r0, [r7, #16]
 80053e0:	f000 f86c 	bl	80054bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80053e4:	f7fe fd2e 	bl	8003e44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053e8:	bf00      	nop
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	20001e88 	.word	0x20001e88
 80053f4:	20001e80 	.word	0x20001e80

080053f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005402:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005404:	4b27      	ldr	r3, [pc, #156]	; (80054a4 <prvHeapInit+0xac>)
 8005406:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00c      	beq.n	800542c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3307      	adds	r3, #7
 8005416:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0307 	bic.w	r3, r3, #7
 800541e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	4a1f      	ldr	r2, [pc, #124]	; (80054a4 <prvHeapInit+0xac>)
 8005428:	4413      	add	r3, r2
 800542a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005430:	4a1d      	ldr	r2, [pc, #116]	; (80054a8 <prvHeapInit+0xb0>)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005436:	4b1c      	ldr	r3, [pc, #112]	; (80054a8 <prvHeapInit+0xb0>)
 8005438:	2200      	movs	r2, #0
 800543a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	4413      	add	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005444:	2208      	movs	r2, #8
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	1a9b      	subs	r3, r3, r2
 800544a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 0307 	bic.w	r3, r3, #7
 8005452:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4a15      	ldr	r2, [pc, #84]	; (80054ac <prvHeapInit+0xb4>)
 8005458:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800545a:	4b14      	ldr	r3, [pc, #80]	; (80054ac <prvHeapInit+0xb4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2200      	movs	r2, #0
 8005460:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005462:	4b12      	ldr	r3, [pc, #72]	; (80054ac <prvHeapInit+0xb4>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2200      	movs	r2, #0
 8005468:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	1ad2      	subs	r2, r2, r3
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005478:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <prvHeapInit+0xb4>)
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	4a0a      	ldr	r2, [pc, #40]	; (80054b0 <prvHeapInit+0xb8>)
 8005486:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	4a09      	ldr	r2, [pc, #36]	; (80054b4 <prvHeapInit+0xbc>)
 800548e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005490:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <prvHeapInit+0xc0>)
 8005492:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005496:	601a      	str	r2, [r3, #0]
}
 8005498:	bf00      	nop
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	20000e74 	.word	0x20000e74
 80054a8:	20001e74 	.word	0x20001e74
 80054ac:	20001e7c 	.word	0x20001e7c
 80054b0:	20001e84 	.word	0x20001e84
 80054b4:	20001e80 	.word	0x20001e80
 80054b8:	20001e88 	.word	0x20001e88

080054bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054c4:	4b27      	ldr	r3, [pc, #156]	; (8005564 <prvInsertBlockIntoFreeList+0xa8>)
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	e002      	b.n	80054d0 <prvInsertBlockIntoFreeList+0x14>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d8f7      	bhi.n	80054ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	4413      	add	r3, r2
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d108      	bne.n	80054fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	441a      	add	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	441a      	add	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d118      	bne.n	8005544 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	4b14      	ldr	r3, [pc, #80]	; (8005568 <prvInsertBlockIntoFreeList+0xac>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	429a      	cmp	r2, r3
 800551c:	d00d      	beq.n	800553a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	441a      	add	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	e008      	b.n	800554c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800553a:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <prvInsertBlockIntoFreeList+0xac>)
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	e003      	b.n	800554c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	429a      	cmp	r2, r3
 8005552:	d002      	beq.n	800555a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800555a:	bf00      	nop
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr
 8005564:	20001e74 	.word	0x20001e74
 8005568:	20001e7c 	.word	0x20001e7c

0800556c <__libc_init_array>:
 800556c:	b570      	push	{r4, r5, r6, lr}
 800556e:	2600      	movs	r6, #0
 8005570:	4d0c      	ldr	r5, [pc, #48]	; (80055a4 <__libc_init_array+0x38>)
 8005572:	4c0d      	ldr	r4, [pc, #52]	; (80055a8 <__libc_init_array+0x3c>)
 8005574:	1b64      	subs	r4, r4, r5
 8005576:	10a4      	asrs	r4, r4, #2
 8005578:	42a6      	cmp	r6, r4
 800557a:	d109      	bne.n	8005590 <__libc_init_array+0x24>
 800557c:	f000 f830 	bl	80055e0 <_init>
 8005580:	2600      	movs	r6, #0
 8005582:	4d0a      	ldr	r5, [pc, #40]	; (80055ac <__libc_init_array+0x40>)
 8005584:	4c0a      	ldr	r4, [pc, #40]	; (80055b0 <__libc_init_array+0x44>)
 8005586:	1b64      	subs	r4, r4, r5
 8005588:	10a4      	asrs	r4, r4, #2
 800558a:	42a6      	cmp	r6, r4
 800558c:	d105      	bne.n	800559a <__libc_init_array+0x2e>
 800558e:	bd70      	pop	{r4, r5, r6, pc}
 8005590:	f855 3b04 	ldr.w	r3, [r5], #4
 8005594:	4798      	blx	r3
 8005596:	3601      	adds	r6, #1
 8005598:	e7ee      	b.n	8005578 <__libc_init_array+0xc>
 800559a:	f855 3b04 	ldr.w	r3, [r5], #4
 800559e:	4798      	blx	r3
 80055a0:	3601      	adds	r6, #1
 80055a2:	e7f2      	b.n	800558a <__libc_init_array+0x1e>
 80055a4:	080057ac 	.word	0x080057ac
 80055a8:	080057ac 	.word	0x080057ac
 80055ac:	080057ac 	.word	0x080057ac
 80055b0:	080057b0 	.word	0x080057b0

080055b4 <memcpy>:
 80055b4:	440a      	add	r2, r1
 80055b6:	4291      	cmp	r1, r2
 80055b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80055bc:	d100      	bne.n	80055c0 <memcpy+0xc>
 80055be:	4770      	bx	lr
 80055c0:	b510      	push	{r4, lr}
 80055c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055c6:	4291      	cmp	r1, r2
 80055c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055cc:	d1f9      	bne.n	80055c2 <memcpy+0xe>
 80055ce:	bd10      	pop	{r4, pc}

080055d0 <memset>:
 80055d0:	4603      	mov	r3, r0
 80055d2:	4402      	add	r2, r0
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d100      	bne.n	80055da <memset+0xa>
 80055d8:	4770      	bx	lr
 80055da:	f803 1b01 	strb.w	r1, [r3], #1
 80055de:	e7f9      	b.n	80055d4 <memset+0x4>

080055e0 <_init>:
 80055e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e2:	bf00      	nop
 80055e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e6:	bc08      	pop	{r3}
 80055e8:	469e      	mov	lr, r3
 80055ea:	4770      	bx	lr

080055ec <_fini>:
 80055ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ee:	bf00      	nop
 80055f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f2:	bc08      	pop	{r3}
 80055f4:	469e      	mov	lr, r3
 80055f6:	4770      	bx	lr
