
FreeRTOS_PWM_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bd8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004ce8  08004ce8  00014ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d58  08004d58  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004d58  08004d58  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d58  08004d58  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d58  08004d58  00014d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d5c  08004d5c  00014d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019fc  20000010  08004d70  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a0c  08004d70  00021a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125f8  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b1b  00000000  00000000  00032631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  00035150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00036208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000025c4  00000000  00000000  00037198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001162c  00000000  00000000  0003975c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090a6a  00000000  00000000  0004ad88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db7f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004598  00000000  00000000  000db844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004cd0 	.word	0x08004cd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004cd0 	.word	0x08004cd0

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fa82 	bl	800065c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f81e 	bl	8000198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f8d8 	bl	8000310 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000160:	f000 f860 	bl	8000224 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000164:	2100      	movs	r1, #0
 8000166:	4808      	ldr	r0, [pc, #32]	; (8000188 <main+0x38>)
 8000168:	f001 fa3e 	bl	80015e8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800016c:	f002 f8a0 	bl	80022b0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PWM_Fade */
  PWM_FadeHandle = osThreadNew(Start_PWM_Fade, NULL, &PWM_Fade_attributes);
 8000170:	4a06      	ldr	r2, [pc, #24]	; (800018c <main+0x3c>)
 8000172:	2100      	movs	r1, #0
 8000174:	4806      	ldr	r0, [pc, #24]	; (8000190 <main+0x40>)
 8000176:	f002 f901 	bl	800237c <osThreadNew>
 800017a:	4603      	mov	r3, r0
 800017c:	4a05      	ldr	r2, [pc, #20]	; (8000194 <main+0x44>)
 800017e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000180:	f002 f8c8 	bl	8002314 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000184:	e7fe      	b.n	8000184 <main+0x34>
 8000186:	bf00      	nop
 8000188:	2000002c 	.word	0x2000002c
 800018c:	08004d1c 	.word	0x08004d1c
 8000190:	08000355 	.word	0x08000355
 8000194:	20000074 	.word	0x20000074

08000198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b090      	sub	sp, #64	; 0x40
 800019c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019e:	f107 0318 	add.w	r3, r7, #24
 80001a2:	2228      	movs	r2, #40	; 0x28
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f004 fd8a 	bl	8004cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	605a      	str	r2, [r3, #4]
 80001b4:	609a      	str	r2, [r3, #8]
 80001b6:	60da      	str	r2, [r3, #12]
 80001b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ba:	2301      	movs	r3, #1
 80001bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c4:	2300      	movs	r3, #0
 80001c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c8:	2301      	movs	r3, #1
 80001ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001cc:	2302      	movs	r3, #2
 80001ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001dc:	f107 0318 	add.w	r3, r7, #24
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 fcd1 	bl	8000b88 <HAL_RCC_OscConfig>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001ec:	f000 f8ee 	bl	80003cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f0:	230f      	movs	r3, #15
 80001f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f4:	2302      	movs	r3, #2
 80001f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000200:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	2102      	movs	r1, #2
 800020a:	4618      	mov	r0, r3
 800020c:	f000 ff3e 	bl	800108c <HAL_RCC_ClockConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000216:	f000 f8d9 	bl	80003cc <Error_Handler>
  }
}
 800021a:	bf00      	nop
 800021c:	3740      	adds	r7, #64	; 0x40
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
	...

08000224 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b08e      	sub	sp, #56	; 0x38
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800022a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000238:	f107 0320 	add.w	r3, r7, #32
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
 800024a:	609a      	str	r2, [r3, #8]
 800024c:	60da      	str	r2, [r3, #12]
 800024e:	611a      	str	r2, [r3, #16]
 8000250:	615a      	str	r2, [r3, #20]
 8000252:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000254:	4b2d      	ldr	r3, [pc, #180]	; (800030c <MX_TIM2_Init+0xe8>)
 8000256:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800025a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800025c:	4b2b      	ldr	r3, [pc, #172]	; (800030c <MX_TIM2_Init+0xe8>)
 800025e:	2200      	movs	r2, #0
 8000260:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000262:	4b2a      	ldr	r3, [pc, #168]	; (800030c <MX_TIM2_Init+0xe8>)
 8000264:	2200      	movs	r2, #0
 8000266:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000268:	4b28      	ldr	r3, [pc, #160]	; (800030c <MX_TIM2_Init+0xe8>)
 800026a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800026e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000270:	4b26      	ldr	r3, [pc, #152]	; (800030c <MX_TIM2_Init+0xe8>)
 8000272:	2200      	movs	r2, #0
 8000274:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000276:	4b25      	ldr	r3, [pc, #148]	; (800030c <MX_TIM2_Init+0xe8>)
 8000278:	2200      	movs	r2, #0
 800027a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800027c:	4823      	ldr	r0, [pc, #140]	; (800030c <MX_TIM2_Init+0xe8>)
 800027e:	f001 f8b9 	bl	80013f4 <HAL_TIM_Base_Init>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000288:	f000 f8a0 	bl	80003cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800028c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000290:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000296:	4619      	mov	r1, r3
 8000298:	481c      	ldr	r0, [pc, #112]	; (800030c <MX_TIM2_Init+0xe8>)
 800029a:	f001 fc0d 	bl	8001ab8 <HAL_TIM_ConfigClockSource>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80002a4:	f000 f892 	bl	80003cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80002a8:	4818      	ldr	r0, [pc, #96]	; (800030c <MX_TIM2_Init+0xe8>)
 80002aa:	f001 f945 	bl	8001538 <HAL_TIM_PWM_Init>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80002b4:	f000 f88a 	bl	80003cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002b8:	2300      	movs	r3, #0
 80002ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002bc:	2300      	movs	r3, #0
 80002be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002c0:	f107 0320 	add.w	r3, r7, #32
 80002c4:	4619      	mov	r1, r3
 80002c6:	4811      	ldr	r0, [pc, #68]	; (800030c <MX_TIM2_Init+0xe8>)
 80002c8:	f001 ff82 	bl	80021d0 <HAL_TIMEx_MasterConfigSynchronization>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80002d2:	f000 f87b 	bl	80003cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002d6:	2360      	movs	r3, #96	; 0x60
 80002d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80002da:	2300      	movs	r3, #0
 80002dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002de:	2300      	movs	r3, #0
 80002e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80002e2:	2300      	movs	r3, #0
 80002e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2200      	movs	r2, #0
 80002ea:	4619      	mov	r1, r3
 80002ec:	4807      	ldr	r0, [pc, #28]	; (800030c <MX_TIM2_Init+0xe8>)
 80002ee:	f001 fb25 	bl	800193c <HAL_TIM_PWM_ConfigChannel>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80002f8:	f000 f868 	bl	80003cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <MX_TIM2_Init+0xe8>)
 80002fe:	f000 f8bf 	bl	8000480 <HAL_TIM_MspPostInit>

}
 8000302:	bf00      	nop
 8000304:	3738      	adds	r7, #56	; 0x38
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	2000002c 	.word	0x2000002c

08000310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000316:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <MX_GPIO_Init+0x40>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	4a0d      	ldr	r2, [pc, #52]	; (8000350 <MX_GPIO_Init+0x40>)
 800031c:	f043 0320 	orr.w	r3, r3, #32
 8000320:	6193      	str	r3, [r2, #24]
 8000322:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <MX_GPIO_Init+0x40>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	f003 0320 	and.w	r3, r3, #32
 800032a:	607b      	str	r3, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032e:	4b08      	ldr	r3, [pc, #32]	; (8000350 <MX_GPIO_Init+0x40>)
 8000330:	699b      	ldr	r3, [r3, #24]
 8000332:	4a07      	ldr	r2, [pc, #28]	; (8000350 <MX_GPIO_Init+0x40>)
 8000334:	f043 0304 	orr.w	r3, r3, #4
 8000338:	6193      	str	r3, [r2, #24]
 800033a:	4b05      	ldr	r3, [pc, #20]	; (8000350 <MX_GPIO_Init+0x40>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	f003 0304 	and.w	r3, r3, #4
 8000342:	603b      	str	r3, [r7, #0]
 8000344:	683b      	ldr	r3, [r7, #0]

}
 8000346:	bf00      	nop
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr
 8000350:	40021000 	.word	0x40021000

08000354 <Start_PWM_Fade>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_PWM_Fade */
void Start_PWM_Fade(void *argument)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	  	for(x=65535; x>0; x=x-1)
	  	{
	  	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, x);
	  	  osDelay(1);
	  	}*/
	  	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 65535);
 800035c:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <Start_PWM_Fade+0x50>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000364:	635a      	str	r2, [r3, #52]	; 0x34
	  	  osDelay(50);
 8000366:	2032      	movs	r0, #50	; 0x32
 8000368:	f002 f8b2 	bl	80024d0 <osDelay>
	  	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 50000);
 800036c:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <Start_PWM_Fade+0x50>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000374:	635a      	str	r2, [r3, #52]	; 0x34
	  	  osDelay(50);
 8000376:	2032      	movs	r0, #50	; 0x32
 8000378:	f002 f8aa 	bl	80024d0 <osDelay>
	  	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 25000);
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <Start_PWM_Fade+0x50>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000384:	635a      	str	r2, [r3, #52]	; 0x34
	  	  osDelay(50);
 8000386:	2032      	movs	r0, #50	; 0x32
 8000388:	f002 f8a2 	bl	80024d0 <osDelay>
	  	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <Start_PWM_Fade+0x50>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2200      	movs	r2, #0
 8000392:	635a      	str	r2, [r3, #52]	; 0x34
	  	  osDelay(50);
 8000394:	2032      	movs	r0, #50	; 0x32
 8000396:	f002 f89b 	bl	80024d0 <osDelay>


	      osDelay(1);
 800039a:	2001      	movs	r0, #1
 800039c:	f002 f898 	bl	80024d0 <osDelay>
	  	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 65535);
 80003a0:	e7dc      	b.n	800035c <Start_PWM_Fade+0x8>
 80003a2:	bf00      	nop
 80003a4:	2000002c 	.word	0x2000002c

080003a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a04      	ldr	r2, [pc, #16]	; (80003c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d101      	bne.n	80003be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003ba:	f000 f965 	bl	8000688 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40012c00 	.word	0x40012c00

080003cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d0:	b672      	cpsid	i
}
 80003d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d4:	e7fe      	b.n	80003d4 <Error_Handler+0x8>
	...

080003d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003de:	4b18      	ldr	r3, [pc, #96]	; (8000440 <HAL_MspInit+0x68>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	4a17      	ldr	r2, [pc, #92]	; (8000440 <HAL_MspInit+0x68>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6193      	str	r3, [r2, #24]
 80003ea:	4b15      	ldr	r3, [pc, #84]	; (8000440 <HAL_MspInit+0x68>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f6:	4b12      	ldr	r3, [pc, #72]	; (8000440 <HAL_MspInit+0x68>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	4a11      	ldr	r2, [pc, #68]	; (8000440 <HAL_MspInit+0x68>)
 80003fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000400:	61d3      	str	r3, [r2, #28]
 8000402:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <HAL_MspInit+0x68>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	210f      	movs	r1, #15
 8000412:	f06f 0001 	mvn.w	r0, #1
 8000416:	f000 fa08 	bl	800082a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800041a:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <HAL_MspInit+0x6c>)
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	4a04      	ldr	r2, [pc, #16]	; (8000444 <HAL_MspInit+0x6c>)
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000
 8000444:	40010000 	.word	0x40010000

08000448 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000458:	d10b      	bne.n	8000472 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <HAL_TIM_Base_MspInit+0x34>)
 800045c:	69db      	ldr	r3, [r3, #28]
 800045e:	4a07      	ldr	r2, [pc, #28]	; (800047c <HAL_TIM_Base_MspInit+0x34>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	61d3      	str	r3, [r2, #28]
 8000466:	4b05      	ldr	r3, [pc, #20]	; (800047c <HAL_TIM_Base_MspInit+0x34>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000472:	bf00      	nop
 8000474:	3714      	adds	r7, #20
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr
 800047c:	40021000 	.word	0x40021000

08000480 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b088      	sub	sp, #32
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800049e:	d117      	bne.n	80004d0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a0:	4b0d      	ldr	r3, [pc, #52]	; (80004d8 <HAL_TIM_MspPostInit+0x58>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a0c      	ldr	r2, [pc, #48]	; (80004d8 <HAL_TIM_MspPostInit+0x58>)
 80004a6:	f043 0304 	orr.w	r3, r3, #4
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <HAL_TIM_MspPostInit+0x58>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0304 	and.w	r3, r3, #4
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004b8:	2301      	movs	r3, #1
 80004ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004bc:	2302      	movs	r3, #2
 80004be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c0:	2302      	movs	r3, #2
 80004c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c4:	f107 0310 	add.w	r3, r7, #16
 80004c8:	4619      	mov	r1, r3
 80004ca:	4804      	ldr	r0, [pc, #16]	; (80004dc <HAL_TIM_MspPostInit+0x5c>)
 80004cc:	f000 f9d8 	bl	8000880 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80004d0:	bf00      	nop
 80004d2:	3720      	adds	r7, #32
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40010800 	.word	0x40010800

080004e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08c      	sub	sp, #48	; 0x30
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80004e8:	2300      	movs	r3, #0
 80004ea:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80004ec:	2300      	movs	r3, #0
 80004ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80004f0:	2300      	movs	r3, #0
 80004f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80004f6:	4b2e      	ldr	r3, [pc, #184]	; (80005b0 <HAL_InitTick+0xd0>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	4a2d      	ldr	r2, [pc, #180]	; (80005b0 <HAL_InitTick+0xd0>)
 80004fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000500:	6193      	str	r3, [r2, #24]
 8000502:	4b2b      	ldr	r3, [pc, #172]	; (80005b0 <HAL_InitTick+0xd0>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800050e:	f107 020c 	add.w	r2, r7, #12
 8000512:	f107 0310 	add.w	r3, r7, #16
 8000516:	4611      	mov	r1, r2
 8000518:	4618      	mov	r0, r3
 800051a:	f000 ff1d 	bl	8001358 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800051e:	f000 ff07 	bl	8001330 <HAL_RCC_GetPCLK2Freq>
 8000522:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000526:	4a23      	ldr	r2, [pc, #140]	; (80005b4 <HAL_InitTick+0xd4>)
 8000528:	fba2 2303 	umull	r2, r3, r2, r3
 800052c:	0c9b      	lsrs	r3, r3, #18
 800052e:	3b01      	subs	r3, #1
 8000530:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000532:	4b21      	ldr	r3, [pc, #132]	; (80005b8 <HAL_InitTick+0xd8>)
 8000534:	4a21      	ldr	r2, [pc, #132]	; (80005bc <HAL_InitTick+0xdc>)
 8000536:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000538:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <HAL_InitTick+0xd8>)
 800053a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800053e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000540:	4a1d      	ldr	r2, [pc, #116]	; (80005b8 <HAL_InitTick+0xd8>)
 8000542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000544:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000546:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <HAL_InitTick+0xd8>)
 8000548:	2200      	movs	r2, #0
 800054a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800054c:	4b1a      	ldr	r3, [pc, #104]	; (80005b8 <HAL_InitTick+0xd8>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000552:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <HAL_InitTick+0xd8>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000558:	4817      	ldr	r0, [pc, #92]	; (80005b8 <HAL_InitTick+0xd8>)
 800055a:	f000 ff4b 	bl	80013f4 <HAL_TIM_Base_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000564:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000568:	2b00      	cmp	r3, #0
 800056a:	d11b      	bne.n	80005a4 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800056c:	4812      	ldr	r0, [pc, #72]	; (80005b8 <HAL_InitTick+0xd8>)
 800056e:	f000 ff91 	bl	8001494 <HAL_TIM_Base_Start_IT>
 8000572:	4603      	mov	r3, r0
 8000574:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000578:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800057c:	2b00      	cmp	r3, #0
 800057e:	d111      	bne.n	80005a4 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000580:	2019      	movs	r0, #25
 8000582:	f000 f96e 	bl	8000862 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	d808      	bhi.n	800059e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800058c:	2200      	movs	r2, #0
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	2019      	movs	r0, #25
 8000592:	f000 f94a 	bl	800082a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000596:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_InitTick+0xe0>)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	e002      	b.n	80005a4 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800059e:	2301      	movs	r3, #1
 80005a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80005a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3730      	adds	r7, #48	; 0x30
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000
 80005b4:	431bde83 	.word	0x431bde83
 80005b8:	20000078 	.word	0x20000078
 80005bc:	40012c00 	.word	0x40012c00
 80005c0:	20000004 	.word	0x20000004

080005c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <NMI_Handler+0x4>

080005ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ce:	e7fe      	b.n	80005ce <HardFault_Handler+0x4>

080005d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <MemManage_Handler+0x4>

080005d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005da:	e7fe      	b.n	80005da <BusFault_Handler+0x4>

080005dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <UsageFault_Handler+0x4>

080005e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
	...

080005f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005f4:	4802      	ldr	r0, [pc, #8]	; (8000600 <TIM1_UP_IRQHandler+0x10>)
 80005f6:	f001 f899 	bl	800172c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000078 	.word	0x20000078

08000604 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000612:	490d      	ldr	r1, [pc, #52]	; (8000648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000614:	4a0d      	ldr	r2, [pc, #52]	; (800064c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000618:	e002      	b.n	8000620 <LoopCopyDataInit>

0800061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061e:	3304      	adds	r3, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000624:	d3f9      	bcc.n	800061a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000626:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000628:	4c0a      	ldr	r4, [pc, #40]	; (8000654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800062c:	e001      	b.n	8000632 <LoopFillZerobss>

0800062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000630:	3204      	adds	r2, #4

08000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000634:	d3fb      	bcc.n	800062e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000636:	f7ff ffe5 	bl	8000604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800063a:	f004 fb0f 	bl	8004c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063e:	f7ff fd87 	bl	8000150 <main>
  bx lr
 8000642:	4770      	bx	lr
  ldr r0, =_sdata
 8000644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000648:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800064c:	08004d60 	.word	0x08004d60
  ldr r2, =_sbss
 8000650:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000654:	20001a0c 	.word	0x20001a0c

08000658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000658:	e7fe      	b.n	8000658 <ADC1_2_IRQHandler>
	...

0800065c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <HAL_Init+0x28>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <HAL_Init+0x28>)
 8000666:	f043 0310 	orr.w	r3, r3, #16
 800066a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800066c:	2003      	movs	r0, #3
 800066e:	f000 f8d1 	bl	8000814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000672:	200f      	movs	r0, #15
 8000674:	f7ff ff34 	bl	80004e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000678:	f7ff feae 	bl	80003d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40022000 	.word	0x40022000

08000688 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <HAL_IncTick+0x1c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	461a      	mov	r2, r3
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <HAL_IncTick+0x20>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4413      	add	r3, r2
 8000698:	4a03      	ldr	r2, [pc, #12]	; (80006a8 <HAL_IncTick+0x20>)
 800069a:	6013      	str	r3, [r2, #0]
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	20000008 	.word	0x20000008
 80006a8:	200000c0 	.word	0x200000c0

080006ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return uwTick;
 80006b0:	4b02      	ldr	r3, [pc, #8]	; (80006bc <HAL_GetTick+0x10>)
 80006b2:	681b      	ldr	r3, [r3, #0]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	200000c0 	.word	0x200000c0

080006c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <__NVIC_SetPriorityGrouping+0x44>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006dc:	4013      	ands	r3, r2
 80006de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006f2:	4a04      	ldr	r2, [pc, #16]	; (8000704 <__NVIC_SetPriorityGrouping+0x44>)
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	60d3      	str	r3, [r2, #12]
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <__NVIC_GetPriorityGrouping+0x18>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	0a1b      	lsrs	r3, r3, #8
 8000712:	f003 0307 	and.w	r3, r3, #7
}
 8000716:	4618      	mov	r0, r3
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	2b00      	cmp	r3, #0
 8000734:	db0b      	blt.n	800074e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f003 021f 	and.w	r2, r3, #31
 800073c:	4906      	ldr	r1, [pc, #24]	; (8000758 <__NVIC_EnableIRQ+0x34>)
 800073e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000742:	095b      	lsrs	r3, r3, #5
 8000744:	2001      	movs	r0, #1
 8000746:	fa00 f202 	lsl.w	r2, r0, r2
 800074a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	e000e100 	.word	0xe000e100

0800075c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	6039      	str	r1, [r7, #0]
 8000766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076c:	2b00      	cmp	r3, #0
 800076e:	db0a      	blt.n	8000786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	b2da      	uxtb	r2, r3
 8000774:	490c      	ldr	r1, [pc, #48]	; (80007a8 <__NVIC_SetPriority+0x4c>)
 8000776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077a:	0112      	lsls	r2, r2, #4
 800077c:	b2d2      	uxtb	r2, r2
 800077e:	440b      	add	r3, r1
 8000780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000784:	e00a      	b.n	800079c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4908      	ldr	r1, [pc, #32]	; (80007ac <__NVIC_SetPriority+0x50>)
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	f003 030f 	and.w	r3, r3, #15
 8000792:	3b04      	subs	r3, #4
 8000794:	0112      	lsls	r2, r2, #4
 8000796:	b2d2      	uxtb	r2, r2
 8000798:	440b      	add	r3, r1
 800079a:	761a      	strb	r2, [r3, #24]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000e100 	.word	0xe000e100
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b089      	sub	sp, #36	; 0x24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f003 0307 	and.w	r3, r3, #7
 80007c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	f1c3 0307 	rsb	r3, r3, #7
 80007ca:	2b04      	cmp	r3, #4
 80007cc:	bf28      	it	cs
 80007ce:	2304      	movcs	r3, #4
 80007d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	3304      	adds	r3, #4
 80007d6:	2b06      	cmp	r3, #6
 80007d8:	d902      	bls.n	80007e0 <NVIC_EncodePriority+0x30>
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	3b03      	subs	r3, #3
 80007de:	e000      	b.n	80007e2 <NVIC_EncodePriority+0x32>
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	f04f 32ff 	mov.w	r2, #4294967295
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	fa02 f303 	lsl.w	r3, r2, r3
 80007ee:	43da      	mvns	r2, r3
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	401a      	ands	r2, r3
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f8:	f04f 31ff 	mov.w	r1, #4294967295
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000802:	43d9      	mvns	r1, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	4313      	orrs	r3, r2
         );
}
 800080a:	4618      	mov	r0, r3
 800080c:	3724      	adds	r7, #36	; 0x24
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ff4f 	bl	80006c0 <__NVIC_SetPriorityGrouping>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082a:	b580      	push	{r7, lr}
 800082c:	b086      	sub	sp, #24
 800082e:	af00      	add	r7, sp, #0
 8000830:	4603      	mov	r3, r0
 8000832:	60b9      	str	r1, [r7, #8]
 8000834:	607a      	str	r2, [r7, #4]
 8000836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800083c:	f7ff ff64 	bl	8000708 <__NVIC_GetPriorityGrouping>
 8000840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	68b9      	ldr	r1, [r7, #8]
 8000846:	6978      	ldr	r0, [r7, #20]
 8000848:	f7ff ffb2 	bl	80007b0 <NVIC_EncodePriority>
 800084c:	4602      	mov	r2, r0
 800084e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff81 	bl	800075c <__NVIC_SetPriority>
}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff57 	bl	8000724 <__NVIC_EnableIRQ>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000880:	b480      	push	{r7}
 8000882:	b08b      	sub	sp, #44	; 0x2c
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000892:	e169      	b.n	8000b68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000894:	2201      	movs	r2, #1
 8000896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	69fa      	ldr	r2, [r7, #28]
 80008a4:	4013      	ands	r3, r2
 80008a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	f040 8158 	bne.w	8000b62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	4a9a      	ldr	r2, [pc, #616]	; (8000b20 <HAL_GPIO_Init+0x2a0>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d05e      	beq.n	800097a <HAL_GPIO_Init+0xfa>
 80008bc:	4a98      	ldr	r2, [pc, #608]	; (8000b20 <HAL_GPIO_Init+0x2a0>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d875      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008c2:	4a98      	ldr	r2, [pc, #608]	; (8000b24 <HAL_GPIO_Init+0x2a4>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d058      	beq.n	800097a <HAL_GPIO_Init+0xfa>
 80008c8:	4a96      	ldr	r2, [pc, #600]	; (8000b24 <HAL_GPIO_Init+0x2a4>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d86f      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008ce:	4a96      	ldr	r2, [pc, #600]	; (8000b28 <HAL_GPIO_Init+0x2a8>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d052      	beq.n	800097a <HAL_GPIO_Init+0xfa>
 80008d4:	4a94      	ldr	r2, [pc, #592]	; (8000b28 <HAL_GPIO_Init+0x2a8>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d869      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008da:	4a94      	ldr	r2, [pc, #592]	; (8000b2c <HAL_GPIO_Init+0x2ac>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d04c      	beq.n	800097a <HAL_GPIO_Init+0xfa>
 80008e0:	4a92      	ldr	r2, [pc, #584]	; (8000b2c <HAL_GPIO_Init+0x2ac>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d863      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008e6:	4a92      	ldr	r2, [pc, #584]	; (8000b30 <HAL_GPIO_Init+0x2b0>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d046      	beq.n	800097a <HAL_GPIO_Init+0xfa>
 80008ec:	4a90      	ldr	r2, [pc, #576]	; (8000b30 <HAL_GPIO_Init+0x2b0>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d85d      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008f2:	2b12      	cmp	r3, #18
 80008f4:	d82a      	bhi.n	800094c <HAL_GPIO_Init+0xcc>
 80008f6:	2b12      	cmp	r3, #18
 80008f8:	d859      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008fa:	a201      	add	r2, pc, #4	; (adr r2, 8000900 <HAL_GPIO_Init+0x80>)
 80008fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000900:	0800097b 	.word	0x0800097b
 8000904:	08000955 	.word	0x08000955
 8000908:	08000967 	.word	0x08000967
 800090c:	080009a9 	.word	0x080009a9
 8000910:	080009af 	.word	0x080009af
 8000914:	080009af 	.word	0x080009af
 8000918:	080009af 	.word	0x080009af
 800091c:	080009af 	.word	0x080009af
 8000920:	080009af 	.word	0x080009af
 8000924:	080009af 	.word	0x080009af
 8000928:	080009af 	.word	0x080009af
 800092c:	080009af 	.word	0x080009af
 8000930:	080009af 	.word	0x080009af
 8000934:	080009af 	.word	0x080009af
 8000938:	080009af 	.word	0x080009af
 800093c:	080009af 	.word	0x080009af
 8000940:	080009af 	.word	0x080009af
 8000944:	0800095d 	.word	0x0800095d
 8000948:	08000971 	.word	0x08000971
 800094c:	4a79      	ldr	r2, [pc, #484]	; (8000b34 <HAL_GPIO_Init+0x2b4>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d013      	beq.n	800097a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000952:	e02c      	b.n	80009ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	623b      	str	r3, [r7, #32]
          break;
 800095a:	e029      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	3304      	adds	r3, #4
 8000962:	623b      	str	r3, [r7, #32]
          break;
 8000964:	e024      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	3308      	adds	r3, #8
 800096c:	623b      	str	r3, [r7, #32]
          break;
 800096e:	e01f      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	330c      	adds	r3, #12
 8000976:	623b      	str	r3, [r7, #32]
          break;
 8000978:	e01a      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d102      	bne.n	8000988 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000982:	2304      	movs	r3, #4
 8000984:	623b      	str	r3, [r7, #32]
          break;
 8000986:	e013      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d105      	bne.n	800099c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000990:	2308      	movs	r3, #8
 8000992:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	69fa      	ldr	r2, [r7, #28]
 8000998:	611a      	str	r2, [r3, #16]
          break;
 800099a:	e009      	b.n	80009b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800099c:	2308      	movs	r3, #8
 800099e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	69fa      	ldr	r2, [r7, #28]
 80009a4:	615a      	str	r2, [r3, #20]
          break;
 80009a6:	e003      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
          break;
 80009ac:	e000      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          break;
 80009ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	2bff      	cmp	r3, #255	; 0xff
 80009b4:	d801      	bhi.n	80009ba <HAL_GPIO_Init+0x13a>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	e001      	b.n	80009be <HAL_GPIO_Init+0x13e>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3304      	adds	r3, #4
 80009be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	2bff      	cmp	r3, #255	; 0xff
 80009c4:	d802      	bhi.n	80009cc <HAL_GPIO_Init+0x14c>
 80009c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	e002      	b.n	80009d2 <HAL_GPIO_Init+0x152>
 80009cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ce:	3b08      	subs	r3, #8
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	210f      	movs	r1, #15
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	fa01 f303 	lsl.w	r3, r1, r3
 80009e0:	43db      	mvns	r3, r3
 80009e2:	401a      	ands	r2, r3
 80009e4:	6a39      	ldr	r1, [r7, #32]
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ec:	431a      	orrs	r2, r3
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f000 80b1 	beq.w	8000b62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a00:	4b4d      	ldr	r3, [pc, #308]	; (8000b38 <HAL_GPIO_Init+0x2b8>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a4c      	ldr	r2, [pc, #304]	; (8000b38 <HAL_GPIO_Init+0x2b8>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b4a      	ldr	r3, [pc, #296]	; (8000b38 <HAL_GPIO_Init+0x2b8>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a18:	4a48      	ldr	r2, [pc, #288]	; (8000b3c <HAL_GPIO_Init+0x2bc>)
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1c:	089b      	lsrs	r3, r3, #2
 8000a1e:	3302      	adds	r3, #2
 8000a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	f003 0303 	and.w	r3, r3, #3
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	220f      	movs	r2, #15
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	43db      	mvns	r3, r3
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a40      	ldr	r2, [pc, #256]	; (8000b40 <HAL_GPIO_Init+0x2c0>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d013      	beq.n	8000a6c <HAL_GPIO_Init+0x1ec>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a3f      	ldr	r2, [pc, #252]	; (8000b44 <HAL_GPIO_Init+0x2c4>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d00d      	beq.n	8000a68 <HAL_GPIO_Init+0x1e8>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a3e      	ldr	r2, [pc, #248]	; (8000b48 <HAL_GPIO_Init+0x2c8>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d007      	beq.n	8000a64 <HAL_GPIO_Init+0x1e4>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a3d      	ldr	r2, [pc, #244]	; (8000b4c <HAL_GPIO_Init+0x2cc>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d101      	bne.n	8000a60 <HAL_GPIO_Init+0x1e0>
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	e006      	b.n	8000a6e <HAL_GPIO_Init+0x1ee>
 8000a60:	2304      	movs	r3, #4
 8000a62:	e004      	b.n	8000a6e <HAL_GPIO_Init+0x1ee>
 8000a64:	2302      	movs	r3, #2
 8000a66:	e002      	b.n	8000a6e <HAL_GPIO_Init+0x1ee>
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e000      	b.n	8000a6e <HAL_GPIO_Init+0x1ee>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a70:	f002 0203 	and.w	r2, r2, #3
 8000a74:	0092      	lsls	r2, r2, #2
 8000a76:	4093      	lsls	r3, r2
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a7e:	492f      	ldr	r1, [pc, #188]	; (8000b3c <HAL_GPIO_Init+0x2bc>)
 8000a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a82:	089b      	lsrs	r3, r3, #2
 8000a84:	3302      	adds	r3, #2
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d006      	beq.n	8000aa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a98:	4b2d      	ldr	r3, [pc, #180]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	492c      	ldr	r1, [pc, #176]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	600b      	str	r3, [r1, #0]
 8000aa4:	e006      	b.n	8000ab4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000aa6:	4b2a      	ldr	r3, [pc, #168]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	4928      	ldr	r1, [pc, #160]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d006      	beq.n	8000ace <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ac0:	4b23      	ldr	r3, [pc, #140]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000ac2:	685a      	ldr	r2, [r3, #4]
 8000ac4:	4922      	ldr	r1, [pc, #136]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	604b      	str	r3, [r1, #4]
 8000acc:	e006      	b.n	8000adc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	491e      	ldr	r1, [pc, #120]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000ad8:	4013      	ands	r3, r2
 8000ada:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d006      	beq.n	8000af6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000aea:	689a      	ldr	r2, [r3, #8]
 8000aec:	4918      	ldr	r1, [pc, #96]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	608b      	str	r3, [r1, #8]
 8000af4:	e006      	b.n	8000b04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000af8:	689a      	ldr	r2, [r3, #8]
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	43db      	mvns	r3, r3
 8000afe:	4914      	ldr	r1, [pc, #80]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000b00:	4013      	ands	r3, r2
 8000b02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d021      	beq.n	8000b54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000b12:	68da      	ldr	r2, [r3, #12]
 8000b14:	490e      	ldr	r1, [pc, #56]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	60cb      	str	r3, [r1, #12]
 8000b1c:	e021      	b.n	8000b62 <HAL_GPIO_Init+0x2e2>
 8000b1e:	bf00      	nop
 8000b20:	10320000 	.word	0x10320000
 8000b24:	10310000 	.word	0x10310000
 8000b28:	10220000 	.word	0x10220000
 8000b2c:	10210000 	.word	0x10210000
 8000b30:	10120000 	.word	0x10120000
 8000b34:	10110000 	.word	0x10110000
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010000 	.word	0x40010000
 8000b40:	40010800 	.word	0x40010800
 8000b44:	40010c00 	.word	0x40010c00
 8000b48:	40011000 	.word	0x40011000
 8000b4c:	40011400 	.word	0x40011400
 8000b50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <HAL_GPIO_Init+0x304>)
 8000b56:	68da      	ldr	r2, [r3, #12]
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	4909      	ldr	r1, [pc, #36]	; (8000b84 <HAL_GPIO_Init+0x304>)
 8000b5e:	4013      	ands	r3, r2
 8000b60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	3301      	adds	r3, #1
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f47f ae8e 	bne.w	8000894 <HAL_GPIO_Init+0x14>
  }
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	372c      	adds	r7, #44	; 0x2c
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	40010400 	.word	0x40010400

08000b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d101      	bne.n	8000b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e272      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f000 8087 	beq.w	8000cb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ba8:	4b92      	ldr	r3, [pc, #584]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f003 030c 	and.w	r3, r3, #12
 8000bb0:	2b04      	cmp	r3, #4
 8000bb2:	d00c      	beq.n	8000bce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bb4:	4b8f      	ldr	r3, [pc, #572]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f003 030c 	and.w	r3, r3, #12
 8000bbc:	2b08      	cmp	r3, #8
 8000bbe:	d112      	bne.n	8000be6 <HAL_RCC_OscConfig+0x5e>
 8000bc0:	4b8c      	ldr	r3, [pc, #560]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bcc:	d10b      	bne.n	8000be6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bce:	4b89      	ldr	r3, [pc, #548]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d06c      	beq.n	8000cb4 <HAL_RCC_OscConfig+0x12c>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d168      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e24c      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bee:	d106      	bne.n	8000bfe <HAL_RCC_OscConfig+0x76>
 8000bf0:	4b80      	ldr	r3, [pc, #512]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a7f      	ldr	r2, [pc, #508]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	e02e      	b.n	8000c5c <HAL_RCC_OscConfig+0xd4>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d10c      	bne.n	8000c20 <HAL_RCC_OscConfig+0x98>
 8000c06:	4b7b      	ldr	r3, [pc, #492]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a7a      	ldr	r2, [pc, #488]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	4b78      	ldr	r3, [pc, #480]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a77      	ldr	r2, [pc, #476]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c1c:	6013      	str	r3, [r2, #0]
 8000c1e:	e01d      	b.n	8000c5c <HAL_RCC_OscConfig+0xd4>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c28:	d10c      	bne.n	8000c44 <HAL_RCC_OscConfig+0xbc>
 8000c2a:	4b72      	ldr	r3, [pc, #456]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a71      	ldr	r2, [pc, #452]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	4b6f      	ldr	r3, [pc, #444]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a6e      	ldr	r2, [pc, #440]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	e00b      	b.n	8000c5c <HAL_RCC_OscConfig+0xd4>
 8000c44:	4b6b      	ldr	r3, [pc, #428]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a6a      	ldr	r2, [pc, #424]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	4b68      	ldr	r3, [pc, #416]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a67      	ldr	r2, [pc, #412]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d013      	beq.n	8000c8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c64:	f7ff fd22 	bl	80006ac <HAL_GetTick>
 8000c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c6a:	e008      	b.n	8000c7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c6c:	f7ff fd1e 	bl	80006ac <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	2b64      	cmp	r3, #100	; 0x64
 8000c78:	d901      	bls.n	8000c7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	e200      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c7e:	4b5d      	ldr	r3, [pc, #372]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d0f0      	beq.n	8000c6c <HAL_RCC_OscConfig+0xe4>
 8000c8a:	e014      	b.n	8000cb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c8c:	f7ff fd0e 	bl	80006ac <HAL_GetTick>
 8000c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c92:	e008      	b.n	8000ca6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c94:	f7ff fd0a 	bl	80006ac <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	2b64      	cmp	r3, #100	; 0x64
 8000ca0:	d901      	bls.n	8000ca6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	e1ec      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ca6:	4b53      	ldr	r3, [pc, #332]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1f0      	bne.n	8000c94 <HAL_RCC_OscConfig+0x10c>
 8000cb2:	e000      	b.n	8000cb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d063      	beq.n	8000d8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cc2:	4b4c      	ldr	r3, [pc, #304]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 030c 	and.w	r3, r3, #12
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d00b      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cce:	4b49      	ldr	r3, [pc, #292]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 030c 	and.w	r3, r3, #12
 8000cd6:	2b08      	cmp	r3, #8
 8000cd8:	d11c      	bne.n	8000d14 <HAL_RCC_OscConfig+0x18c>
 8000cda:	4b46      	ldr	r3, [pc, #280]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d116      	bne.n	8000d14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ce6:	4b43      	ldr	r3, [pc, #268]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d005      	beq.n	8000cfe <HAL_RCC_OscConfig+0x176>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	691b      	ldr	r3, [r3, #16]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d001      	beq.n	8000cfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e1c0      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cfe:	4b3d      	ldr	r3, [pc, #244]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	4939      	ldr	r1, [pc, #228]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d12:	e03a      	b.n	8000d8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	691b      	ldr	r3, [r3, #16]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d020      	beq.n	8000d5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d1c:	4b36      	ldr	r3, [pc, #216]	; (8000df8 <HAL_RCC_OscConfig+0x270>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d22:	f7ff fcc3 	bl	80006ac <HAL_GetTick>
 8000d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d28:	e008      	b.n	8000d3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d2a:	f7ff fcbf 	bl	80006ac <HAL_GetTick>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d901      	bls.n	8000d3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	e1a1      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d3c:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d0f0      	beq.n	8000d2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d48:	4b2a      	ldr	r3, [pc, #168]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	695b      	ldr	r3, [r3, #20]
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	4927      	ldr	r1, [pc, #156]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	600b      	str	r3, [r1, #0]
 8000d5c:	e015      	b.n	8000d8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d5e:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <HAL_RCC_OscConfig+0x270>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d64:	f7ff fca2 	bl	80006ac <HAL_GetTick>
 8000d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d6a:	e008      	b.n	8000d7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d6c:	f7ff fc9e 	bl	80006ac <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d901      	bls.n	8000d7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e180      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1f0      	bne.n	8000d6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d03a      	beq.n	8000e0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d019      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <HAL_RCC_OscConfig+0x274>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da4:	f7ff fc82 	bl	80006ac <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dac:	f7ff fc7e 	bl	80006ac <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e160      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f0      	beq.n	8000dac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f000 faf4 	bl	80013b8 <RCC_Delay>
 8000dd0:	e01c      	b.n	8000e0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_RCC_OscConfig+0x274>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd8:	f7ff fc68 	bl	80006ac <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dde:	e00f      	b.n	8000e00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de0:	f7ff fc64 	bl	80006ac <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d908      	bls.n	8000e00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e146      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
 8000df2:	bf00      	nop
 8000df4:	40021000 	.word	0x40021000
 8000df8:	42420000 	.word	0x42420000
 8000dfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e00:	4b92      	ldr	r3, [pc, #584]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1e9      	bne.n	8000de0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f000 80a6 	beq.w	8000f66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e1e:	4b8b      	ldr	r3, [pc, #556]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10d      	bne.n	8000e46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e2a:	4b88      	ldr	r3, [pc, #544]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	4a87      	ldr	r2, [pc, #540]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e34:	61d3      	str	r3, [r2, #28]
 8000e36:	4b85      	ldr	r3, [pc, #532]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e42:	2301      	movs	r3, #1
 8000e44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e46:	4b82      	ldr	r3, [pc, #520]	; (8001050 <HAL_RCC_OscConfig+0x4c8>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d118      	bne.n	8000e84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e52:	4b7f      	ldr	r3, [pc, #508]	; (8001050 <HAL_RCC_OscConfig+0x4c8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a7e      	ldr	r2, [pc, #504]	; (8001050 <HAL_RCC_OscConfig+0x4c8>)
 8000e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e5e:	f7ff fc25 	bl	80006ac <HAL_GetTick>
 8000e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e66:	f7ff fc21 	bl	80006ac <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b64      	cmp	r3, #100	; 0x64
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e103      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e78:	4b75      	ldr	r3, [pc, #468]	; (8001050 <HAL_RCC_OscConfig+0x4c8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0f0      	beq.n	8000e66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d106      	bne.n	8000e9a <HAL_RCC_OscConfig+0x312>
 8000e8c:	4b6f      	ldr	r3, [pc, #444]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	4a6e      	ldr	r2, [pc, #440]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6213      	str	r3, [r2, #32]
 8000e98:	e02d      	b.n	8000ef6 <HAL_RCC_OscConfig+0x36e>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10c      	bne.n	8000ebc <HAL_RCC_OscConfig+0x334>
 8000ea2:	4b6a      	ldr	r3, [pc, #424]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ea4:	6a1b      	ldr	r3, [r3, #32]
 8000ea6:	4a69      	ldr	r2, [pc, #420]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ea8:	f023 0301 	bic.w	r3, r3, #1
 8000eac:	6213      	str	r3, [r2, #32]
 8000eae:	4b67      	ldr	r3, [pc, #412]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000eb0:	6a1b      	ldr	r3, [r3, #32]
 8000eb2:	4a66      	ldr	r2, [pc, #408]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000eb4:	f023 0304 	bic.w	r3, r3, #4
 8000eb8:	6213      	str	r3, [r2, #32]
 8000eba:	e01c      	b.n	8000ef6 <HAL_RCC_OscConfig+0x36e>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	2b05      	cmp	r3, #5
 8000ec2:	d10c      	bne.n	8000ede <HAL_RCC_OscConfig+0x356>
 8000ec4:	4b61      	ldr	r3, [pc, #388]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	4a60      	ldr	r2, [pc, #384]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000eca:	f043 0304 	orr.w	r3, r3, #4
 8000ece:	6213      	str	r3, [r2, #32]
 8000ed0:	4b5e      	ldr	r3, [pc, #376]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ed2:	6a1b      	ldr	r3, [r3, #32]
 8000ed4:	4a5d      	ldr	r2, [pc, #372]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6213      	str	r3, [r2, #32]
 8000edc:	e00b      	b.n	8000ef6 <HAL_RCC_OscConfig+0x36e>
 8000ede:	4b5b      	ldr	r3, [pc, #364]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	6a1b      	ldr	r3, [r3, #32]
 8000ee2:	4a5a      	ldr	r2, [pc, #360]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ee4:	f023 0301 	bic.w	r3, r3, #1
 8000ee8:	6213      	str	r3, [r2, #32]
 8000eea:	4b58      	ldr	r3, [pc, #352]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	6a1b      	ldr	r3, [r3, #32]
 8000eee:	4a57      	ldr	r2, [pc, #348]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	f023 0304 	bic.w	r3, r3, #4
 8000ef4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d015      	beq.n	8000f2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efe:	f7ff fbd5 	bl	80006ac <HAL_GetTick>
 8000f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f04:	e00a      	b.n	8000f1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f06:	f7ff fbd1 	bl	80006ac <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e0b1      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f1c:	4b4b      	ldr	r3, [pc, #300]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0ee      	beq.n	8000f06 <HAL_RCC_OscConfig+0x37e>
 8000f28:	e014      	b.n	8000f54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2a:	f7ff fbbf 	bl	80006ac <HAL_GetTick>
 8000f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f30:	e00a      	b.n	8000f48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f32:	f7ff fbbb 	bl	80006ac <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e09b      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f48:	4b40      	ldr	r3, [pc, #256]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000f4a:	6a1b      	ldr	r3, [r3, #32]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1ee      	bne.n	8000f32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f54:	7dfb      	ldrb	r3, [r7, #23]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d105      	bne.n	8000f66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f5a:	4b3c      	ldr	r3, [pc, #240]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a3b      	ldr	r2, [pc, #236]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 8087 	beq.w	800107e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f70:	4b36      	ldr	r3, [pc, #216]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 030c 	and.w	r3, r3, #12
 8000f78:	2b08      	cmp	r3, #8
 8000f7a:	d061      	beq.n	8001040 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d146      	bne.n	8001012 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f84:	4b33      	ldr	r3, [pc, #204]	; (8001054 <HAL_RCC_OscConfig+0x4cc>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8a:	f7ff fb8f 	bl	80006ac <HAL_GetTick>
 8000f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f90:	e008      	b.n	8000fa4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f92:	f7ff fb8b 	bl	80006ac <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e06d      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa4:	4b29      	ldr	r3, [pc, #164]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1f0      	bne.n	8000f92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb8:	d108      	bne.n	8000fcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fba:	4b24      	ldr	r3, [pc, #144]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	4921      	ldr	r1, [pc, #132]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a19      	ldr	r1, [r3, #32]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fdc:	430b      	orrs	r3, r1
 8000fde:	491b      	ldr	r1, [pc, #108]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <HAL_RCC_OscConfig+0x4cc>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fea:	f7ff fb5f 	bl	80006ac <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ff2:	f7ff fb5b 	bl	80006ac <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e03d      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x46a>
 8001010:	e035      	b.n	800107e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_RCC_OscConfig+0x4cc>)
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fb48 	bl	80006ac <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001020:	f7ff fb44 	bl	80006ac <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e026      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f0      	bne.n	8001020 <HAL_RCC_OscConfig+0x498>
 800103e:	e01e      	b.n	800107e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69db      	ldr	r3, [r3, #28]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d107      	bne.n	8001058 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e019      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
 800104c:	40021000 	.word	0x40021000
 8001050:	40007000 	.word	0x40007000
 8001054:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_RCC_OscConfig+0x500>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	429a      	cmp	r2, r3
 800106a:	d106      	bne.n	800107a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001076:	429a      	cmp	r2, r3
 8001078:	d001      	beq.n	800107e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40021000 	.word	0x40021000

0800108c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d101      	bne.n	80010a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e0d0      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010a0:	4b6a      	ldr	r3, [pc, #424]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d910      	bls.n	80010d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ae:	4b67      	ldr	r3, [pc, #412]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f023 0207 	bic.w	r2, r3, #7
 80010b6:	4965      	ldr	r1, [pc, #404]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010be:	4b63      	ldr	r3, [pc, #396]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d001      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e0b8      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d020      	beq.n	800111e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d005      	beq.n	80010f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010e8:	4b59      	ldr	r3, [pc, #356]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	4a58      	ldr	r2, [pc, #352]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 80010ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d005      	beq.n	800110c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001100:	4b53      	ldr	r3, [pc, #332]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	4a52      	ldr	r2, [pc, #328]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001106:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800110a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800110c:	4b50      	ldr	r3, [pc, #320]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	494d      	ldr	r1, [pc, #308]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	4313      	orrs	r3, r2
 800111c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d040      	beq.n	80011ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d107      	bne.n	8001142 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	4b47      	ldr	r3, [pc, #284]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d115      	bne.n	800116a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e07f      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d107      	bne.n	800115a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800114a:	4b41      	ldr	r3, [pc, #260]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d109      	bne.n	800116a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e073      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115a:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e06b      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800116a:	4b39      	ldr	r3, [pc, #228]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f023 0203 	bic.w	r2, r3, #3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4936      	ldr	r1, [pc, #216]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001178:	4313      	orrs	r3, r2
 800117a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800117c:	f7ff fa96 	bl	80006ac <HAL_GetTick>
 8001180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001182:	e00a      	b.n	800119a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001184:	f7ff fa92 	bl	80006ac <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001192:	4293      	cmp	r3, r2
 8001194:	d901      	bls.n	800119a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e053      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800119a:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 020c 	and.w	r2, r3, #12
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d1eb      	bne.n	8001184 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011ac:	4b27      	ldr	r3, [pc, #156]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d210      	bcs.n	80011dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ba:	4b24      	ldr	r3, [pc, #144]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 0207 	bic.w	r2, r3, #7
 80011c2:	4922      	ldr	r1, [pc, #136]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d001      	beq.n	80011dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e032      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d008      	beq.n	80011fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	4916      	ldr	r1, [pc, #88]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	2b00      	cmp	r3, #0
 8001204:	d009      	beq.n	800121a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	490e      	ldr	r1, [pc, #56]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	4313      	orrs	r3, r2
 8001218:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800121a:	f000 f821 	bl	8001260 <HAL_RCC_GetSysClockFreq>
 800121e:	4602      	mov	r2, r0
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	091b      	lsrs	r3, r3, #4
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	490a      	ldr	r1, [pc, #40]	; (8001254 <HAL_RCC_ClockConfig+0x1c8>)
 800122c:	5ccb      	ldrb	r3, [r1, r3]
 800122e:	fa22 f303 	lsr.w	r3, r2, r3
 8001232:	4a09      	ldr	r2, [pc, #36]	; (8001258 <HAL_RCC_ClockConfig+0x1cc>)
 8001234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_RCC_ClockConfig+0x1d0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f950 	bl	80004e0 <HAL_InitTick>

  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40022000 	.word	0x40022000
 8001250:	40021000 	.word	0x40021000
 8001254:	08004d40 	.word	0x08004d40
 8001258:	20000000 	.word	0x20000000
 800125c:	20000004 	.word	0x20000004

08001260 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001260:	b490      	push	{r4, r7}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001266:	4b29      	ldr	r3, [pc, #164]	; (800130c <HAL_RCC_GetSysClockFreq+0xac>)
 8001268:	1d3c      	adds	r4, r7, #4
 800126a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800126c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001270:	f240 2301 	movw	r3, #513	; 0x201
 8001274:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800128a:	4b21      	ldr	r3, [pc, #132]	; (8001310 <HAL_RCC_GetSysClockFreq+0xb0>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	2b04      	cmp	r3, #4
 8001298:	d002      	beq.n	80012a0 <HAL_RCC_GetSysClockFreq+0x40>
 800129a:	2b08      	cmp	r3, #8
 800129c:	d003      	beq.n	80012a6 <HAL_RCC_GetSysClockFreq+0x46>
 800129e:	e02b      	b.n	80012f8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012a0:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012a2:	623b      	str	r3, [r7, #32]
      break;
 80012a4:	e02b      	b.n	80012fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	0c9b      	lsrs	r3, r3, #18
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	3328      	adds	r3, #40	; 0x28
 80012b0:	443b      	add	r3, r7
 80012b2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012b6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d012      	beq.n	80012e8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <HAL_RCC_GetSysClockFreq+0xb0>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	0c5b      	lsrs	r3, r3, #17
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	3328      	adds	r3, #40	; 0x28
 80012ce:	443b      	add	r3, r7
 80012d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012da:	fb03 f202 	mul.w	r2, r3, r2
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
 80012e6:	e004      	b.n	80012f2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012ec:	fb02 f303 	mul.w	r3, r2, r3
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	623b      	str	r3, [r7, #32]
      break;
 80012f6:	e002      	b.n	80012fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012fa:	623b      	str	r3, [r7, #32]
      break;
 80012fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012fe:	6a3b      	ldr	r3, [r7, #32]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3728      	adds	r7, #40	; 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bc90      	pop	{r4, r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	08004cf4 	.word	0x08004cf4
 8001310:	40021000 	.word	0x40021000
 8001314:	007a1200 	.word	0x007a1200
 8001318:	003d0900 	.word	0x003d0900

0800131c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001320:	4b02      	ldr	r3, [pc, #8]	; (800132c <HAL_RCC_GetHCLKFreq+0x10>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	20000000 	.word	0x20000000

08001330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001334:	f7ff fff2 	bl	800131c <HAL_RCC_GetHCLKFreq>
 8001338:	4602      	mov	r2, r0
 800133a:	4b05      	ldr	r3, [pc, #20]	; (8001350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	0adb      	lsrs	r3, r3, #11
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	4903      	ldr	r1, [pc, #12]	; (8001354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001346:	5ccb      	ldrb	r3, [r1, r3]
 8001348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800134c:	4618      	mov	r0, r3
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40021000 	.word	0x40021000
 8001354:	08004d50 	.word	0x08004d50

08001358 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	220f      	movs	r2, #15
 8001366:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_RCC_GetClockConfig+0x58>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0203 	and.w	r2, r3, #3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001374:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <HAL_RCC_GetClockConfig+0x58>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001380:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <HAL_RCC_GetClockConfig+0x58>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <HAL_RCC_GetClockConfig+0x58>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	08db      	lsrs	r3, r3, #3
 8001392:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_RCC_GetClockConfig+0x5c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0207 	and.w	r2, r3, #7
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40022000 	.word	0x40022000

080013b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <RCC_Delay+0x34>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <RCC_Delay+0x38>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	0a5b      	lsrs	r3, r3, #9
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013d4:	bf00      	nop
  }
  while (Delay --);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	1e5a      	subs	r2, r3, #1
 80013da:	60fa      	str	r2, [r7, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1f9      	bne.n	80013d4 <RCC_Delay+0x1c>
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	20000000 	.word	0x20000000
 80013f0:	10624dd3 	.word	0x10624dd3

080013f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e041      	b.n	800148a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d106      	bne.n	8001420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff f814 	bl	8000448 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2202      	movs	r2, #2
 8001424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3304      	adds	r3, #4
 8001430:	4619      	mov	r1, r3
 8001432:	4610      	mov	r0, r2
 8001434:	f000 fc28 	bl	8001c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d001      	beq.n	80014ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e03a      	b.n	8001522 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2202      	movs	r2, #2
 80014b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 0201 	orr.w	r2, r2, #1
 80014c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a18      	ldr	r2, [pc, #96]	; (800152c <HAL_TIM_Base_Start_IT+0x98>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d00e      	beq.n	80014ec <HAL_TIM_Base_Start_IT+0x58>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d6:	d009      	beq.n	80014ec <HAL_TIM_Base_Start_IT+0x58>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a14      	ldr	r2, [pc, #80]	; (8001530 <HAL_TIM_Base_Start_IT+0x9c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d004      	beq.n	80014ec <HAL_TIM_Base_Start_IT+0x58>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a13      	ldr	r2, [pc, #76]	; (8001534 <HAL_TIM_Base_Start_IT+0xa0>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d111      	bne.n	8001510 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d010      	beq.n	8001520 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f042 0201 	orr.w	r2, r2, #1
 800150c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800150e:	e007      	b.n	8001520 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0201 	orr.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	40012c00 	.word	0x40012c00
 8001530:	40000400 	.word	0x40000400
 8001534:	40000800 	.word	0x40000800

08001538 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e041      	b.n	80015ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d106      	bne.n	8001564 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 f839 	bl	80015d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2202      	movs	r2, #2
 8001568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3304      	adds	r3, #4
 8001574:	4619      	mov	r1, r3
 8001576:	4610      	mov	r0, r2
 8001578:	f000 fb86 	bl	8001c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d109      	bne.n	800160c <HAL_TIM_PWM_Start+0x24>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b01      	cmp	r3, #1
 8001602:	bf14      	ite	ne
 8001604:	2301      	movne	r3, #1
 8001606:	2300      	moveq	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	e022      	b.n	8001652 <HAL_TIM_PWM_Start+0x6a>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	2b04      	cmp	r3, #4
 8001610:	d109      	bne.n	8001626 <HAL_TIM_PWM_Start+0x3e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b01      	cmp	r3, #1
 800161c:	bf14      	ite	ne
 800161e:	2301      	movne	r3, #1
 8001620:	2300      	moveq	r3, #0
 8001622:	b2db      	uxtb	r3, r3
 8001624:	e015      	b.n	8001652 <HAL_TIM_PWM_Start+0x6a>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	2b08      	cmp	r3, #8
 800162a:	d109      	bne.n	8001640 <HAL_TIM_PWM_Start+0x58>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b01      	cmp	r3, #1
 8001636:	bf14      	ite	ne
 8001638:	2301      	movne	r3, #1
 800163a:	2300      	moveq	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	e008      	b.n	8001652 <HAL_TIM_PWM_Start+0x6a>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b01      	cmp	r3, #1
 800164a:	bf14      	ite	ne
 800164c:	2301      	movne	r3, #1
 800164e:	2300      	moveq	r3, #0
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e05e      	b.n	8001718 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d104      	bne.n	800166a <HAL_TIM_PWM_Start+0x82>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2202      	movs	r2, #2
 8001664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001668:	e013      	b.n	8001692 <HAL_TIM_PWM_Start+0xaa>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	2b04      	cmp	r3, #4
 800166e:	d104      	bne.n	800167a <HAL_TIM_PWM_Start+0x92>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2202      	movs	r2, #2
 8001674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001678:	e00b      	b.n	8001692 <HAL_TIM_PWM_Start+0xaa>
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2b08      	cmp	r3, #8
 800167e:	d104      	bne.n	800168a <HAL_TIM_PWM_Start+0xa2>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2202      	movs	r2, #2
 8001684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001688:	e003      	b.n	8001692 <HAL_TIM_PWM_Start+0xaa>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2202      	movs	r2, #2
 800168e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2201      	movs	r2, #1
 8001698:	6839      	ldr	r1, [r7, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f000 fd74 	bl	8002188 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a1e      	ldr	r2, [pc, #120]	; (8001720 <HAL_TIM_PWM_Start+0x138>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d107      	bne.n	80016ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a18      	ldr	r2, [pc, #96]	; (8001720 <HAL_TIM_PWM_Start+0x138>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d00e      	beq.n	80016e2 <HAL_TIM_PWM_Start+0xfa>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016cc:	d009      	beq.n	80016e2 <HAL_TIM_PWM_Start+0xfa>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a14      	ldr	r2, [pc, #80]	; (8001724 <HAL_TIM_PWM_Start+0x13c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d004      	beq.n	80016e2 <HAL_TIM_PWM_Start+0xfa>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a12      	ldr	r2, [pc, #72]	; (8001728 <HAL_TIM_PWM_Start+0x140>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d111      	bne.n	8001706 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2b06      	cmp	r3, #6
 80016f2:	d010      	beq.n	8001716 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0201 	orr.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001704:	e007      	b.n	8001716 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0201 	orr.w	r2, r2, #1
 8001714:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40012c00 	.word	0x40012c00
 8001724:	40000400 	.word	0x40000400
 8001728:	40000800 	.word	0x40000800

0800172c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b02      	cmp	r3, #2
 8001740:	d122      	bne.n	8001788 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b02      	cmp	r3, #2
 800174e:	d11b      	bne.n	8001788 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f06f 0202 	mvn.w	r2, #2
 8001758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 fa6f 	bl	8001c52 <HAL_TIM_IC_CaptureCallback>
 8001774:	e005      	b.n	8001782 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 fa62 	bl	8001c40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 fa71 	bl	8001c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b04      	cmp	r3, #4
 8001794:	d122      	bne.n	80017dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d11b      	bne.n	80017dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f06f 0204 	mvn.w	r2, #4
 80017ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2202      	movs	r2, #2
 80017b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fa45 	bl	8001c52 <HAL_TIM_IC_CaptureCallback>
 80017c8:	e005      	b.n	80017d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 fa38 	bl	8001c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 fa47 	bl	8001c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d122      	bne.n	8001830 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d11b      	bne.n	8001830 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f06f 0208 	mvn.w	r2, #8
 8001800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2204      	movs	r2, #4
 8001806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 fa1b 	bl	8001c52 <HAL_TIM_IC_CaptureCallback>
 800181c:	e005      	b.n	800182a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 fa0e 	bl	8001c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 fa1d 	bl	8001c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	2b10      	cmp	r3, #16
 800183c:	d122      	bne.n	8001884 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	2b10      	cmp	r3, #16
 800184a:	d11b      	bne.n	8001884 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f06f 0210 	mvn.w	r2, #16
 8001854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2208      	movs	r2, #8
 800185a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f9f1 	bl	8001c52 <HAL_TIM_IC_CaptureCallback>
 8001870:	e005      	b.n	800187e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f9e4 	bl	8001c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f9f3 	bl	8001c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b01      	cmp	r3, #1
 8001890:	d10e      	bne.n	80018b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b01      	cmp	r3, #1
 800189e:	d107      	bne.n	80018b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f06f 0201 	mvn.w	r2, #1
 80018a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7fe fd7c 	bl	80003a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ba:	2b80      	cmp	r3, #128	; 0x80
 80018bc:	d10e      	bne.n	80018dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c8:	2b80      	cmp	r3, #128	; 0x80
 80018ca:	d107      	bne.n	80018dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 fce1 	bl	800229e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e6:	2b40      	cmp	r3, #64	; 0x40
 80018e8:	d10e      	bne.n	8001908 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f4:	2b40      	cmp	r3, #64	; 0x40
 80018f6:	d107      	bne.n	8001908 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 f9b7 	bl	8001c76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	f003 0320 	and.w	r3, r3, #32
 8001912:	2b20      	cmp	r3, #32
 8001914:	d10e      	bne.n	8001934 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f003 0320 	and.w	r3, r3, #32
 8001920:	2b20      	cmp	r3, #32
 8001922:	d107      	bne.n	8001934 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f06f 0220 	mvn.w	r2, #32
 800192c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 fcac 	bl	800228c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800194e:	2b01      	cmp	r3, #1
 8001950:	d101      	bne.n	8001956 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001952:	2302      	movs	r3, #2
 8001954:	e0ac      	b.n	8001ab0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b0c      	cmp	r3, #12
 8001962:	f200 809f 	bhi.w	8001aa4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001966:	a201      	add	r2, pc, #4	; (adr r2, 800196c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196c:	080019a1 	.word	0x080019a1
 8001970:	08001aa5 	.word	0x08001aa5
 8001974:	08001aa5 	.word	0x08001aa5
 8001978:	08001aa5 	.word	0x08001aa5
 800197c:	080019e1 	.word	0x080019e1
 8001980:	08001aa5 	.word	0x08001aa5
 8001984:	08001aa5 	.word	0x08001aa5
 8001988:	08001aa5 	.word	0x08001aa5
 800198c:	08001a23 	.word	0x08001a23
 8001990:	08001aa5 	.word	0x08001aa5
 8001994:	08001aa5 	.word	0x08001aa5
 8001998:	08001aa5 	.word	0x08001aa5
 800199c:	08001a63 	.word	0x08001a63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f9d0 	bl	8001d4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	699a      	ldr	r2, [r3, #24]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0208 	orr.w	r2, r2, #8
 80019ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	699a      	ldr	r2, [r3, #24]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0204 	bic.w	r2, r2, #4
 80019ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6999      	ldr	r1, [r3, #24]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	691a      	ldr	r2, [r3, #16]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	619a      	str	r2, [r3, #24]
      break;
 80019de:	e062      	b.n	8001aa6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 fa16 	bl	8001e18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699a      	ldr	r2, [r3, #24]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699a      	ldr	r2, [r3, #24]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6999      	ldr	r1, [r3, #24]
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	021a      	lsls	r2, r3, #8
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	619a      	str	r2, [r3, #24]
      break;
 8001a20:	e041      	b.n	8001aa6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68b9      	ldr	r1, [r7, #8]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 fa5f 	bl	8001eec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	69da      	ldr	r2, [r3, #28]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f042 0208 	orr.w	r2, r2, #8
 8001a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	69da      	ldr	r2, [r3, #28]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0204 	bic.w	r2, r2, #4
 8001a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	69d9      	ldr	r1, [r3, #28]
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	691a      	ldr	r2, [r3, #16]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	61da      	str	r2, [r3, #28]
      break;
 8001a60:	e021      	b.n	8001aa6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68b9      	ldr	r1, [r7, #8]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 faa9 	bl	8001fc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	69da      	ldr	r2, [r3, #28]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	69da      	ldr	r2, [r3, #28]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	69d9      	ldr	r1, [r3, #28]
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	021a      	lsls	r2, r3, #8
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	61da      	str	r2, [r3, #28]
      break;
 8001aa2:	e000      	b.n	8001aa6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001aa4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_TIM_ConfigClockSource+0x18>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e0b3      	b.n	8001c38 <HAL_TIM_ConfigClockSource+0x180>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001aee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001af6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b08:	d03e      	beq.n	8001b88 <HAL_TIM_ConfigClockSource+0xd0>
 8001b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b0e:	f200 8087 	bhi.w	8001c20 <HAL_TIM_ConfigClockSource+0x168>
 8001b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b16:	f000 8085 	beq.w	8001c24 <HAL_TIM_ConfigClockSource+0x16c>
 8001b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b1e:	d87f      	bhi.n	8001c20 <HAL_TIM_ConfigClockSource+0x168>
 8001b20:	2b70      	cmp	r3, #112	; 0x70
 8001b22:	d01a      	beq.n	8001b5a <HAL_TIM_ConfigClockSource+0xa2>
 8001b24:	2b70      	cmp	r3, #112	; 0x70
 8001b26:	d87b      	bhi.n	8001c20 <HAL_TIM_ConfigClockSource+0x168>
 8001b28:	2b60      	cmp	r3, #96	; 0x60
 8001b2a:	d050      	beq.n	8001bce <HAL_TIM_ConfigClockSource+0x116>
 8001b2c:	2b60      	cmp	r3, #96	; 0x60
 8001b2e:	d877      	bhi.n	8001c20 <HAL_TIM_ConfigClockSource+0x168>
 8001b30:	2b50      	cmp	r3, #80	; 0x50
 8001b32:	d03c      	beq.n	8001bae <HAL_TIM_ConfigClockSource+0xf6>
 8001b34:	2b50      	cmp	r3, #80	; 0x50
 8001b36:	d873      	bhi.n	8001c20 <HAL_TIM_ConfigClockSource+0x168>
 8001b38:	2b40      	cmp	r3, #64	; 0x40
 8001b3a:	d058      	beq.n	8001bee <HAL_TIM_ConfigClockSource+0x136>
 8001b3c:	2b40      	cmp	r3, #64	; 0x40
 8001b3e:	d86f      	bhi.n	8001c20 <HAL_TIM_ConfigClockSource+0x168>
 8001b40:	2b30      	cmp	r3, #48	; 0x30
 8001b42:	d064      	beq.n	8001c0e <HAL_TIM_ConfigClockSource+0x156>
 8001b44:	2b30      	cmp	r3, #48	; 0x30
 8001b46:	d86b      	bhi.n	8001c20 <HAL_TIM_ConfigClockSource+0x168>
 8001b48:	2b20      	cmp	r3, #32
 8001b4a:	d060      	beq.n	8001c0e <HAL_TIM_ConfigClockSource+0x156>
 8001b4c:	2b20      	cmp	r3, #32
 8001b4e:	d867      	bhi.n	8001c20 <HAL_TIM_ConfigClockSource+0x168>
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d05c      	beq.n	8001c0e <HAL_TIM_ConfigClockSource+0x156>
 8001b54:	2b10      	cmp	r3, #16
 8001b56:	d05a      	beq.n	8001c0e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001b58:	e062      	b.n	8001c20 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	6899      	ldr	r1, [r3, #8]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f000 faee 	bl	800214a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001b7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	609a      	str	r2, [r3, #8]
      break;
 8001b86:	e04e      	b.n	8001c26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	6899      	ldr	r1, [r3, #8]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f000 fad7 	bl	800214a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001baa:	609a      	str	r2, [r3, #8]
      break;
 8001bac:	e03b      	b.n	8001c26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	6859      	ldr	r1, [r3, #4]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f000 fa4e 	bl	800205c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2150      	movs	r1, #80	; 0x50
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 faa5 	bl	8002116 <TIM_ITRx_SetConfig>
      break;
 8001bcc:	e02b      	b.n	8001c26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	6859      	ldr	r1, [r3, #4]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	f000 fa6c 	bl	80020b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2160      	movs	r1, #96	; 0x60
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 fa95 	bl	8002116 <TIM_ITRx_SetConfig>
      break;
 8001bec:	e01b      	b.n	8001c26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	6859      	ldr	r1, [r3, #4]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	f000 fa2e 	bl	800205c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2140      	movs	r1, #64	; 0x40
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 fa85 	bl	8002116 <TIM_ITRx_SetConfig>
      break;
 8001c0c:	e00b      	b.n	8001c26 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4619      	mov	r1, r3
 8001c18:	4610      	mov	r0, r2
 8001c1a:	f000 fa7c 	bl	8002116 <TIM_ITRx_SetConfig>
        break;
 8001c1e:	e002      	b.n	8001c26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001c20:	bf00      	nop
 8001c22:	e000      	b.n	8001c26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001c24:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr

08001c52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr

08001c76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a29      	ldr	r2, [pc, #164]	; (8001d40 <TIM_Base_SetConfig+0xb8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d00b      	beq.n	8001cb8 <TIM_Base_SetConfig+0x30>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca6:	d007      	beq.n	8001cb8 <TIM_Base_SetConfig+0x30>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a26      	ldr	r2, [pc, #152]	; (8001d44 <TIM_Base_SetConfig+0xbc>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d003      	beq.n	8001cb8 <TIM_Base_SetConfig+0x30>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a25      	ldr	r2, [pc, #148]	; (8001d48 <TIM_Base_SetConfig+0xc0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d108      	bne.n	8001cca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a1c      	ldr	r2, [pc, #112]	; (8001d40 <TIM_Base_SetConfig+0xb8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00b      	beq.n	8001cea <TIM_Base_SetConfig+0x62>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd8:	d007      	beq.n	8001cea <TIM_Base_SetConfig+0x62>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a19      	ldr	r2, [pc, #100]	; (8001d44 <TIM_Base_SetConfig+0xbc>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d003      	beq.n	8001cea <TIM_Base_SetConfig+0x62>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <TIM_Base_SetConfig+0xc0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d108      	bne.n	8001cfc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a07      	ldr	r2, [pc, #28]	; (8001d40 <TIM_Base_SetConfig+0xb8>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d103      	bne.n	8001d30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	615a      	str	r2, [r3, #20]
}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40012c00 	.word	0x40012c00
 8001d44:	40000400 	.word	0x40000400
 8001d48:	40000800 	.word	0x40000800

08001d4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	f023 0201 	bic.w	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f023 0303 	bic.w	r3, r3, #3
 8001d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f023 0302 	bic.w	r3, r3, #2
 8001d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a1c      	ldr	r2, [pc, #112]	; (8001e14 <TIM_OC1_SetConfig+0xc8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d10c      	bne.n	8001dc2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f023 0308 	bic.w	r3, r3, #8
 8001dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f023 0304 	bic.w	r3, r3, #4
 8001dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a13      	ldr	r2, [pc, #76]	; (8001e14 <TIM_OC1_SetConfig+0xc8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d111      	bne.n	8001dee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	621a      	str	r2, [r3, #32]
}
 8001e08:	bf00      	nop
 8001e0a:	371c      	adds	r7, #28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40012c00 	.word	0x40012c00

08001e18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	f023 0210 	bic.w	r2, r3, #16
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f023 0320 	bic.w	r3, r3, #32
 8001e62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	011b      	lsls	r3, r3, #4
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a1d      	ldr	r2, [pc, #116]	; (8001ee8 <TIM_OC2_SetConfig+0xd0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d10d      	bne.n	8001e94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <TIM_OC2_SetConfig+0xd0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d113      	bne.n	8001ec4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ea2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	621a      	str	r2, [r3, #32]
}
 8001ede:	bf00      	nop
 8001ee0:	371c      	adds	r7, #28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	40012c00 	.word	0x40012c00

08001eec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f023 0303 	bic.w	r3, r3, #3
 8001f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	021b      	lsls	r3, r3, #8
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a1d      	ldr	r2, [pc, #116]	; (8001fbc <TIM_OC3_SetConfig+0xd0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d10d      	bne.n	8001f66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	021b      	lsls	r3, r3, #8
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <TIM_OC3_SetConfig+0xd0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d113      	bne.n	8001f96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	621a      	str	r2, [r3, #32]
}
 8001fb0:	bf00      	nop
 8001fb2:	371c      	adds	r7, #28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40012c00 	.word	0x40012c00

08001fc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800200a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	031b      	lsls	r3, r3, #12
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <TIM_OC4_SetConfig+0x98>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d109      	bne.n	8002034 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002026:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	019b      	lsls	r3, r3, #6
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4313      	orrs	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	621a      	str	r2, [r3, #32]
}
 800204e:	bf00      	nop
 8002050:	371c      	adds	r7, #28
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	40012c00 	.word	0x40012c00

0800205c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800205c:	b480      	push	{r7}
 800205e:	b087      	sub	sp, #28
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	f023 0201 	bic.w	r2, r3, #1
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f023 030a 	bic.w	r3, r3, #10
 8002098:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	4313      	orrs	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	621a      	str	r2, [r3, #32]
}
 80020ae:	bf00      	nop
 80020b0:	371c      	adds	r7, #28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	f023 0210 	bic.w	r2, r3, #16
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	031b      	lsls	r3, r3, #12
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80020f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	621a      	str	r2, [r3, #32]
}
 800210c:	bf00      	nop
 800210e:	371c      	adds	r7, #28
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002116:	b480      	push	{r7}
 8002118:	b085      	sub	sp, #20
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	f043 0307 	orr.w	r3, r3, #7
 8002138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	609a      	str	r2, [r3, #8]
}
 8002140:	bf00      	nop
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800214a:	b480      	push	{r7}
 800214c:	b087      	sub	sp, #28
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002164:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	021a      	lsls	r2, r3, #8
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	431a      	orrs	r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	4313      	orrs	r3, r2
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4313      	orrs	r3, r2
 8002176:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	609a      	str	r2, [r3, #8]
}
 800217e:	bf00      	nop
 8002180:	371c      	adds	r7, #28
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002188:	b480      	push	{r7}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f003 031f 	and.w	r3, r3, #31
 800219a:	2201      	movs	r2, #1
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a1a      	ldr	r2, [r3, #32]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	401a      	ands	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a1a      	ldr	r2, [r3, #32]
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	431a      	orrs	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	621a      	str	r2, [r3, #32]
}
 80021c6:	bf00      	nop
 80021c8:	371c      	adds	r7, #28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e046      	b.n	8002276 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2202      	movs	r2, #2
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a16      	ldr	r2, [pc, #88]	; (8002280 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d00e      	beq.n	800224a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002234:	d009      	beq.n	800224a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d004      	beq.n	800224a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a10      	ldr	r2, [pc, #64]	; (8002288 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d10c      	bne.n	8002264 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002250:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	4313      	orrs	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	40012c00 	.word	0x40012c00
 8002284:	40000400 	.word	0x40000400
 8002288:	40000800 	.word	0x40000800

0800228c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr

0800229e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022b6:	f3ef 8305 	mrs	r3, IPSR
 80022ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80022bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10f      	bne.n	80022e2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022c2:	f3ef 8310 	mrs	r3, PRIMASK
 80022c6:	607b      	str	r3, [r7, #4]
  return(result);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <osKernelInitialize+0x32>
 80022ce:	4b10      	ldr	r3, [pc, #64]	; (8002310 <osKernelInitialize+0x60>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d109      	bne.n	80022ea <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80022d6:	f3ef 8311 	mrs	r3, BASEPRI
 80022da:	603b      	str	r3, [r7, #0]
  return(result);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80022e2:	f06f 0305 	mvn.w	r3, #5
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	e00c      	b.n	8002304 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <osKernelInitialize+0x60>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d105      	bne.n	80022fe <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80022f2:	4b07      	ldr	r3, [pc, #28]	; (8002310 <osKernelInitialize+0x60>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	e002      	b.n	8002304 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002304:	68fb      	ldr	r3, [r7, #12]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	200000c4 	.word	0x200000c4

08002314 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800231a:	f3ef 8305 	mrs	r3, IPSR
 800231e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002320:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10f      	bne.n	8002346 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002326:	f3ef 8310 	mrs	r3, PRIMASK
 800232a:	607b      	str	r3, [r7, #4]
  return(result);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d109      	bne.n	8002346 <osKernelStart+0x32>
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <osKernelStart+0x64>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d109      	bne.n	800234e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800233a:	f3ef 8311 	mrs	r3, BASEPRI
 800233e:	603b      	str	r3, [r7, #0]
  return(result);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002346:	f06f 0305 	mvn.w	r3, #5
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	e00e      	b.n	800236c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <osKernelStart+0x64>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d107      	bne.n	8002366 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <osKernelStart+0x64>)
 8002358:	2202      	movs	r2, #2
 800235a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800235c:	f001 f878 	bl	8003450 <vTaskStartScheduler>
      stat = osOK;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	e002      	b.n	800236c <osKernelStart+0x58>
    } else {
      stat = osError;
 8002366:	f04f 33ff 	mov.w	r3, #4294967295
 800236a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800236c:	68fb      	ldr	r3, [r7, #12]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	200000c4 	.word	0x200000c4

0800237c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b092      	sub	sp, #72	; 0x48
 8002380:	af04      	add	r7, sp, #16
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800238c:	f3ef 8305 	mrs	r3, IPSR
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002394:	2b00      	cmp	r3, #0
 8002396:	f040 8094 	bne.w	80024c2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800239a:	f3ef 8310 	mrs	r3, PRIMASK
 800239e:	623b      	str	r3, [r7, #32]
  return(result);
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f040 808d 	bne.w	80024c2 <osThreadNew+0x146>
 80023a8:	4b48      	ldr	r3, [pc, #288]	; (80024cc <osThreadNew+0x150>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d106      	bne.n	80023be <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023b0:	f3ef 8311 	mrs	r3, BASEPRI
 80023b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f040 8082 	bne.w	80024c2 <osThreadNew+0x146>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d07e      	beq.n	80024c2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80023c8:	2318      	movs	r3, #24
 80023ca:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80023cc:	2300      	movs	r3, #0
 80023ce:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80023d0:	f107 031b 	add.w	r3, r7, #27
 80023d4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295
 80023da:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d045      	beq.n	800246e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <osThreadNew+0x74>
        name = attr->name;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80023fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <osThreadNew+0x9a>
 8002404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002406:	2b38      	cmp	r3, #56	; 0x38
 8002408:	d805      	bhi.n	8002416 <osThreadNew+0x9a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <osThreadNew+0x9e>
        return (NULL);
 8002416:	2300      	movs	r3, #0
 8002418:	e054      	b.n	80024c4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00e      	beq.n	8002450 <osThreadNew+0xd4>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2b5b      	cmp	r3, #91	; 0x5b
 8002438:	d90a      	bls.n	8002450 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800243e:	2b00      	cmp	r3, #0
 8002440:	d006      	beq.n	8002450 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <osThreadNew+0xd4>
        mem = 1;
 800244a:	2301      	movs	r3, #1
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
 800244e:	e010      	b.n	8002472 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10c      	bne.n	8002472 <osThreadNew+0xf6>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d108      	bne.n	8002472 <osThreadNew+0xf6>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d104      	bne.n	8002472 <osThreadNew+0xf6>
          mem = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
 800246c:	e001      	b.n	8002472 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002474:	2b01      	cmp	r3, #1
 8002476:	d110      	bne.n	800249a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002480:	9202      	str	r2, [sp, #8]
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800248c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 fe12 	bl	80030b8 <xTaskCreateStatic>
 8002494:	4603      	mov	r3, r0
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	e013      	b.n	80024c2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800249a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249c:	2b00      	cmp	r3, #0
 800249e:	d110      	bne.n	80024c2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80024a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 fe5c 	bl	8003170 <xTaskCreate>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d001      	beq.n	80024c2 <osThreadNew+0x146>
          hTask = NULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80024c2:	697b      	ldr	r3, [r7, #20]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3738      	adds	r7, #56	; 0x38
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	200000c4 	.word	0x200000c4

080024d0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024d8:	f3ef 8305 	mrs	r3, IPSR
 80024dc:	613b      	str	r3, [r7, #16]
  return(result);
 80024de:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10f      	bne.n	8002504 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024e4:	f3ef 8310 	mrs	r3, PRIMASK
 80024e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d109      	bne.n	8002504 <osDelay+0x34>
 80024f0:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <osDelay+0x58>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d109      	bne.n	800250c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024f8:	f3ef 8311 	mrs	r3, BASEPRI
 80024fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <osDelay+0x3c>
    stat = osErrorISR;
 8002504:	f06f 0305 	mvn.w	r3, #5
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	e007      	b.n	800251c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 ff66 	bl	80033e8 <vTaskDelay>
    }
  }

  return (stat);
 800251c:	697b      	ldr	r3, [r7, #20]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	200000c4 	.word	0x200000c4

0800252c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4a06      	ldr	r2, [pc, #24]	; (8002554 <vApplicationGetIdleTaskMemory+0x28>)
 800253c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	4a05      	ldr	r2, [pc, #20]	; (8002558 <vApplicationGetIdleTaskMemory+0x2c>)
 8002542:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2280      	movs	r2, #128	; 0x80
 8002548:	601a      	str	r2, [r3, #0]
}
 800254a:	bf00      	nop
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	200000c8 	.word	0x200000c8
 8002558:	20000124 	.word	0x20000124

0800255c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4a07      	ldr	r2, [pc, #28]	; (8002588 <vApplicationGetTimerTaskMemory+0x2c>)
 800256c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4a06      	ldr	r2, [pc, #24]	; (800258c <vApplicationGetTimerTaskMemory+0x30>)
 8002572:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800257a:	601a      	str	r2, [r3, #0]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	20000324 	.word	0x20000324
 800258c:	20000380 	.word	0x20000380

08002590 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f103 0208 	add.w	r2, r3, #8
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f04f 32ff 	mov.w	r2, #4294967295
 80025a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f103 0208 	add.w	r2, r3, #8
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f103 0208 	add.w	r2, r3, #8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr

080025ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025e6:	b480      	push	{r7}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	601a      	str	r2, [r3, #0]
}
 8002622:	bf00      	nop
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002642:	d103      	bne.n	800264c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	e00c      	b.n	8002666 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3308      	adds	r3, #8
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	e002      	b.n	800265a <vListInsert+0x2e>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	429a      	cmp	r2, r3
 8002664:	d2f6      	bcs.n	8002654 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	601a      	str	r2, [r3, #0]
}
 8002692:	bf00      	nop
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6892      	ldr	r2, [r2, #8]
 80026b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6852      	ldr	r2, [r2, #4]
 80026bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d103      	bne.n	80026d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	1e5a      	subs	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
	...

080026f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10a      	bne.n	800271a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002708:	f383 8811 	msr	BASEPRI, r3
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002716:	bf00      	nop
 8002718:	e7fe      	b.n	8002718 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800271a:	f001 ffc7 	bl	80046ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002726:	68f9      	ldr	r1, [r7, #12]
 8002728:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	441a      	add	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	3b01      	subs	r3, #1
 800274c:	68f9      	ldr	r1, [r7, #12]
 800274e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	441a      	add	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	22ff      	movs	r2, #255	; 0xff
 800275e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	22ff      	movs	r2, #255	; 0xff
 8002766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d114      	bne.n	800279a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d01a      	beq.n	80027ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3310      	adds	r3, #16
 800277c:	4618      	mov	r0, r3
 800277e:	f001 f8f1 	bl	8003964 <xTaskRemoveFromEventList>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d012      	beq.n	80027ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <xQueueGenericReset+0xcc>)
 800278a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	f3bf 8f4f 	dsb	sy
 8002794:	f3bf 8f6f 	isb	sy
 8002798:	e009      	b.n	80027ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	3310      	adds	r3, #16
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fef6 	bl	8002590 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	3324      	adds	r3, #36	; 0x24
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fef1 	bl	8002590 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027ae:	f001 ffad 	bl	800470c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027b2:	2301      	movs	r3, #1
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	e000ed04 	.word	0xe000ed04

080027c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08e      	sub	sp, #56	; 0x38
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10a      	bne.n	80027ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80027d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d8:	f383 8811 	msr	BASEPRI, r3
 80027dc:	f3bf 8f6f 	isb	sy
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027e6:	bf00      	nop
 80027e8:	e7fe      	b.n	80027e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80027f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f4:	f383 8811 	msr	BASEPRI, r3
 80027f8:	f3bf 8f6f 	isb	sy
 80027fc:	f3bf 8f4f 	dsb	sy
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002802:	bf00      	nop
 8002804:	e7fe      	b.n	8002804 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <xQueueGenericCreateStatic+0x52>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <xQueueGenericCreateStatic+0x56>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <xQueueGenericCreateStatic+0x58>
 8002816:	2300      	movs	r3, #0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10a      	bne.n	8002832 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800281c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002820:	f383 8811 	msr	BASEPRI, r3
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	623b      	str	r3, [r7, #32]
}
 800282e:	bf00      	nop
 8002830:	e7fe      	b.n	8002830 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <xQueueGenericCreateStatic+0x7e>
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <xQueueGenericCreateStatic+0x82>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <xQueueGenericCreateStatic+0x84>
 8002842:	2300      	movs	r3, #0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10a      	bne.n	800285e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284c:	f383 8811 	msr	BASEPRI, r3
 8002850:	f3bf 8f6f 	isb	sy
 8002854:	f3bf 8f4f 	dsb	sy
 8002858:	61fb      	str	r3, [r7, #28]
}
 800285a:	bf00      	nop
 800285c:	e7fe      	b.n	800285c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800285e:	2350      	movs	r3, #80	; 0x50
 8002860:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b50      	cmp	r3, #80	; 0x50
 8002866:	d00a      	beq.n	800287e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	61bb      	str	r3, [r7, #24]
}
 800287a:	bf00      	nop
 800287c:	e7fe      	b.n	800287c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00d      	beq.n	80028a4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002890:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	4613      	mov	r3, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68b9      	ldr	r1, [r7, #8]
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f805 	bl	80028ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80028a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3730      	adds	r7, #48	; 0x30
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b084      	sub	sp, #16
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d103      	bne.n	80028ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e002      	b.n	80028d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80028dc:	2101      	movs	r1, #1
 80028de:	69b8      	ldr	r0, [r7, #24]
 80028e0:	f7ff ff06 	bl	80026f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80028ec:	bf00      	nop
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08e      	sub	sp, #56	; 0x38
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002902:	2300      	movs	r3, #0
 8002904:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10a      	bne.n	8002926 <xQueueGenericSend+0x32>
	__asm volatile
 8002910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002922:	bf00      	nop
 8002924:	e7fe      	b.n	8002924 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d103      	bne.n	8002934 <xQueueGenericSend+0x40>
 800292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <xQueueGenericSend+0x44>
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <xQueueGenericSend+0x46>
 8002938:	2300      	movs	r3, #0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10a      	bne.n	8002954 <xQueueGenericSend+0x60>
	__asm volatile
 800293e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002942:	f383 8811 	msr	BASEPRI, r3
 8002946:	f3bf 8f6f 	isb	sy
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002950:	bf00      	nop
 8002952:	e7fe      	b.n	8002952 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d103      	bne.n	8002962 <xQueueGenericSend+0x6e>
 800295a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <xQueueGenericSend+0x72>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <xQueueGenericSend+0x74>
 8002966:	2300      	movs	r3, #0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <xQueueGenericSend+0x8e>
	__asm volatile
 800296c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002970:	f383 8811 	msr	BASEPRI, r3
 8002974:	f3bf 8f6f 	isb	sy
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	623b      	str	r3, [r7, #32]
}
 800297e:	bf00      	nop
 8002980:	e7fe      	b.n	8002980 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002982:	f001 f9b1 	bl	8003ce8 <xTaskGetSchedulerState>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <xQueueGenericSend+0x9e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <xQueueGenericSend+0xa2>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <xQueueGenericSend+0xa4>
 8002996:	2300      	movs	r3, #0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800299c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a0:	f383 8811 	msr	BASEPRI, r3
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	f3bf 8f4f 	dsb	sy
 80029ac:	61fb      	str	r3, [r7, #28]
}
 80029ae:	bf00      	nop
 80029b0:	e7fe      	b.n	80029b0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029b2:	f001 fe7b 	bl	80046ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029be:	429a      	cmp	r2, r3
 80029c0:	d302      	bcc.n	80029c8 <xQueueGenericSend+0xd4>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d129      	bne.n	8002a1c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029ce:	f000 fa07 	bl	8002de0 <prvCopyDataToQueue>
 80029d2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d010      	beq.n	80029fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029de:	3324      	adds	r3, #36	; 0x24
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 ffbf 	bl	8003964 <xTaskRemoveFromEventList>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d013      	beq.n	8002a14 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80029ec:	4b3f      	ldr	r3, [pc, #252]	; (8002aec <xQueueGenericSend+0x1f8>)
 80029ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	e00a      	b.n	8002a14 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80029fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a04:	4b39      	ldr	r3, [pc, #228]	; (8002aec <xQueueGenericSend+0x1f8>)
 8002a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a14:	f001 fe7a 	bl	800470c <vPortExitCritical>
				return pdPASS;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e063      	b.n	8002ae4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d103      	bne.n	8002a2a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a22:	f001 fe73 	bl	800470c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e05c      	b.n	8002ae4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d106      	bne.n	8002a3e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fff9 	bl	8003a2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a3e:	f001 fe65 	bl	800470c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a42:	f000 fd6b 	bl	800351c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a46:	f001 fe31 	bl	80046ac <vPortEnterCritical>
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a50:	b25b      	sxtb	r3, r3
 8002a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a56:	d103      	bne.n	8002a60 <xQueueGenericSend+0x16c>
 8002a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a66:	b25b      	sxtb	r3, r3
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d103      	bne.n	8002a76 <xQueueGenericSend+0x182>
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a76:	f001 fe49 	bl	800470c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a7a:	1d3a      	adds	r2, r7, #4
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 ffe8 	bl	8003a58 <xTaskCheckForTimeOut>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d124      	bne.n	8002ad8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a90:	f000 fa9e 	bl	8002fd0 <prvIsQueueFull>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d018      	beq.n	8002acc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	3310      	adds	r3, #16
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 ff0e 	bl	80038c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aaa:	f000 fa29 	bl	8002f00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002aae:	f000 fd43 	bl	8003538 <xTaskResumeAll>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f47f af7c 	bne.w	80029b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002aba:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <xQueueGenericSend+0x1f8>)
 8002abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	f3bf 8f6f 	isb	sy
 8002aca:	e772      	b.n	80029b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ace:	f000 fa17 	bl	8002f00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ad2:	f000 fd31 	bl	8003538 <xTaskResumeAll>
 8002ad6:	e76c      	b.n	80029b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ada:	f000 fa11 	bl	8002f00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ade:	f000 fd2b 	bl	8003538 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ae2:	2300      	movs	r3, #0
		}
	}
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3738      	adds	r7, #56	; 0x38
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	e000ed04 	.word	0xe000ed04

08002af0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08e      	sub	sp, #56	; 0x38
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10a      	bne.n	8002b1e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b1a:	bf00      	nop
 8002b1c:	e7fe      	b.n	8002b1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d103      	bne.n	8002b2c <xQueueGenericSendFromISR+0x3c>
 8002b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <xQueueGenericSendFromISR+0x40>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <xQueueGenericSendFromISR+0x42>
 8002b30:	2300      	movs	r3, #0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10a      	bne.n	8002b4c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3a:	f383 8811 	msr	BASEPRI, r3
 8002b3e:	f3bf 8f6f 	isb	sy
 8002b42:	f3bf 8f4f 	dsb	sy
 8002b46:	623b      	str	r3, [r7, #32]
}
 8002b48:	bf00      	nop
 8002b4a:	e7fe      	b.n	8002b4a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d103      	bne.n	8002b5a <xQueueGenericSendFromISR+0x6a>
 8002b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <xQueueGenericSendFromISR+0x6e>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <xQueueGenericSendFromISR+0x70>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	61fb      	str	r3, [r7, #28]
}
 8002b76:	bf00      	nop
 8002b78:	e7fe      	b.n	8002b78 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b7a:	f001 fe59 	bl	8004830 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b7e:	f3ef 8211 	mrs	r2, BASEPRI
 8002b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b86:	f383 8811 	msr	BASEPRI, r3
 8002b8a:	f3bf 8f6f 	isb	sy
 8002b8e:	f3bf 8f4f 	dsb	sy
 8002b92:	61ba      	str	r2, [r7, #24]
 8002b94:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b96:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d302      	bcc.n	8002bac <xQueueGenericSendFromISR+0xbc>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d12c      	bne.n	8002c06 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bbc:	f000 f910 	bl	8002de0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002bc0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	d112      	bne.n	8002bf0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d016      	beq.n	8002c00 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	3324      	adds	r3, #36	; 0x24
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 fec4 	bl	8003964 <xTaskRemoveFromEventList>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00e      	beq.n	8002c00 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00b      	beq.n	8002c00 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	e007      	b.n	8002c00 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002bf0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	b25a      	sxtb	r2, r3
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c00:	2301      	movs	r3, #1
 8002c02:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002c04:	e001      	b.n	8002c0a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	637b      	str	r3, [r7, #52]	; 0x34
 8002c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3738      	adds	r7, #56	; 0x38
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08c      	sub	sp, #48	; 0x30
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10a      	bne.n	8002c50 <xQueueReceive+0x30>
	__asm volatile
 8002c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3e:	f383 8811 	msr	BASEPRI, r3
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	623b      	str	r3, [r7, #32]
}
 8002c4c:	bf00      	nop
 8002c4e:	e7fe      	b.n	8002c4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d103      	bne.n	8002c5e <xQueueReceive+0x3e>
 8002c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <xQueueReceive+0x42>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <xQueueReceive+0x44>
 8002c62:	2300      	movs	r3, #0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10a      	bne.n	8002c7e <xQueueReceive+0x5e>
	__asm volatile
 8002c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	61fb      	str	r3, [r7, #28]
}
 8002c7a:	bf00      	nop
 8002c7c:	e7fe      	b.n	8002c7c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c7e:	f001 f833 	bl	8003ce8 <xTaskGetSchedulerState>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d102      	bne.n	8002c8e <xQueueReceive+0x6e>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <xQueueReceive+0x72>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <xQueueReceive+0x74>
 8002c92:	2300      	movs	r3, #0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10a      	bne.n	8002cae <xQueueReceive+0x8e>
	__asm volatile
 8002c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9c:	f383 8811 	msr	BASEPRI, r3
 8002ca0:	f3bf 8f6f 	isb	sy
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	61bb      	str	r3, [r7, #24]
}
 8002caa:	bf00      	nop
 8002cac:	e7fe      	b.n	8002cac <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cae:	f001 fcfd 	bl	80046ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d01f      	beq.n	8002cfe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cc2:	f000 f8f7 	bl	8002eb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	1e5a      	subs	r2, r3, #1
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ccc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00f      	beq.n	8002cf6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd8:	3310      	adds	r3, #16
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fe42 	bl	8003964 <xTaskRemoveFromEventList>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d007      	beq.n	8002cf6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ce6:	4b3d      	ldr	r3, [pc, #244]	; (8002ddc <xQueueReceive+0x1bc>)
 8002ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002cf6:	f001 fd09 	bl	800470c <vPortExitCritical>
				return pdPASS;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e069      	b.n	8002dd2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d103      	bne.n	8002d0c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d04:	f001 fd02 	bl	800470c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e062      	b.n	8002dd2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d12:	f107 0310 	add.w	r3, r7, #16
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fe88 	bl	8003a2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d20:	f001 fcf4 	bl	800470c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d24:	f000 fbfa 	bl	800351c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d28:	f001 fcc0 	bl	80046ac <vPortEnterCritical>
 8002d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d32:	b25b      	sxtb	r3, r3
 8002d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d38:	d103      	bne.n	8002d42 <xQueueReceive+0x122>
 8002d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d48:	b25b      	sxtb	r3, r3
 8002d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4e:	d103      	bne.n	8002d58 <xQueueReceive+0x138>
 8002d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d58:	f001 fcd8 	bl	800470c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d5c:	1d3a      	adds	r2, r7, #4
 8002d5e:	f107 0310 	add.w	r3, r7, #16
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 fe77 	bl	8003a58 <xTaskCheckForTimeOut>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d123      	bne.n	8002db8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d72:	f000 f917 	bl	8002fa4 <prvIsQueueEmpty>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d017      	beq.n	8002dac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	3324      	adds	r3, #36	; 0x24
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 fd9d 	bl	80038c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d8c:	f000 f8b8 	bl	8002f00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d90:	f000 fbd2 	bl	8003538 <xTaskResumeAll>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d189      	bne.n	8002cae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002d9a:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <xQueueReceive+0x1bc>)
 8002d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	e780      	b.n	8002cae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dae:	f000 f8a7 	bl	8002f00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002db2:	f000 fbc1 	bl	8003538 <xTaskResumeAll>
 8002db6:	e77a      	b.n	8002cae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dba:	f000 f8a1 	bl	8002f00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dbe:	f000 fbbb 	bl	8003538 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dc4:	f000 f8ee 	bl	8002fa4 <prvIsQueueEmpty>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f43f af6f 	beq.w	8002cae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002dd0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3730      	adds	r7, #48	; 0x30
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	e000ed04 	.word	0xe000ed04

08002de0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10d      	bne.n	8002e1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d14d      	bne.n	8002ea2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 ff8a 	bl	8003d24 <xTaskPriorityDisinherit>
 8002e10:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	605a      	str	r2, [r3, #4]
 8002e18:	e043      	b.n	8002ea2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d119      	bne.n	8002e54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6898      	ldr	r0, [r3, #8]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	461a      	mov	r2, r3
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	f001 ff3a 	bl	8004ca4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	441a      	add	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d32b      	bcc.n	8002ea2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	609a      	str	r2, [r3, #8]
 8002e52:	e026      	b.n	8002ea2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	68d8      	ldr	r0, [r3, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68b9      	ldr	r1, [r7, #8]
 8002e60:	f001 ff20 	bl	8004ca4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	425b      	negs	r3, r3
 8002e6e:	441a      	add	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d207      	bcs.n	8002e90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	425b      	negs	r3, r3
 8002e8a:	441a      	add	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d105      	bne.n	8002ea2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002eaa:	697b      	ldr	r3, [r7, #20]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d018      	beq.n	8002ef8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	441a      	add	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d303      	bcc.n	8002ee8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68d9      	ldr	r1, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	6838      	ldr	r0, [r7, #0]
 8002ef4:	f001 fed6 	bl	8004ca4 <memcpy>
	}
}
 8002ef8:	bf00      	nop
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f08:	f001 fbd0 	bl	80046ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f14:	e011      	b.n	8002f3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d012      	beq.n	8002f44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3324      	adds	r3, #36	; 0x24
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fd1e 	bl	8003964 <xTaskRemoveFromEventList>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f2e:	f000 fdf5 	bl	8003b1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	dce9      	bgt.n	8002f16 <prvUnlockQueue+0x16>
 8002f42:	e000      	b.n	8002f46 <prvUnlockQueue+0x46>
					break;
 8002f44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	22ff      	movs	r2, #255	; 0xff
 8002f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002f4e:	f001 fbdd 	bl	800470c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f52:	f001 fbab 	bl	80046ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f5e:	e011      	b.n	8002f84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d012      	beq.n	8002f8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3310      	adds	r3, #16
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 fcf9 	bl	8003964 <xTaskRemoveFromEventList>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f78:	f000 fdd0 	bl	8003b1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f7c:	7bbb      	ldrb	r3, [r7, #14]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	dce9      	bgt.n	8002f60 <prvUnlockQueue+0x60>
 8002f8c:	e000      	b.n	8002f90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	22ff      	movs	r2, #255	; 0xff
 8002f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002f98:	f001 fbb8 	bl	800470c <vPortExitCritical>
}
 8002f9c:	bf00      	nop
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fac:	f001 fb7e 	bl	80046ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d102      	bne.n	8002fbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	e001      	b.n	8002fc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fc2:	f001 fba3 	bl	800470c <vPortExitCritical>

	return xReturn;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fd8:	f001 fb68 	bl	80046ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d102      	bne.n	8002fee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	e001      	b.n	8002ff2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ff2:	f001 fb8b 	bl	800470c <vPortExitCritical>

	return xReturn;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	e014      	b.n	800303a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003010:	4a0e      	ldr	r2, [pc, #56]	; (800304c <vQueueAddToRegistry+0x4c>)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10b      	bne.n	8003034 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800301c:	490b      	ldr	r1, [pc, #44]	; (800304c <vQueueAddToRegistry+0x4c>)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003026:	4a09      	ldr	r2, [pc, #36]	; (800304c <vQueueAddToRegistry+0x4c>)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003032:	e006      	b.n	8003042 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3301      	adds	r3, #1
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b07      	cmp	r3, #7
 800303e:	d9e7      	bls.n	8003010 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003040:	bf00      	nop
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr
 800304c:	20000780 	.word	0x20000780

08003050 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003060:	f001 fb24 	bl	80046ac <vPortEnterCritical>
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800306a:	b25b      	sxtb	r3, r3
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d103      	bne.n	800307a <vQueueWaitForMessageRestricted+0x2a>
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003080:	b25b      	sxtb	r3, r3
 8003082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003086:	d103      	bne.n	8003090 <vQueueWaitForMessageRestricted+0x40>
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003090:	f001 fb3c 	bl	800470c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003098:	2b00      	cmp	r3, #0
 800309a:	d106      	bne.n	80030aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	3324      	adds	r3, #36	; 0x24
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 fc31 	bl	800390c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80030aa:	6978      	ldr	r0, [r7, #20]
 80030ac:	f7ff ff28 	bl	8002f00 <prvUnlockQueue>
	}
 80030b0:	bf00      	nop
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08e      	sub	sp, #56	; 0x38
 80030bc:	af04      	add	r7, sp, #16
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80030c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10a      	bne.n	80030e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80030cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	623b      	str	r3, [r7, #32]
}
 80030de:	bf00      	nop
 80030e0:	e7fe      	b.n	80030e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80030e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10a      	bne.n	80030fe <xTaskCreateStatic+0x46>
	__asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	61fb      	str	r3, [r7, #28]
}
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80030fe:	235c      	movs	r3, #92	; 0x5c
 8003100:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	2b5c      	cmp	r3, #92	; 0x5c
 8003106:	d00a      	beq.n	800311e <xTaskCreateStatic+0x66>
	__asm volatile
 8003108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	61bb      	str	r3, [r7, #24]
}
 800311a:	bf00      	nop
 800311c:	e7fe      	b.n	800311c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003120:	2b00      	cmp	r3, #0
 8003122:	d01e      	beq.n	8003162 <xTaskCreateStatic+0xaa>
 8003124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003126:	2b00      	cmp	r3, #0
 8003128:	d01b      	beq.n	8003162 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800312a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003132:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	2202      	movs	r2, #2
 8003138:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800313c:	2300      	movs	r3, #0
 800313e:	9303      	str	r3, [sp, #12]
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	9302      	str	r3, [sp, #8]
 8003144:	f107 0314 	add.w	r3, r7, #20
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f850 	bl	80031fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800315a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800315c:	f000 f8d4 	bl	8003308 <prvAddNewTaskToReadyList>
 8003160:	e001      	b.n	8003166 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003166:	697b      	ldr	r3, [r7, #20]
	}
 8003168:	4618      	mov	r0, r3
 800316a:	3728      	adds	r7, #40	; 0x28
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08c      	sub	sp, #48	; 0x30
 8003174:	af04      	add	r7, sp, #16
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	603b      	str	r3, [r7, #0]
 800317c:	4613      	mov	r3, r2
 800317e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4618      	mov	r0, r3
 8003186:	f001 fb91 	bl	80048ac <pvPortMalloc>
 800318a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00e      	beq.n	80031b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003192:	205c      	movs	r0, #92	; 0x5c
 8003194:	f001 fb8a 	bl	80048ac <pvPortMalloc>
 8003198:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	631a      	str	r2, [r3, #48]	; 0x30
 80031a6:	e005      	b.n	80031b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80031a8:	6978      	ldr	r0, [r7, #20]
 80031aa:	f001 fc43 	bl	8004a34 <vPortFree>
 80031ae:	e001      	b.n	80031b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d017      	beq.n	80031ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031c2:	88fa      	ldrh	r2, [r7, #6]
 80031c4:	2300      	movs	r3, #0
 80031c6:	9303      	str	r3, [sp, #12]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	9302      	str	r3, [sp, #8]
 80031cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ce:	9301      	str	r3, [sp, #4]
 80031d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 f80e 	bl	80031fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031de:	69f8      	ldr	r0, [r7, #28]
 80031e0:	f000 f892 	bl	8003308 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80031e4:	2301      	movs	r3, #1
 80031e6:	61bb      	str	r3, [r7, #24]
 80031e8:	e002      	b.n	80031f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031ea:	f04f 33ff 	mov.w	r3, #4294967295
 80031ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80031f0:	69bb      	ldr	r3, [r7, #24]
	}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3720      	adds	r7, #32
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b088      	sub	sp, #32
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
 8003206:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	461a      	mov	r2, r3
 8003212:	21a5      	movs	r1, #165	; 0xa5
 8003214:	f001 fd54 	bl	8004cc0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003222:	3b01      	subs	r3, #1
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	f023 0307 	bic.w	r3, r3, #7
 8003230:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00a      	beq.n	8003252 <prvInitialiseNewTask+0x58>
	__asm volatile
 800323c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003240:	f383 8811 	msr	BASEPRI, r3
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	617b      	str	r3, [r7, #20]
}
 800324e:	bf00      	nop
 8003250:	e7fe      	b.n	8003250 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	e012      	b.n	800327e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	4413      	add	r3, r2
 800325e:	7819      	ldrb	r1, [r3, #0]
 8003260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	4413      	add	r3, r2
 8003266:	3334      	adds	r3, #52	; 0x34
 8003268:	460a      	mov	r2, r1
 800326a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	4413      	add	r3, r2
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d006      	beq.n	8003286 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	3301      	adds	r3, #1
 800327c:	61fb      	str	r3, [r7, #28]
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	2b0f      	cmp	r3, #15
 8003282:	d9e9      	bls.n	8003258 <prvInitialiseNewTask+0x5e>
 8003284:	e000      	b.n	8003288 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003286:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	2b37      	cmp	r3, #55	; 0x37
 8003294:	d901      	bls.n	800329a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003296:	2337      	movs	r3, #55	; 0x37
 8003298:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800329e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80032a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032a4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80032a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a8:	2200      	movs	r2, #0
 80032aa:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ae:	3304      	adds	r3, #4
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff f98c 	bl	80025ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b8:	3318      	adds	r3, #24
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff f987 	bl	80025ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80032cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80032d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d8:	2200      	movs	r2, #0
 80032da:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	68f9      	ldr	r1, [r7, #12]
 80032e8:	69b8      	ldr	r0, [r7, #24]
 80032ea:	f001 f8ef 	bl	80044cc <pxPortInitialiseStack>
 80032ee:	4602      	mov	r2, r0
 80032f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80032f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003300:	bf00      	nop
 8003302:	3720      	adds	r7, #32
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003310:	f001 f9cc 	bl	80046ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003314:	4b2d      	ldr	r3, [pc, #180]	; (80033cc <prvAddNewTaskToReadyList+0xc4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3301      	adds	r3, #1
 800331a:	4a2c      	ldr	r2, [pc, #176]	; (80033cc <prvAddNewTaskToReadyList+0xc4>)
 800331c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800331e:	4b2c      	ldr	r3, [pc, #176]	; (80033d0 <prvAddNewTaskToReadyList+0xc8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d109      	bne.n	800333a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003326:	4a2a      	ldr	r2, [pc, #168]	; (80033d0 <prvAddNewTaskToReadyList+0xc8>)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800332c:	4b27      	ldr	r3, [pc, #156]	; (80033cc <prvAddNewTaskToReadyList+0xc4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d110      	bne.n	8003356 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003334:	f000 fc16 	bl	8003b64 <prvInitialiseTaskLists>
 8003338:	e00d      	b.n	8003356 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800333a:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <prvAddNewTaskToReadyList+0xcc>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d109      	bne.n	8003356 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003342:	4b23      	ldr	r3, [pc, #140]	; (80033d0 <prvAddNewTaskToReadyList+0xc8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	429a      	cmp	r2, r3
 800334e:	d802      	bhi.n	8003356 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003350:	4a1f      	ldr	r2, [pc, #124]	; (80033d0 <prvAddNewTaskToReadyList+0xc8>)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003356:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <prvAddNewTaskToReadyList+0xd0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	3301      	adds	r3, #1
 800335c:	4a1e      	ldr	r2, [pc, #120]	; (80033d8 <prvAddNewTaskToReadyList+0xd0>)
 800335e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003360:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <prvAddNewTaskToReadyList+0xd0>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336c:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <prvAddNewTaskToReadyList+0xd4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d903      	bls.n	800337c <prvAddNewTaskToReadyList+0x74>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	4a18      	ldr	r2, [pc, #96]	; (80033dc <prvAddNewTaskToReadyList+0xd4>)
 800337a:	6013      	str	r3, [r2, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4a15      	ldr	r2, [pc, #84]	; (80033e0 <prvAddNewTaskToReadyList+0xd8>)
 800338a:	441a      	add	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3304      	adds	r3, #4
 8003390:	4619      	mov	r1, r3
 8003392:	4610      	mov	r0, r2
 8003394:	f7ff f927 	bl	80025e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003398:	f001 f9b8 	bl	800470c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800339c:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <prvAddNewTaskToReadyList+0xcc>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00e      	beq.n	80033c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80033a4:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <prvAddNewTaskToReadyList+0xc8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d207      	bcs.n	80033c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80033b2:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <prvAddNewTaskToReadyList+0xdc>)
 80033b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000c94 	.word	0x20000c94
 80033d0:	200007c0 	.word	0x200007c0
 80033d4:	20000ca0 	.word	0x20000ca0
 80033d8:	20000cb0 	.word	0x20000cb0
 80033dc:	20000c9c 	.word	0x20000c9c
 80033e0:	200007c4 	.word	0x200007c4
 80033e4:	e000ed04 	.word	0xe000ed04

080033e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d017      	beq.n	800342a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80033fa:	4b13      	ldr	r3, [pc, #76]	; (8003448 <vTaskDelay+0x60>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <vTaskDelay+0x30>
	__asm volatile
 8003402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003406:	f383 8811 	msr	BASEPRI, r3
 800340a:	f3bf 8f6f 	isb	sy
 800340e:	f3bf 8f4f 	dsb	sy
 8003412:	60bb      	str	r3, [r7, #8]
}
 8003414:	bf00      	nop
 8003416:	e7fe      	b.n	8003416 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003418:	f000 f880 	bl	800351c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800341c:	2100      	movs	r1, #0
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fcee 	bl	8003e00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003424:	f000 f888 	bl	8003538 <xTaskResumeAll>
 8003428:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d107      	bne.n	8003440 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003430:	4b06      	ldr	r3, [pc, #24]	; (800344c <vTaskDelay+0x64>)
 8003432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003440:	bf00      	nop
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20000cbc 	.word	0x20000cbc
 800344c:	e000ed04 	.word	0xe000ed04

08003450 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003456:	2300      	movs	r3, #0
 8003458:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800345a:	2300      	movs	r3, #0
 800345c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800345e:	463a      	mov	r2, r7
 8003460:	1d39      	adds	r1, r7, #4
 8003462:	f107 0308 	add.w	r3, r7, #8
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff f860 	bl	800252c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800346c:	6839      	ldr	r1, [r7, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	9202      	str	r2, [sp, #8]
 8003474:	9301      	str	r3, [sp, #4]
 8003476:	2300      	movs	r3, #0
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	2300      	movs	r3, #0
 800347c:	460a      	mov	r2, r1
 800347e:	4921      	ldr	r1, [pc, #132]	; (8003504 <vTaskStartScheduler+0xb4>)
 8003480:	4821      	ldr	r0, [pc, #132]	; (8003508 <vTaskStartScheduler+0xb8>)
 8003482:	f7ff fe19 	bl	80030b8 <xTaskCreateStatic>
 8003486:	4603      	mov	r3, r0
 8003488:	4a20      	ldr	r2, [pc, #128]	; (800350c <vTaskStartScheduler+0xbc>)
 800348a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800348c:	4b1f      	ldr	r3, [pc, #124]	; (800350c <vTaskStartScheduler+0xbc>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003494:	2301      	movs	r3, #1
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	e001      	b.n	800349e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d102      	bne.n	80034aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80034a4:	f000 fd00 	bl	8003ea8 <xTimerCreateTimerTask>
 80034a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d116      	bne.n	80034de <vTaskStartScheduler+0x8e>
	__asm volatile
 80034b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b4:	f383 8811 	msr	BASEPRI, r3
 80034b8:	f3bf 8f6f 	isb	sy
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	613b      	str	r3, [r7, #16]
}
 80034c2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034c4:	4b12      	ldr	r3, [pc, #72]	; (8003510 <vTaskStartScheduler+0xc0>)
 80034c6:	f04f 32ff 	mov.w	r2, #4294967295
 80034ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034cc:	4b11      	ldr	r3, [pc, #68]	; (8003514 <vTaskStartScheduler+0xc4>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80034d2:	4b11      	ldr	r3, [pc, #68]	; (8003518 <vTaskStartScheduler+0xc8>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034d8:	f001 f876 	bl	80045c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034dc:	e00e      	b.n	80034fc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	d10a      	bne.n	80034fc <vTaskStartScheduler+0xac>
	__asm volatile
 80034e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	60fb      	str	r3, [r7, #12]
}
 80034f8:	bf00      	nop
 80034fa:	e7fe      	b.n	80034fa <vTaskStartScheduler+0xaa>
}
 80034fc:	bf00      	nop
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	08004d04 	.word	0x08004d04
 8003508:	08003b35 	.word	0x08003b35
 800350c:	20000cb8 	.word	0x20000cb8
 8003510:	20000cb4 	.word	0x20000cb4
 8003514:	20000ca0 	.word	0x20000ca0
 8003518:	20000c98 	.word	0x20000c98

0800351c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003520:	4b04      	ldr	r3, [pc, #16]	; (8003534 <vTaskSuspendAll+0x18>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3301      	adds	r3, #1
 8003526:	4a03      	ldr	r2, [pc, #12]	; (8003534 <vTaskSuspendAll+0x18>)
 8003528:	6013      	str	r3, [r2, #0]
}
 800352a:	bf00      	nop
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000cbc 	.word	0x20000cbc

08003538 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003542:	2300      	movs	r3, #0
 8003544:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003546:	4b42      	ldr	r3, [pc, #264]	; (8003650 <xTaskResumeAll+0x118>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10a      	bne.n	8003564 <xTaskResumeAll+0x2c>
	__asm volatile
 800354e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003552:	f383 8811 	msr	BASEPRI, r3
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	603b      	str	r3, [r7, #0]
}
 8003560:	bf00      	nop
 8003562:	e7fe      	b.n	8003562 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003564:	f001 f8a2 	bl	80046ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003568:	4b39      	ldr	r3, [pc, #228]	; (8003650 <xTaskResumeAll+0x118>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3b01      	subs	r3, #1
 800356e:	4a38      	ldr	r2, [pc, #224]	; (8003650 <xTaskResumeAll+0x118>)
 8003570:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003572:	4b37      	ldr	r3, [pc, #220]	; (8003650 <xTaskResumeAll+0x118>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d162      	bne.n	8003640 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800357a:	4b36      	ldr	r3, [pc, #216]	; (8003654 <xTaskResumeAll+0x11c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d05e      	beq.n	8003640 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003582:	e02f      	b.n	80035e4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003584:	4b34      	ldr	r3, [pc, #208]	; (8003658 <xTaskResumeAll+0x120>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3318      	adds	r3, #24
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff f883 	bl	800269c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	3304      	adds	r3, #4
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff f87e 	bl	800269c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a4:	4b2d      	ldr	r3, [pc, #180]	; (800365c <xTaskResumeAll+0x124>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d903      	bls.n	80035b4 <xTaskResumeAll+0x7c>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	4a2a      	ldr	r2, [pc, #168]	; (800365c <xTaskResumeAll+0x124>)
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4a27      	ldr	r2, [pc, #156]	; (8003660 <xTaskResumeAll+0x128>)
 80035c2:	441a      	add	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f7ff f80b 	bl	80025e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d4:	4b23      	ldr	r3, [pc, #140]	; (8003664 <xTaskResumeAll+0x12c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035da:	429a      	cmp	r2, r3
 80035dc:	d302      	bcc.n	80035e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80035de:	4b22      	ldr	r3, [pc, #136]	; (8003668 <xTaskResumeAll+0x130>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035e4:	4b1c      	ldr	r3, [pc, #112]	; (8003658 <xTaskResumeAll+0x120>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1cb      	bne.n	8003584 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035f2:	f000 fb55 	bl	8003ca0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80035f6:	4b1d      	ldr	r3, [pc, #116]	; (800366c <xTaskResumeAll+0x134>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d010      	beq.n	8003624 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003602:	f000 f845 	bl	8003690 <xTaskIncrementTick>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800360c:	4b16      	ldr	r3, [pc, #88]	; (8003668 <xTaskResumeAll+0x130>)
 800360e:	2201      	movs	r2, #1
 8003610:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3b01      	subs	r3, #1
 8003616:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f1      	bne.n	8003602 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800361e:	4b13      	ldr	r3, [pc, #76]	; (800366c <xTaskResumeAll+0x134>)
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003624:	4b10      	ldr	r3, [pc, #64]	; (8003668 <xTaskResumeAll+0x130>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d009      	beq.n	8003640 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800362c:	2301      	movs	r3, #1
 800362e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003630:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <xTaskResumeAll+0x138>)
 8003632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003640:	f001 f864 	bl	800470c <vPortExitCritical>

	return xAlreadyYielded;
 8003644:	68bb      	ldr	r3, [r7, #8]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	20000cbc 	.word	0x20000cbc
 8003654:	20000c94 	.word	0x20000c94
 8003658:	20000c54 	.word	0x20000c54
 800365c:	20000c9c 	.word	0x20000c9c
 8003660:	200007c4 	.word	0x200007c4
 8003664:	200007c0 	.word	0x200007c0
 8003668:	20000ca8 	.word	0x20000ca8
 800366c:	20000ca4 	.word	0x20000ca4
 8003670:	e000ed04 	.word	0xe000ed04

08003674 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800367a:	4b04      	ldr	r3, [pc, #16]	; (800368c <xTaskGetTickCount+0x18>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003680:	687b      	ldr	r3, [r7, #4]
}
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr
 800368c:	20000c98 	.word	0x20000c98

08003690 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003696:	2300      	movs	r3, #0
 8003698:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800369a:	4b51      	ldr	r3, [pc, #324]	; (80037e0 <xTaskIncrementTick+0x150>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f040 808e 	bne.w	80037c0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036a4:	4b4f      	ldr	r3, [pc, #316]	; (80037e4 <xTaskIncrementTick+0x154>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3301      	adds	r3, #1
 80036aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80036ac:	4a4d      	ldr	r2, [pc, #308]	; (80037e4 <xTaskIncrementTick+0x154>)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d120      	bne.n	80036fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80036b8:	4b4b      	ldr	r3, [pc, #300]	; (80037e8 <xTaskIncrementTick+0x158>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80036c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c6:	f383 8811 	msr	BASEPRI, r3
 80036ca:	f3bf 8f6f 	isb	sy
 80036ce:	f3bf 8f4f 	dsb	sy
 80036d2:	603b      	str	r3, [r7, #0]
}
 80036d4:	bf00      	nop
 80036d6:	e7fe      	b.n	80036d6 <xTaskIncrementTick+0x46>
 80036d8:	4b43      	ldr	r3, [pc, #268]	; (80037e8 <xTaskIncrementTick+0x158>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	4b43      	ldr	r3, [pc, #268]	; (80037ec <xTaskIncrementTick+0x15c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a41      	ldr	r2, [pc, #260]	; (80037e8 <xTaskIncrementTick+0x158>)
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	4a41      	ldr	r2, [pc, #260]	; (80037ec <xTaskIncrementTick+0x15c>)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	4b40      	ldr	r3, [pc, #256]	; (80037f0 <xTaskIncrementTick+0x160>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3301      	adds	r3, #1
 80036f2:	4a3f      	ldr	r2, [pc, #252]	; (80037f0 <xTaskIncrementTick+0x160>)
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	f000 fad3 	bl	8003ca0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80036fa:	4b3e      	ldr	r3, [pc, #248]	; (80037f4 <xTaskIncrementTick+0x164>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	429a      	cmp	r2, r3
 8003702:	d34e      	bcc.n	80037a2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003704:	4b38      	ldr	r3, [pc, #224]	; (80037e8 <xTaskIncrementTick+0x158>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <xTaskIncrementTick+0x82>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <xTaskIncrementTick+0x84>
 8003712:	2300      	movs	r3, #0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d004      	beq.n	8003722 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003718:	4b36      	ldr	r3, [pc, #216]	; (80037f4 <xTaskIncrementTick+0x164>)
 800371a:	f04f 32ff 	mov.w	r2, #4294967295
 800371e:	601a      	str	r2, [r3, #0]
					break;
 8003720:	e03f      	b.n	80037a2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003722:	4b31      	ldr	r3, [pc, #196]	; (80037e8 <xTaskIncrementTick+0x158>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	429a      	cmp	r2, r3
 8003738:	d203      	bcs.n	8003742 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800373a:	4a2e      	ldr	r2, [pc, #184]	; (80037f4 <xTaskIncrementTick+0x164>)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6013      	str	r3, [r2, #0]
						break;
 8003740:	e02f      	b.n	80037a2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	3304      	adds	r3, #4
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe ffa8 	bl	800269c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003750:	2b00      	cmp	r3, #0
 8003752:	d004      	beq.n	800375e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	3318      	adds	r3, #24
 8003758:	4618      	mov	r0, r3
 800375a:	f7fe ff9f 	bl	800269c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003762:	4b25      	ldr	r3, [pc, #148]	; (80037f8 <xTaskIncrementTick+0x168>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d903      	bls.n	8003772 <xTaskIncrementTick+0xe2>
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	4a22      	ldr	r2, [pc, #136]	; (80037f8 <xTaskIncrementTick+0x168>)
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4a1f      	ldr	r2, [pc, #124]	; (80037fc <xTaskIncrementTick+0x16c>)
 8003780:	441a      	add	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	3304      	adds	r3, #4
 8003786:	4619      	mov	r1, r3
 8003788:	4610      	mov	r0, r2
 800378a:	f7fe ff2c 	bl	80025e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003792:	4b1b      	ldr	r3, [pc, #108]	; (8003800 <xTaskIncrementTick+0x170>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	429a      	cmp	r2, r3
 800379a:	d3b3      	bcc.n	8003704 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800379c:	2301      	movs	r3, #1
 800379e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037a0:	e7b0      	b.n	8003704 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037a2:	4b17      	ldr	r3, [pc, #92]	; (8003800 <xTaskIncrementTick+0x170>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a8:	4914      	ldr	r1, [pc, #80]	; (80037fc <xTaskIncrementTick+0x16c>)
 80037aa:	4613      	mov	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d907      	bls.n	80037ca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80037ba:	2301      	movs	r3, #1
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	e004      	b.n	80037ca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80037c0:	4b10      	ldr	r3, [pc, #64]	; (8003804 <xTaskIncrementTick+0x174>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3301      	adds	r3, #1
 80037c6:	4a0f      	ldr	r2, [pc, #60]	; (8003804 <xTaskIncrementTick+0x174>)
 80037c8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80037ca:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <xTaskIncrementTick+0x178>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80037d2:	2301      	movs	r3, #1
 80037d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80037d6:	697b      	ldr	r3, [r7, #20]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20000cbc 	.word	0x20000cbc
 80037e4:	20000c98 	.word	0x20000c98
 80037e8:	20000c4c 	.word	0x20000c4c
 80037ec:	20000c50 	.word	0x20000c50
 80037f0:	20000cac 	.word	0x20000cac
 80037f4:	20000cb4 	.word	0x20000cb4
 80037f8:	20000c9c 	.word	0x20000c9c
 80037fc:	200007c4 	.word	0x200007c4
 8003800:	200007c0 	.word	0x200007c0
 8003804:	20000ca4 	.word	0x20000ca4
 8003808:	20000ca8 	.word	0x20000ca8

0800380c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003812:	4b27      	ldr	r3, [pc, #156]	; (80038b0 <vTaskSwitchContext+0xa4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800381a:	4b26      	ldr	r3, [pc, #152]	; (80038b4 <vTaskSwitchContext+0xa8>)
 800381c:	2201      	movs	r2, #1
 800381e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003820:	e041      	b.n	80038a6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003822:	4b24      	ldr	r3, [pc, #144]	; (80038b4 <vTaskSwitchContext+0xa8>)
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003828:	4b23      	ldr	r3, [pc, #140]	; (80038b8 <vTaskSwitchContext+0xac>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	e010      	b.n	8003852 <vTaskSwitchContext+0x46>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10a      	bne.n	800384c <vTaskSwitchContext+0x40>
	__asm volatile
 8003836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	607b      	str	r3, [r7, #4]
}
 8003848:	bf00      	nop
 800384a:	e7fe      	b.n	800384a <vTaskSwitchContext+0x3e>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	3b01      	subs	r3, #1
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	491a      	ldr	r1, [pc, #104]	; (80038bc <vTaskSwitchContext+0xb0>)
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0e4      	beq.n	8003830 <vTaskSwitchContext+0x24>
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4a12      	ldr	r2, [pc, #72]	; (80038bc <vTaskSwitchContext+0xb0>)
 8003872:	4413      	add	r3, r2
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	605a      	str	r2, [r3, #4]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	3308      	adds	r3, #8
 8003888:	429a      	cmp	r2, r3
 800388a:	d104      	bne.n	8003896 <vTaskSwitchContext+0x8a>
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4a08      	ldr	r2, [pc, #32]	; (80038c0 <vTaskSwitchContext+0xb4>)
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	4a05      	ldr	r2, [pc, #20]	; (80038b8 <vTaskSwitchContext+0xac>)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6013      	str	r3, [r2, #0]
}
 80038a6:	bf00      	nop
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr
 80038b0:	20000cbc 	.word	0x20000cbc
 80038b4:	20000ca8 	.word	0x20000ca8
 80038b8:	20000c9c 	.word	0x20000c9c
 80038bc:	200007c4 	.word	0x200007c4
 80038c0:	200007c0 	.word	0x200007c0

080038c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10a      	bne.n	80038ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80038d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d8:	f383 8811 	msr	BASEPRI, r3
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	60fb      	str	r3, [r7, #12]
}
 80038e6:	bf00      	nop
 80038e8:	e7fe      	b.n	80038e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038ea:	4b07      	ldr	r3, [pc, #28]	; (8003908 <vTaskPlaceOnEventList+0x44>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3318      	adds	r3, #24
 80038f0:	4619      	mov	r1, r3
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fe fe9a 	bl	800262c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038f8:	2101      	movs	r1, #1
 80038fa:	6838      	ldr	r0, [r7, #0]
 80038fc:	f000 fa80 	bl	8003e00 <prvAddCurrentTaskToDelayedList>
}
 8003900:	bf00      	nop
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	200007c0 	.word	0x200007c0

0800390c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10a      	bne.n	8003934 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	617b      	str	r3, [r7, #20]
}
 8003930:	bf00      	nop
 8003932:	e7fe      	b.n	8003932 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003934:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <vTaskPlaceOnEventListRestricted+0x54>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3318      	adds	r3, #24
 800393a:	4619      	mov	r1, r3
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f7fe fe52 	bl	80025e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003948:	f04f 33ff 	mov.w	r3, #4294967295
 800394c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	68b8      	ldr	r0, [r7, #8]
 8003952:	f000 fa55 	bl	8003e00 <prvAddCurrentTaskToDelayedList>
	}
 8003956:	bf00      	nop
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	200007c0 	.word	0x200007c0

08003964 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10a      	bne.n	8003990 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	60fb      	str	r3, [r7, #12]
}
 800398c:	bf00      	nop
 800398e:	e7fe      	b.n	800398e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	3318      	adds	r3, #24
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe fe81 	bl	800269c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800399a:	4b1e      	ldr	r3, [pc, #120]	; (8003a14 <xTaskRemoveFromEventList+0xb0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d11d      	bne.n	80039de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	3304      	adds	r3, #4
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fe fe78 	bl	800269c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b0:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <xTaskRemoveFromEventList+0xb4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d903      	bls.n	80039c0 <xTaskRemoveFromEventList+0x5c>
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	4a16      	ldr	r2, [pc, #88]	; (8003a18 <xTaskRemoveFromEventList+0xb4>)
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4a13      	ldr	r2, [pc, #76]	; (8003a1c <xTaskRemoveFromEventList+0xb8>)
 80039ce:	441a      	add	r2, r3
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	3304      	adds	r3, #4
 80039d4:	4619      	mov	r1, r3
 80039d6:	4610      	mov	r0, r2
 80039d8:	f7fe fe05 	bl	80025e6 <vListInsertEnd>
 80039dc:	e005      	b.n	80039ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	3318      	adds	r3, #24
 80039e2:	4619      	mov	r1, r3
 80039e4:	480e      	ldr	r0, [pc, #56]	; (8003a20 <xTaskRemoveFromEventList+0xbc>)
 80039e6:	f7fe fdfe 	bl	80025e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ee:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <xTaskRemoveFromEventList+0xc0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d905      	bls.n	8003a04 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80039f8:	2301      	movs	r3, #1
 80039fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80039fc:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <xTaskRemoveFromEventList+0xc4>)
 80039fe:	2201      	movs	r2, #1
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	e001      	b.n	8003a08 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003a08:	697b      	ldr	r3, [r7, #20]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000cbc 	.word	0x20000cbc
 8003a18:	20000c9c 	.word	0x20000c9c
 8003a1c:	200007c4 	.word	0x200007c4
 8003a20:	20000c54 	.word	0x20000c54
 8003a24:	200007c0 	.word	0x200007c0
 8003a28:	20000ca8 	.word	0x20000ca8

08003a2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <vTaskInternalSetTimeOutState+0x24>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a3c:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <vTaskInternalSetTimeOutState+0x28>)
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	605a      	str	r2, [r3, #4]
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	20000cac 	.word	0x20000cac
 8003a54:	20000c98 	.word	0x20000c98

08003a58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10a      	bne.n	8003a7e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	613b      	str	r3, [r7, #16]
}
 8003a7a:	bf00      	nop
 8003a7c:	e7fe      	b.n	8003a7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	60fb      	str	r3, [r7, #12]
}
 8003a96:	bf00      	nop
 8003a98:	e7fe      	b.n	8003a98 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003a9a:	f000 fe07 	bl	80046ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <xTaskCheckForTimeOut+0xbc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab6:	d102      	bne.n	8003abe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61fb      	str	r3, [r7, #28]
 8003abc:	e023      	b.n	8003b06 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <xTaskCheckForTimeOut+0xc0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d007      	beq.n	8003ada <xTaskCheckForTimeOut+0x82>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d302      	bcc.n	8003ada <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	e015      	b.n	8003b06 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d20b      	bcs.n	8003afc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	1ad2      	subs	r2, r2, r3
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff ff9b 	bl	8003a2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	e004      	b.n	8003b06 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b02:	2301      	movs	r3, #1
 8003b04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b06:	f000 fe01 	bl	800470c <vPortExitCritical>

	return xReturn;
 8003b0a:	69fb      	ldr	r3, [r7, #28]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3720      	adds	r7, #32
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20000c98 	.word	0x20000c98
 8003b18:	20000cac 	.word	0x20000cac

08003b1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b20:	4b03      	ldr	r3, [pc, #12]	; (8003b30 <vTaskMissedYield+0x14>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	601a      	str	r2, [r3, #0]
}
 8003b26:	bf00      	nop
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	20000ca8 	.word	0x20000ca8

08003b34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b3c:	f000 f852 	bl	8003be4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b40:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <prvIdleTask+0x28>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d9f9      	bls.n	8003b3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b48:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <prvIdleTask+0x2c>)
 8003b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b58:	e7f0      	b.n	8003b3c <prvIdleTask+0x8>
 8003b5a:	bf00      	nop
 8003b5c:	200007c4 	.word	0x200007c4
 8003b60:	e000ed04 	.word	0xe000ed04

08003b64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	607b      	str	r3, [r7, #4]
 8003b6e:	e00c      	b.n	8003b8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <prvInitialiseTaskLists+0x60>)
 8003b7c:	4413      	add	r3, r2
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fe fd06 	bl	8002590 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3301      	adds	r3, #1
 8003b88:	607b      	str	r3, [r7, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b37      	cmp	r3, #55	; 0x37
 8003b8e:	d9ef      	bls.n	8003b70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b90:	480d      	ldr	r0, [pc, #52]	; (8003bc8 <prvInitialiseTaskLists+0x64>)
 8003b92:	f7fe fcfd 	bl	8002590 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b96:	480d      	ldr	r0, [pc, #52]	; (8003bcc <prvInitialiseTaskLists+0x68>)
 8003b98:	f7fe fcfa 	bl	8002590 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b9c:	480c      	ldr	r0, [pc, #48]	; (8003bd0 <prvInitialiseTaskLists+0x6c>)
 8003b9e:	f7fe fcf7 	bl	8002590 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ba2:	480c      	ldr	r0, [pc, #48]	; (8003bd4 <prvInitialiseTaskLists+0x70>)
 8003ba4:	f7fe fcf4 	bl	8002590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ba8:	480b      	ldr	r0, [pc, #44]	; (8003bd8 <prvInitialiseTaskLists+0x74>)
 8003baa:	f7fe fcf1 	bl	8002590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bae:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <prvInitialiseTaskLists+0x78>)
 8003bb0:	4a05      	ldr	r2, [pc, #20]	; (8003bc8 <prvInitialiseTaskLists+0x64>)
 8003bb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bb4:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <prvInitialiseTaskLists+0x7c>)
 8003bb6:	4a05      	ldr	r2, [pc, #20]	; (8003bcc <prvInitialiseTaskLists+0x68>)
 8003bb8:	601a      	str	r2, [r3, #0]
}
 8003bba:	bf00      	nop
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	200007c4 	.word	0x200007c4
 8003bc8:	20000c24 	.word	0x20000c24
 8003bcc:	20000c38 	.word	0x20000c38
 8003bd0:	20000c54 	.word	0x20000c54
 8003bd4:	20000c68 	.word	0x20000c68
 8003bd8:	20000c80 	.word	0x20000c80
 8003bdc:	20000c4c 	.word	0x20000c4c
 8003be0:	20000c50 	.word	0x20000c50

08003be4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bea:	e019      	b.n	8003c20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003bec:	f000 fd5e 	bl	80046ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003bf0:	4b10      	ldr	r3, [pc, #64]	; (8003c34 <prvCheckTasksWaitingTermination+0x50>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fe fd4d 	bl	800269c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c02:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <prvCheckTasksWaitingTermination+0x54>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	4a0b      	ldr	r2, [pc, #44]	; (8003c38 <prvCheckTasksWaitingTermination+0x54>)
 8003c0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <prvCheckTasksWaitingTermination+0x58>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	4a0a      	ldr	r2, [pc, #40]	; (8003c3c <prvCheckTasksWaitingTermination+0x58>)
 8003c14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c16:	f000 fd79 	bl	800470c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f810 	bl	8003c40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c20:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <prvCheckTasksWaitingTermination+0x58>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1e1      	bne.n	8003bec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c28:	bf00      	nop
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000c68 	.word	0x20000c68
 8003c38:	20000c94 	.word	0x20000c94
 8003c3c:	20000c7c 	.word	0x20000c7c

08003c40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d108      	bne.n	8003c64 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 feec 	bl	8004a34 <vPortFree>
				vPortFree( pxTCB );
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fee9 	bl	8004a34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c62:	e018      	b.n	8003c96 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d103      	bne.n	8003c76 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fee0 	bl	8004a34 <vPortFree>
	}
 8003c74:	e00f      	b.n	8003c96 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d00a      	beq.n	8003c96 <prvDeleteTCB+0x56>
	__asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	60fb      	str	r3, [r7, #12]
}
 8003c92:	bf00      	nop
 8003c94:	e7fe      	b.n	8003c94 <prvDeleteTCB+0x54>
	}
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ca6:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <prvResetNextTaskUnblockTime+0x40>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <prvResetNextTaskUnblockTime+0x14>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <prvResetNextTaskUnblockTime+0x16>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d004      	beq.n	8003cc4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cba:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <prvResetNextTaskUnblockTime+0x44>)
 8003cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003cc2:	e008      	b.n	8003cd6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cc4:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <prvResetNextTaskUnblockTime+0x40>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	4a04      	ldr	r2, [pc, #16]	; (8003ce4 <prvResetNextTaskUnblockTime+0x44>)
 8003cd4:	6013      	str	r3, [r2, #0]
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr
 8003ce0:	20000c4c 	.word	0x20000c4c
 8003ce4:	20000cb4 	.word	0x20000cb4

08003ce8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003cee:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <xTaskGetSchedulerState+0x34>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d102      	bne.n	8003cfc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	607b      	str	r3, [r7, #4]
 8003cfa:	e008      	b.n	8003d0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cfc:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <xTaskGetSchedulerState+0x38>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d102      	bne.n	8003d0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d04:	2302      	movs	r3, #2
 8003d06:	607b      	str	r3, [r7, #4]
 8003d08:	e001      	b.n	8003d0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d0e:	687b      	ldr	r3, [r7, #4]
	}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20000ca0 	.word	0x20000ca0
 8003d20:	20000cbc 	.word	0x20000cbc

08003d24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d056      	beq.n	8003de8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d3a:	4b2e      	ldr	r3, [pc, #184]	; (8003df4 <xTaskPriorityDisinherit+0xd0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d00a      	beq.n	8003d5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	60fb      	str	r3, [r7, #12]
}
 8003d56:	bf00      	nop
 8003d58:	e7fe      	b.n	8003d58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	60bb      	str	r3, [r7, #8]
}
 8003d74:	bf00      	nop
 8003d76:	e7fe      	b.n	8003d76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7c:	1e5a      	subs	r2, r3, #1
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d02c      	beq.n	8003de8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d128      	bne.n	8003de8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe fc7e 	bl	800269c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db8:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <xTaskPriorityDisinherit+0xd4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d903      	bls.n	8003dc8 <xTaskPriorityDisinherit+0xa4>
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	4a0c      	ldr	r2, [pc, #48]	; (8003df8 <xTaskPriorityDisinherit+0xd4>)
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dcc:	4613      	mov	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4a09      	ldr	r2, [pc, #36]	; (8003dfc <xTaskPriorityDisinherit+0xd8>)
 8003dd6:	441a      	add	r2, r3
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4610      	mov	r0, r2
 8003de0:	f7fe fc01 	bl	80025e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003de4:	2301      	movs	r3, #1
 8003de6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003de8:	697b      	ldr	r3, [r7, #20]
	}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	200007c0 	.word	0x200007c0
 8003df8:	20000c9c 	.word	0x20000c9c
 8003dfc:	200007c4 	.word	0x200007c4

08003e00 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e0a:	4b21      	ldr	r3, [pc, #132]	; (8003e90 <prvAddCurrentTaskToDelayedList+0x90>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e10:	4b20      	ldr	r3, [pc, #128]	; (8003e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3304      	adds	r3, #4
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fe fc40 	bl	800269c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e22:	d10a      	bne.n	8003e3a <prvAddCurrentTaskToDelayedList+0x3a>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d007      	beq.n	8003e3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e2a:	4b1a      	ldr	r3, [pc, #104]	; (8003e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	4619      	mov	r1, r3
 8003e32:	4819      	ldr	r0, [pc, #100]	; (8003e98 <prvAddCurrentTaskToDelayedList+0x98>)
 8003e34:	f7fe fbd7 	bl	80025e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e38:	e026      	b.n	8003e88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4413      	add	r3, r2
 8003e40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e42:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d209      	bcs.n	8003e66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e52:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	f7fe fbe4 	bl	800262c <vListInsert>
}
 8003e64:	e010      	b.n	8003e88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e66:	4b0e      	ldr	r3, [pc, #56]	; (8003ea0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	4619      	mov	r1, r3
 8003e72:	4610      	mov	r0, r2
 8003e74:	f7fe fbda 	bl	800262c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e78:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d202      	bcs.n	8003e88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003e82:	4a08      	ldr	r2, [pc, #32]	; (8003ea4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	6013      	str	r3, [r2, #0]
}
 8003e88:	bf00      	nop
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20000c98 	.word	0x20000c98
 8003e94:	200007c0 	.word	0x200007c0
 8003e98:	20000c80 	.word	0x20000c80
 8003e9c:	20000c50 	.word	0x20000c50
 8003ea0:	20000c4c 	.word	0x20000c4c
 8003ea4:	20000cb4 	.word	0x20000cb4

08003ea8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08a      	sub	sp, #40	; 0x28
 8003eac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003eb2:	f000 facb 	bl	800444c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003eb6:	4b1c      	ldr	r3, [pc, #112]	; (8003f28 <xTimerCreateTimerTask+0x80>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d021      	beq.n	8003f02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003ec6:	1d3a      	adds	r2, r7, #4
 8003ec8:	f107 0108 	add.w	r1, r7, #8
 8003ecc:	f107 030c 	add.w	r3, r7, #12
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fe fb43 	bl	800255c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	9202      	str	r2, [sp, #8]
 8003ede:	9301      	str	r3, [sp, #4]
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	460a      	mov	r2, r1
 8003ee8:	4910      	ldr	r1, [pc, #64]	; (8003f2c <xTimerCreateTimerTask+0x84>)
 8003eea:	4811      	ldr	r0, [pc, #68]	; (8003f30 <xTimerCreateTimerTask+0x88>)
 8003eec:	f7ff f8e4 	bl	80030b8 <xTaskCreateStatic>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	4a10      	ldr	r2, [pc, #64]	; (8003f34 <xTimerCreateTimerTask+0x8c>)
 8003ef4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003ef6:	4b0f      	ldr	r3, [pc, #60]	; (8003f34 <xTimerCreateTimerTask+0x8c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003efe:	2301      	movs	r3, #1
 8003f00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10a      	bne.n	8003f1e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	613b      	str	r3, [r7, #16]
}
 8003f1a:	bf00      	nop
 8003f1c:	e7fe      	b.n	8003f1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003f1e:	697b      	ldr	r3, [r7, #20]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	20000cf0 	.word	0x20000cf0
 8003f2c:	08004d0c 	.word	0x08004d0c
 8003f30:	08004055 	.word	0x08004055
 8003f34:	20000cf4 	.word	0x20000cf4

08003f38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08a      	sub	sp, #40	; 0x28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10a      	bne.n	8003f66 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	623b      	str	r3, [r7, #32]
}
 8003f62:	bf00      	nop
 8003f64:	e7fe      	b.n	8003f64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003f66:	4b1a      	ldr	r3, [pc, #104]	; (8003fd0 <xTimerGenericCommand+0x98>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d02a      	beq.n	8003fc4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b05      	cmp	r3, #5
 8003f7e:	dc18      	bgt.n	8003fb2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f80:	f7ff feb2 	bl	8003ce8 <xTaskGetSchedulerState>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d109      	bne.n	8003f9e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f8a:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <xTimerGenericCommand+0x98>)
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	f107 0110 	add.w	r1, r7, #16
 8003f92:	2300      	movs	r3, #0
 8003f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f96:	f7fe fcad 	bl	80028f4 <xQueueGenericSend>
 8003f9a:	6278      	str	r0, [r7, #36]	; 0x24
 8003f9c:	e012      	b.n	8003fc4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f9e:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <xTimerGenericCommand+0x98>)
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	f107 0110 	add.w	r1, r7, #16
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f7fe fca3 	bl	80028f4 <xQueueGenericSend>
 8003fae:	6278      	str	r0, [r7, #36]	; 0x24
 8003fb0:	e008      	b.n	8003fc4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003fb2:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <xTimerGenericCommand+0x98>)
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	f107 0110 	add.w	r1, r7, #16
 8003fba:	2300      	movs	r3, #0
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	f7fe fd97 	bl	8002af0 <xQueueGenericSendFromISR>
 8003fc2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3728      	adds	r7, #40	; 0x28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000cf0 	.word	0x20000cf0

08003fd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b088      	sub	sp, #32
 8003fd8:	af02      	add	r7, sp, #8
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fde:	4b1c      	ldr	r3, [pc, #112]	; (8004050 <prvProcessExpiredTimer+0x7c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	3304      	adds	r3, #4
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fe fb55 	bl	800269c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d122      	bne.n	8004040 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	18d1      	adds	r1, r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	6978      	ldr	r0, [r7, #20]
 8004008:	f000 f8c8 	bl	800419c <prvInsertTimerInActiveList>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d016      	beq.n	8004040 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004012:	2300      	movs	r3, #0
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	2300      	movs	r3, #0
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	2100      	movs	r1, #0
 800401c:	6978      	ldr	r0, [r7, #20]
 800401e:	f7ff ff8b 	bl	8003f38 <xTimerGenericCommand>
 8004022:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10a      	bne.n	8004040 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800402a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402e:	f383 8811 	msr	BASEPRI, r3
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	60fb      	str	r3, [r7, #12]
}
 800403c:	bf00      	nop
 800403e:	e7fe      	b.n	800403e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	6978      	ldr	r0, [r7, #20]
 8004046:	4798      	blx	r3
}
 8004048:	bf00      	nop
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	20000ce8 	.word	0x20000ce8

08004054 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800405c:	f107 0308 	add.w	r3, r7, #8
 8004060:	4618      	mov	r0, r3
 8004062:	f000 f857 	bl	8004114 <prvGetNextExpireTime>
 8004066:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4619      	mov	r1, r3
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 f803 	bl	8004078 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004072:	f000 f8d5 	bl	8004220 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004076:	e7f1      	b.n	800405c <prvTimerTask+0x8>

08004078 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004082:	f7ff fa4b 	bl	800351c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004086:	f107 0308 	add.w	r3, r7, #8
 800408a:	4618      	mov	r0, r3
 800408c:	f000 f866 	bl	800415c <prvSampleTimeNow>
 8004090:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d130      	bne.n	80040fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10a      	bne.n	80040b4 <prvProcessTimerOrBlockTask+0x3c>
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d806      	bhi.n	80040b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80040a6:	f7ff fa47 	bl	8003538 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040aa:	68f9      	ldr	r1, [r7, #12]
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff ff91 	bl	8003fd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80040b2:	e024      	b.n	80040fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d008      	beq.n	80040cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040ba:	4b13      	ldr	r3, [pc, #76]	; (8004108 <prvProcessTimerOrBlockTask+0x90>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	bf0c      	ite	eq
 80040c4:	2301      	moveq	r3, #1
 80040c6:	2300      	movne	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <prvProcessTimerOrBlockTask+0x94>)
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	4619      	mov	r1, r3
 80040da:	f7fe ffb9 	bl	8003050 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80040de:	f7ff fa2b 	bl	8003538 <xTaskResumeAll>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10a      	bne.n	80040fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80040e8:	4b09      	ldr	r3, [pc, #36]	; (8004110 <prvProcessTimerOrBlockTask+0x98>)
 80040ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	f3bf 8f6f 	isb	sy
}
 80040f8:	e001      	b.n	80040fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80040fa:	f7ff fa1d 	bl	8003538 <xTaskResumeAll>
}
 80040fe:	bf00      	nop
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20000cec 	.word	0x20000cec
 800410c:	20000cf0 	.word	0x20000cf0
 8004110:	e000ed04 	.word	0xe000ed04

08004114 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800411c:	4b0e      	ldr	r3, [pc, #56]	; (8004158 <prvGetNextExpireTime+0x44>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	bf0c      	ite	eq
 8004126:	2301      	moveq	r3, #1
 8004128:	2300      	movne	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	461a      	mov	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d105      	bne.n	8004146 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800413a:	4b07      	ldr	r3, [pc, #28]	; (8004158 <prvGetNextExpireTime+0x44>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	e001      	b.n	800414a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800414a:	68fb      	ldr	r3, [r7, #12]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	20000ce8 	.word	0x20000ce8

0800415c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004164:	f7ff fa86 	bl	8003674 <xTaskGetTickCount>
 8004168:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800416a:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <prvSampleTimeNow+0x3c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	429a      	cmp	r2, r3
 8004172:	d205      	bcs.n	8004180 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004174:	f000 f908 	bl	8004388 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	e002      	b.n	8004186 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004186:	4a04      	ldr	r2, [pc, #16]	; (8004198 <prvSampleTimeNow+0x3c>)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800418c:	68fb      	ldr	r3, [r7, #12]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000cf8 	.word	0x20000cf8

0800419c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d812      	bhi.n	80041e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	1ad2      	subs	r2, r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d302      	bcc.n	80041d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80041d0:	2301      	movs	r3, #1
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	e01b      	b.n	800420e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041d6:	4b10      	ldr	r3, [pc, #64]	; (8004218 <prvInsertTimerInActiveList+0x7c>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3304      	adds	r3, #4
 80041de:	4619      	mov	r1, r3
 80041e0:	4610      	mov	r0, r2
 80041e2:	f7fe fa23 	bl	800262c <vListInsert>
 80041e6:	e012      	b.n	800420e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d206      	bcs.n	80041fe <prvInsertTimerInActiveList+0x62>
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d302      	bcc.n	80041fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80041f8:	2301      	movs	r3, #1
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	e007      	b.n	800420e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041fe:	4b07      	ldr	r3, [pc, #28]	; (800421c <prvInsertTimerInActiveList+0x80>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3304      	adds	r3, #4
 8004206:	4619      	mov	r1, r3
 8004208:	4610      	mov	r0, r2
 800420a:	f7fe fa0f 	bl	800262c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800420e:	697b      	ldr	r3, [r7, #20]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20000cec 	.word	0x20000cec
 800421c:	20000ce8 	.word	0x20000ce8

08004220 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08e      	sub	sp, #56	; 0x38
 8004224:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004226:	e09d      	b.n	8004364 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	da18      	bge.n	8004260 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800422e:	1d3b      	adds	r3, r7, #4
 8004230:	3304      	adds	r3, #4
 8004232:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10a      	bne.n	8004250 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800423a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	61fb      	str	r3, [r7, #28]
}
 800424c:	bf00      	nop
 800424e:	e7fe      	b.n	800424e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004256:	6850      	ldr	r0, [r2, #4]
 8004258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800425a:	6892      	ldr	r2, [r2, #8]
 800425c:	4611      	mov	r1, r2
 800425e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	db7d      	blt.n	8004362 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d004      	beq.n	800427c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004274:	3304      	adds	r3, #4
 8004276:	4618      	mov	r0, r3
 8004278:	f7fe fa10 	bl	800269c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800427c:	463b      	mov	r3, r7
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff ff6c 	bl	800415c <prvSampleTimeNow>
 8004284:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b09      	cmp	r3, #9
 800428a:	d86b      	bhi.n	8004364 <prvProcessReceivedCommands+0x144>
 800428c:	a201      	add	r2, pc, #4	; (adr r2, 8004294 <prvProcessReceivedCommands+0x74>)
 800428e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004292:	bf00      	nop
 8004294:	080042bd 	.word	0x080042bd
 8004298:	080042bd 	.word	0x080042bd
 800429c:	080042bd 	.word	0x080042bd
 80042a0:	08004365 	.word	0x08004365
 80042a4:	08004319 	.word	0x08004319
 80042a8:	08004351 	.word	0x08004351
 80042ac:	080042bd 	.word	0x080042bd
 80042b0:	080042bd 	.word	0x080042bd
 80042b4:	08004365 	.word	0x08004365
 80042b8:	08004319 	.word	0x08004319
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	18d1      	adds	r1, r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042ca:	f7ff ff67 	bl	800419c <prvInsertTimerInActiveList>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d047      	beq.n	8004364 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042da:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d13f      	bne.n	8004364 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	441a      	add	r2, r3
 80042ec:	2300      	movs	r3, #0
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	2300      	movs	r3, #0
 80042f2:	2100      	movs	r1, #0
 80042f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042f6:	f7ff fe1f 	bl	8003f38 <xTimerGenericCommand>
 80042fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d130      	bne.n	8004364 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	61bb      	str	r3, [r7, #24]
}
 8004314:	bf00      	nop
 8004316:	e7fe      	b.n	8004316 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800431e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10a      	bne.n	800433c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	617b      	str	r3, [r7, #20]
}
 8004338:	bf00      	nop
 800433a:	e7fe      	b.n	800433a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800433c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433e:	699a      	ldr	r2, [r3, #24]
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	18d1      	adds	r1, r2, r3
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800434a:	f7ff ff27 	bl	800419c <prvInsertTimerInActiveList>
					break;
 800434e:	e009      	b.n	8004364 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004352:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004356:	2b00      	cmp	r3, #0
 8004358:	d104      	bne.n	8004364 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800435a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800435c:	f000 fb6a 	bl	8004a34 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004360:	e000      	b.n	8004364 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004362:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004364:	4b07      	ldr	r3, [pc, #28]	; (8004384 <prvProcessReceivedCommands+0x164>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	1d39      	adds	r1, r7, #4
 800436a:	2200      	movs	r2, #0
 800436c:	4618      	mov	r0, r3
 800436e:	f7fe fc57 	bl	8002c20 <xQueueReceive>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	f47f af57 	bne.w	8004228 <prvProcessReceivedCommands+0x8>
	}
}
 800437a:	bf00      	nop
 800437c:	bf00      	nop
 800437e:	3730      	adds	r7, #48	; 0x30
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20000cf0 	.word	0x20000cf0

08004388 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800438e:	e045      	b.n	800441c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004390:	4b2c      	ldr	r3, [pc, #176]	; (8004444 <prvSwitchTimerLists+0xbc>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800439a:	4b2a      	ldr	r3, [pc, #168]	; (8004444 <prvSwitchTimerLists+0xbc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fe f977 	bl	800269c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d12e      	bne.n	800441c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	4413      	add	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d90e      	bls.n	80043ee <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043dc:	4b19      	ldr	r3, [pc, #100]	; (8004444 <prvSwitchTimerLists+0xbc>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3304      	adds	r3, #4
 80043e4:	4619      	mov	r1, r3
 80043e6:	4610      	mov	r0, r2
 80043e8:	f7fe f920 	bl	800262c <vListInsert>
 80043ec:	e016      	b.n	800441c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043ee:	2300      	movs	r3, #0
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	2300      	movs	r3, #0
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	2100      	movs	r1, #0
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7ff fd9d 	bl	8003f38 <xTimerGenericCommand>
 80043fe:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <prvSwitchTimerLists+0x94>
	__asm volatile
 8004406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	603b      	str	r3, [r7, #0]
}
 8004418:	bf00      	nop
 800441a:	e7fe      	b.n	800441a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800441c:	4b09      	ldr	r3, [pc, #36]	; (8004444 <prvSwitchTimerLists+0xbc>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1b4      	bne.n	8004390 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004426:	4b07      	ldr	r3, [pc, #28]	; (8004444 <prvSwitchTimerLists+0xbc>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800442c:	4b06      	ldr	r3, [pc, #24]	; (8004448 <prvSwitchTimerLists+0xc0>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a04      	ldr	r2, [pc, #16]	; (8004444 <prvSwitchTimerLists+0xbc>)
 8004432:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004434:	4a04      	ldr	r2, [pc, #16]	; (8004448 <prvSwitchTimerLists+0xc0>)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	6013      	str	r3, [r2, #0]
}
 800443a:	bf00      	nop
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20000ce8 	.word	0x20000ce8
 8004448:	20000cec 	.word	0x20000cec

0800444c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004452:	f000 f92b 	bl	80046ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004456:	4b15      	ldr	r3, [pc, #84]	; (80044ac <prvCheckForValidListAndQueue+0x60>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d120      	bne.n	80044a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800445e:	4814      	ldr	r0, [pc, #80]	; (80044b0 <prvCheckForValidListAndQueue+0x64>)
 8004460:	f7fe f896 	bl	8002590 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004464:	4813      	ldr	r0, [pc, #76]	; (80044b4 <prvCheckForValidListAndQueue+0x68>)
 8004466:	f7fe f893 	bl	8002590 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800446a:	4b13      	ldr	r3, [pc, #76]	; (80044b8 <prvCheckForValidListAndQueue+0x6c>)
 800446c:	4a10      	ldr	r2, [pc, #64]	; (80044b0 <prvCheckForValidListAndQueue+0x64>)
 800446e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004470:	4b12      	ldr	r3, [pc, #72]	; (80044bc <prvCheckForValidListAndQueue+0x70>)
 8004472:	4a10      	ldr	r2, [pc, #64]	; (80044b4 <prvCheckForValidListAndQueue+0x68>)
 8004474:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004476:	2300      	movs	r3, #0
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	4b11      	ldr	r3, [pc, #68]	; (80044c0 <prvCheckForValidListAndQueue+0x74>)
 800447c:	4a11      	ldr	r2, [pc, #68]	; (80044c4 <prvCheckForValidListAndQueue+0x78>)
 800447e:	2110      	movs	r1, #16
 8004480:	200a      	movs	r0, #10
 8004482:	f7fe f99d 	bl	80027c0 <xQueueGenericCreateStatic>
 8004486:	4603      	mov	r3, r0
 8004488:	4a08      	ldr	r2, [pc, #32]	; (80044ac <prvCheckForValidListAndQueue+0x60>)
 800448a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800448c:	4b07      	ldr	r3, [pc, #28]	; (80044ac <prvCheckForValidListAndQueue+0x60>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <prvCheckForValidListAndQueue+0x60>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	490b      	ldr	r1, [pc, #44]	; (80044c8 <prvCheckForValidListAndQueue+0x7c>)
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe fdb0 	bl	8003000 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044a0:	f000 f934 	bl	800470c <vPortExitCritical>
}
 80044a4:	bf00      	nop
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20000cf0 	.word	0x20000cf0
 80044b0:	20000cc0 	.word	0x20000cc0
 80044b4:	20000cd4 	.word	0x20000cd4
 80044b8:	20000ce8 	.word	0x20000ce8
 80044bc:	20000cec 	.word	0x20000cec
 80044c0:	20000d9c 	.word	0x20000d9c
 80044c4:	20000cfc 	.word	0x20000cfc
 80044c8:	08004d14 	.word	0x08004d14

080044cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3b04      	subs	r3, #4
 80044dc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	3b04      	subs	r3, #4
 80044ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f023 0201 	bic.w	r2, r3, #1
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	3b04      	subs	r3, #4
 80044fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044fc:	4a08      	ldr	r2, [pc, #32]	; (8004520 <pxPortInitialiseStack+0x54>)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3b14      	subs	r3, #20
 8004506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3b20      	subs	r3, #32
 8004512:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004514:	68fb      	ldr	r3, [r7, #12]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	bc80      	pop	{r7}
 800451e:	4770      	bx	lr
 8004520:	08004525 	.word	0x08004525

08004524 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800452a:	2300      	movs	r3, #0
 800452c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800452e:	4b12      	ldr	r3, [pc, #72]	; (8004578 <prvTaskExitError+0x54>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004536:	d00a      	beq.n	800454e <prvTaskExitError+0x2a>
	__asm volatile
 8004538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	60fb      	str	r3, [r7, #12]
}
 800454a:	bf00      	nop
 800454c:	e7fe      	b.n	800454c <prvTaskExitError+0x28>
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	60bb      	str	r3, [r7, #8]
}
 8004560:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004562:	bf00      	nop
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0fc      	beq.n	8004564 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800456a:	bf00      	nop
 800456c:	bf00      	nop
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	2000000c 	.word	0x2000000c
 800457c:	00000000 	.word	0x00000000

08004580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004580:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <pxCurrentTCBConst2>)
 8004582:	6819      	ldr	r1, [r3, #0]
 8004584:	6808      	ldr	r0, [r1, #0]
 8004586:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800458a:	f380 8809 	msr	PSP, r0
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f04f 0000 	mov.w	r0, #0
 8004596:	f380 8811 	msr	BASEPRI, r0
 800459a:	f04e 0e0d 	orr.w	lr, lr, #13
 800459e:	4770      	bx	lr

080045a0 <pxCurrentTCBConst2>:
 80045a0:	200007c0 	.word	0x200007c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop

080045a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80045a8:	4806      	ldr	r0, [pc, #24]	; (80045c4 <prvPortStartFirstTask+0x1c>)
 80045aa:	6800      	ldr	r0, [r0, #0]
 80045ac:	6800      	ldr	r0, [r0, #0]
 80045ae:	f380 8808 	msr	MSP, r0
 80045b2:	b662      	cpsie	i
 80045b4:	b661      	cpsie	f
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	df00      	svc	0
 80045c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80045c2:	bf00      	nop
 80045c4:	e000ed08 	.word	0xe000ed08

080045c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045ce:	4b32      	ldr	r3, [pc, #200]	; (8004698 <xPortStartScheduler+0xd0>)
 80045d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	22ff      	movs	r2, #255	; 0xff
 80045de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045e8:	78fb      	ldrb	r3, [r7, #3]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	4b2a      	ldr	r3, [pc, #168]	; (800469c <xPortStartScheduler+0xd4>)
 80045f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045f6:	4b2a      	ldr	r3, [pc, #168]	; (80046a0 <xPortStartScheduler+0xd8>)
 80045f8:	2207      	movs	r2, #7
 80045fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045fc:	e009      	b.n	8004612 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80045fe:	4b28      	ldr	r3, [pc, #160]	; (80046a0 <xPortStartScheduler+0xd8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3b01      	subs	r3, #1
 8004604:	4a26      	ldr	r2, [pc, #152]	; (80046a0 <xPortStartScheduler+0xd8>)
 8004606:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	b2db      	uxtb	r3, r3
 8004610:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004612:	78fb      	ldrb	r3, [r7, #3]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461a:	2b80      	cmp	r3, #128	; 0x80
 800461c:	d0ef      	beq.n	80045fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800461e:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <xPortStartScheduler+0xd8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f1c3 0307 	rsb	r3, r3, #7
 8004626:	2b04      	cmp	r3, #4
 8004628:	d00a      	beq.n	8004640 <xPortStartScheduler+0x78>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	60bb      	str	r3, [r7, #8]
}
 800463c:	bf00      	nop
 800463e:	e7fe      	b.n	800463e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004640:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <xPortStartScheduler+0xd8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	021b      	lsls	r3, r3, #8
 8004646:	4a16      	ldr	r2, [pc, #88]	; (80046a0 <xPortStartScheduler+0xd8>)
 8004648:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800464a:	4b15      	ldr	r3, [pc, #84]	; (80046a0 <xPortStartScheduler+0xd8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004652:	4a13      	ldr	r2, [pc, #76]	; (80046a0 <xPortStartScheduler+0xd8>)
 8004654:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	b2da      	uxtb	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800465e:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <xPortStartScheduler+0xdc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a10      	ldr	r2, [pc, #64]	; (80046a4 <xPortStartScheduler+0xdc>)
 8004664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004668:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800466a:	4b0e      	ldr	r3, [pc, #56]	; (80046a4 <xPortStartScheduler+0xdc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a0d      	ldr	r2, [pc, #52]	; (80046a4 <xPortStartScheduler+0xdc>)
 8004670:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004674:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004676:	f000 f8b9 	bl	80047ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800467a:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <xPortStartScheduler+0xe0>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004680:	f7ff ff92 	bl	80045a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004684:	f7ff f8c2 	bl	800380c <vTaskSwitchContext>
	prvTaskExitError();
 8004688:	f7ff ff4c 	bl	8004524 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	e000e400 	.word	0xe000e400
 800469c:	20000dec 	.word	0x20000dec
 80046a0:	20000df0 	.word	0x20000df0
 80046a4:	e000ed20 	.word	0xe000ed20
 80046a8:	2000000c 	.word	0x2000000c

080046ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
	__asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	607b      	str	r3, [r7, #4]
}
 80046c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80046c6:	4b0f      	ldr	r3, [pc, #60]	; (8004704 <vPortEnterCritical+0x58>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3301      	adds	r3, #1
 80046cc:	4a0d      	ldr	r2, [pc, #52]	; (8004704 <vPortEnterCritical+0x58>)
 80046ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80046d0:	4b0c      	ldr	r3, [pc, #48]	; (8004704 <vPortEnterCritical+0x58>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d10f      	bne.n	80046f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046d8:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <vPortEnterCritical+0x5c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	603b      	str	r3, [r7, #0]
}
 80046f4:	bf00      	nop
 80046f6:	e7fe      	b.n	80046f6 <vPortEnterCritical+0x4a>
	}
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	2000000c 	.word	0x2000000c
 8004708:	e000ed04 	.word	0xe000ed04

0800470c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004712:	4b11      	ldr	r3, [pc, #68]	; (8004758 <vPortExitCritical+0x4c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10a      	bne.n	8004730 <vPortExitCritical+0x24>
	__asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	607b      	str	r3, [r7, #4]
}
 800472c:	bf00      	nop
 800472e:	e7fe      	b.n	800472e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004730:	4b09      	ldr	r3, [pc, #36]	; (8004758 <vPortExitCritical+0x4c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3b01      	subs	r3, #1
 8004736:	4a08      	ldr	r2, [pc, #32]	; (8004758 <vPortExitCritical+0x4c>)
 8004738:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800473a:	4b07      	ldr	r3, [pc, #28]	; (8004758 <vPortExitCritical+0x4c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d105      	bne.n	800474e <vPortExitCritical+0x42>
 8004742:	2300      	movs	r3, #0
 8004744:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	f383 8811 	msr	BASEPRI, r3
}
 800474c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr
 8004758:	2000000c 	.word	0x2000000c
 800475c:	00000000 	.word	0x00000000

08004760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004760:	f3ef 8009 	mrs	r0, PSP
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	4b0d      	ldr	r3, [pc, #52]	; (80047a0 <pxCurrentTCBConst>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004770:	6010      	str	r0, [r2, #0]
 8004772:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004776:	f04f 0050 	mov.w	r0, #80	; 0x50
 800477a:	f380 8811 	msr	BASEPRI, r0
 800477e:	f7ff f845 	bl	800380c <vTaskSwitchContext>
 8004782:	f04f 0000 	mov.w	r0, #0
 8004786:	f380 8811 	msr	BASEPRI, r0
 800478a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800478e:	6819      	ldr	r1, [r3, #0]
 8004790:	6808      	ldr	r0, [r1, #0]
 8004792:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004796:	f380 8809 	msr	PSP, r0
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	4770      	bx	lr

080047a0 <pxCurrentTCBConst>:
 80047a0:	200007c0 	.word	0x200007c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop

080047a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
	__asm volatile
 80047ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	607b      	str	r3, [r7, #4]
}
 80047c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80047c2:	f7fe ff65 	bl	8003690 <xTaskIncrementTick>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047cc:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <SysTick_Handler+0x40>)
 80047ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	2300      	movs	r3, #0
 80047d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	f383 8811 	msr	BASEPRI, r3
}
 80047de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80047e0:	bf00      	nop
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	e000ed04 	.word	0xe000ed04

080047ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047f0:	4b0a      	ldr	r3, [pc, #40]	; (800481c <vPortSetupTimerInterrupt+0x30>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047f6:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <vPortSetupTimerInterrupt+0x34>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047fc:	4b09      	ldr	r3, [pc, #36]	; (8004824 <vPortSetupTimerInterrupt+0x38>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a09      	ldr	r2, [pc, #36]	; (8004828 <vPortSetupTimerInterrupt+0x3c>)
 8004802:	fba2 2303 	umull	r2, r3, r2, r3
 8004806:	099b      	lsrs	r3, r3, #6
 8004808:	4a08      	ldr	r2, [pc, #32]	; (800482c <vPortSetupTimerInterrupt+0x40>)
 800480a:	3b01      	subs	r3, #1
 800480c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800480e:	4b03      	ldr	r3, [pc, #12]	; (800481c <vPortSetupTimerInterrupt+0x30>)
 8004810:	2207      	movs	r2, #7
 8004812:	601a      	str	r2, [r3, #0]
}
 8004814:	bf00      	nop
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr
 800481c:	e000e010 	.word	0xe000e010
 8004820:	e000e018 	.word	0xe000e018
 8004824:	20000000 	.word	0x20000000
 8004828:	10624dd3 	.word	0x10624dd3
 800482c:	e000e014 	.word	0xe000e014

08004830 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004836:	f3ef 8305 	mrs	r3, IPSR
 800483a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b0f      	cmp	r3, #15
 8004840:	d914      	bls.n	800486c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004842:	4a16      	ldr	r2, [pc, #88]	; (800489c <vPortValidateInterruptPriority+0x6c>)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800484c:	4b14      	ldr	r3, [pc, #80]	; (80048a0 <vPortValidateInterruptPriority+0x70>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	7afa      	ldrb	r2, [r7, #11]
 8004852:	429a      	cmp	r2, r3
 8004854:	d20a      	bcs.n	800486c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	607b      	str	r3, [r7, #4]
}
 8004868:	bf00      	nop
 800486a:	e7fe      	b.n	800486a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800486c:	4b0d      	ldr	r3, [pc, #52]	; (80048a4 <vPortValidateInterruptPriority+0x74>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004874:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <vPortValidateInterruptPriority+0x78>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d90a      	bls.n	8004892 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	603b      	str	r3, [r7, #0]
}
 800488e:	bf00      	nop
 8004890:	e7fe      	b.n	8004890 <vPortValidateInterruptPriority+0x60>
	}
 8004892:	bf00      	nop
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr
 800489c:	e000e3f0 	.word	0xe000e3f0
 80048a0:	20000dec 	.word	0x20000dec
 80048a4:	e000ed0c 	.word	0xe000ed0c
 80048a8:	20000df0 	.word	0x20000df0

080048ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08a      	sub	sp, #40	; 0x28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80048b8:	f7fe fe30 	bl	800351c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80048bc:	4b58      	ldr	r3, [pc, #352]	; (8004a20 <pvPortMalloc+0x174>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80048c4:	f000 f910 	bl	8004ae8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048c8:	4b56      	ldr	r3, [pc, #344]	; (8004a24 <pvPortMalloc+0x178>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4013      	ands	r3, r2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f040 808e 	bne.w	80049f2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d01d      	beq.n	8004918 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80048dc:	2208      	movs	r2, #8
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4413      	add	r3, r2
 80048e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d014      	beq.n	8004918 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f023 0307 	bic.w	r3, r3, #7
 80048f4:	3308      	adds	r3, #8
 80048f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <pvPortMalloc+0x6c>
	__asm volatile
 8004902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	617b      	str	r3, [r7, #20]
}
 8004914:	bf00      	nop
 8004916:	e7fe      	b.n	8004916 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d069      	beq.n	80049f2 <pvPortMalloc+0x146>
 800491e:	4b42      	ldr	r3, [pc, #264]	; (8004a28 <pvPortMalloc+0x17c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	429a      	cmp	r2, r3
 8004926:	d864      	bhi.n	80049f2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004928:	4b40      	ldr	r3, [pc, #256]	; (8004a2c <pvPortMalloc+0x180>)
 800492a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800492c:	4b3f      	ldr	r3, [pc, #252]	; (8004a2c <pvPortMalloc+0x180>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004932:	e004      	b.n	800493e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	429a      	cmp	r2, r3
 8004946:	d903      	bls.n	8004950 <pvPortMalloc+0xa4>
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f1      	bne.n	8004934 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004950:	4b33      	ldr	r3, [pc, #204]	; (8004a20 <pvPortMalloc+0x174>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004956:	429a      	cmp	r2, r3
 8004958:	d04b      	beq.n	80049f2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2208      	movs	r2, #8
 8004960:	4413      	add	r3, r2
 8004962:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	1ad2      	subs	r2, r2, r3
 8004974:	2308      	movs	r3, #8
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	429a      	cmp	r2, r3
 800497a:	d91f      	bls.n	80049bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800497c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4413      	add	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <pvPortMalloc+0xf8>
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	613b      	str	r3, [r7, #16]
}
 80049a0:	bf00      	nop
 80049a2:	e7fe      	b.n	80049a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	1ad2      	subs	r2, r2, r3
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049b6:	69b8      	ldr	r0, [r7, #24]
 80049b8:	f000 f8f8 	bl	8004bac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049bc:	4b1a      	ldr	r3, [pc, #104]	; (8004a28 <pvPortMalloc+0x17c>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	4a18      	ldr	r2, [pc, #96]	; (8004a28 <pvPortMalloc+0x17c>)
 80049c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049ca:	4b17      	ldr	r3, [pc, #92]	; (8004a28 <pvPortMalloc+0x17c>)
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	4b18      	ldr	r3, [pc, #96]	; (8004a30 <pvPortMalloc+0x184>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d203      	bcs.n	80049de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049d6:	4b14      	ldr	r3, [pc, #80]	; (8004a28 <pvPortMalloc+0x17c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a15      	ldr	r2, [pc, #84]	; (8004a30 <pvPortMalloc+0x184>)
 80049dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	4b10      	ldr	r3, [pc, #64]	; (8004a24 <pvPortMalloc+0x178>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80049f2:	f7fe fda1 	bl	8003538 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <pvPortMalloc+0x16a>
	__asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	60fb      	str	r3, [r7, #12]
}
 8004a12:	bf00      	nop
 8004a14:	e7fe      	b.n	8004a14 <pvPortMalloc+0x168>
	return pvReturn;
 8004a16:	69fb      	ldr	r3, [r7, #28]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3728      	adds	r7, #40	; 0x28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	200019fc 	.word	0x200019fc
 8004a24:	20001a08 	.word	0x20001a08
 8004a28:	20001a00 	.word	0x20001a00
 8004a2c:	200019f4 	.word	0x200019f4
 8004a30:	20001a04 	.word	0x20001a04

08004a34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d048      	beq.n	8004ad8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a46:	2308      	movs	r3, #8
 8004a48:	425b      	negs	r3, r3
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	4b21      	ldr	r3, [pc, #132]	; (8004ae0 <vPortFree+0xac>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <vPortFree+0x44>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	60fb      	str	r3, [r7, #12]
}
 8004a74:	bf00      	nop
 8004a76:	e7fe      	b.n	8004a76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <vPortFree+0x62>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	60bb      	str	r3, [r7, #8]
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	4b11      	ldr	r3, [pc, #68]	; (8004ae0 <vPortFree+0xac>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d019      	beq.n	8004ad8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d115      	bne.n	8004ad8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <vPortFree+0xac>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	401a      	ands	r2, r3
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004abc:	f7fe fd2e 	bl	800351c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <vPortFree+0xb0>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4413      	add	r3, r2
 8004aca:	4a06      	ldr	r2, [pc, #24]	; (8004ae4 <vPortFree+0xb0>)
 8004acc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ace:	6938      	ldr	r0, [r7, #16]
 8004ad0:	f000 f86c 	bl	8004bac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ad4:	f7fe fd30 	bl	8003538 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ad8:	bf00      	nop
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20001a08 	.word	0x20001a08
 8004ae4:	20001a00 	.word	0x20001a00

08004ae8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004aee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004af2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004af4:	4b27      	ldr	r3, [pc, #156]	; (8004b94 <prvHeapInit+0xac>)
 8004af6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00c      	beq.n	8004b1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3307      	adds	r3, #7
 8004b06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0307 	bic.w	r3, r3, #7
 8004b0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	4a1f      	ldr	r2, [pc, #124]	; (8004b94 <prvHeapInit+0xac>)
 8004b18:	4413      	add	r3, r2
 8004b1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b20:	4a1d      	ldr	r2, [pc, #116]	; (8004b98 <prvHeapInit+0xb0>)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b26:	4b1c      	ldr	r3, [pc, #112]	; (8004b98 <prvHeapInit+0xb0>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	4413      	add	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b34:	2208      	movs	r2, #8
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0307 	bic.w	r3, r3, #7
 8004b42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4a15      	ldr	r2, [pc, #84]	; (8004b9c <prvHeapInit+0xb4>)
 8004b48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b4a:	4b14      	ldr	r3, [pc, #80]	; (8004b9c <prvHeapInit+0xb4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b52:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <prvHeapInit+0xb4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	1ad2      	subs	r2, r2, r3
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b68:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <prvHeapInit+0xb4>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4a0a      	ldr	r2, [pc, #40]	; (8004ba0 <prvHeapInit+0xb8>)
 8004b76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	4a09      	ldr	r2, [pc, #36]	; (8004ba4 <prvHeapInit+0xbc>)
 8004b7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b80:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <prvHeapInit+0xc0>)
 8004b82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b86:	601a      	str	r2, [r3, #0]
}
 8004b88:	bf00      	nop
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc80      	pop	{r7}
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	20000df4 	.word	0x20000df4
 8004b98:	200019f4 	.word	0x200019f4
 8004b9c:	200019fc 	.word	0x200019fc
 8004ba0:	20001a04 	.word	0x20001a04
 8004ba4:	20001a00 	.word	0x20001a00
 8004ba8:	20001a08 	.word	0x20001a08

08004bac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004bb4:	4b27      	ldr	r3, [pc, #156]	; (8004c54 <prvInsertBlockIntoFreeList+0xa8>)
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	e002      	b.n	8004bc0 <prvInsertBlockIntoFreeList+0x14>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d8f7      	bhi.n	8004bba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d108      	bne.n	8004bee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	441a      	add	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	441a      	add	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d118      	bne.n	8004c34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	4b14      	ldr	r3, [pc, #80]	; (8004c58 <prvInsertBlockIntoFreeList+0xac>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d00d      	beq.n	8004c2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	441a      	add	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	e008      	b.n	8004c3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c2a:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <prvInsertBlockIntoFreeList+0xac>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	e003      	b.n	8004c3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d002      	beq.n	8004c4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c4a:	bf00      	nop
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr
 8004c54:	200019f4 	.word	0x200019f4
 8004c58:	200019fc 	.word	0x200019fc

08004c5c <__libc_init_array>:
 8004c5c:	b570      	push	{r4, r5, r6, lr}
 8004c5e:	2600      	movs	r6, #0
 8004c60:	4d0c      	ldr	r5, [pc, #48]	; (8004c94 <__libc_init_array+0x38>)
 8004c62:	4c0d      	ldr	r4, [pc, #52]	; (8004c98 <__libc_init_array+0x3c>)
 8004c64:	1b64      	subs	r4, r4, r5
 8004c66:	10a4      	asrs	r4, r4, #2
 8004c68:	42a6      	cmp	r6, r4
 8004c6a:	d109      	bne.n	8004c80 <__libc_init_array+0x24>
 8004c6c:	f000 f830 	bl	8004cd0 <_init>
 8004c70:	2600      	movs	r6, #0
 8004c72:	4d0a      	ldr	r5, [pc, #40]	; (8004c9c <__libc_init_array+0x40>)
 8004c74:	4c0a      	ldr	r4, [pc, #40]	; (8004ca0 <__libc_init_array+0x44>)
 8004c76:	1b64      	subs	r4, r4, r5
 8004c78:	10a4      	asrs	r4, r4, #2
 8004c7a:	42a6      	cmp	r6, r4
 8004c7c:	d105      	bne.n	8004c8a <__libc_init_array+0x2e>
 8004c7e:	bd70      	pop	{r4, r5, r6, pc}
 8004c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c84:	4798      	blx	r3
 8004c86:	3601      	adds	r6, #1
 8004c88:	e7ee      	b.n	8004c68 <__libc_init_array+0xc>
 8004c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c8e:	4798      	blx	r3
 8004c90:	3601      	adds	r6, #1
 8004c92:	e7f2      	b.n	8004c7a <__libc_init_array+0x1e>
 8004c94:	08004d58 	.word	0x08004d58
 8004c98:	08004d58 	.word	0x08004d58
 8004c9c:	08004d58 	.word	0x08004d58
 8004ca0:	08004d5c 	.word	0x08004d5c

08004ca4 <memcpy>:
 8004ca4:	440a      	add	r2, r1
 8004ca6:	4291      	cmp	r1, r2
 8004ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cac:	d100      	bne.n	8004cb0 <memcpy+0xc>
 8004cae:	4770      	bx	lr
 8004cb0:	b510      	push	{r4, lr}
 8004cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cb6:	4291      	cmp	r1, r2
 8004cb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cbc:	d1f9      	bne.n	8004cb2 <memcpy+0xe>
 8004cbe:	bd10      	pop	{r4, pc}

08004cc0 <memset>:
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	4402      	add	r2, r0
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d100      	bne.n	8004cca <memset+0xa>
 8004cc8:	4770      	bx	lr
 8004cca:	f803 1b01 	strb.w	r1, [r3], #1
 8004cce:	e7f9      	b.n	8004cc4 <memset+0x4>

08004cd0 <_init>:
 8004cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd2:	bf00      	nop
 8004cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cd6:	bc08      	pop	{r3}
 8004cd8:	469e      	mov	lr, r3
 8004cda:	4770      	bx	lr

08004cdc <_fini>:
 8004cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cde:	bf00      	nop
 8004ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ce2:	bc08      	pop	{r3}
 8004ce4:	469e      	mov	lr, r3
 8004ce6:	4770      	bx	lr
